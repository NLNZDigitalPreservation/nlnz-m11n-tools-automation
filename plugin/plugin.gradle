import nz.govt.nzqa.eqa.tools.build.ArtifactUploadParameters
import nz.govt.nzqa.eqa.tools.build.EqaBuildTool
import nz.govt.nzqa.eqa.tools.build.version.BuildDependency
import nz.govt.nzqa.eqa.tools.build.version.BuildVersion
import nz.govt.nzqa.eqa.tools.build.version.DependencyVersionFactory

plugins {
    // required for jacoco test coverage checks
    id 'com.github.kt3k.coveralls' version '2.6.3'
}

// we put these variables first so that the nz.govt.nzqa.eqa.tools.build.plugin can use them
project.ext {
    // There really should be no failures on PMD
    ignorePmdFailures = true

    // TODO There really should be no failures on FindBugs
    ignoreFindBugsFailures = true

    // TODO Generally the goal here is to have code coverage in the 80--90% range
    // but it may be better to approach this with a more directed focus
    // (i.e. increase code coverage when new functionality is added)
    // TODO Write unit tests!
    codeCoverageLimits = [
            'instruction': 0.0, // currently at 0.0%
            'branch'     : 0.0, // currently at 0.0%
            'line'       : 0.0, // currently at 0.0%
            'complexity' : 0.0, // currently at 0.0%
            'method'     : 0.0, // currently at 0.0%
            'class'      : 0.0  // currently at 0.0%
    ]

    artifactUploadParameters = ArtifactUploadParameters.fromArtifactTaskNames([])

    artifactUploadParameters.add(new ArtifactUploadParameters(artifactTaskName: 'jar', sourceTaskName: 'jarSources'))
}

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'jacoco'

// run the findBugs checks with 'gradle check' or 'gradle findBugsMain' or 'gradle findBugsTest'
apply plugin: 'findbugs'

// run the pmd source code analyzer with 'gradle check' or 'gradle pmdMain' or 'gradle pmdTest'
apply plugin: 'pmd' // source code analyzer

// the EqaBuildPlugin
apply plugin: 'nz.govt.nzqa.eqa.tools.build.plugin'

setVersion(new BuildVersion(project, project.ext.versionMask, false))

EqaBuildTool eqaBuildTool = project.eqaBuildPluginExtension.eqaBuildTool

DependencyVersionFactory versionFactory = new DependencyVersionFactory(project, false)

dependencies { dependencyHandler ->
    // We set dependencies as compileOnly so that dependency changes will trigger a new build
    // but projects/subprojects that include this subproject will not include these dependencies
    // in their transitive dependency chain

    BuildDependency coreDependency = new BuildDependency(project: project,
            projectName: 'm11n-tools-automation-core', dependencyHandler: dependencyHandler)
    compile coreDependency.asDependency()
}

jar {
    includeEmptyDirs = false

    setManifest(eqaBuildTool.generateManifest(project.description, project.description + ' Plugin Jar'))
}

task jarSources(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    includeEmptyDirs = false

    from sourceSets.main.allSource

    setManifest(eqaBuildTool.generateManifest(project.description, project.description + ' Plugin Sources Jar'))
}

artifacts {
    publishableArtifacts jar, jarSources
}

artifactOnlyBuild.dependsOn jar, jarSources
build.dependsOn artifactOnlyBuild
