USE eqa_prod
go
CREATE TABLE dbo.ACADEMIC_YEAR
(
    academic_year            char(4)    NOT NULL,
    academic_year_desc       descr      NOT NULL,
    academic_year_start      datetime   NOT NULL,
    academic_year_end        datetime   NOT NULL,
    academic_year_type       varchar(4) NOT NULL,
    academic_year_sort_order sortkey    NOT NULL,
    CONSTRAINT PK_ACADEMIC_YEAR
    PRIMARY KEY CLUSTERED (academic_year)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ACADEMIC_YEAR') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ACADEMIC_YEAR >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ACADEMIC_YEAR >>>'
go
GRANT REFERENCES ON dbo.ACADEMIC_YEAR TO eqa_user
go
GRANT SELECT ON dbo.ACADEMIC_YEAR TO eqa_user
go
GRANT SELECT ON dbo.ACADEMIC_YEAR TO read_only
go
GRANT SELECT ON dbo.ACADEMIC_YEAR TO rma_users
go
GRANT INSERT ON dbo.ACADEMIC_YEAR TO eqa_user
go
GRANT DELETE ON dbo.ACADEMIC_YEAR TO eqa_user
go
GRANT UPDATE ON dbo.ACADEMIC_YEAR TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ACADEMIC_YEAR TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ACADEMIC_YEAR TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ACADEMIC_YEAR TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ACADEMIC_YEAR TO eqa_user
go
CREATE TABLE dbo.ACADEMIC_YEAR_TYPE
(
    academic_year_type      varchar(4) NOT NULL,
    academic_year_type_desc descr      NOT NULL,
    CONSTRAINT PK_ACADEMIC_YEAR_TYPE
    PRIMARY KEY CLUSTERED (academic_year_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ACADEMIC_YEAR_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ACADEMIC_YEAR_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ACADEMIC_YEAR_TYPE >>>'
go
ALTER TABLE dbo.ACADEMIC_YEAR
    ADD CONSTRAINT FK_ACA_YEAR_ACA_YEAR_TYPE
    FOREIGN KEY (academic_year_type)
    REFERENCES dbo.ACADEMIC_YEAR_TYPE (academic_year_type)
go
GRANT REFERENCES ON dbo.ACADEMIC_YEAR_TYPE TO eqa_user
go
GRANT SELECT ON dbo.ACADEMIC_YEAR_TYPE TO eqa_user
go
GRANT SELECT ON dbo.ACADEMIC_YEAR_TYPE TO read_only
go
GRANT SELECT ON dbo.ACADEMIC_YEAR_TYPE TO rma_users
go
GRANT INSERT ON dbo.ACADEMIC_YEAR_TYPE TO eqa_user
go
GRANT DELETE ON dbo.ACADEMIC_YEAR_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.ACADEMIC_YEAR_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ACADEMIC_YEAR_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ACADEMIC_YEAR_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ACADEMIC_YEAR_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ACADEMIC_YEAR_TYPE TO eqa_user
go
CREATE TABLE dbo.ACCREDITATION
(
    provider_id   OBJECT_ID  NOT NULL,
    location      number_2   NOT NULL,
    std_number    varchar(8) NOT NULL,
    audit_tran_id OBJECT_ID  NULL,
    ts            timestamp  NOT NULL,
    CONSTRAINT PK_ACCREDITATION
    PRIMARY KEY NONCLUSTERED (std_number,provider_id,location)
)
LOCK DATAPAGES
go
IF OBJECT_ID('dbo.ACCREDITATION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ACCREDITATION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ACCREDITATION >>>'
go
ALTER TABLE dbo.ACCREDITATION
    ADD CONSTRAINT FK_ACCREDITION_STD
    FOREIGN KEY (std_number)
    REFERENCES dbo.STD (std_number)
go
ALTER TABLE dbo.ACCREDITATION
    ADD CONSTRAINT FK_ACCREDITATION_PROVIDER
    FOREIGN KEY (provider_id,location)
    REFERENCES dbo.PROVIDER (moe_provider_id,location)
go
GRANT REFERENCES ON dbo.ACCREDITATION TO eqa_user
go
GRANT SELECT ON dbo.ACCREDITATION TO eqa_user
go
GRANT SELECT ON dbo.ACCREDITATION TO read_only
go
GRANT SELECT ON dbo.ACCREDITATION TO rma_users
go
GRANT INSERT ON dbo.ACCREDITATION TO eqa_user
go
GRANT DELETE ON dbo.ACCREDITATION TO eqa_user
go
GRANT UPDATE ON dbo.ACCREDITATION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ACCREDITATION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ACCREDITATION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ACCREDITATION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ACCREDITATION TO eqa_user
go
CREATE TABLE dbo.ACCREDITATION_EXTENSION_RUN
(
    accreditation_extension_run_id OBJECT_ID NOT NULL,
    config_file_name               descr     NOT NULL,
    run_date                       dt        NOT NULL,
    update_run_ind                 ny_ind    NOT NULL,
    report_file_name               descr     NOT NULL,
    log_file_name                  descr     NOT NULL,
    audit_tran_id                  OBJECT_ID NOT NULL,
    ts                             timestamp NOT NULL,
    CONSTRAINT PK_ACCREDITATION_EXTENSION_RUN
    PRIMARY KEY CLUSTERED (accreditation_extension_run_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ACCREDITATION_EXTENSION_RUN') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ACCREDITATION_EXTENSION_RUN >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ACCREDITATION_EXTENSION_RUN >>>'
go
GRANT REFERENCES ON dbo.ACCREDITATION_EXTENSION_RUN TO eqa_user
go
GRANT SELECT ON dbo.ACCREDITATION_EXTENSION_RUN TO eqa_user
go
GRANT SELECT ON dbo.ACCREDITATION_EXTENSION_RUN TO read_only
go
GRANT SELECT ON dbo.ACCREDITATION_EXTENSION_RUN TO rma_users
go
GRANT INSERT ON dbo.ACCREDITATION_EXTENSION_RUN TO eqa_user
go
GRANT DELETE ON dbo.ACCREDITATION_EXTENSION_RUN TO eqa_user
go
GRANT UPDATE ON dbo.ACCREDITATION_EXTENSION_RUN TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ACCREDITATION_EXTENSION_RUN TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ACCREDITATION_EXTENSION_RUN TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ACCREDITATION_EXTENSION_RUN TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ACCREDITATION_EXTENSION_RUN TO eqa_user
go
CREATE TABLE dbo.ACCREDITATION_OPTION_CODE
(
    accreditation_option_code code_2      NOT NULL,
    option_type_desc          descr       NULL,
    priority                  number_2    NULL,
    option_type_maori_desc    descr       NULL,
    accreditation_option_name descr_short NULL,
    sortkey                   sortkey     NOT NULL,
    active_ind                yn_ind      NOT NULL,
    CONSTRAINT PK_ACCREDITATION_OPTION_CODE
    PRIMARY KEY CLUSTERED (accreditation_option_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ACCREDITATION_OPTION_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ACCREDITATION_OPTION_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ACCREDITATION_OPTION_CODE >>>'
go
GRANT REFERENCES ON dbo.ACCREDITATION_OPTION_CODE TO eqa_user
go
GRANT SELECT ON dbo.ACCREDITATION_OPTION_CODE TO eqa_user
go
GRANT SELECT ON dbo.ACCREDITATION_OPTION_CODE TO read_only
go
GRANT SELECT ON dbo.ACCREDITATION_OPTION_CODE TO rma_users
go
GRANT INSERT ON dbo.ACCREDITATION_OPTION_CODE TO eqa_user
go
GRANT DELETE ON dbo.ACCREDITATION_OPTION_CODE TO eqa_user
go
GRANT UPDATE ON dbo.ACCREDITATION_OPTION_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ACCREDITATION_OPTION_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ACCREDITATION_OPTION_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ACCREDITATION_OPTION_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ACCREDITATION_OPTION_CODE TO eqa_user
go
CREATE TABLE dbo.ACCREDITED_ITEM
(
    accredited_item_id            OBJECT_ID     NOT NULL,
    provider_id                   OBJECT_ID     NOT NULL,
    accredited_item_status        code_2        NOT NULL,
    accredited_item_status_date   dt            NOT NULL,
    accredited_item_type          code_2        NOT NULL,
    std_id                        OBJECT_ID     NULL,
    cfn_catg_id                   OBJECT_ID     NULL,
    level_code                    code_2        NULL,
    course_version_id             OBJECT_ID     NULL,
    delivery_mode_type            code_2        NULL,
    delivery_method               varchar(2048) NULL,
    assessment_method             TEXT_STRING   NULL,
    course_monitoring_status      code_2        NULL,
    course_monitoring_status_date dt            NULL,
    course_monitoring_cycle_code  code_2        NULL,
    active_ind                    yn_ind        NOT NULL,
    audit_tran_id                 OBJECT_ID     NOT NULL,
    ts                            timestamp     NOT NULL,
    created_perorg_case_id        OBJECT_ID     NULL,
    last_updated_perorg_case_id   OBJECT_ID     NULL,
    avg_self_study_hours_per_week numeric(5,2)  NULL,
    avg_teaching_hours_per_week   numeric(5,2)  NULL,
    delivery_weeks                int           NULL,
    monitor_perorg_role_id        OBJECT_ID     NULL,
    delivery_site_id              OBJECT_ID     NULL,
    proposed_start_date           dt            NULL,
    teaching_weeks                int           NULL,
    total_hours_per_week          numeric(5,2)  NULL,
    international_learners_ind    ny_ind        NOT NULL,
    tec_funding_ind               ny_ind        NOT NULL,
    delivery_status_ind           yn_ind        NULL,
    delivery_status_date          dt            NULL,
    qa_aprv_rating_code           code_2        NULL,
    mmeqa_mark_ind                ny_ind        NULL,
    CONSTRAINT PK_ACCREDITED_ITEM
    PRIMARY KEY CLUSTERED (accredited_item_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ACCREDITED_ITEM') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ACCREDITED_ITEM >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ACCREDITED_ITEM >>>'
go
ALTER TABLE dbo.ACCREDITED_ITEM
    ADD CONSTRAINT FK_ACCRED_ITEM_CREATE_CASE
    FOREIGN KEY (created_perorg_case_id)
    REFERENCES dbo.PERORG_CASE (perorg_case_id)
go
ALTER TABLE dbo.ACCREDITED_ITEM
    ADD CONSTRAINT FK_ACCRED_ITEM_UPDATE_CASE
    FOREIGN KEY (last_updated_perorg_case_id)
    REFERENCES dbo.PERORG_CASE (perorg_case_id)
go
ALTER TABLE dbo.ACCREDITED_ITEM
    ADD CONSTRAINT FK_ACRD_ITEM_DELIVERY_PROVIDER
    FOREIGN KEY (delivery_site_id)
    REFERENCES dbo.PROVIDER (provider_id)
go
ALTER TABLE dbo.ACCREDITED_ITEM
    ADD CONSTRAINT FK_ACRD_ITEM_LVL
    FOREIGN KEY (level_code)
    REFERENCES dbo.LVL (level_code)
go
ALTER TABLE dbo.ACCREDITED_ITEM
    ADD CONSTRAINT FK_ACRD_ITEM_PERORG_ROLE
    FOREIGN KEY (monitor_perorg_role_id)
    REFERENCES dbo.PERORG_ROLE (perorg_role_id)
go
ALTER TABLE dbo.ACCREDITED_ITEM
    ADD CONSTRAINT FK_ACRD_ITEM_STD
    FOREIGN KEY (std_id)
    REFERENCES dbo.STD (std_id)
go
ALTER TABLE dbo.ACCREDITED_ITEM
    ADD CONSTRAINT FK_ACRD_ITEM_PROVIDER_HO
    FOREIGN KEY (provider_id)
    REFERENCES dbo.PROVIDER_HEAD_OFFICE (provider_id)
go
ALTER TABLE dbo.ACCREDITED_ITEM
    ADD CONSTRAINT FK_ACRD_ITEM_QA_APRV_RTNG_CODE
    FOREIGN KEY (qa_aprv_rating_code)
    REFERENCES dbo.QA_APRV_RATING_CODE (qa_aprv_rating_code)
go
GRANT REFERENCES ON dbo.ACCREDITED_ITEM TO eqa_user
go
GRANT SELECT ON dbo.ACCREDITED_ITEM TO eqa_user
go
GRANT SELECT ON dbo.ACCREDITED_ITEM TO read_only
go
GRANT SELECT ON dbo.ACCREDITED_ITEM TO rma_users
go
GRANT INSERT ON dbo.ACCREDITED_ITEM TO eqa_user
go
GRANT DELETE ON dbo.ACCREDITED_ITEM TO eqa_user
go
GRANT UPDATE ON dbo.ACCREDITED_ITEM TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ACCREDITED_ITEM TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ACCREDITED_ITEM TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ACCREDITED_ITEM TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ACCREDITED_ITEM TO eqa_user
go
CREATE TABLE dbo.ACCREDITED_ITEM_STATUS
(
    accredited_item_status      code_2  NOT NULL,
    accredited_item_status_desc descr   NOT NULL,
    active_ind                  yn_ind  NOT NULL,
    sortkey                     sortkey NULL,
    CONSTRAINT PK_ACCREDITED_ITEM_STATUS
    PRIMARY KEY CLUSTERED (accredited_item_status)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ACCREDITED_ITEM_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ACCREDITED_ITEM_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ACCREDITED_ITEM_STATUS >>>'
go
ALTER TABLE dbo.ACCREDITED_ITEM
    ADD CONSTRAINT FK_ACRD_ITEM_ACRD_ITEM_STATUS
    FOREIGN KEY (accredited_item_status)
    REFERENCES dbo.ACCREDITED_ITEM_STATUS (accredited_item_status)
go
GRANT REFERENCES ON dbo.ACCREDITED_ITEM_STATUS TO eqa_user
go
GRANT SELECT ON dbo.ACCREDITED_ITEM_STATUS TO eqa_user
go
GRANT SELECT ON dbo.ACCREDITED_ITEM_STATUS TO read_only
go
GRANT SELECT ON dbo.ACCREDITED_ITEM_STATUS TO rma_users
go
GRANT INSERT ON dbo.ACCREDITED_ITEM_STATUS TO eqa_user
go
GRANT DELETE ON dbo.ACCREDITED_ITEM_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.ACCREDITED_ITEM_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ACCREDITED_ITEM_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ACCREDITED_ITEM_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ACCREDITED_ITEM_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ACCREDITED_ITEM_STATUS TO eqa_user
go
CREATE TABLE dbo.ACCREDITED_ITEM_STATUS_HIST
(
    accredited_item_status_hist_id OBJECT_ID NOT NULL,
    accredited_item_id             OBJECT_ID NOT NULL,
    accredited_item_status         code_2    NOT NULL,
    accredited_item_status_date    dt        NOT NULL,
    active_ind                     yn_ind    NOT NULL,
    audit_tran_id                  OBJECT_ID NOT NULL,
    ts                             timestamp NOT NULL,
    CONSTRAINT PK_ACCREDITED_ITEM_STATUS_HIST
    PRIMARY KEY CLUSTERED (accredited_item_status_hist_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ACCREDITED_ITEM_STATUS_HIST') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ACCREDITED_ITEM_STATUS_HIST >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ACCREDITED_ITEM_STATUS_HIST >>>'
go
ALTER TABLE dbo.ACCREDITED_ITEM_STATUS_HIST
    ADD CONSTRAINT FK_ACCREDIT_ACCREDITE_ACCREDIT
    FOREIGN KEY (accredited_item_id)
    REFERENCES dbo.ACCREDITED_ITEM (accredited_item_id)
go
ALTER TABLE dbo.ACCREDITED_ITEM_STATUS_HIST
    ADD CONSTRAINT FK_ACCRED_ITEM_STATUS_HIST
    FOREIGN KEY (accredited_item_status)
    REFERENCES dbo.ACCREDITED_ITEM_STATUS (accredited_item_status)
go
GRANT REFERENCES ON dbo.ACCREDITED_ITEM_STATUS_HIST TO eqa_user
go
GRANT SELECT ON dbo.ACCREDITED_ITEM_STATUS_HIST TO eqa_user
go
GRANT SELECT ON dbo.ACCREDITED_ITEM_STATUS_HIST TO read_only
go
GRANT SELECT ON dbo.ACCREDITED_ITEM_STATUS_HIST TO rma_users
go
GRANT INSERT ON dbo.ACCREDITED_ITEM_STATUS_HIST TO eqa_user
go
GRANT DELETE ON dbo.ACCREDITED_ITEM_STATUS_HIST TO eqa_user
go
GRANT UPDATE ON dbo.ACCREDITED_ITEM_STATUS_HIST TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ACCREDITED_ITEM_STATUS_HIST TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ACCREDITED_ITEM_STATUS_HIST TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ACCREDITED_ITEM_STATUS_HIST TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ACCREDITED_ITEM_STATUS_HIST TO eqa_user
go
CREATE TABLE dbo.ACCREDITED_ITEM_TYPE
(
    accredited_item_type      code_2  NOT NULL,
    accredited_item_type_desc descr   NOT NULL,
    active_ind                yn_ind  NOT NULL,
    sortkey                   sortkey NULL,
    CONSTRAINT PK_ACCREDITED_ITEM_TYPE
    PRIMARY KEY CLUSTERED (accredited_item_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ACCREDITED_ITEM_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ACCREDITED_ITEM_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ACCREDITED_ITEM_TYPE >>>'
go
ALTER TABLE dbo.ACCREDITED_ITEM
    ADD CONSTRAINT FK_ACRD_ITEM_ACRD_ITEM_TYPE
    FOREIGN KEY (accredited_item_type)
    REFERENCES dbo.ACCREDITED_ITEM_TYPE (accredited_item_type)
go
GRANT REFERENCES ON dbo.ACCREDITED_ITEM_TYPE TO eqa_user
go
GRANT SELECT ON dbo.ACCREDITED_ITEM_TYPE TO eqa_user
go
GRANT SELECT ON dbo.ACCREDITED_ITEM_TYPE TO read_only
go
GRANT SELECT ON dbo.ACCREDITED_ITEM_TYPE TO rma_users
go
GRANT INSERT ON dbo.ACCREDITED_ITEM_TYPE TO eqa_user
go
GRANT DELETE ON dbo.ACCREDITED_ITEM_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.ACCREDITED_ITEM_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ACCREDITED_ITEM_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ACCREDITED_ITEM_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ACCREDITED_ITEM_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ACCREDITED_ITEM_TYPE TO eqa_user
go
CREATE TABLE dbo.ACHIEVED_STATUS_CODE
(
    achieved_status_code      code_2      NOT NULL,
    achieved_status_code_desc descr_short NOT NULL,
    active_ind                yn_ind      NOT NULL,
    CONSTRAINT PK_ACHIEVED_STATUS_CODE
    PRIMARY KEY CLUSTERED (achieved_status_code)
)
LOCK ALLPAGES
go
IF OBJECT_ID('dbo.ACHIEVED_STATUS_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ACHIEVED_STATUS_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ACHIEVED_STATUS_CODE >>>'
go
GRANT REFERENCES ON dbo.ACHIEVED_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.ACHIEVED_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.ACHIEVED_STATUS_CODE TO read_only
go
GRANT SELECT ON dbo.ACHIEVED_STATUS_CODE TO rma_users
go
GRANT INSERT ON dbo.ACHIEVED_STATUS_CODE TO eqa_user
go
GRANT DELETE ON dbo.ACHIEVED_STATUS_CODE TO eqa_user
go
GRANT UPDATE ON dbo.ACHIEVED_STATUS_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ACHIEVED_STATUS_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ACHIEVED_STATUS_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ACHIEVED_STATUS_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ACHIEVED_STATUS_CODE TO eqa_user
go
CREATE TABLE dbo.ACRD_INHERITANCE_MAP
(
    acrd_inheritance_map_id        OBJECT_ID NOT NULL,
    inheriting_moe_provider_id     OBJECT_ID NOT NULL,
    inheriting_location            number_2  NOT NULL,
    inherited_from_moe_provider_id OBJECT_ID NOT NULL,
    inherited_from_location        number_2  NOT NULL,
    audit_tran_id                  OBJECT_ID NOT NULL,
    CONSTRAINT PK_ACRD_INHERITANCE_MAP
    PRIMARY KEY CLUSTERED (acrd_inheritance_map_id),
    CONSTRAINT AK_INHERITED_FROM_PROVIDER
    UNIQUE NONCLUSTERED (inherited_from_moe_provider_id,inherited_from_location),
    CONSTRAINT AK_INHERITING_PROVIDER
    UNIQUE NONCLUSTERED (inheriting_moe_provider_id,inheriting_location)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.ACRD_INHERITANCE_MAP') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ACRD_INHERITANCE_MAP >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ACRD_INHERITANCE_MAP >>>'
go
ALTER TABLE dbo.ACRD_INHERITANCE_MAP
    ADD CONSTRAINT FK_ACRD_INHERIT_MAP_PROVIDER_1
    FOREIGN KEY (inheriting_moe_provider_id,inheriting_location)
    REFERENCES dbo.PROVIDER (moe_provider_id,location)
go
ALTER TABLE dbo.ACRD_INHERITANCE_MAP
    ADD CONSTRAINT FK_ACRD_INHERIT_MAP_PROVIDER_2
    FOREIGN KEY (inherited_from_moe_provider_id,inherited_from_location)
    REFERENCES dbo.PROVIDER (moe_provider_id,location)
go
GRANT REFERENCES ON dbo.ACRD_INHERITANCE_MAP TO eqa_user
go
GRANT SELECT ON dbo.ACRD_INHERITANCE_MAP TO eqa_user
go
GRANT SELECT ON dbo.ACRD_INHERITANCE_MAP TO read_only
go
GRANT SELECT ON dbo.ACRD_INHERITANCE_MAP TO rma_users
go
GRANT INSERT ON dbo.ACRD_INHERITANCE_MAP TO eqa_user
go
GRANT DELETE ON dbo.ACRD_INHERITANCE_MAP TO eqa_user
go
GRANT UPDATE ON dbo.ACRD_INHERITANCE_MAP TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ACRD_INHERITANCE_MAP TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ACRD_INHERITANCE_MAP TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ACRD_INHERITANCE_MAP TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ACRD_INHERITANCE_MAP TO eqa_user
go
CREATE TABLE dbo.ADDL_VOLUME_TYPE
(
    addl_volume_type_code code_4  NOT NULL,
    addl_volume_type_desc descr   NOT NULL,
    active_ind            yn_ind  NOT NULL,
    sortkey               sortkey NOT NULL,
    CONSTRAINT PK_ADDL_VOLUME_TYPE
    PRIMARY KEY NONCLUSTERED (addl_volume_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ADDL_VOLUME_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ADDL_VOLUME_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ADDL_VOLUME_TYPE >>>'
go
GRANT REFERENCES ON dbo.ADDL_VOLUME_TYPE TO eqa_user
go
GRANT SELECT ON dbo.ADDL_VOLUME_TYPE TO eqa_user
go
GRANT SELECT ON dbo.ADDL_VOLUME_TYPE TO read_only
go
GRANT SELECT ON dbo.ADDL_VOLUME_TYPE TO rma_users
go
GRANT INSERT ON dbo.ADDL_VOLUME_TYPE TO eqa_user
go
GRANT DELETE ON dbo.ADDL_VOLUME_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.ADDL_VOLUME_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ADDL_VOLUME_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ADDL_VOLUME_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ADDL_VOLUME_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ADDL_VOLUME_TYPE TO eqa_user
go
CREATE TABLE dbo.ADDRESS_EXCLUSION_WORD
(
    exclusion_word varchar(255) NOT NULL,
    CONSTRAINT PK_ADDRESS_EXCLUSION_WORD
    PRIMARY KEY CLUSTERED (exclusion_word)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ADDRESS_EXCLUSION_WORD') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ADDRESS_EXCLUSION_WORD >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ADDRESS_EXCLUSION_WORD >>>'
go
GRANT REFERENCES ON dbo.ADDRESS_EXCLUSION_WORD TO eqa_user
go
GRANT SELECT ON dbo.ADDRESS_EXCLUSION_WORD TO eqa_user
go
GRANT SELECT ON dbo.ADDRESS_EXCLUSION_WORD TO read_only
go
GRANT SELECT ON dbo.ADDRESS_EXCLUSION_WORD TO rma_users
go
GRANT INSERT ON dbo.ADDRESS_EXCLUSION_WORD TO eqa_user
go
GRANT DELETE ON dbo.ADDRESS_EXCLUSION_WORD TO eqa_user
go
GRANT UPDATE ON dbo.ADDRESS_EXCLUSION_WORD TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ADDRESS_EXCLUSION_WORD TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ADDRESS_EXCLUSION_WORD TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ADDRESS_EXCLUSION_WORD TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ADDRESS_EXCLUSION_WORD TO eqa_user
go
CREATE TABLE dbo.ALLOCATION_GROUP
(
    allocation_group_id   OBJECT_ID NOT NULL,
    allocation_group_name name      NOT NULL,
    allocation_method     code_2    NOT NULL,
    audit_tran_id         OBJECT_ID NOT NULL,
    ts                    timestamp NULL,
    bag_size              int       NULL,
    max_bags_per_marker   int       NULL,
    CONSTRAINT PK_ALLOCATION_GROUP
    PRIMARY KEY CLUSTERED (allocation_group_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ALLOCATION_GROUP') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ALLOCATION_GROUP >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ALLOCATION_GROUP >>>'
go
GRANT REFERENCES ON dbo.ALLOCATION_GROUP TO eqa_user
go
GRANT SELECT ON dbo.ALLOCATION_GROUP TO eqa_user
go
GRANT SELECT ON dbo.ALLOCATION_GROUP TO read_only
go
GRANT SELECT ON dbo.ALLOCATION_GROUP TO rma_users
go
GRANT INSERT ON dbo.ALLOCATION_GROUP TO eqa_user
go
GRANT DELETE ON dbo.ALLOCATION_GROUP TO eqa_user
go
GRANT UPDATE ON dbo.ALLOCATION_GROUP TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ALLOCATION_GROUP TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ALLOCATION_GROUP TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ALLOCATION_GROUP TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ALLOCATION_GROUP TO eqa_user
go
CREATE TABLE dbo.ALLOCATION_GROUP_EXCLUDED
(
    academic_year       char(4)   NOT NULL,
    address_type        code_2    NOT NULL,
    allocation_group_id OBJECT_ID NOT NULL,
    active_ind          yn_ind    NOT NULL,
    CONSTRAINT PK_ALLOCATION_GROUP_EXCLUDED
    PRIMARY KEY CLUSTERED (academic_year,address_type,allocation_group_id)
)
LOCK ALLPAGES
go
IF OBJECT_ID('dbo.ALLOCATION_GROUP_EXCLUDED') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ALLOCATION_GROUP_EXCLUDED >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ALLOCATION_GROUP_EXCLUDED >>>'
go
GRANT REFERENCES ON dbo.ALLOCATION_GROUP_EXCLUDED TO eqa_user
go
GRANT SELECT ON dbo.ALLOCATION_GROUP_EXCLUDED TO eqa_user
go
GRANT SELECT ON dbo.ALLOCATION_GROUP_EXCLUDED TO read_only
go
GRANT SELECT ON dbo.ALLOCATION_GROUP_EXCLUDED TO rma_users
go
GRANT INSERT ON dbo.ALLOCATION_GROUP_EXCLUDED TO eqa_user
go
GRANT DELETE ON dbo.ALLOCATION_GROUP_EXCLUDED TO eqa_user
go
GRANT UPDATE ON dbo.ALLOCATION_GROUP_EXCLUDED TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ALLOCATION_GROUP_EXCLUDED TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ALLOCATION_GROUP_EXCLUDED TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ALLOCATION_GROUP_EXCLUDED TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ALLOCATION_GROUP_EXCLUDED TO eqa_user
go
CREATE TABLE dbo.ALLOCATION_METHOD
(
    allocation_method      code_2 NOT NULL,
    allocation_method_desc descr  NOT NULL,
    CONSTRAINT PK_ALLOCATION_METHOD
    PRIMARY KEY CLUSTERED (allocation_method)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ALLOCATION_METHOD') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ALLOCATION_METHOD >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ALLOCATION_METHOD >>>'
go
ALTER TABLE dbo.ALLOCATION_GROUP
    ADD CONSTRAINT FK_ALLOCATION_GROUP_METHOD
    FOREIGN KEY (allocation_method)
    REFERENCES dbo.ALLOCATION_METHOD (allocation_method)
go
GRANT REFERENCES ON dbo.ALLOCATION_METHOD TO eqa_user
go
GRANT SELECT ON dbo.ALLOCATION_METHOD TO eqa_user
go
GRANT SELECT ON dbo.ALLOCATION_METHOD TO read_only
go
GRANT SELECT ON dbo.ALLOCATION_METHOD TO rma_users
go
GRANT INSERT ON dbo.ALLOCATION_METHOD TO eqa_user
go
GRANT DELETE ON dbo.ALLOCATION_METHOD TO eqa_user
go
GRANT UPDATE ON dbo.ALLOCATION_METHOD TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ALLOCATION_METHOD TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ALLOCATION_METHOD TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ALLOCATION_METHOD TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ALLOCATION_METHOD TO eqa_user
go
CREATE TABLE dbo.ALLOCATION_RUN
(
    allocation_run_id     OBJECT_ID NOT NULL,
    allocation_group_id   OBJECT_ID NOT NULL,
    allocation_run_status code_2    NOT NULL,
    allocation_date_time  datetime  NOT NULL,
    academic_year         char(4)   NOT NULL,
    audit_tran_id         OBJECT_ID NOT NULL,
    ts                    timestamp NOT NULL,
    allocation_user       usr       NULL,
    failure_message       text      NULL     OFF ROW,
    CONSTRAINT PK_ALLOCATION_RUN
    PRIMARY KEY CLUSTERED (allocation_run_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ALLOCATION_RUN') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ALLOCATION_RUN >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ALLOCATION_RUN >>>'
go
ALTER TABLE dbo.ALLOCATION_RUN
    ADD CONSTRAINT FK_ALLOCATION_RUN_YEAR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.ALLOCATION_RUN
    ADD CONSTRAINT FK_ALLOCATION_RUN_GROUP
    FOREIGN KEY (allocation_group_id)
    REFERENCES dbo.ALLOCATION_GROUP (allocation_group_id)
go
GRANT REFERENCES ON dbo.ALLOCATION_RUN TO eqa_user
go
GRANT SELECT ON dbo.ALLOCATION_RUN TO eqa_user
go
GRANT SELECT ON dbo.ALLOCATION_RUN TO read_only
go
GRANT SELECT ON dbo.ALLOCATION_RUN TO rma_users
go
GRANT INSERT ON dbo.ALLOCATION_RUN TO eqa_user
go
GRANT DELETE ON dbo.ALLOCATION_RUN TO eqa_user
go
GRANT UPDATE ON dbo.ALLOCATION_RUN TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ALLOCATION_RUN TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ALLOCATION_RUN TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ALLOCATION_RUN TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ALLOCATION_RUN TO eqa_user
go
CREATE TABLE dbo.ALLOCATION_RUN_STATUS
(
    allocation_run_status      code_2 NOT NULL,
    allocation_run_status_desc descr  NOT NULL,
    CONSTRAINT PK_ALLOCATION_RUN_STATUS
    PRIMARY KEY CLUSTERED (allocation_run_status)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ALLOCATION_RUN_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ALLOCATION_RUN_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ALLOCATION_RUN_STATUS >>>'
go
ALTER TABLE dbo.ALLOCATION_RUN
    ADD CONSTRAINT FK_ALLOCATION_RUN_STATUS
    FOREIGN KEY (allocation_run_status)
    REFERENCES dbo.ALLOCATION_RUN_STATUS (allocation_run_status)
go
GRANT REFERENCES ON dbo.ALLOCATION_RUN_STATUS TO eqa_user
go
GRANT SELECT ON dbo.ALLOCATION_RUN_STATUS TO eqa_user
go
GRANT SELECT ON dbo.ALLOCATION_RUN_STATUS TO read_only
go
GRANT SELECT ON dbo.ALLOCATION_RUN_STATUS TO rma_users
go
GRANT INSERT ON dbo.ALLOCATION_RUN_STATUS TO eqa_user
go
GRANT DELETE ON dbo.ALLOCATION_RUN_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.ALLOCATION_RUN_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ALLOCATION_RUN_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ALLOCATION_RUN_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ALLOCATION_RUN_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ALLOCATION_RUN_STATUS TO eqa_user
go
CREATE TABLE dbo.ALLOCATION_WORKTABLE
(
    allocation_run_id          OBJECT_ID    NOT NULL,
    std_number                 varchar(8)   NOT NULL,
    std_version_number         numeric(8,0) NOT NULL,
    enrolment_id               OBJECT_ID    NOT NULL,
    entry_id                   OBJECT_ID    NOT NULL,
    marker_allocation_group_id OBJECT_ID    NULL,
    CONSTRAINT PK_ALLOCATION_WORKTABLE
    PRIMARY KEY CLUSTERED (std_number,std_version_number,enrolment_id,allocation_run_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ALLOCATION_WORKTABLE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ALLOCATION_WORKTABLE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ALLOCATION_WORKTABLE >>>'
go
ALTER TABLE dbo.ALLOCATION_WORKTABLE
    ADD CONSTRAINT FK_ALLOC_WORKTABLE_ALL_RUN
    FOREIGN KEY (allocation_run_id)
    REFERENCES dbo.ALLOCATION_RUN (allocation_run_id)
go
ALTER TABLE dbo.ALLOCATION_WORKTABLE
    ADD CONSTRAINT FK_ALLOC_WORK_LEARNER_ENROL
    FOREIGN KEY (enrolment_id)
    REFERENCES dbo.LEARNER_ENROLMENT (enrolment_id)
go
ALTER TABLE dbo.ALLOCATION_WORKTABLE
    ADD CONSTRAINT FK_ALLOCATION_WORKTABLE_MARKER
    FOREIGN KEY (marker_allocation_group_id)
    REFERENCES dbo.MARKER_ALLOCATION_GROUP (marker_allocation_group_id)
go
ALTER TABLE dbo.ALLOCATION_WORKTABLE
    ADD CONSTRAINT FK_ALLOC_WORKTABLE_STD_VER
    FOREIGN KEY (std_number,std_version_number)
    REFERENCES dbo.STD_VERSION (std_number,std_version_number)
go
GRANT REFERENCES ON dbo.ALLOCATION_WORKTABLE TO eqa_user
go
GRANT SELECT ON dbo.ALLOCATION_WORKTABLE TO eqa_user
go
GRANT SELECT ON dbo.ALLOCATION_WORKTABLE TO read_only
go
GRANT SELECT ON dbo.ALLOCATION_WORKTABLE TO rma_users
go
GRANT INSERT ON dbo.ALLOCATION_WORKTABLE TO eqa_user
go
GRANT DELETE ON dbo.ALLOCATION_WORKTABLE TO eqa_user
go
GRANT UPDATE ON dbo.ALLOCATION_WORKTABLE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ALLOCATION_WORKTABLE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ALLOCATION_WORKTABLE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ALLOCATION_WORKTABLE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ALLOCATION_WORKTABLE TO eqa_user
go
CREATE TABLE dbo.AMAP
(
    amap_id                    OBJECT_ID  NOT NULL,
    amap_number                varchar(8) NOT NULL,
    latest_amap_version_id     OBJECT_ID  NULL,
    latest_reg_amap_version_id OBJECT_ID  NULL,
    amap_status_code           code_2     NOT NULL,
    amap_status_date           datetime   NOT NULL,
    can_create_version_ind     yn_ind     NOT NULL,
    creation_date              datetime   NOT NULL,
    audit_tran_id              OBJECT_ID  NOT NULL,
    ts                         timestamp  NOT NULL,
    web_amap_version_id        OBJECT_ID  NULL,
    CONSTRAINT PK_AMAP
    PRIMARY KEY NONCLUSTERED (amap_id),
    CONSTRAINT AK_AK_AMAP_AMAP
    UNIQUE NONCLUSTERED (amap_number)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.AMAP') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.AMAP >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.AMAP >>>'
go
GRANT REFERENCES ON dbo.AMAP TO eqa_user
go
GRANT SELECT ON dbo.AMAP TO eqa_user
go
GRANT SELECT ON dbo.AMAP TO read_only
go
GRANT SELECT ON dbo.AMAP TO rma_users
go
GRANT INSERT ON dbo.AMAP TO eqa_user
go
GRANT DELETE ON dbo.AMAP TO eqa_user
go
GRANT UPDATE ON dbo.AMAP TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.AMAP TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.AMAP TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.AMAP TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.AMAP TO eqa_user
go
CREATE TABLE dbo.AMAP_CONTEXT
(
    amap_context_id   OBJECT_ID NOT NULL,
    amap_context_text descr     NOT NULL,
    amap_context_date datetime  NOT NULL,
    amap_scope_id     OBJECT_ID NOT NULL,
    audit_tran_id     OBJECT_ID NOT NULL,
    ts                timestamp NOT NULL,
    CONSTRAINT PK_AMAP_CONTEXT
    PRIMARY KEY CLUSTERED (amap_context_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.AMAP_CONTEXT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.AMAP_CONTEXT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.AMAP_CONTEXT >>>'
go
GRANT REFERENCES ON dbo.AMAP_CONTEXT TO eqa_user
go
GRANT SELECT ON dbo.AMAP_CONTEXT TO eqa_user
go
GRANT SELECT ON dbo.AMAP_CONTEXT TO read_only
go
GRANT SELECT ON dbo.AMAP_CONTEXT TO rma_users
go
GRANT INSERT ON dbo.AMAP_CONTEXT TO eqa_user
go
GRANT DELETE ON dbo.AMAP_CONTEXT TO eqa_user
go
GRANT UPDATE ON dbo.AMAP_CONTEXT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.AMAP_CONTEXT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.AMAP_CONTEXT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.AMAP_CONTEXT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.AMAP_CONTEXT TO eqa_user
go
CREATE TABLE dbo.AMAP_COVERAGE
(
    amap_coverage_id OBJECT_ID NOT NULL,
    amap_id          OBJECT_ID NOT NULL,
    std_version_id   OBJECT_ID NOT NULL,
    start_date       datetime  NULL,
    end_date         datetime  NULL,
    creation_date    datetime  NOT NULL,
    audit_tran_id    OBJECT_ID NOT NULL,
    ts               timestamp NOT NULL,
    CONSTRAINT PK_AMAP_COVERAGE
    PRIMARY KEY NONCLUSTERED (amap_coverage_id),
    CONSTRAINT AK_AMAP_COV
    UNIQUE NONCLUSTERED (amap_id,std_version_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.AMAP_COVERAGE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.AMAP_COVERAGE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.AMAP_COVERAGE >>>'
go
ALTER TABLE dbo.AMAP_COVERAGE
    ADD CONSTRAINT FK_AMAP_COVERAGE_REF_AMAP_ID
    FOREIGN KEY (amap_id)
    REFERENCES dbo.AMAP (amap_id)
go
ALTER TABLE dbo.AMAP_COVERAGE
    ADD CONSTRAINT FK_AMAP_COVERAGE_STD_VER
    FOREIGN KEY (std_version_id)
    REFERENCES dbo.STD_VERSION (std_version_id)
go
GRANT REFERENCES ON dbo.AMAP_COVERAGE TO eqa_user
go
GRANT SELECT ON dbo.AMAP_COVERAGE TO eqa_user
go
GRANT SELECT ON dbo.AMAP_COVERAGE TO read_only
go
GRANT SELECT ON dbo.AMAP_COVERAGE TO rma_users
go
GRANT INSERT ON dbo.AMAP_COVERAGE TO eqa_user
go
GRANT DELETE ON dbo.AMAP_COVERAGE TO eqa_user
go
GRANT UPDATE ON dbo.AMAP_COVERAGE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.AMAP_COVERAGE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.AMAP_COVERAGE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.AMAP_COVERAGE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.AMAP_COVERAGE TO eqa_user
go
CREATE TABLE dbo.AMAP_SCOPE
(
    amap_scope_id             OBJECT_ID NOT NULL,
    amap_id                   OBJECT_ID NOT NULL,
    std_id                    OBJECT_ID NULL,
    cfn_catg_id               OBJECT_ID NULL,
    scope_effective_from_date datetime  NULL,
    scope_effective_to_date   datetime  NULL,
    audit_tran_id             OBJECT_ID NOT NULL,
    action_type_code          code_2    NULL,
    level_code                code_2    NULL,
    ts                        timestamp NULL,
    latest_amap_context_id    OBJECT_ID NULL,
    is_scope_item             yn        DEFAULT 0 NOT NULL,
    overlap_id                OBJECT_ID NULL,
    CONSTRAINT PK_AMAP_SCOPE
    PRIMARY KEY CLUSTERED (amap_scope_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.AMAP_SCOPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.AMAP_SCOPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.AMAP_SCOPE >>>'
go
ALTER TABLE dbo.AMAP_SCOPE
    ADD CONSTRAINT FK_AMAP_SCOPE_ACTION_TYPE
    FOREIGN KEY (action_type_code)
    REFERENCES dbo.ACCREDITATION_OPTION_CODE (accreditation_option_code)
go
ALTER TABLE dbo.AMAP_SCOPE
    ADD CONSTRAINT FK_AMAP_SCOPE_REF_AMAP_ID
    FOREIGN KEY (amap_id)
    REFERENCES dbo.AMAP (amap_id)
go
ALTER TABLE dbo.AMAP_SCOPE
    ADD CONSTRAINT FK_AMAP_SCOPE_AMAP_CONTEXT
    FOREIGN KEY (latest_amap_context_id)
    REFERENCES dbo.AMAP_CONTEXT (amap_context_id)
go
ALTER TABLE dbo.AMAP_SCOPE
    ADD CONSTRAINT FK_AMAP_SCOPE_REF_STD
    FOREIGN KEY (std_id)
    REFERENCES dbo.STD (std_id)
go
ALTER TABLE dbo.AMAP_SCOPE
    ADD CONSTRAINT FK_AMAP_SCOPE_LVL
    FOREIGN KEY (level_code)
    REFERENCES dbo.LVL (level_code)
go
ALTER TABLE dbo.AMAP_CONTEXT
    ADD CONSTRAINT FK_AMAP_CONTEXT_AMAP_SCOPE
    FOREIGN KEY (amap_scope_id)
    REFERENCES dbo.AMAP_SCOPE (amap_scope_id)
go
GRANT REFERENCES ON dbo.AMAP_SCOPE TO eqa_user
go
GRANT SELECT ON dbo.AMAP_SCOPE TO eqa_user
go
GRANT SELECT ON dbo.AMAP_SCOPE TO read_only
go
GRANT SELECT ON dbo.AMAP_SCOPE TO rma_users
go
GRANT INSERT ON dbo.AMAP_SCOPE TO eqa_user
go
GRANT DELETE ON dbo.AMAP_SCOPE TO eqa_user
go
GRANT UPDATE ON dbo.AMAP_SCOPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.AMAP_SCOPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.AMAP_SCOPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.AMAP_SCOPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.AMAP_SCOPE TO eqa_user
go
CREATE TABLE dbo.AMAP_SCOPE_ACTION_HISTORY
(
    amap_scope_id    OBJECT_ID NOT NULL,
    action_type_code code_2    NOT NULL,
    action_date      datetime  NOT NULL,
    audit_tran_id    OBJECT_ID NOT NULL,
    ts               timestamp NOT NULL,
    CONSTRAINT PK_AMAP_SCOPE_ACTION_HISTORY
    PRIMARY KEY CLUSTERED (amap_scope_id,action_type_code,action_date)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.AMAP_SCOPE_ACTION_HISTORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.AMAP_SCOPE_ACTION_HISTORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.AMAP_SCOPE_ACTION_HISTORY >>>'
go
ALTER TABLE dbo.AMAP_SCOPE_ACTION_HISTORY
    ADD CONSTRAINT FK_AMAP_ACT_HIST_ACRD_OPT_CODE
    FOREIGN KEY (action_type_code)
    REFERENCES dbo.ACCREDITATION_OPTION_CODE (accreditation_option_code)
go
ALTER TABLE dbo.AMAP_SCOPE_ACTION_HISTORY
    ADD CONSTRAINT FK_AMAP_ACT_HIST_AMAP_SCOPE
    FOREIGN KEY (amap_scope_id)
    REFERENCES dbo.AMAP_SCOPE (amap_scope_id)
go
GRANT REFERENCES ON dbo.AMAP_SCOPE_ACTION_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.AMAP_SCOPE_ACTION_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.AMAP_SCOPE_ACTION_HISTORY TO read_only
go
GRANT SELECT ON dbo.AMAP_SCOPE_ACTION_HISTORY TO rma_users
go
GRANT INSERT ON dbo.AMAP_SCOPE_ACTION_HISTORY TO eqa_user
go
GRANT DELETE ON dbo.AMAP_SCOPE_ACTION_HISTORY TO eqa_user
go
GRANT UPDATE ON dbo.AMAP_SCOPE_ACTION_HISTORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.AMAP_SCOPE_ACTION_HISTORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.AMAP_SCOPE_ACTION_HISTORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.AMAP_SCOPE_ACTION_HISTORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.AMAP_SCOPE_ACTION_HISTORY TO eqa_user
go
CREATE TABLE dbo.AMAP_STATUS_CODE
(
    amap_status_code            code_2      NOT NULL,
    amap_status_code_desc       descr       NOT NULL,
    amap_status_code_short_desc descr_short NOT NULL,
    sortkey                     sortkey     NOT NULL,
    CONSTRAINT PK_AMAP_STATUS_CODE
    PRIMARY KEY NONCLUSTERED (amap_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.AMAP_STATUS_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.AMAP_STATUS_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.AMAP_STATUS_CODE >>>'
go
ALTER TABLE dbo.AMAP
    ADD CONSTRAINT FK_AMAP_REF_AMAP_STATUS
    FOREIGN KEY (amap_status_code)
    REFERENCES dbo.AMAP_STATUS_CODE (amap_status_code)
go
GRANT REFERENCES ON dbo.AMAP_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.AMAP_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.AMAP_STATUS_CODE TO read_only
go
GRANT SELECT ON dbo.AMAP_STATUS_CODE TO rma_users
go
GRANT INSERT ON dbo.AMAP_STATUS_CODE TO eqa_user
go
GRANT DELETE ON dbo.AMAP_STATUS_CODE TO eqa_user
go
GRANT UPDATE ON dbo.AMAP_STATUS_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.AMAP_STATUS_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.AMAP_STATUS_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.AMAP_STATUS_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.AMAP_STATUS_CODE TO eqa_user
go
CREATE TABLE dbo.AMAP_STATUS_HISTORY
(
    amap_status_history_id OBJECT_ID NOT NULL,
    amap_id                OBJECT_ID NOT NULL,
    amap_status_code       code_2    NOT NULL,
    amap_status_date       datetime  NOT NULL,
    updated_by             usr       NOT NULL,
    update_date            datetime  NOT NULL,
    audit_tran_id          OBJECT_ID NOT NULL,
    ts                     timestamp NOT NULL,
    CONSTRAINT PK_AMAP_STATUS_HISTORY
    PRIMARY KEY NONCLUSTERED (amap_status_history_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.AMAP_STATUS_HISTORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.AMAP_STATUS_HISTORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.AMAP_STATUS_HISTORY >>>'
go
ALTER TABLE dbo.AMAP_STATUS_HISTORY
    ADD CONSTRAINT FK_AMAP_STATUS_HIST_AMAP
    FOREIGN KEY (amap_id)
    REFERENCES dbo.AMAP (amap_id)
go
ALTER TABLE dbo.AMAP_STATUS_HISTORY
    ADD CONSTRAINT FK_AMAP_HIST_STATUS
    FOREIGN KEY (amap_status_code)
    REFERENCES dbo.AMAP_STATUS_CODE (amap_status_code)
go
GRANT REFERENCES ON dbo.AMAP_STATUS_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.AMAP_STATUS_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.AMAP_STATUS_HISTORY TO read_only
go
GRANT SELECT ON dbo.AMAP_STATUS_HISTORY TO rma_users
go
GRANT INSERT ON dbo.AMAP_STATUS_HISTORY TO eqa_user
go
GRANT DELETE ON dbo.AMAP_STATUS_HISTORY TO eqa_user
go
GRANT UPDATE ON dbo.AMAP_STATUS_HISTORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.AMAP_STATUS_HISTORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.AMAP_STATUS_HISTORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.AMAP_STATUS_HISTORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.AMAP_STATUS_HISTORY TO eqa_user
go
CREATE TABLE dbo.AMAP_VERSION
(
    amap_version_id           OBJECT_ID     NOT NULL,
    amap_id                   OBJECT_ID     NOT NULL,
    qual_application_id       OBJECT_ID     NULL,
    amap_number               varchar(8)    NOT NULL,
    amap_version_number       numeric(5,0)  NOT NULL,
    ssb_perorg_role_id        OBJECT_ID     NOT NULL,
    ssb_ref                   varchar(100)  NULL,
    title                     varchar(255)  NOT NULL,
    title_with_umlauts        descr         NOT NULL,
    notes                     varchar(1000) NULL,
    amap_version_status_code  code_2        NOT NULL,
    process_type_code         code_2        NULL,
    qa_event_code             code_2        NOT NULL,
    proposed_amap_status_code code_2        NULL,
    amap_version_status_date  datetime      NOT NULL,
    qa_event_date             datetime      NOT NULL,
    review_by_date            datetime      NULL,
    amap_expiry_date          datetime      NULL,
    first_publication_date    datetime      NULL,
    last_publication_date     datetime      NULL,
    creation_date             datetime      NOT NULL,
    audit_tran_id             OBJECT_ID     NOT NULL,
    ts                        timestamp     NOT NULL,
    CONSTRAINT PK_AMAP_VERSION
    PRIMARY KEY NONCLUSTERED (amap_version_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.AMAP_VERSION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.AMAP_VERSION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.AMAP_VERSION >>>'
go
ALTER TABLE dbo.AMAP_VERSION
    ADD CONSTRAINT FK_AMAP_VERSION_AMAP
    FOREIGN KEY (amap_id)
    REFERENCES dbo.AMAP (amap_id)
go
ALTER TABLE dbo.AMAP_VERSION
    ADD CONSTRAINT FK_AMAP_VER_PROP_AMAP_STATUS
    FOREIGN KEY (proposed_amap_status_code)
    REFERENCES dbo.AMAP_STATUS_CODE (amap_status_code)
go
ALTER TABLE dbo.AMAP_VERSION
    ADD CONSTRAINT FK_AMAP_VER_PROCESS_TYPE_CODE
    FOREIGN KEY (process_type_code)
    REFERENCES dbo.PROCESS_TYPE_CODE (process_type_code)
go
ALTER TABLE dbo.AMAP_VERSION
    ADD CONSTRAINT FK_AMAP_VERSION_PERORG_ROLE
    FOREIGN KEY (ssb_perorg_role_id)
    REFERENCES dbo.PERORG_ROLE (perorg_role_id)
go
ALTER TABLE dbo.AMAP_VERSION
    ADD CONSTRAINT FK_AMAP_VER_QA_EVENT_CODE
    FOREIGN KEY (qa_event_code)
    REFERENCES dbo.QA_EVENT_CODE (qa_event_code)
go
ALTER TABLE dbo.AMAP_VERSION
    ADD CONSTRAINT FK_AMAP_VER_QUAL_APPLICATION
    FOREIGN KEY (qual_application_id)
    REFERENCES dbo.QUAL_APPLICATION (qual_application_id)
go
ALTER TABLE dbo.AMAP
    ADD CONSTRAINT FK_AMAP_LAT_REG_VER
    FOREIGN KEY (latest_reg_amap_version_id)
    REFERENCES dbo.AMAP_VERSION (amap_version_id)
go
ALTER TABLE dbo.AMAP
    ADD CONSTRAINT FK_AMAP_REF_LATEST_AMAP_VER
    FOREIGN KEY (latest_amap_version_id)
    REFERENCES dbo.AMAP_VERSION (amap_version_id)
go
ALTER TABLE dbo.AMAP
    ADD CONSTRAINT FK_AMAP_WEB_AMAP_VERSION
    FOREIGN KEY (web_amap_version_id)
    REFERENCES dbo.AMAP_VERSION (amap_version_id)
go
GRANT REFERENCES ON dbo.AMAP_VERSION TO eqa_user
go
GRANT SELECT ON dbo.AMAP_VERSION TO eqa_user
go
GRANT SELECT ON dbo.AMAP_VERSION TO read_only
go
GRANT SELECT ON dbo.AMAP_VERSION TO rma_users
go
GRANT INSERT ON dbo.AMAP_VERSION TO eqa_user
go
GRANT DELETE ON dbo.AMAP_VERSION TO eqa_user
go
GRANT UPDATE ON dbo.AMAP_VERSION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.AMAP_VERSION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.AMAP_VERSION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.AMAP_VERSION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.AMAP_VERSION TO eqa_user
go
CREATE TABLE dbo.AMAP_VERSION_PUB_HISTORY
(
    amap_ver_pub_history_id OBJECT_ID NOT NULL,
    amap_version_id         OBJECT_ID NOT NULL,
    qual_publication_code   code_2    NOT NULL,
    publication_date        datetime  NOT NULL,
    comment                 descr     NOT NULL,
    updated_by              usr       NOT NULL,
    update_date             datetime  NOT NULL,
    audit_tran_id           OBJECT_ID NOT NULL,
    ts                      timestamp NOT NULL,
    CONSTRAINT PK_AMAP_VERSION_PUB_HISTORY
    PRIMARY KEY NONCLUSTERED (amap_ver_pub_history_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.AMAP_VERSION_PUB_HISTORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.AMAP_VERSION_PUB_HISTORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.AMAP_VERSION_PUB_HISTORY >>>'
go
ALTER TABLE dbo.AMAP_VERSION_PUB_HISTORY
    ADD CONSTRAINT FK_AMAP_VER_PUB_HIST_AMAP_VER
    FOREIGN KEY (amap_version_id)
    REFERENCES dbo.AMAP_VERSION (amap_version_id)
go
ALTER TABLE dbo.AMAP_VERSION_PUB_HISTORY
    ADD CONSTRAINT FK_AMAP_VER_PUB_HIST_PUB_CODE
    FOREIGN KEY (qual_publication_code)
    REFERENCES dbo.QUAL_PUBLICATION_CODE (qual_publication_code)
go
GRANT REFERENCES ON dbo.AMAP_VERSION_PUB_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.AMAP_VERSION_PUB_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.AMAP_VERSION_PUB_HISTORY TO read_only
go
GRANT SELECT ON dbo.AMAP_VERSION_PUB_HISTORY TO rma_users
go
GRANT INSERT ON dbo.AMAP_VERSION_PUB_HISTORY TO eqa_user
go
GRANT DELETE ON dbo.AMAP_VERSION_PUB_HISTORY TO eqa_user
go
GRANT UPDATE ON dbo.AMAP_VERSION_PUB_HISTORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.AMAP_VERSION_PUB_HISTORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.AMAP_VERSION_PUB_HISTORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.AMAP_VERSION_PUB_HISTORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.AMAP_VERSION_PUB_HISTORY TO eqa_user
go
CREATE TABLE dbo.AMAP_VERSION_STATUS_CODE
(
    amap_version_status_code       code_2      NOT NULL,
    amap_version_status_desc       descr       NOT NULL,
    amap_version_status_short_desc descr_short NOT NULL,
    sortkey                        sortkey     NOT NULL,
    CONSTRAINT PK_AMAP_VERSION_STATUS_CODE
    PRIMARY KEY NONCLUSTERED (amap_version_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.AMAP_VERSION_STATUS_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.AMAP_VERSION_STATUS_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.AMAP_VERSION_STATUS_CODE >>>'
go
ALTER TABLE dbo.AMAP_VERSION
    ADD CONSTRAINT FK_AMAP_VERSION_VER_STATUS
    FOREIGN KEY (amap_version_status_code)
    REFERENCES dbo.AMAP_VERSION_STATUS_CODE (amap_version_status_code)
go
GRANT REFERENCES ON dbo.AMAP_VERSION_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.AMAP_VERSION_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.AMAP_VERSION_STATUS_CODE TO read_only
go
GRANT SELECT ON dbo.AMAP_VERSION_STATUS_CODE TO rma_users
go
GRANT INSERT ON dbo.AMAP_VERSION_STATUS_CODE TO eqa_user
go
GRANT DELETE ON dbo.AMAP_VERSION_STATUS_CODE TO eqa_user
go
GRANT UPDATE ON dbo.AMAP_VERSION_STATUS_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.AMAP_VERSION_STATUS_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.AMAP_VERSION_STATUS_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.AMAP_VERSION_STATUS_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.AMAP_VERSION_STATUS_CODE TO eqa_user
go
CREATE TABLE dbo.AMAP_VERSION_STATUS_HISTORY
(
    amap_ver_status_history_id OBJECT_ID NOT NULL,
    amap_version_id            OBJECT_ID NOT NULL,
    amap_version_status_code   code_2    NOT NULL,
    amap_version_status_date   datetime  NOT NULL,
    updated_by                 usr       NOT NULL,
    update_date                datetime  NOT NULL,
    audit_tran_id              OBJECT_ID NOT NULL,
    ts                         timestamp NOT NULL,
    CONSTRAINT PK_AMAP_VERSION_STATUS_HISTORY
    PRIMARY KEY NONCLUSTERED (amap_ver_status_history_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.AMAP_VERSION_STATUS_HISTORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.AMAP_VERSION_STATUS_HISTORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.AMAP_VERSION_STATUS_HISTORY >>>'
go
ALTER TABLE dbo.AMAP_VERSION_STATUS_HISTORY
    ADD CONSTRAINT FK_AMAP_VER_STATUS_HIST
    FOREIGN KEY (amap_version_id)
    REFERENCES dbo.AMAP_VERSION (amap_version_id)
go
ALTER TABLE dbo.AMAP_VERSION_STATUS_HISTORY
    ADD CONSTRAINT FK_AMAP_VER_HIST_STATUS
    FOREIGN KEY (amap_version_status_code)
    REFERENCES dbo.AMAP_VERSION_STATUS_CODE (amap_version_status_code)
go
GRANT REFERENCES ON dbo.AMAP_VERSION_STATUS_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.AMAP_VERSION_STATUS_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.AMAP_VERSION_STATUS_HISTORY TO read_only
go
GRANT SELECT ON dbo.AMAP_VERSION_STATUS_HISTORY TO rma_users
go
GRANT INSERT ON dbo.AMAP_VERSION_STATUS_HISTORY TO eqa_user
go
GRANT DELETE ON dbo.AMAP_VERSION_STATUS_HISTORY TO eqa_user
go
GRANT UPDATE ON dbo.AMAP_VERSION_STATUS_HISTORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.AMAP_VERSION_STATUS_HISTORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.AMAP_VERSION_STATUS_HISTORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.AMAP_VERSION_STATUS_HISTORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.AMAP_VERSION_STATUS_HISTORY TO eqa_user
go
CREATE TABLE dbo.AMAP_VER_QA_EVENT_HISTORY
(
    qa_event_history_id OBJECT_ID NOT NULL,
    amap_version_id     OBJECT_ID NOT NULL,
    qa_event_code       code_2    NOT NULL,
    qa_event_date       datetime  NOT NULL,
    updated_by          usr       NOT NULL,
    update_date         datetime  NOT NULL,
    sortkey             sortkey   NOT NULL,
    audit_tran_id       OBJECT_ID NOT NULL,
    ts                  timestamp NOT NULL,
    CONSTRAINT PK_AMAP_VER_QA_EVENT_HISTORY
    PRIMARY KEY NONCLUSTERED (qa_event_history_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.AMAP_VER_QA_EVENT_HISTORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.AMAP_VER_QA_EVENT_HISTORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.AMAP_VER_QA_EVENT_HISTORY >>>'
go
ALTER TABLE dbo.AMAP_VER_QA_EVENT_HISTORY
    ADD CONSTRAINT FK_AMAP_VER_QA_EVT_AMAP_VER
    FOREIGN KEY (amap_version_id)
    REFERENCES dbo.AMAP_VERSION (amap_version_id)
go
ALTER TABLE dbo.AMAP_VER_QA_EVENT_HISTORY
    ADD CONSTRAINT FK_AM_VER_QA_EV_HIS_EV_CODE
    FOREIGN KEY (qa_event_code)
    REFERENCES dbo.QA_EVENT_CODE (qa_event_code)
go
GRANT REFERENCES ON dbo.AMAP_VER_QA_EVENT_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.AMAP_VER_QA_EVENT_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.AMAP_VER_QA_EVENT_HISTORY TO read_only
go
GRANT SELECT ON dbo.AMAP_VER_QA_EVENT_HISTORY TO rma_users
go
GRANT INSERT ON dbo.AMAP_VER_QA_EVENT_HISTORY TO eqa_user
go
GRANT DELETE ON dbo.AMAP_VER_QA_EVENT_HISTORY TO eqa_user
go
GRANT UPDATE ON dbo.AMAP_VER_QA_EVENT_HISTORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.AMAP_VER_QA_EVENT_HISTORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.AMAP_VER_QA_EVENT_HISTORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.AMAP_VER_QA_EVENT_HISTORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.AMAP_VER_QA_EVENT_HISTORY TO eqa_user
go
CREATE TABLE dbo.APPLICATION_SYSTEM_TYPE
(
    application_system_type_code code_4    NOT NULL,
    application_system_type_desc UNI_DESCR NOT NULL,
    active_ind                   yn_ind    NOT NULL,
    sortkey                      sortkey   NOT NULL,
    CONSTRAINT PK_APPLICATION_SYSTEM_TYPE
    PRIMARY KEY CLUSTERED (application_system_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.APPLICATION_SYSTEM_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.APPLICATION_SYSTEM_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.APPLICATION_SYSTEM_TYPE >>>'
go
GRANT REFERENCES ON dbo.APPLICATION_SYSTEM_TYPE TO eqa_user
go
GRANT SELECT ON dbo.APPLICATION_SYSTEM_TYPE TO eqa_user
go
GRANT SELECT ON dbo.APPLICATION_SYSTEM_TYPE TO read_only
go
GRANT SELECT ON dbo.APPLICATION_SYSTEM_TYPE TO rma_users
go
GRANT INSERT ON dbo.APPLICATION_SYSTEM_TYPE TO eqa_user
go
GRANT DELETE ON dbo.APPLICATION_SYSTEM_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.APPLICATION_SYSTEM_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.APPLICATION_SYSTEM_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.APPLICATION_SYSTEM_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.APPLICATION_SYSTEM_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.APPLICATION_SYSTEM_TYPE TO eqa_user
go
CREATE TABLE dbo.ASSESSMENT_CENTRE
(
    assessment_centre_id       OBJECT_ID   NOT NULL,
    moe_provider_id            OBJECT_ID   NOT NULL,
    location                   number_2    NOT NULL,
    row_id                     varchar(6)  NULL,
    sub_hub_id                 int         NULL,
    delivery_instructions      descr       NULL,
    pickup_instructions        descr       NULL,
    drop_off_location          descr       NULL,
    active_ind                 yn_ind      NOT NULL,
    audit_tran_id              OBJECT_ID   NOT NULL,
    ts                         timestamp   NOT NULL,
    pickup_type                code_2      NULL,
    assessment_centre_type     code_1      NOT NULL,
    address_instructions       descr       NULL,
    box_count                  smallint    NULL,
    hub_id                     varchar(3)  NULL,
    exam_hour_adj              int         DEFAULT 0 NOT NULL,
    excluded_marker_allocation ny_ind      NOT NULL,
    payment_grade              smallint    NULL,
    nz_post_loc                varchar(50) NULL,
    CONSTRAINT PK_ASSESSMENT_CENTRE
    PRIMARY KEY CLUSTERED (assessment_centre_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ASSESSMENT_CENTRE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ASSESSMENT_CENTRE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ASSESSMENT_CENTRE >>>'
go
ALTER TABLE dbo.ASSESSMENT_CENTRE
    ADD CONSTRAINT FK_ASSESS_CTR_NZPOST_HUB
    FOREIGN KEY (hub_id)
    REFERENCES dbo.NZPOST_HUB (hub_id)
go
ALTER TABLE dbo.ASSESSMENT_CENTRE
    ADD CONSTRAINT FK_ASSESSMENT_CENTRE_PICKUP
    FOREIGN KEY (pickup_type)
    REFERENCES dbo.PICKUP_TYPE (pickup_type)
go
GRANT REFERENCES ON dbo.ASSESSMENT_CENTRE TO eqa_user
go
GRANT SELECT ON dbo.ASSESSMENT_CENTRE TO eqa_user
go
GRANT SELECT ON dbo.ASSESSMENT_CENTRE TO read_only
go
GRANT SELECT ON dbo.ASSESSMENT_CENTRE TO rma_users
go
GRANT INSERT ON dbo.ASSESSMENT_CENTRE TO eqa_user
go
GRANT DELETE ON dbo.ASSESSMENT_CENTRE TO eqa_user
go
GRANT UPDATE ON dbo.ASSESSMENT_CENTRE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ASSESSMENT_CENTRE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ASSESSMENT_CENTRE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ASSESSMENT_CENTRE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ASSESSMENT_CENTRE TO eqa_user
go
CREATE TABLE dbo.ASSESSMENT_CENTRE_TYPE
(
    assessment_centre_type      code_1 NOT NULL,
    assessment_centre_type_desc descr  NOT NULL,
    CONSTRAINT PK_ASSESSMENT_CENTRE_TYPE
    PRIMARY KEY CLUSTERED (assessment_centre_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ASSESSMENT_CENTRE_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ASSESSMENT_CENTRE_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ASSESSMENT_CENTRE_TYPE >>>'
go
ALTER TABLE dbo.ASSESSMENT_CENTRE
    ADD CONSTRAINT FK_ASSESS_CTR_ASSESS_CTR_TYPE
    FOREIGN KEY (assessment_centre_type)
    REFERENCES dbo.ASSESSMENT_CENTRE_TYPE (assessment_centre_type)
go
GRANT REFERENCES ON dbo.ASSESSMENT_CENTRE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.ASSESSMENT_CENTRE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.ASSESSMENT_CENTRE_TYPE TO read_only
go
GRANT SELECT ON dbo.ASSESSMENT_CENTRE_TYPE TO rma_users
go
GRANT INSERT ON dbo.ASSESSMENT_CENTRE_TYPE TO eqa_user
go
GRANT DELETE ON dbo.ASSESSMENT_CENTRE_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.ASSESSMENT_CENTRE_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ASSESSMENT_CENTRE_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ASSESSMENT_CENTRE_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ASSESSMENT_CENTRE_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ASSESSMENT_CENTRE_TYPE TO eqa_user
go
CREATE TABLE dbo.ASSESSMENT_COMPONENT_PEP
(
    assessment_component_pep_id OBJECT_ID    NOT NULL,
    assessment_session_comp_id  OBJECT_ID    NOT NULL,
    result_code                 varchar(5)   NOT NULL,
    expected_percentage         numeric(5,2) NOT NULL,
    lower_percentage            numeric(5,2) NOT NULL,
    upper_percentage            numeric(5,2) NOT NULL,
    audit_tran_id               OBJECT_ID    NOT NULL,
    CONSTRAINT PK_ASSESSMENT_COMPONENT_PEP
    PRIMARY KEY NONCLUSTERED (assessment_component_pep_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ASSESSMENT_COMPONENT_PEP') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ASSESSMENT_COMPONENT_PEP >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ASSESSMENT_COMPONENT_PEP >>>'
go
ALTER TABLE dbo.ASSESSMENT_COMPONENT_PEP
    ADD CONSTRAINT FK_ASSESS_COMP_PEP_RESULT_CODE
    FOREIGN KEY (result_code)
    REFERENCES dbo.RESULT_CODE (result_code)
go
GRANT REFERENCES ON dbo.ASSESSMENT_COMPONENT_PEP TO eqa_user
go
GRANT SELECT ON dbo.ASSESSMENT_COMPONENT_PEP TO eqa_user
go
GRANT SELECT ON dbo.ASSESSMENT_COMPONENT_PEP TO read_only
go
GRANT SELECT ON dbo.ASSESSMENT_COMPONENT_PEP TO rma_users
go
GRANT INSERT ON dbo.ASSESSMENT_COMPONENT_PEP TO eqa_user
go
GRANT DELETE ON dbo.ASSESSMENT_COMPONENT_PEP TO eqa_user
go
GRANT UPDATE ON dbo.ASSESSMENT_COMPONENT_PEP TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ASSESSMENT_COMPONENT_PEP TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ASSESSMENT_COMPONENT_PEP TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ASSESSMENT_COMPONENT_PEP TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ASSESSMENT_COMPONENT_PEP TO eqa_user
go
CREATE TABLE dbo.ASSESSMENT_METHOD
(
    assessment_method      code_2       NOT NULL,
    assessment_method_desc varchar(100) NOT NULL,
    active_ind             yn_ind       NOT NULL,
    CONSTRAINT PK_ASSESSMENT_METHOD
    PRIMARY KEY CLUSTERED (assessment_method)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ASSESSMENT_METHOD') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ASSESSMENT_METHOD >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ASSESSMENT_METHOD >>>'
go
GRANT REFERENCES ON dbo.ASSESSMENT_METHOD TO eqa_user
go
GRANT SELECT ON dbo.ASSESSMENT_METHOD TO eqa_user
go
GRANT SELECT ON dbo.ASSESSMENT_METHOD TO read_only
go
GRANT SELECT ON dbo.ASSESSMENT_METHOD TO rma_users
go
GRANT INSERT ON dbo.ASSESSMENT_METHOD TO eqa_user
go
GRANT DELETE ON dbo.ASSESSMENT_METHOD TO eqa_user
go
GRANT UPDATE ON dbo.ASSESSMENT_METHOD TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ASSESSMENT_METHOD TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ASSESSMENT_METHOD TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ASSESSMENT_METHOD TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ASSESSMENT_METHOD TO eqa_user
go
CREATE TABLE dbo.ASSESSMENT_SESSION
(
    assessment_session_id   OBJECT_ID   NOT NULL,
    schedule_type           code_2      NOT NULL,
    assessment_cycle_id     char(4)     NOT NULL,
    assessment_session_type code_2      NOT NULL,
    title                   name        NOT NULL,
    session_code            varchar(12) NOT NULL,
    assessment_start        datetime    NULL,
    assessment_end          datetime    NULL,
    audit_tran_id           OBJECT_ID   NOT NULL,
    ts                      timestamp   NOT NULL,
    CONSTRAINT PK_ASSESSMENT_SESSION
    PRIMARY KEY CLUSTERED (assessment_session_id),
    CONSTRAINT cnstr_ses_code
    UNIQUE NONCLUSTERED (session_code,assessment_cycle_id),
    CONSTRAINT cnstr_title
    UNIQUE NONCLUSTERED (title,assessment_cycle_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ASSESSMENT_SESSION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ASSESSMENT_SESSION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ASSESSMENT_SESSION >>>'
go
ALTER TABLE dbo.ASSESSMENT_SESSION
    ADD CONSTRAINT FK_ASSESS_SESSION_YEAR
    FOREIGN KEY (assessment_cycle_id)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.ASSESSMENT_SESSION
    ADD CONSTRAINT FK_ASSESS_SESSION_SCHED_TYPE
    FOREIGN KEY (schedule_type)
    REFERENCES dbo.SCHEDULE_TYPE (schedule_type)
go
GRANT REFERENCES ON dbo.ASSESSMENT_SESSION TO eqa_user
go
GRANT SELECT ON dbo.ASSESSMENT_SESSION TO eqa_user
go
GRANT SELECT ON dbo.ASSESSMENT_SESSION TO read_only
go
GRANT SELECT ON dbo.ASSESSMENT_SESSION TO rma_users
go
GRANT INSERT ON dbo.ASSESSMENT_SESSION TO eqa_user
go
GRANT DELETE ON dbo.ASSESSMENT_SESSION TO eqa_user
go
GRANT UPDATE ON dbo.ASSESSMENT_SESSION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ASSESSMENT_SESSION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ASSESSMENT_SESSION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ASSESSMENT_SESSION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ASSESSMENT_SESSION TO eqa_user
go
CREATE TABLE dbo.ASSESSMENT_SESSION_COMPONENT
(
    assessment_session_comp_id   OBJECT_ID    NOT NULL,
    std_number                   varchar(8)   NOT NULL,
    std_version_number           numeric(8,0) NOT NULL,
    assessment_session_id        OBJECT_ID    NOT NULL,
    allocation_group_id          OBJECT_ID    NULL,
    scripts_per_hour             numeric(4,2) NULL,
    is_specialised               ny_ind       NOT NULL,
    audit_tran_id                OBJECT_ID    NOT NULL,
    ts                           timestamp    NOT NULL,
    cohort_size                  int          NULL,
    can_answer_in_maori_ind      ny_ind       NOT NULL,
    can_have_te_reo_paper_ind    ny_ind       NOT NULL,
    result_component_layout_type char(4)      NULL,
    academic_year                char(4)      NOT NULL,
    marking_scheme_type_code     code_2       NOT NULL,
    cut_score_status_code        code_3       NULL,
    cut_score_status_date        dt           NULL,
    ready_for_sper_ind           ny_ind       NOT NULL,
    naf_approval_ind             ny_ind       NOT NULL,
    ready_for_sper_date          dt           NULL,
    CONSTRAINT PK_ASSESSMENT_SESSION_COMPONEN
    PRIMARY KEY NONCLUSTERED (assessment_session_comp_id),
    CONSTRAINT uidx_assessment_session_com_01
    UNIQUE NONCLUSTERED (std_number,academic_year,assessment_session_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ASSESSMENT_SESSION_COMPONENT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ASSESSMENT_SESSION_COMPONENT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ASSESSMENT_SESSION_COMPONENT >>>'
go
ALTER TABLE dbo.ASSESSMENT_SESSION_COMPONENT
    ADD CONSTRAINT FK_ASSESS_SESS_COMP_ALLOC_GRP
    FOREIGN KEY (allocation_group_id)
    REFERENCES dbo.ALLOCATION_GROUP (allocation_group_id)
go
ALTER TABLE dbo.ASSESSMENT_SESSION_COMPONENT
    ADD CONSTRAINT FK_ASCMPT_MARKING_SCHEME_TYPE
    FOREIGN KEY (marking_scheme_type_code)
    REFERENCES dbo.MARKING_SCHEME_TYPE (marking_scheme_type_code)
go
ALTER TABLE dbo.ASSESSMENT_SESSION_COMPONENT
    ADD CONSTRAINT FK_ASSESS_SESSION_COMP_SESSION
    FOREIGN KEY (assessment_session_id,academic_year)
    REFERENCES dbo.ASSESSMENT_SESSION (assessment_session_id,assessment_cycle_id)
go
ALTER TABLE dbo.ASSESSMENT_SESSION_COMPONENT
    ADD CONSTRAINT FK_ASSESS_SESSION_COMP_STD_VER
    FOREIGN KEY (std_number,std_version_number)
    REFERENCES dbo.STD_VERSION (std_number,std_version_number)
go
ALTER TABLE dbo.ASSESSMENT_SESSION_COMPONENT
    ADD CONSTRAINT FK_ASS_SESS_COMP_LAYOUT_TYPE
    FOREIGN KEY (result_component_layout_type)
    REFERENCES dbo.RESULT_COMPONENT_LAYOUT_TYPE (result_component_layout_type)
go
ALTER TABLE dbo.ASSESSMENT_COMPONENT_PEP
    ADD CONSTRAINT FK_ASSESS_COMP_PEP_ASS_COMP
    FOREIGN KEY (assessment_session_comp_id)
    REFERENCES dbo.ASSESSMENT_SESSION_COMPONENT (assessment_session_comp_id)
go
GRANT REFERENCES ON dbo.ASSESSMENT_SESSION_COMPONENT TO eqa_user
go
GRANT SELECT ON dbo.ASSESSMENT_SESSION_COMPONENT TO eqa_user
go
GRANT SELECT ON dbo.ASSESSMENT_SESSION_COMPONENT TO read_only
go
GRANT SELECT ON dbo.ASSESSMENT_SESSION_COMPONENT TO rma_users
go
GRANT INSERT ON dbo.ASSESSMENT_SESSION_COMPONENT TO eqa_user
go
GRANT DELETE ON dbo.ASSESSMENT_SESSION_COMPONENT TO eqa_user
go
GRANT UPDATE ON dbo.ASSESSMENT_SESSION_COMPONENT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ASSESSMENT_SESSION_COMPONENT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ASSESSMENT_SESSION_COMPONENT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ASSESSMENT_SESSION_COMPONENT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ASSESSMENT_SESSION_COMPONENT TO eqa_user
go
CREATE TABLE dbo.ASSESSMENT_SESSION_OVERRIDE
(
    assessment_session_id OBJECT_ID NOT NULL,
    schedule_type         code_2    NOT NULL,
    CONSTRAINT PK_ASSESSMENT_SESSION_OVERRIDE
    PRIMARY KEY NONCLUSTERED (assessment_session_id)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.ASSESSMENT_SESSION_OVERRIDE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ASSESSMENT_SESSION_OVERRIDE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ASSESSMENT_SESSION_OVERRIDE >>>'
go
GRANT REFERENCES ON dbo.ASSESSMENT_SESSION_OVERRIDE TO eqa_user
go
GRANT SELECT ON dbo.ASSESSMENT_SESSION_OVERRIDE TO eqa_user
go
GRANT SELECT ON dbo.ASSESSMENT_SESSION_OVERRIDE TO read_only
go
GRANT SELECT ON dbo.ASSESSMENT_SESSION_OVERRIDE TO rma_users
go
GRANT INSERT ON dbo.ASSESSMENT_SESSION_OVERRIDE TO eqa_user
go
GRANT DELETE ON dbo.ASSESSMENT_SESSION_OVERRIDE TO eqa_user
go
GRANT UPDATE ON dbo.ASSESSMENT_SESSION_OVERRIDE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ASSESSMENT_SESSION_OVERRIDE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ASSESSMENT_SESSION_OVERRIDE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ASSESSMENT_SESSION_OVERRIDE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ASSESSMENT_SESSION_OVERRIDE TO eqa_user
go
CREATE TABLE dbo.ASSESSMENT_SESSION_REL_TYPE
(
    assessment_session_rel_type code_1 NOT NULL,
    assessment_session_rel_desc descr  NOT NULL,
    active_ind                  yn_ind NOT NULL,
    CONSTRAINT PK_ASSESSMENT_SESSION_REL_TYPE
    PRIMARY KEY CLUSTERED (assessment_session_rel_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ASSESSMENT_SESSION_REL_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ASSESSMENT_SESSION_REL_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ASSESSMENT_SESSION_REL_TYPE >>>'
go
GRANT REFERENCES ON dbo.ASSESSMENT_SESSION_REL_TYPE TO eqa_user
go
GRANT SELECT ON dbo.ASSESSMENT_SESSION_REL_TYPE TO eqa_user
go
GRANT SELECT ON dbo.ASSESSMENT_SESSION_REL_TYPE TO read_only
go
GRANT SELECT ON dbo.ASSESSMENT_SESSION_REL_TYPE TO rma_users
go
GRANT INSERT ON dbo.ASSESSMENT_SESSION_REL_TYPE TO eqa_user
go
GRANT DELETE ON dbo.ASSESSMENT_SESSION_REL_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.ASSESSMENT_SESSION_REL_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ASSESSMENT_SESSION_REL_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ASSESSMENT_SESSION_REL_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ASSESSMENT_SESSION_REL_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ASSESSMENT_SESSION_REL_TYPE TO eqa_user
go
CREATE TABLE dbo.ASSESSMENT_SESSION_TYPE
(
    assessment_session_type      code_2 NOT NULL,
    assessment_session_type_desc descr  NOT NULL,
    CONSTRAINT PK_ASSESSMENT_SESSION_TYPE
    PRIMARY KEY CLUSTERED (assessment_session_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ASSESSMENT_SESSION_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ASSESSMENT_SESSION_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ASSESSMENT_SESSION_TYPE >>>'
go
ALTER TABLE dbo.ASSESSMENT_SESSION
    ADD CONSTRAINT FK_ASSESSMENT_SESSION_TYPE
    FOREIGN KEY (assessment_session_type)
    REFERENCES dbo.ASSESSMENT_SESSION_TYPE (assessment_session_type)
go
GRANT REFERENCES ON dbo.ASSESSMENT_SESSION_TYPE TO eqa_user
go
GRANT SELECT ON dbo.ASSESSMENT_SESSION_TYPE TO eqa_user
go
GRANT SELECT ON dbo.ASSESSMENT_SESSION_TYPE TO read_only
go
GRANT SELECT ON dbo.ASSESSMENT_SESSION_TYPE TO rma_users
go
GRANT INSERT ON dbo.ASSESSMENT_SESSION_TYPE TO eqa_user
go
GRANT DELETE ON dbo.ASSESSMENT_SESSION_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.ASSESSMENT_SESSION_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ASSESSMENT_SESSION_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ASSESSMENT_SESSION_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ASSESSMENT_SESSION_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ASSESSMENT_SESSION_TYPE TO eqa_user
go
CREATE TABLE dbo.ASSESSMENT_TYPE
(
    assessment_type_code         code_2      NOT NULL,
    assessment_type_desc         descr       NOT NULL,
    assessment_type_short_desc   descr_short NOT NULL,
    sortkey                      sortkey     NOT NULL,
    assmnt_type_maori_short_desc descr_short NULL,
    CONSTRAINT PK_ASSESSMENT_TYPE
    PRIMARY KEY CLUSTERED (assessment_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ASSESSMENT_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ASSESSMENT_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ASSESSMENT_TYPE >>>'
go
GRANT REFERENCES ON dbo.ASSESSMENT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.ASSESSMENT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.ASSESSMENT_TYPE TO read_only
go
GRANT SELECT ON dbo.ASSESSMENT_TYPE TO rma_users
go
GRANT INSERT ON dbo.ASSESSMENT_TYPE TO eqa_user
go
GRANT DELETE ON dbo.ASSESSMENT_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.ASSESSMENT_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ASSESSMENT_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ASSESSMENT_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ASSESSMENT_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ASSESSMENT_TYPE TO eqa_user
go
CREATE TABLE dbo.ASSESS_SESSION_RELATIONSHIP
(
    assess_session_relationship_id OBJECT_ID NOT NULL,
    assessment_session_id          OBJECT_ID NOT NULL,
    related_assessment_session_id  OBJECT_ID NOT NULL,
    assessment_session_rel_type    code_1    NOT NULL,
    audit_tran_id                  OBJECT_ID NOT NULL,
    ts                             timestamp NOT NULL,
    CONSTRAINT PK_ASSESS_SESSION_RELATIONSHIP
    PRIMARY KEY CLUSTERED (assess_session_relationship_id),
    CONSTRAINT AK_ASSESS_SESSION_RELATIONSHIP
    UNIQUE NONCLUSTERED (assessment_session_id,related_assessment_session_id,assessment_session_rel_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ASSESS_SESSION_RELATIONSHIP') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ASSESS_SESSION_RELATIONSHIP >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ASSESS_SESSION_RELATIONSHIP >>>'
go
ALTER TABLE dbo.ASSESS_SESSION_RELATIONSHIP
    ADD CONSTRAINT FK_ASSESS_SESSION_REL_SESSION
    FOREIGN KEY (assessment_session_id)
    REFERENCES dbo.ASSESSMENT_SESSION (assessment_session_id)
go
ALTER TABLE dbo.ASSESS_SESSION_RELATIONSHIP
    ADD CONSTRAINT FK_ASSESS_SESS_REL_RELATED_SES
    FOREIGN KEY (related_assessment_session_id)
    REFERENCES dbo.ASSESSMENT_SESSION (assessment_session_id)
go
ALTER TABLE dbo.ASSESS_SESSION_RELATIONSHIP
    ADD CONSTRAINT FK_ASSESS_SESSION_REL_TYPE
    FOREIGN KEY (assessment_session_rel_type)
    REFERENCES dbo.ASSESSMENT_SESSION_REL_TYPE (assessment_session_rel_type)
go
GRANT REFERENCES ON dbo.ASSESS_SESSION_RELATIONSHIP TO eqa_user
go
GRANT SELECT ON dbo.ASSESS_SESSION_RELATIONSHIP TO eqa_user
go
GRANT SELECT ON dbo.ASSESS_SESSION_RELATIONSHIP TO read_only
go
GRANT SELECT ON dbo.ASSESS_SESSION_RELATIONSHIP TO rma_users
go
GRANT INSERT ON dbo.ASSESS_SESSION_RELATIONSHIP TO eqa_user
go
GRANT DELETE ON dbo.ASSESS_SESSION_RELATIONSHIP TO eqa_user
go
GRANT UPDATE ON dbo.ASSESS_SESSION_RELATIONSHIP TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ASSESS_SESSION_RELATIONSHIP TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ASSESS_SESSION_RELATIONSHIP TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ASSESS_SESSION_RELATIONSHIP TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ASSESS_SESSION_RELATIONSHIP TO eqa_user
go
CREATE TABLE dbo.ASSESS_SESS_CATG
(
    assess_sess_catg_code code_4      NOT NULL,
    assess_sess_catg_desc descr_short NOT NULL,
    active_ind            yn_ind      NOT NULL,
    sortkey               sortkey     NOT NULL,
    CONSTRAINT PK_ASSESS_SESS_CATG
    PRIMARY KEY NONCLUSTERED (assess_sess_catg_code)
)
LOCK ALLPAGES
go
IF OBJECT_ID('dbo.ASSESS_SESS_CATG') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ASSESS_SESS_CATG >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ASSESS_SESS_CATG >>>'
go
GRANT REFERENCES ON dbo.ASSESS_SESS_CATG TO eqa_user
go
GRANT SELECT ON dbo.ASSESS_SESS_CATG TO eqa_user
go
GRANT SELECT ON dbo.ASSESS_SESS_CATG TO read_only
go
GRANT SELECT ON dbo.ASSESS_SESS_CATG TO rma_users
go
GRANT INSERT ON dbo.ASSESS_SESS_CATG TO eqa_user
go
GRANT DELETE ON dbo.ASSESS_SESS_CATG TO eqa_user
go
GRANT UPDATE ON dbo.ASSESS_SESS_CATG TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ASSESS_SESS_CATG TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ASSESS_SESS_CATG TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ASSESS_SESS_CATG TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ASSESS_SESS_CATG TO eqa_user
go
CREATE TABLE dbo.ASSESS_SESS_CMPT_CUT_SCORE
(
    assess_sess_cmpt_cut_score_id OBJECT_ID     NOT NULL,
    assessment_session_comp_id    OBJECT_ID     NOT NULL,
    result_code                   varchar(5)    NOT NULL,
    cut_score_from                number_4      NOT NULL,
    cut_score_to                  number_4      NOT NULL,
    created_by                    usr           NOT NULL,
    audit_tran_id                 numeric(12,0) NOT NULL,
    effective_from_date           dt            DEFAULT getdate() NOT NULL,
    effective_to_date             dt            NULL,
    CONSTRAINT PK_ASSESS_SESS_CMPT_CUT_SCORE
    PRIMARY KEY CLUSTERED (assess_sess_cmpt_cut_score_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ASSESS_SESS_CMPT_CUT_SCORE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ASSESS_SESS_CMPT_CUT_SCORE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ASSESS_SESS_CMPT_CUT_SCORE >>>'
go
ALTER TABLE dbo.ASSESS_SESS_CMPT_CUT_SCORE
    ADD CONSTRAINT FK_ASCMPT_CUT_SCORE_ASSESS_SESS_CMPT
    FOREIGN KEY (assessment_session_comp_id)
    REFERENCES dbo.ASSESSMENT_SESSION_COMPONENT (assessment_session_comp_id)
go
ALTER TABLE dbo.ASSESS_SESS_CMPT_CUT_SCORE
    ADD CONSTRAINT FK_ASCMPT_CUT_SCORE_RESULT_COD
    FOREIGN KEY (result_code)
    REFERENCES dbo.RESULT_CODE (result_code)
go
GRANT REFERENCES ON dbo.ASSESS_SESS_CMPT_CUT_SCORE TO eqa_user
go
GRANT SELECT ON dbo.ASSESS_SESS_CMPT_CUT_SCORE TO eqa_user
go
GRANT SELECT ON dbo.ASSESS_SESS_CMPT_CUT_SCORE TO read_only
go
GRANT SELECT ON dbo.ASSESS_SESS_CMPT_CUT_SCORE TO rma_users
go
GRANT INSERT ON dbo.ASSESS_SESS_CMPT_CUT_SCORE TO eqa_user
go
GRANT DELETE ON dbo.ASSESS_SESS_CMPT_CUT_SCORE TO eqa_user
go
GRANT UPDATE ON dbo.ASSESS_SESS_CMPT_CUT_SCORE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ASSESS_SESS_CMPT_CUT_SCORE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ASSESS_SESS_CMPT_CUT_SCORE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ASSESS_SESS_CMPT_CUT_SCORE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ASSESS_SESS_CMPT_CUT_SCORE TO eqa_user
go
CREATE TABLE dbo.ASSISTANCE_CODE
(
    assistance_code            code_2 NOT NULL,
    assistance_desc            descr  NOT NULL,
    return_to_nzqa             yn     DEFAULT 0 NOT NULL,
    has_separate_accommodation yn     DEFAULT 0 NOT NULL,
    nzqa_only_ind              yn     DEFAULT 0 NOT NULL,
    nzqa_action_required       yn     DEFAULT 0 NOT NULL,
    active_ind                 yn     DEFAULT 1 NOT NULL,
    CONSTRAINT PK_ASSISTANCE_CODE
    PRIMARY KEY CLUSTERED (assistance_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ASSISTANCE_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ASSISTANCE_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ASSISTANCE_CODE >>>'
go
GRANT REFERENCES ON dbo.ASSISTANCE_CODE TO eqa_user
go
GRANT SELECT ON dbo.ASSISTANCE_CODE TO eqa_user
go
GRANT SELECT ON dbo.ASSISTANCE_CODE TO read_only
go
GRANT SELECT ON dbo.ASSISTANCE_CODE TO rma_users
go
GRANT INSERT ON dbo.ASSISTANCE_CODE TO eqa_user
go
GRANT DELETE ON dbo.ASSISTANCE_CODE TO eqa_user
go
GRANT UPDATE ON dbo.ASSISTANCE_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ASSISTANCE_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ASSISTANCE_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ASSISTANCE_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ASSISTANCE_CODE TO eqa_user
go
CREATE TABLE dbo.ASSMT_SESS_COMP_MATERIAL
(
    assmt_sess_comp_material_id OBJECT_ID     NOT NULL,
    exam_material_id            OBJECT_ID     NOT NULL,
    assessment_session_comp_id  OBJECT_ID     NOT NULL,
    audit_tran_id               numeric(12,0) NOT NULL,
    ts                          timestamp     NOT NULL,
    num_pages                   int           NULL,
    resource_quantity           int           DEFAULT 1 NULL,
    resource_denominator        int           DEFAULT 1 NULL,
    max_buffer_quantity         int           DEFAULT 0 NOT NULL,
    buffer_percent              int           DEFAULT 0 NOT NULL,
    min_buffer_quantity         int           DEFAULT 0 NOT NULL,
    regional_buffer_quantity    int           NULL,
    CONSTRAINT PK_ASSMT_SESS_COMP_MATERIAL
    PRIMARY KEY NONCLUSTERED (assmt_sess_comp_material_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ASSMT_SESS_COMP_MATERIAL') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ASSMT_SESS_COMP_MATERIAL >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ASSMT_SESS_COMP_MATERIAL >>>'
go
ALTER TABLE dbo.ASSMT_SESS_COMP_MATERIAL
    ADD CONSTRAINT FK_ASSESS_RESOURCE_SESS_COMP
    FOREIGN KEY (assessment_session_comp_id)
    REFERENCES dbo.ASSESSMENT_SESSION_COMPONENT (assessment_session_comp_id)
go
GRANT REFERENCES ON dbo.ASSMT_SESS_COMP_MATERIAL TO eqa_user
go
GRANT SELECT ON dbo.ASSMT_SESS_COMP_MATERIAL TO eqa_user
go
GRANT SELECT ON dbo.ASSMT_SESS_COMP_MATERIAL TO read_only
go
GRANT SELECT ON dbo.ASSMT_SESS_COMP_MATERIAL TO rma_users
go
GRANT INSERT ON dbo.ASSMT_SESS_COMP_MATERIAL TO eqa_user
go
GRANT DELETE ON dbo.ASSMT_SESS_COMP_MATERIAL TO eqa_user
go
GRANT UPDATE ON dbo.ASSMT_SESS_COMP_MATERIAL TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ASSMT_SESS_COMP_MATERIAL TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ASSMT_SESS_COMP_MATERIAL TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ASSMT_SESS_COMP_MATERIAL TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ASSMT_SESS_COMP_MATERIAL TO eqa_user
go
CREATE TABLE dbo.ASS_SESS_COMP_ASSESS_METHOD
(
    assessment_session_comp_id OBJECT_ID NOT NULL,
    assessment_method          code_2    NOT NULL,
    CONSTRAINT PK_ASS_SESS_COMP_ASSESS_METHOD
    PRIMARY KEY CLUSTERED (assessment_session_comp_id,assessment_method)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.ASS_SESS_COMP_ASSESS_METHOD') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ASS_SESS_COMP_ASSESS_METHOD >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ASS_SESS_COMP_ASSESS_METHOD >>>'
go
ALTER TABLE dbo.ASS_SESS_COMP_ASSESS_METHOD
    ADD CONSTRAINT FK_ASS_SESS_COMP_ASS_METHOD_ASS_METHOD
    FOREIGN KEY (assessment_method)
    REFERENCES dbo.ASSESSMENT_METHOD (assessment_method)
go
ALTER TABLE dbo.ASS_SESS_COMP_ASSESS_METHOD
    ADD CONSTRAINT FK_ASS_SESS_COMP_ASS_METHOD_SESS_COMP
    FOREIGN KEY (assessment_session_comp_id)
    REFERENCES dbo.ASSESSMENT_SESSION_COMPONENT (assessment_session_comp_id)
go
GRANT REFERENCES ON dbo.ASS_SESS_COMP_ASSESS_METHOD TO eqa_user
go
GRANT SELECT ON dbo.ASS_SESS_COMP_ASSESS_METHOD TO eqa_user
go
GRANT SELECT ON dbo.ASS_SESS_COMP_ASSESS_METHOD TO read_only
go
GRANT SELECT ON dbo.ASS_SESS_COMP_ASSESS_METHOD TO rma_users
go
GRANT INSERT ON dbo.ASS_SESS_COMP_ASSESS_METHOD TO eqa_user
go
GRANT DELETE ON dbo.ASS_SESS_COMP_ASSESS_METHOD TO eqa_user
go
GRANT UPDATE ON dbo.ASS_SESS_COMP_ASSESS_METHOD TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ASS_SESS_COMP_ASSESS_METHOD TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ASS_SESS_COMP_ASSESS_METHOD TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ASS_SESS_COMP_ASSESS_METHOD TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ASS_SESS_COMP_ASSESS_METHOD TO eqa_user
go
CREATE TABLE dbo.ATTAINMENT_CODE
(
    attainment_code code_2       NOT NULL,
    attainment_rank numeric(4,0) NOT NULL,
    attainment_desc varchar(255) NOT NULL,
    CONSTRAINT PK_ATTAINMENT_CODE
    PRIMARY KEY CLUSTERED (attainment_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ATTAINMENT_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ATTAINMENT_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ATTAINMENT_CODE >>>'
go
GRANT REFERENCES ON dbo.ATTAINMENT_CODE TO eqa_user
go
GRANT SELECT ON dbo.ATTAINMENT_CODE TO eqa_user
go
GRANT SELECT ON dbo.ATTAINMENT_CODE TO read_only
go
GRANT SELECT ON dbo.ATTAINMENT_CODE TO rma_users
go
GRANT INSERT ON dbo.ATTAINMENT_CODE TO eqa_user
go
GRANT DELETE ON dbo.ATTAINMENT_CODE TO eqa_user
go
GRANT UPDATE ON dbo.ATTAINMENT_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ATTAINMENT_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ATTAINMENT_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ATTAINMENT_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ATTAINMENT_CODE TO eqa_user
go
CREATE TABLE dbo.AUDIT_TRANSACTION
(
    audit_tran_oid OBJECT_ID NOT NULL,
    user_id        usr       NULL,
    operation      name      NOT NULL,
    change_date    dt        NOT NULL,
    comment        descr     NULL,
    ts             timestamp NULL,
    CONSTRAINT PK_AUDIT_TRANSACTION
    PRIMARY KEY CLUSTERED (audit_tran_oid)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.AUDIT_TRANSACTION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.AUDIT_TRANSACTION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.AUDIT_TRANSACTION >>>'
go
GRANT REFERENCES ON dbo.AUDIT_TRANSACTION TO eqa_user
go
GRANT SELECT ON dbo.AUDIT_TRANSACTION TO eqa_user
go
GRANT SELECT ON dbo.AUDIT_TRANSACTION TO read_only
go
GRANT SELECT ON dbo.AUDIT_TRANSACTION TO rma_users
go
GRANT INSERT ON dbo.AUDIT_TRANSACTION TO eqa_user
go
GRANT INSERT ON dbo.AUDIT_TRANSACTION TO eqa_rpt_user
go
GRANT INSERT ON dbo.AUDIT_TRANSACTION TO eqa_vp_user
go
GRANT INSERT ON dbo.AUDIT_TRANSACTION TO sqr_eqa_user
go
GRANT INSERT ON dbo.AUDIT_TRANSACTION TO eve_user
go
GRANT DELETE ON dbo.AUDIT_TRANSACTION TO eqa_user
go
GRANT DELETE ON dbo.AUDIT_TRANSACTION TO eqa_rpt_user
go
GRANT DELETE ON dbo.AUDIT_TRANSACTION TO eqa_vp_user
go
GRANT DELETE ON dbo.AUDIT_TRANSACTION TO eve_user
go
GRANT UPDATE ON dbo.AUDIT_TRANSACTION TO eqa_user
go
GRANT UPDATE ON dbo.AUDIT_TRANSACTION TO eqa_rpt_user
go
GRANT UPDATE ON dbo.AUDIT_TRANSACTION TO eqa_vp_user
go
GRANT UPDATE ON dbo.AUDIT_TRANSACTION TO sqr_eqa_user
go
GRANT UPDATE ON dbo.AUDIT_TRANSACTION TO eve_user
go
GRANT DELETE STATISTICS ON dbo.AUDIT_TRANSACTION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.AUDIT_TRANSACTION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.AUDIT_TRANSACTION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.AUDIT_TRANSACTION TO eqa_user
go
CREATE TABLE dbo.AWARDING_PROVIDER_MAP
(
    awarding_provider_map_id     OBJECT_ID NOT NULL,
    submitting_provider_id       OBJECT_ID NOT NULL,
    submitting_provider_location number_2  NOT NULL,
    awarding_provider_id         OBJECT_ID NOT NULL,
    awarding_provider_location   number_2  NOT NULL,
    active_ind                   yn_ind    NOT NULL,
    audit_tran_id                OBJECT_ID NOT NULL,
    ts                           timestamp NOT NULL,
    CONSTRAINT PK_AWARDING_PROVIDER_MAP
    PRIMARY KEY CLUSTERED (awarding_provider_map_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.AWARDING_PROVIDER_MAP') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.AWARDING_PROVIDER_MAP >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.AWARDING_PROVIDER_MAP >>>'
go
ALTER TABLE dbo.AWARDING_PROVIDER_MAP
    ADD CONSTRAINT FK_AP_MAP_SUBMITTING_PROVIDER
    FOREIGN KEY (submitting_provider_id,submitting_provider_location)
    REFERENCES dbo.PROVIDER (moe_provider_id,location)
go
ALTER TABLE dbo.AWARDING_PROVIDER_MAP
    ADD CONSTRAINT FK_AP_MAP_AWARDING_PROVIDER
    FOREIGN KEY (awarding_provider_id,awarding_provider_location)
    REFERENCES dbo.PROVIDER (moe_provider_id,location)
go
GRANT REFERENCES ON dbo.AWARDING_PROVIDER_MAP TO eqa_user
go
GRANT SELECT ON dbo.AWARDING_PROVIDER_MAP TO eqa_user
go
GRANT SELECT ON dbo.AWARDING_PROVIDER_MAP TO read_only
go
GRANT SELECT ON dbo.AWARDING_PROVIDER_MAP TO rma_users
go
GRANT INSERT ON dbo.AWARDING_PROVIDER_MAP TO eqa_user
go
GRANT DELETE ON dbo.AWARDING_PROVIDER_MAP TO eqa_user
go
GRANT UPDATE ON dbo.AWARDING_PROVIDER_MAP TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.AWARDING_PROVIDER_MAP TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.AWARDING_PROVIDER_MAP TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.AWARDING_PROVIDER_MAP TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.AWARDING_PROVIDER_MAP TO eqa_user
go
CREATE TABLE dbo.AWARD_DETAIL
(
    award_detail_id    OBJECT_ID NOT NULL,
    award_recipient_id OBJECT_ID NOT NULL,
    award_type_code    code_2    NOT NULL,
    std_group_id       OBJECT_ID NULL,
    payment_amount     money     NOT NULL,
    active_ind         yn        DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    audit_tran_id      OBJECT_ID NOT NULL,
    ts                 timestamp NOT NULL,
    removal_date       datetime  NULL,
    CONSTRAINT PK_AWARD_DETAIL
    PRIMARY KEY CLUSTERED (award_detail_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.AWARD_DETAIL') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.AWARD_DETAIL >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.AWARD_DETAIL >>>'
go
ALTER TABLE dbo.AWARD_DETAIL
    ADD CONSTRAINT FK_AWARD_DETAIL_STD_GRP
    FOREIGN KEY (std_group_id)
    REFERENCES dbo.STD_GROUP (std_group_id)
go
GRANT REFERENCES ON dbo.AWARD_DETAIL TO eqa_user
go
GRANT SELECT ON dbo.AWARD_DETAIL TO eqa_user
go
GRANT SELECT ON dbo.AWARD_DETAIL TO read_only
go
GRANT SELECT ON dbo.AWARD_DETAIL TO rma_users
go
GRANT INSERT ON dbo.AWARD_DETAIL TO eqa_user
go
GRANT DELETE ON dbo.AWARD_DETAIL TO eqa_user
go
GRANT UPDATE ON dbo.AWARD_DETAIL TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.AWARD_DETAIL TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.AWARD_DETAIL TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.AWARD_DETAIL TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.AWARD_DETAIL TO eqa_user
go
CREATE TABLE dbo.AWARD_EXTERNAL_STATUS
(
    award_external_status_code code_2    NOT NULL,
    award_external_status_desc descr     NOT NULL,
    ts                         timestamp NULL,
    CONSTRAINT PK_AWARD_EXTERNAL_STATUS
    PRIMARY KEY CLUSTERED (award_external_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.AWARD_EXTERNAL_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.AWARD_EXTERNAL_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.AWARD_EXTERNAL_STATUS >>>'
go
GRANT REFERENCES ON dbo.AWARD_EXTERNAL_STATUS TO eqa_user
go
GRANT SELECT ON dbo.AWARD_EXTERNAL_STATUS TO eqa_user
go
GRANT SELECT ON dbo.AWARD_EXTERNAL_STATUS TO read_only
go
GRANT SELECT ON dbo.AWARD_EXTERNAL_STATUS TO rma_users
go
GRANT INSERT ON dbo.AWARD_EXTERNAL_STATUS TO eqa_user
go
GRANT DELETE ON dbo.AWARD_EXTERNAL_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.AWARD_EXTERNAL_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.AWARD_EXTERNAL_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.AWARD_EXTERNAL_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.AWARD_EXTERNAL_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.AWARD_EXTERNAL_STATUS TO eqa_user
go
CREATE TABLE dbo.AWARD_NZQA_STATUS
(
    award_nzqa_status_code code_2    NOT NULL,
    award_nzqa_status_desc descr     NOT NULL,
    ts                     timestamp NULL,
    CONSTRAINT PK_AWARD_NZQA_STATUS
    PRIMARY KEY CLUSTERED (award_nzqa_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.AWARD_NZQA_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.AWARD_NZQA_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.AWARD_NZQA_STATUS >>>'
go
GRANT REFERENCES ON dbo.AWARD_NZQA_STATUS TO eqa_user
go
GRANT SELECT ON dbo.AWARD_NZQA_STATUS TO eqa_user
go
GRANT SELECT ON dbo.AWARD_NZQA_STATUS TO read_only
go
GRANT SELECT ON dbo.AWARD_NZQA_STATUS TO rma_users
go
GRANT INSERT ON dbo.AWARD_NZQA_STATUS TO eqa_user
go
GRANT DELETE ON dbo.AWARD_NZQA_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.AWARD_NZQA_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.AWARD_NZQA_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.AWARD_NZQA_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.AWARD_NZQA_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.AWARD_NZQA_STATUS TO eqa_user
go
CREATE TABLE dbo.AWARD_RECIPIENT
(
    award_recipient_id         OBJECT_ID NOT NULL,
    learner_id                 OBJECT_ID NOT NULL,
    academic_year              char(4)   NOT NULL,
    award_nzqa_status_code     code_2    NOT NULL,
    award_external_status_code code_2    NULL,
    provider_id                OBJECT_ID NULL,
    location                   number_2  NULL,
    course_start_date          datetime  NULL,
    attending_ceremony         yn        DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    study_postponed            yn        DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    active_ind                 yn        DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    audit_tran_id              OBJECT_ID NOT NULL,
    ts                         timestamp NOT NULL,
    CONSTRAINT PK_AWARD_RECIPIENT
    PRIMARY KEY CLUSTERED (award_recipient_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.AWARD_RECIPIENT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.AWARD_RECIPIENT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.AWARD_RECIPIENT >>>'
go
ALTER TABLE dbo.AWARD_RECIPIENT
    ADD CONSTRAINT FK_AWARD_RECIPIENT_YEAR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.AWARD_RECIPIENT
    ADD CONSTRAINT FK_AWARD_RECIPIENT_EXT_STATUS
    FOREIGN KEY (award_external_status_code)
    REFERENCES dbo.AWARD_EXTERNAL_STATUS (award_external_status_code)
go
ALTER TABLE dbo.AWARD_RECIPIENT
    ADD CONSTRAINT FK_AWARD_RECIPIENT_NZQA_STATUS
    FOREIGN KEY (award_nzqa_status_code)
    REFERENCES dbo.AWARD_NZQA_STATUS (award_nzqa_status_code)
go
ALTER TABLE dbo.AWARD_RECIPIENT
    ADD CONSTRAINT FK_AWARD_RECIPIENT_LEARNER
    FOREIGN KEY (learner_id)
    REFERENCES dbo.LEARNER (learner_id)
go
ALTER TABLE dbo.AWARD_RECIPIENT
    ADD CONSTRAINT FK_AWARD_RECIPIENT_PROVIDER
    FOREIGN KEY (provider_id,location)
    REFERENCES dbo.PROVIDER (moe_provider_id,location)
go
ALTER TABLE dbo.AWARD_DETAIL
    ADD CONSTRAINT FK_AWARD_DETAIL_RECIPIENT
    FOREIGN KEY (award_recipient_id)
    REFERENCES dbo.AWARD_RECIPIENT (award_recipient_id)
go
GRANT REFERENCES ON dbo.AWARD_RECIPIENT TO eqa_user
go
GRANT SELECT ON dbo.AWARD_RECIPIENT TO eqa_user
go
GRANT SELECT ON dbo.AWARD_RECIPIENT TO read_only
go
GRANT SELECT ON dbo.AWARD_RECIPIENT TO rma_users
go
GRANT INSERT ON dbo.AWARD_RECIPIENT TO eqa_user
go
GRANT DELETE ON dbo.AWARD_RECIPIENT TO eqa_user
go
GRANT UPDATE ON dbo.AWARD_RECIPIENT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.AWARD_RECIPIENT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.AWARD_RECIPIENT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.AWARD_RECIPIENT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.AWARD_RECIPIENT TO eqa_user
go
CREATE TABLE dbo.AWARD_TYPE
(
    award_type_code     code_2      NOT NULL,
    award_type_desc     descr       NOT NULL,
    award_msd_code      varchar(20) NOT NULL,
    maximum_amount      money       NOT NULL,
    requires_subject    yn_ind      NOT NULL,
    active_ind          yn_ind      NOT NULL,
    ceremony_award_ind  yn_ind      NOT NULL,
    one_off_payment_ind ny_ind      NOT NULL,
    export_to_msd_ind   yn_ind      NOT NULL,
    ts                  timestamp   NOT NULL,
    sortkey             sortkey     NULL,
    CONSTRAINT PK_AWARD_TYPE
    PRIMARY KEY CLUSTERED (award_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.AWARD_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.AWARD_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.AWARD_TYPE >>>'
go
ALTER TABLE dbo.AWARD_DETAIL
    ADD CONSTRAINT FK_AWARD_DETAIL_TYPE
    FOREIGN KEY (award_type_code)
    REFERENCES dbo.AWARD_TYPE (award_type_code)
go
GRANT REFERENCES ON dbo.AWARD_TYPE TO eqa_user
go
GRANT SELECT ON dbo.AWARD_TYPE TO eqa_user
go
GRANT SELECT ON dbo.AWARD_TYPE TO read_only
go
GRANT SELECT ON dbo.AWARD_TYPE TO rma_users
go
GRANT INSERT ON dbo.AWARD_TYPE TO eqa_user
go
GRANT DELETE ON dbo.AWARD_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.AWARD_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.AWARD_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.AWARD_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.AWARD_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.AWARD_TYPE TO eqa_user
go
CREATE TABLE dbo.BATCH_COMMENT
(
    batch_comment_id OBJECT_ID    NOT NULL,
    batch_input_id   OBJECT_ID    NOT NULL,
    comment          varchar(255) NOT NULL,
    sortkey          sortkey      NOT NULL,
    audit_tran_id    OBJECT_ID    NOT NULL,
    ts               timestamp    NOT NULL,
    CONSTRAINT PK_BATCH_COMMENT
    PRIMARY KEY NONCLUSTERED (batch_comment_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.BATCH_COMMENT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.BATCH_COMMENT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.BATCH_COMMENT >>>'
go
GRANT REFERENCES ON dbo.BATCH_COMMENT TO eqa_user
go
GRANT SELECT ON dbo.BATCH_COMMENT TO eqa_user
go
GRANT SELECT ON dbo.BATCH_COMMENT TO read_only
go
GRANT SELECT ON dbo.BATCH_COMMENT TO rma_users
go
GRANT INSERT ON dbo.BATCH_COMMENT TO eqa_user
go
GRANT DELETE ON dbo.BATCH_COMMENT TO eqa_user
go
GRANT UPDATE ON dbo.BATCH_COMMENT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.BATCH_COMMENT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.BATCH_COMMENT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.BATCH_COMMENT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.BATCH_COMMENT TO eqa_user
go
CREATE TABLE dbo.BATCH_COUNT_TYPE_CODE
(
    batch_count_type_code   OBJECT_ID NOT NULL,
    batch_summary_type_code OBJECT_ID NOT NULL,
    batch_count_type_desc   descr     NOT NULL,
    display_order           smallint  NULL,
    ts                      timestamp NULL,
    CONSTRAINT PK_BATCH_COUNT_TYPE_CODE
    PRIMARY KEY CLUSTERED (batch_count_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.BATCH_COUNT_TYPE_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.BATCH_COUNT_TYPE_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.BATCH_COUNT_TYPE_CODE >>>'
go
GRANT REFERENCES ON dbo.BATCH_COUNT_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.BATCH_COUNT_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.BATCH_COUNT_TYPE_CODE TO read_only
go
GRANT SELECT ON dbo.BATCH_COUNT_TYPE_CODE TO rma_users
go
GRANT INSERT ON dbo.BATCH_COUNT_TYPE_CODE TO eqa_user
go
GRANT DELETE ON dbo.BATCH_COUNT_TYPE_CODE TO eqa_user
go
GRANT UPDATE ON dbo.BATCH_COUNT_TYPE_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.BATCH_COUNT_TYPE_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.BATCH_COUNT_TYPE_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.BATCH_COUNT_TYPE_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.BATCH_COUNT_TYPE_CODE TO eqa_user
go
CREATE TABLE dbo.BATCH_ERROR_CODE
(
    batch_error_code        OBJECT_ID     NOT NULL,
    batch_error_type_code   numeric(12,0) NOT NULL,
    batch_error_desc        descr         NULL,
    detailed_description    descr         NULL,
    form                    descr         NULL,
    field_name              descr         NULL,
    field_desc              descr         NULL,
    depend                  descr         NULL,
    default_severity        OBJECT_ID     NOT NULL,
    prevent_entry_creation  yn_ind        NOT NULL,
    prevent_qual_check      ny_ind        NOT NULL,
    display_per_learner_ind yn_ind        NOT NULL,
    display_to_provider_ind yn_ind        NOT NULL,
    CONSTRAINT PK_BATCH_ERROR_CODE
    PRIMARY KEY CLUSTERED (batch_error_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.BATCH_ERROR_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.BATCH_ERROR_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.BATCH_ERROR_CODE >>>'
go
ALTER TABLE dbo.BATCH_ERROR_CODE
    ADD CONSTRAINT FK_BATCH_ERROR_CODE_SEVERITY
    FOREIGN KEY (default_severity)
    REFERENCES dbo.SEVERITY (severity_code)
go
GRANT REFERENCES ON dbo.BATCH_ERROR_CODE TO eqa_user
go
GRANT SELECT ON dbo.BATCH_ERROR_CODE TO eqa_user
go
GRANT SELECT ON dbo.BATCH_ERROR_CODE TO read_only
go
GRANT SELECT ON dbo.BATCH_ERROR_CODE TO rma_users
go
GRANT INSERT ON dbo.BATCH_ERROR_CODE TO eqa_user
go
GRANT DELETE ON dbo.BATCH_ERROR_CODE TO eqa_user
go
GRANT UPDATE ON dbo.BATCH_ERROR_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.BATCH_ERROR_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.BATCH_ERROR_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.BATCH_ERROR_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.BATCH_ERROR_CODE TO eqa_user
go
CREATE TABLE dbo.BATCH_ERROR_SEVERITY
(
    batch_error_severity_id   OBJECT_ID NOT NULL,
    batch_type_code           OBJECT_ID NULL,
    batch_error_code          OBJECT_ID NOT NULL,
    severity_code             OBJECT_ID NOT NULL,
    batch_error_severity_desc descr     NOT NULL,
    ts                        timestamp NULL,
    file_type_code            char(3)   DEFAULT "DM1" NOT NULL,
    CONSTRAINT PK_BATCH_ERROR_SEVERITY
    PRIMARY KEY CLUSTERED (batch_error_severity_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.BATCH_ERROR_SEVERITY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.BATCH_ERROR_SEVERITY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.BATCH_ERROR_SEVERITY >>>'
go
ALTER TABLE dbo.BATCH_ERROR_SEVERITY
    ADD CONSTRAINT FK_BATCH_ERROR_SEVERITY_CODE
    FOREIGN KEY (batch_error_code)
    REFERENCES dbo.BATCH_ERROR_CODE (batch_error_code)
go
ALTER TABLE dbo.BATCH_ERROR_SEVERITY
    ADD CONSTRAINT FK_BATCH_ERROR_SEVERITY
    FOREIGN KEY (severity_code)
    REFERENCES dbo.SEVERITY (severity_code)
go
GRANT REFERENCES ON dbo.BATCH_ERROR_SEVERITY TO eqa_user
go
GRANT SELECT ON dbo.BATCH_ERROR_SEVERITY TO eqa_user
go
GRANT SELECT ON dbo.BATCH_ERROR_SEVERITY TO read_only
go
GRANT SELECT ON dbo.BATCH_ERROR_SEVERITY TO rma_users
go
GRANT INSERT ON dbo.BATCH_ERROR_SEVERITY TO eqa_user
go
GRANT DELETE ON dbo.BATCH_ERROR_SEVERITY TO eqa_user
go
GRANT UPDATE ON dbo.BATCH_ERROR_SEVERITY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.BATCH_ERROR_SEVERITY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.BATCH_ERROR_SEVERITY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.BATCH_ERROR_SEVERITY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.BATCH_ERROR_SEVERITY TO eqa_user
go
CREATE TABLE dbo.BATCH_ERROR_TOTAL
(
    batch_error_total_id OBJECT_ID     NOT NULL,
    batch_input_id       OBJECT_ID     NOT NULL,
    batch_error_code     OBJECT_ID     NOT NULL,
    has_details          bit           NOT NULL,
    total                int           NOT NULL,
    ts                   timestamp     NULL,
    version_id           numeric(12,0) NOT NULL,
    severity_code        OBJECT_ID     DEFAULT 0 NOT NULL,
    CONSTRAINT PK_BATCH_ERROR_TOTAL
    PRIMARY KEY NONCLUSTERED (batch_error_total_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.BATCH_ERROR_TOTAL') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.BATCH_ERROR_TOTAL >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.BATCH_ERROR_TOTAL >>>'
go
ALTER TABLE dbo.BATCH_ERROR_TOTAL
    ADD CONSTRAINT FK_BATCH_ERROR_TOTAL_ERROR_CDE
    FOREIGN KEY (batch_error_code)
    REFERENCES dbo.BATCH_ERROR_CODE (batch_error_code)
go
IF OBJECT_ID('BATCH_ERROR_TOTAL') IS NOT NULL
    EXEC sp_bindefault 'dbo.default_0','BATCH_ERROR_TOTAL.version_id'
go
ALTER TABLE dbo.BATCH_ERROR_TOTAL
    ADD CONSTRAINT FK_BATCH_ERROR_TOTAL_SEVERITY
    FOREIGN KEY (severity_code)
    REFERENCES dbo.SEVERITY (severity_code)
go
GRANT REFERENCES ON dbo.BATCH_ERROR_TOTAL TO eqa_user
go
GRANT SELECT ON dbo.BATCH_ERROR_TOTAL TO eqa_user
go
GRANT SELECT ON dbo.BATCH_ERROR_TOTAL TO read_only
go
GRANT SELECT ON dbo.BATCH_ERROR_TOTAL TO rma_users
go
GRANT INSERT ON dbo.BATCH_ERROR_TOTAL TO eqa_user
go
GRANT DELETE ON dbo.BATCH_ERROR_TOTAL TO eqa_user
go
GRANT UPDATE ON dbo.BATCH_ERROR_TOTAL TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.BATCH_ERROR_TOTAL TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.BATCH_ERROR_TOTAL TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.BATCH_ERROR_TOTAL TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.BATCH_ERROR_TOTAL TO eqa_user
go
CREATE TABLE dbo.BATCH_ERROR_TYPE_CODE
(
    batch_error_type_code numeric(12,0) NOT NULL,
    ts                    timestamp     NULL,
    batch_error_type_desc varchar(255)  DEFAULT '' NOT NULL,
    CONSTRAINT PK_BATCH_ERROR_TYPE_CODE
    PRIMARY KEY CLUSTERED (batch_error_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.BATCH_ERROR_TYPE_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.BATCH_ERROR_TYPE_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.BATCH_ERROR_TYPE_CODE >>>'
go
ALTER TABLE dbo.BATCH_ERROR_CODE
    ADD CONSTRAINT FK_BATCH_ERROR_TYPE_CODE
    FOREIGN KEY (batch_error_type_code)
    REFERENCES dbo.BATCH_ERROR_TYPE_CODE (batch_error_type_code)
go
GRANT REFERENCES ON dbo.BATCH_ERROR_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.BATCH_ERROR_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.BATCH_ERROR_TYPE_CODE TO read_only
go
GRANT SELECT ON dbo.BATCH_ERROR_TYPE_CODE TO rma_users
go
GRANT INSERT ON dbo.BATCH_ERROR_TYPE_CODE TO eqa_user
go
GRANT DELETE ON dbo.BATCH_ERROR_TYPE_CODE TO eqa_user
go
GRANT UPDATE ON dbo.BATCH_ERROR_TYPE_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.BATCH_ERROR_TYPE_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.BATCH_ERROR_TYPE_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.BATCH_ERROR_TYPE_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.BATCH_ERROR_TYPE_CODE TO eqa_user
go
CREATE TABLE dbo.BATCH_FILE_TYPE_CODE
(
    file_type_code       char(3)       NOT NULL,
    batch_type_code      numeric(12,0) NOT NULL,
    batch_file_type_desc varchar(255)  NOT NULL,
    CONSTRAINT PK_BATCH_FILE_TYPE_CODE
    PRIMARY KEY CLUSTERED (file_type_code),
    CONSTRAINT FILE_TYPE_UQ_BATCH_TYPE
    UNIQUE NONCLUSTERED (file_type_code,batch_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.BATCH_FILE_TYPE_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.BATCH_FILE_TYPE_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.BATCH_FILE_TYPE_CODE >>>'
go
ALTER TABLE dbo.BATCH_ERROR_SEVERITY
    ADD CONSTRAINT FK_FILE_TYPE
    FOREIGN KEY (file_type_code,batch_type_code)
    REFERENCES dbo.BATCH_FILE_TYPE_CODE (file_type_code,batch_type_code)
go
GRANT REFERENCES ON dbo.BATCH_FILE_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.BATCH_FILE_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.BATCH_FILE_TYPE_CODE TO read_only
go
GRANT SELECT ON dbo.BATCH_FILE_TYPE_CODE TO rma_users
go
GRANT INSERT ON dbo.BATCH_FILE_TYPE_CODE TO eqa_user
go
GRANT DELETE ON dbo.BATCH_FILE_TYPE_CODE TO eqa_user
go
GRANT UPDATE ON dbo.BATCH_FILE_TYPE_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.BATCH_FILE_TYPE_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.BATCH_FILE_TYPE_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.BATCH_FILE_TYPE_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.BATCH_FILE_TYPE_CODE TO eqa_user
go
CREATE TABLE dbo.BATCH_INPUT
(
    batch_input_id             OBJECT_ID     NOT NULL,
    batch_type_code            OBJECT_ID     NOT NULL,
    parent_id                  OBJECT_ID     NULL,
    provider_id                OBJECT_ID     NULL,
    location_id                number_2      NULL,
    source_file_name           varchar(255)  NULL,
    number                     OBJECT_ID     NOT NULL,
    contact_name               descr         NULL,
    contact_email              varchar(255)  NULL,
    address_line_1             varchar(32)   NULL,
    address_line_2             varchar(32)   NULL,
    address_line_3             varchar(32)   NULL,
    address_line_4             varchar(32)   NULL,
    phone_number               varchar(16)   NULL,
    assessing_provider_id      OBJECT_ID     NULL,
    assessing_location_id      number_2      NULL,
    year                       numeric(18,0) NOT NULL,
    hook_on_count              int           NULL,
    hook_on_amount_paid        money         NULL,
    total_credits              int           NULL,
    total_payment_amount       money         NULL,
    receipt_number             varchar(255)  NULL,
    receipt_date               datetime      NULL,
    date_created               datetime      NOT NULL,
    entry_form_number          numeric(18,0) NULL,
    subject_standard_count     numeric(18,0) NULL,
    ts                         timestamp     NOT NULL,
    file_header_date           datetime      NULL,
    audit_tran_id              numeric(12,0) NOT NULL,
    net_balance                amt           NULL,
    software_id                OBJECT_ID     NULL,
    certificate_request_count  int           NULL,
    verification_request_count int           NULL,
    status_check_request_count int           NULL,
    file_type_code             varchar(3)    NULL,
    certificate_amount_paid    money         NULL,
    verification_amount_paid   money         NULL,
    status_check_amount_paid   money         NULL,
    has_partial_matches        ny_ind        NOT NULL,
    provider_reference         varchar(12)   NULL,
    web_publish_ind            yn_ind        NOT NULL,
    no_transfer_to_finance_ind ny_ind        NOT NULL,
    web_publish_reason         descr         NULL,
    credit_amount_paid         money         NULL,
    software_version           varchar(255)  NULL,
    CONSTRAINT PK_BATCH_INPUT
    PRIMARY KEY CLUSTERED (batch_input_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.BATCH_INPUT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.BATCH_INPUT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.BATCH_INPUT >>>'
go
ALTER TABLE dbo.BATCH_INPUT
    ADD CONSTRAINT FK_BATCH_INPUT_PROVIDER
    FOREIGN KEY (provider_id,location_id)
    REFERENCES dbo.PROVIDER (moe_provider_id,location)
go
ALTER TABLE dbo.BATCH_COMMENT
    ADD CONSTRAINT FK_BATCH_COMMENT_BATCH_INPUT
    FOREIGN KEY (batch_input_id)
    REFERENCES dbo.BATCH_INPUT (batch_input_id)
go
ALTER TABLE dbo.BATCH_ERROR_TOTAL
    ADD CONSTRAINT FK_BATCH_ERROR_TATAL_BATCH_INP
    FOREIGN KEY (batch_input_id)
    REFERENCES dbo.BATCH_INPUT (batch_input_id)
go
ALTER TABLE dbo.BATCH_INPUT
    ADD CONSTRAINT FK_BATCH_INPUT_PARENT_BATCH
    FOREIGN KEY (parent_id)
    REFERENCES dbo.BATCH_INPUT (batch_input_id)
go
GRANT REFERENCES ON dbo.BATCH_INPUT TO eqa_user
go
GRANT SELECT ON dbo.BATCH_INPUT TO eqa_user
go
GRANT SELECT ON dbo.BATCH_INPUT TO read_only
go
GRANT SELECT ON dbo.BATCH_INPUT TO rma_users
go
GRANT INSERT ON dbo.BATCH_INPUT TO eqa_user
go
GRANT DELETE ON dbo.BATCH_INPUT TO eqa_user
go
GRANT UPDATE ON dbo.BATCH_INPUT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.BATCH_INPUT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.BATCH_INPUT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.BATCH_INPUT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.BATCH_INPUT TO eqa_user
go
CREATE TABLE dbo.BATCH_PROFILE
(
    batch_name              name          NOT NULL,
    thread_error_count      int           NOT NULL,
    thread_normal_end_count int           NOT NULL,
    thread_requested_count  int           NOT NULL,
    thread_active_count     int           NOT NULL,
    message                 varchar(255)  NULL,
    last_poll_time          decimal(20,0) NOT NULL,
    state                   int           NOT NULL,
    thread_limit            int           NOT NULL,
    start_time              datetime      NULL,
    end_time                datetime      NULL,
    stage                   int           NOT NULL,
    ts                      timestamp     NOT NULL,
    CONSTRAINT PK_BATCH_PROFILE
    PRIMARY KEY CLUSTERED (batch_name)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.BATCH_PROFILE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.BATCH_PROFILE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.BATCH_PROFILE >>>'
go
GRANT REFERENCES ON dbo.BATCH_PROFILE TO eqa_user
go
GRANT SELECT ON dbo.BATCH_PROFILE TO eqa_user
go
GRANT SELECT ON dbo.BATCH_PROFILE TO read_only
go
GRANT SELECT ON dbo.BATCH_PROFILE TO rma_users
go
GRANT INSERT ON dbo.BATCH_PROFILE TO eqa_user
go
GRANT DELETE ON dbo.BATCH_PROFILE TO eqa_user
go
GRANT UPDATE ON dbo.BATCH_PROFILE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.BATCH_PROFILE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.BATCH_PROFILE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.BATCH_PROFILE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.BATCH_PROFILE TO eqa_user
go
CREATE TABLE dbo.BATCH_STATUS
(
    batch_status_id        OBJECT_ID     NOT NULL,
    batch_status_type_code OBJECT_ID     NOT NULL,
    creator_id             usr           NOT NULL,
    comment                descr         NULL,
    date_created           datetime      NOT NULL,
    ts                     timestamp     NULL,
    batch_input_id         numeric(12,0) DEFAULT 1 NOT NULL,
    active_ind             bit           DEFAULT 1 NOT NULL,
    version_id             numeric(12,0) DEFAULT 0 NOT NULL,
    CONSTRAINT PK_BATCH_STATUS
    PRIMARY KEY CLUSTERED (batch_status_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.BATCH_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.BATCH_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.BATCH_STATUS >>>'
go
ALTER TABLE dbo.BATCH_STATUS
    ADD CONSTRAINT FK_BATCH_STATUS_BATCH_INPUT
    FOREIGN KEY (batch_input_id)
    REFERENCES dbo.BATCH_INPUT (batch_input_id)
go
GRANT REFERENCES ON dbo.BATCH_STATUS TO eqa_user
go
GRANT SELECT ON dbo.BATCH_STATUS TO eqa_user
go
GRANT SELECT ON dbo.BATCH_STATUS TO read_only
go
GRANT SELECT ON dbo.BATCH_STATUS TO rma_users
go
GRANT INSERT ON dbo.BATCH_STATUS TO eqa_user
go
GRANT DELETE ON dbo.BATCH_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.BATCH_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.BATCH_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.BATCH_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.BATCH_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.BATCH_STATUS TO eqa_user
go
CREATE TABLE dbo.BATCH_STATUS_MAP
(
    map_id          OBJECT_ID     NOT NULL,
    provider_id     OBJECT_ID     NULL,
    batch_type_code OBJECT_ID     NOT NULL,
    from_status     OBJECT_ID     NOT NULL,
    to_status       OBJECT_ID     NOT NULL,
    location_id     number_2      NULL,
    ts              timestamp     NULL,
    version_id      numeric(12,0) DEFAULT 0 NOT NULL,
    CONSTRAINT PK_BATCH_STATUS_MAP
    PRIMARY KEY CLUSTERED (map_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.BATCH_STATUS_MAP') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.BATCH_STATUS_MAP >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.BATCH_STATUS_MAP >>>'
go
ALTER TABLE dbo.BATCH_STATUS_MAP
    ADD CONSTRAINT FK_BATCH_STATUS_MAP_PROVIDER
    FOREIGN KEY (provider_id,location_id)
    REFERENCES dbo.PROVIDER (moe_provider_id,location)
go
GRANT REFERENCES ON dbo.BATCH_STATUS_MAP TO eqa_user
go
GRANT SELECT ON dbo.BATCH_STATUS_MAP TO eqa_user
go
GRANT SELECT ON dbo.BATCH_STATUS_MAP TO read_only
go
GRANT SELECT ON dbo.BATCH_STATUS_MAP TO rma_users
go
GRANT INSERT ON dbo.BATCH_STATUS_MAP TO eqa_user
go
GRANT DELETE ON dbo.BATCH_STATUS_MAP TO eqa_user
go
GRANT UPDATE ON dbo.BATCH_STATUS_MAP TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.BATCH_STATUS_MAP TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.BATCH_STATUS_MAP TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.BATCH_STATUS_MAP TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.BATCH_STATUS_MAP TO eqa_user
go
CREATE TABLE dbo.BATCH_STATUS_TYPE_CODE
(
    batch_status_type_code OBJECT_ID NOT NULL,
    batch_status_type_desc descr     NOT NULL,
    ts                     timestamp NULL,
    sortkey                int       DEFAULT 1 NOT NULL,
    CONSTRAINT PK_BATCH_STATUS_TYPE_CODE
    PRIMARY KEY CLUSTERED (batch_status_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.BATCH_STATUS_TYPE_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.BATCH_STATUS_TYPE_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.BATCH_STATUS_TYPE_CODE >>>'
go
ALTER TABLE dbo.BATCH_STATUS
    ADD CONSTRAINT FK_BATCH_STATUS_TYPE_CODE
    FOREIGN KEY (batch_status_type_code)
    REFERENCES dbo.BATCH_STATUS_TYPE_CODE (batch_status_type_code)
go
ALTER TABLE dbo.BATCH_STATUS_MAP
    ADD CONSTRAINT FK_MAP_REF_BATCH_STAT_TC_TO
    FOREIGN KEY (to_status)
    REFERENCES dbo.BATCH_STATUS_TYPE_CODE (batch_status_type_code)
go
ALTER TABLE dbo.BATCH_STATUS_MAP
    ADD CONSTRAINT FK_MAP_REF_BATCH_STAT_TC_FROM
    FOREIGN KEY (from_status)
    REFERENCES dbo.BATCH_STATUS_TYPE_CODE (batch_status_type_code)
go
GRANT REFERENCES ON dbo.BATCH_STATUS_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.BATCH_STATUS_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.BATCH_STATUS_TYPE_CODE TO read_only
go
GRANT SELECT ON dbo.BATCH_STATUS_TYPE_CODE TO rma_users
go
GRANT INSERT ON dbo.BATCH_STATUS_TYPE_CODE TO eqa_user
go
GRANT DELETE ON dbo.BATCH_STATUS_TYPE_CODE TO eqa_user
go
GRANT UPDATE ON dbo.BATCH_STATUS_TYPE_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.BATCH_STATUS_TYPE_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.BATCH_STATUS_TYPE_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.BATCH_STATUS_TYPE_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.BATCH_STATUS_TYPE_CODE TO eqa_user
go
CREATE TABLE dbo.BATCH_SUMMARY_EXCLUSION
(
    batch_summary_exclusion_id OBJECT_ID NOT NULL,
    batch_type_code            OBJECT_ID NOT NULL,
    batch_count_type_code      OBJECT_ID NOT NULL,
    active_ind                 yn_ind    NOT NULL,
    version_id                 OBJECT_ID NOT NULL,
    ts                         timestamp NOT NULL,
    CONSTRAINT PK_BATCH_SUMMARY_EXCLUSION
    PRIMARY KEY CLUSTERED (batch_summary_exclusion_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.BATCH_SUMMARY_EXCLUSION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.BATCH_SUMMARY_EXCLUSION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.BATCH_SUMMARY_EXCLUSION >>>'
go
ALTER TABLE dbo.BATCH_SUMMARY_EXCLUSION
    ADD CONSTRAINT FK_SUMMARY_EXCL_COUNT_TYPE
    FOREIGN KEY (batch_count_type_code)
    REFERENCES dbo.BATCH_COUNT_TYPE_CODE (batch_count_type_code)
go
GRANT REFERENCES ON dbo.BATCH_SUMMARY_EXCLUSION TO eqa_user
go
GRANT SELECT ON dbo.BATCH_SUMMARY_EXCLUSION TO eqa_user
go
GRANT SELECT ON dbo.BATCH_SUMMARY_EXCLUSION TO read_only
go
GRANT SELECT ON dbo.BATCH_SUMMARY_EXCLUSION TO rma_users
go
GRANT INSERT ON dbo.BATCH_SUMMARY_EXCLUSION TO eqa_user
go
GRANT DELETE ON dbo.BATCH_SUMMARY_EXCLUSION TO eqa_user
go
GRANT UPDATE ON dbo.BATCH_SUMMARY_EXCLUSION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.BATCH_SUMMARY_EXCLUSION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.BATCH_SUMMARY_EXCLUSION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.BATCH_SUMMARY_EXCLUSION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.BATCH_SUMMARY_EXCLUSION TO eqa_user
go
CREATE TABLE dbo.BATCH_SUMMARY_TOTAL
(
    batch_summary_total_id OBJECT_ID     NOT NULL,
    batch_input_id         OBJECT_ID     NOT NULL,
    batch_count_type_code  OBJECT_ID     NOT NULL,
    total                  int           NULL,
    ts                     timestamp     NULL,
    version_id             numeric(12,0) DEFAULT 0 NOT NULL,
    CONSTRAINT PK_BATCH_SUMMARY_TOTAL
    PRIMARY KEY NONCLUSTERED (batch_summary_total_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.BATCH_SUMMARY_TOTAL') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.BATCH_SUMMARY_TOTAL >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.BATCH_SUMMARY_TOTAL >>>'
go
ALTER TABLE dbo.BATCH_SUMMARY_TOTAL
    ADD CONSTRAINT FK_BATCH_SUMM_TOTAL_COUNT_TYPE
    FOREIGN KEY (batch_count_type_code)
    REFERENCES dbo.BATCH_COUNT_TYPE_CODE (batch_count_type_code)
go
ALTER TABLE dbo.BATCH_SUMMARY_TOTAL
    ADD CONSTRAINT FK_BATCH_SUMM_TOTAL_BATCH_INP
    FOREIGN KEY (batch_input_id)
    REFERENCES dbo.BATCH_INPUT (batch_input_id)
go
GRANT REFERENCES ON dbo.BATCH_SUMMARY_TOTAL TO eqa_user
go
GRANT SELECT ON dbo.BATCH_SUMMARY_TOTAL TO eqa_user
go
GRANT SELECT ON dbo.BATCH_SUMMARY_TOTAL TO read_only
go
GRANT SELECT ON dbo.BATCH_SUMMARY_TOTAL TO rma_users
go
GRANT INSERT ON dbo.BATCH_SUMMARY_TOTAL TO eqa_user
go
GRANT DELETE ON dbo.BATCH_SUMMARY_TOTAL TO eqa_user
go
GRANT UPDATE ON dbo.BATCH_SUMMARY_TOTAL TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.BATCH_SUMMARY_TOTAL TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.BATCH_SUMMARY_TOTAL TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.BATCH_SUMMARY_TOTAL TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.BATCH_SUMMARY_TOTAL TO eqa_user
go
CREATE TABLE dbo.BATCH_SUMMARY_TYPE_CODE
(
    batch_summary_type_code OBJECT_ID    NOT NULL,
    batch_summary_type_desc varchar(255) NOT NULL,
    ts                      timestamp    NULL,
    CONSTRAINT PK_BATCH_SUMMARY_TYPE_CODE
    PRIMARY KEY CLUSTERED (batch_summary_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.BATCH_SUMMARY_TYPE_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.BATCH_SUMMARY_TYPE_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.BATCH_SUMMARY_TYPE_CODE >>>'
go
ALTER TABLE dbo.BATCH_COUNT_TYPE_CODE
    ADD CONSTRAINT FK_BAT_COUNT_SUMM_COUNT_TYPE
    FOREIGN KEY (batch_summary_type_code)
    REFERENCES dbo.BATCH_SUMMARY_TYPE_CODE (batch_summary_type_code)
go
GRANT REFERENCES ON dbo.BATCH_SUMMARY_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.BATCH_SUMMARY_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.BATCH_SUMMARY_TYPE_CODE TO read_only
go
GRANT SELECT ON dbo.BATCH_SUMMARY_TYPE_CODE TO rma_users
go
GRANT INSERT ON dbo.BATCH_SUMMARY_TYPE_CODE TO eqa_user
go
GRANT DELETE ON dbo.BATCH_SUMMARY_TYPE_CODE TO eqa_user
go
GRANT UPDATE ON dbo.BATCH_SUMMARY_TYPE_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.BATCH_SUMMARY_TYPE_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.BATCH_SUMMARY_TYPE_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.BATCH_SUMMARY_TYPE_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.BATCH_SUMMARY_TYPE_CODE TO eqa_user
go
CREATE TABLE dbo.BATCH_TYPE_CODE
(
    batch_type_code OBJECT_ID NOT NULL,
    batch_type_desc descr     NOT NULL,
    is_secondary    yn_ind    NOT NULL,
    active_ind      yn_ind    NOT NULL,
    ts              timestamp NOT NULL,
    CONSTRAINT PK_BATCH_TYPE_CODE
    PRIMARY KEY CLUSTERED (batch_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.BATCH_TYPE_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.BATCH_TYPE_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.BATCH_TYPE_CODE >>>'
go
ALTER TABLE dbo.BATCH_ERROR_SEVERITY
    ADD CONSTRAINT FK_BATCH_ERROR_SEVERITY_TYPE
    FOREIGN KEY (batch_type_code)
    REFERENCES dbo.BATCH_TYPE_CODE (batch_type_code)
go
ALTER TABLE dbo.BATCH_FILE_TYPE_CODE
    ADD CONSTRAINT FK_BATCH_FILE_TYPE_BATCH_TYPE
    FOREIGN KEY (batch_type_code)
    REFERENCES dbo.BATCH_TYPE_CODE (batch_type_code)
go
ALTER TABLE dbo.BATCH_INPUT
    ADD CONSTRAINT FK_BATCH_INP_BATCH_TYPE_CODE
    FOREIGN KEY (batch_type_code)
    REFERENCES dbo.BATCH_TYPE_CODE (batch_type_code)
go
ALTER TABLE dbo.BATCH_STATUS_MAP
    ADD CONSTRAINT FK_BATCH_STATUS_MAP_BATCH_TYP
    FOREIGN KEY (batch_type_code)
    REFERENCES dbo.BATCH_TYPE_CODE (batch_type_code)
go
ALTER TABLE dbo.BATCH_SUMMARY_EXCLUSION
    ADD CONSTRAINT FK_SUMMARY_EXCL_BATCH_TYPE
    FOREIGN KEY (batch_type_code)
    REFERENCES dbo.BATCH_TYPE_CODE (batch_type_code)
go
GRANT REFERENCES ON dbo.BATCH_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.BATCH_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.BATCH_TYPE_CODE TO read_only
go
GRANT SELECT ON dbo.BATCH_TYPE_CODE TO rma_users
go
GRANT INSERT ON dbo.BATCH_TYPE_CODE TO eqa_user
go
GRANT DELETE ON dbo.BATCH_TYPE_CODE TO eqa_user
go
GRANT UPDATE ON dbo.BATCH_TYPE_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.BATCH_TYPE_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.BATCH_TYPE_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.BATCH_TYPE_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.BATCH_TYPE_CODE TO eqa_user
go
CREATE TABLE dbo.BOOKLET_ACTION_TYPE
(
    booklet_action_type      code_2 NOT NULL,
    booklet_action_type_desc descr  NOT NULL,
    active_ind               yn_ind NOT NULL,
    CONSTRAINT PK_BOOKLET_ACTION_TYPE
    PRIMARY KEY CLUSTERED (booklet_action_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.BOOKLET_ACTION_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.BOOKLET_ACTION_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.BOOKLET_ACTION_TYPE >>>'
go
GRANT REFERENCES ON dbo.BOOKLET_ACTION_TYPE TO eqa_user
go
GRANT SELECT ON dbo.BOOKLET_ACTION_TYPE TO eqa_user
go
GRANT SELECT ON dbo.BOOKLET_ACTION_TYPE TO read_only
go
GRANT SELECT ON dbo.BOOKLET_ACTION_TYPE TO rma_users
go
GRANT INSERT ON dbo.BOOKLET_ACTION_TYPE TO eqa_user
go
GRANT DELETE ON dbo.BOOKLET_ACTION_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.BOOKLET_ACTION_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.BOOKLET_ACTION_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.BOOKLET_ACTION_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.BOOKLET_ACTION_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.BOOKLET_ACTION_TYPE TO eqa_user
go
CREATE TABLE dbo.BOOKLET_PROCESS_TYPE
(
    booklet_process_type        code_2 NOT NULL,
    booklet_process_description descr  NULL,
    active_ind                  yn_ind NOT NULL,
    CONSTRAINT PK_BOOKLET_PROCESS_TYPE
    PRIMARY KEY CLUSTERED (booklet_process_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.BOOKLET_PROCESS_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.BOOKLET_PROCESS_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.BOOKLET_PROCESS_TYPE >>>'
go
GRANT REFERENCES ON dbo.BOOKLET_PROCESS_TYPE TO eqa_user
go
GRANT SELECT ON dbo.BOOKLET_PROCESS_TYPE TO eqa_user
go
GRANT SELECT ON dbo.BOOKLET_PROCESS_TYPE TO read_only
go
GRANT SELECT ON dbo.BOOKLET_PROCESS_TYPE TO rma_users
go
GRANT INSERT ON dbo.BOOKLET_PROCESS_TYPE TO eqa_user
go
GRANT DELETE ON dbo.BOOKLET_PROCESS_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.BOOKLET_PROCESS_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.BOOKLET_PROCESS_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.BOOKLET_PROCESS_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.BOOKLET_PROCESS_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.BOOKLET_PROCESS_TYPE TO eqa_user
go
CREATE TABLE dbo.BOOKLET_RETRIEVAL
(
    booklet_retrieval_id OBJECT_ID    NOT NULL,
    entry_id             OBJECT_ID    NOT NULL,
    booklet_action_type  code_2       NOT NULL,
    booklet_process_type code_2       NOT NULL,
    marker_initiated_ind ny_ind       NOT NULL,
    comments             varchar(255) NULL,
    active_ind           yn_ind       NOT NULL,
    audit_tran_id        OBJECT_ID    NOT NULL,
    ts                   timestamp    NOT NULL,
    user_id              varchar(64)  NULL,
    create_date          datetime     NOT NULL,
    CONSTRAINT PK_BOOKLET_RETRIEVAL
    PRIMARY KEY CLUSTERED (booklet_retrieval_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.BOOKLET_RETRIEVAL') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.BOOKLET_RETRIEVAL >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.BOOKLET_RETRIEVAL >>>'
go
ALTER TABLE dbo.BOOKLET_RETRIEVAL
    ADD CONSTRAINT FK_BOOKLET_RETRIEVAL_ACTION_TP
    FOREIGN KEY (booklet_action_type)
    REFERENCES dbo.BOOKLET_ACTION_TYPE (booklet_action_type)
go
ALTER TABLE dbo.BOOKLET_RETRIEVAL
    ADD CONSTRAINT FK_BOOKLET_RETRIEVAL_PROC_TP
    FOREIGN KEY (booklet_process_type)
    REFERENCES dbo.BOOKLET_PROCESS_TYPE (booklet_process_type)
go
GRANT REFERENCES ON dbo.BOOKLET_RETRIEVAL TO eqa_user
go
GRANT SELECT ON dbo.BOOKLET_RETRIEVAL TO eqa_user
go
GRANT SELECT ON dbo.BOOKLET_RETRIEVAL TO read_only
go
GRANT SELECT ON dbo.BOOKLET_RETRIEVAL TO rma_users
go
GRANT INSERT ON dbo.BOOKLET_RETRIEVAL TO eqa_user
go
GRANT DELETE ON dbo.BOOKLET_RETRIEVAL TO eqa_user
go
GRANT UPDATE ON dbo.BOOKLET_RETRIEVAL TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.BOOKLET_RETRIEVAL TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.BOOKLET_RETRIEVAL TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.BOOKLET_RETRIEVAL TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.BOOKLET_RETRIEVAL TO eqa_user
go
CREATE TABLE dbo.BREACH_CATEGORY
(
    breach_category           code_2       NOT NULL,
    breach_category_desc      varchar(255) NOT NULL,
    breach_category_long_desc varchar(255) NOT NULL,
    active_ind                yn_ind       NOT NULL,
    CONSTRAINT PK_BREACH_CATEGORY
    PRIMARY KEY CLUSTERED (breach_category)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.BREACH_CATEGORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.BREACH_CATEGORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.BREACH_CATEGORY >>>'
go
GRANT REFERENCES ON dbo.BREACH_CATEGORY TO eqa_user
go
GRANT SELECT ON dbo.BREACH_CATEGORY TO eqa_user
go
GRANT SELECT ON dbo.BREACH_CATEGORY TO read_only
go
GRANT SELECT ON dbo.BREACH_CATEGORY TO rma_users
go
GRANT INSERT ON dbo.BREACH_CATEGORY TO eqa_user
go
GRANT DELETE ON dbo.BREACH_CATEGORY TO eqa_user
go
GRANT UPDATE ON dbo.BREACH_CATEGORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.BREACH_CATEGORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.BREACH_CATEGORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.BREACH_CATEGORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.BREACH_CATEGORY TO eqa_user
go
CREATE TABLE dbo.BUILD_TAG
(
    server     varchar(30) NOT NULL,
    db         varchar(30) NOT NULL,
    build_date datetime    NOT NULL,
    loaded     datetime    NOT NULL,
    app_name   varchar(30) NOT NULL,
    build_tag  varchar(30) NOT NULL,
    CONSTRAINT PK_BUILD_TAG
    PRIMARY KEY NONCLUSTERED (build_tag)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.BUILD_TAG') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.BUILD_TAG >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.BUILD_TAG >>>'
go
GRANT REFERENCES ON dbo.BUILD_TAG TO eqa_user
go
GRANT SELECT ON dbo.BUILD_TAG TO eqa_user
go
GRANT SELECT ON dbo.BUILD_TAG TO read_only
go
GRANT SELECT ON dbo.BUILD_TAG TO rma_users
go
GRANT INSERT ON dbo.BUILD_TAG TO eqa_user
go
GRANT DELETE ON dbo.BUILD_TAG TO eqa_user
go
GRANT UPDATE ON dbo.BUILD_TAG TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.BUILD_TAG TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.BUILD_TAG TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.BUILD_TAG TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.BUILD_TAG TO eqa_user
go
CREATE TABLE dbo.CASE_STATUS
(
    case_status      code_2  NOT NULL,
    case_status_desc descr   NOT NULL,
    active_ind       yn_ind  NOT NULL,
    sortkey          sortkey NULL,
    CONSTRAINT PK_CASE_STATUS
    PRIMARY KEY CLUSTERED (case_status)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CASE_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CASE_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CASE_STATUS >>>'
go
GRANT REFERENCES ON dbo.CASE_STATUS TO eqa_user
go
GRANT SELECT ON dbo.CASE_STATUS TO eqa_user
go
GRANT SELECT ON dbo.CASE_STATUS TO read_only
go
GRANT SELECT ON dbo.CASE_STATUS TO rma_users
go
GRANT INSERT ON dbo.CASE_STATUS TO eqa_user
go
GRANT DELETE ON dbo.CASE_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.CASE_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CASE_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CASE_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CASE_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CASE_STATUS TO eqa_user
go
CREATE TABLE dbo.CASE_TYPE
(
    case_type      code_2  NOT NULL,
    case_type_desc descr   NOT NULL,
    active_ind     yn_ind  NOT NULL,
    sortkey        sortkey NULL,
    CONSTRAINT PK_CASE_TYPE
    PRIMARY KEY CLUSTERED (case_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CASE_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CASE_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CASE_TYPE >>>'
go
GRANT REFERENCES ON dbo.CASE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.CASE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.CASE_TYPE TO read_only
go
GRANT SELECT ON dbo.CASE_TYPE TO rma_users
go
GRANT INSERT ON dbo.CASE_TYPE TO eqa_user
go
GRANT DELETE ON dbo.CASE_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.CASE_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CASE_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CASE_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CASE_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CASE_TYPE TO eqa_user
go
CREATE TABLE dbo.CASE_TYPE_STATUS_COMBO
(
    case_type   code_2 NOT NULL,
    case_status code_2 NOT NULL,
    active_ind  yn_ind NOT NULL,
    CONSTRAINT PK_CASE_TYPE_STATUS_COMBO
    PRIMARY KEY CLUSTERED (case_type,case_status)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.CASE_TYPE_STATUS_COMBO') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CASE_TYPE_STATUS_COMBO >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CASE_TYPE_STATUS_COMBO >>>'
go
ALTER TABLE dbo.CASE_TYPE_STATUS_COMBO
    ADD CONSTRAINT FK_CASE_TYPE_STATUS_COM_STATUS
    FOREIGN KEY (case_status)
    REFERENCES dbo.CASE_STATUS (case_status)
go
ALTER TABLE dbo.CASE_TYPE_STATUS_COMBO
    ADD CONSTRAINT FK_CASE_TYPE_STATUS_COM_TYPE
    FOREIGN KEY (case_type)
    REFERENCES dbo.CASE_TYPE (case_type)
go
GRANT REFERENCES ON dbo.CASE_TYPE_STATUS_COMBO TO eqa_user
go
GRANT SELECT ON dbo.CASE_TYPE_STATUS_COMBO TO eqa_user
go
GRANT SELECT ON dbo.CASE_TYPE_STATUS_COMBO TO read_only
go
GRANT SELECT ON dbo.CASE_TYPE_STATUS_COMBO TO rma_users
go
GRANT INSERT ON dbo.CASE_TYPE_STATUS_COMBO TO eqa_user
go
GRANT DELETE ON dbo.CASE_TYPE_STATUS_COMBO TO eqa_user
go
GRANT UPDATE ON dbo.CASE_TYPE_STATUS_COMBO TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CASE_TYPE_STATUS_COMBO TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CASE_TYPE_STATUS_COMBO TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CASE_TYPE_STATUS_COMBO TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CASE_TYPE_STATUS_COMBO TO eqa_user
go
CREATE TABLE dbo.CERTIFICATE_PRINT_STATUS_CODE
(
    certificate_print_status_code code_2      NOT NULL,
    certificate_print_status_desc descr_short NOT NULL,
    active_ind                    yn_ind      NOT NULL,
    CONSTRAINT PK_CERTIFICATE_PRINT_STATUS_CODE
    PRIMARY KEY CLUSTERED (certificate_print_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CERTIFICATE_PRINT_STATUS_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CERTIFICATE_PRINT_STATUS_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CERTIFICATE_PRINT_STATUS_CODE >>>'
go
GRANT REFERENCES ON dbo.CERTIFICATE_PRINT_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.CERTIFICATE_PRINT_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.CERTIFICATE_PRINT_STATUS_CODE TO read_only
go
GRANT SELECT ON dbo.CERTIFICATE_PRINT_STATUS_CODE TO rma_users
go
GRANT INSERT ON dbo.CERTIFICATE_PRINT_STATUS_CODE TO eqa_user
go
GRANT DELETE ON dbo.CERTIFICATE_PRINT_STATUS_CODE TO eqa_user
go
GRANT UPDATE ON dbo.CERTIFICATE_PRINT_STATUS_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CERTIFICATE_PRINT_STATUS_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CERTIFICATE_PRINT_STATUS_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CERTIFICATE_PRINT_STATUS_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CERTIFICATE_PRINT_STATUS_CODE TO eqa_user
go
CREATE TABLE dbo.CERTIFICATE_TYPE
(
    certificate_type_code char(3)      NOT NULL,
    certificate_type_desc varchar(255) NOT NULL,
    active_ind            smallint     NOT NULL,
    CONSTRAINT PK_CERTIFICATE_TYPE
    PRIMARY KEY CLUSTERED (certificate_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CERTIFICATE_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CERTIFICATE_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CERTIFICATE_TYPE >>>'
go
GRANT REFERENCES ON dbo.CERTIFICATE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.CERTIFICATE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.CERTIFICATE_TYPE TO read_only
go
GRANT SELECT ON dbo.CERTIFICATE_TYPE TO rma_users
go
GRANT INSERT ON dbo.CERTIFICATE_TYPE TO eqa_user
go
GRANT DELETE ON dbo.CERTIFICATE_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.CERTIFICATE_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CERTIFICATE_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CERTIFICATE_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CERTIFICATE_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CERTIFICATE_TYPE TO eqa_user
go
CREATE TABLE dbo.CE_CREDIT_ALLOCATION_CODE
(
    ce_credit_allocation_code code_2  NOT NULL,
    ce_credit_allocation_desc descr   NULL,
    sortkey                   sortkey NOT NULL,
    active_ind                yn_ind  NOT NULL,
    CONSTRAINT PK_CE_CREDIT_ALLOCATION_CODE
    PRIMARY KEY CLUSTERED (ce_credit_allocation_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CE_CREDIT_ALLOCATION_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CE_CREDIT_ALLOCATION_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CE_CREDIT_ALLOCATION_CODE >>>'
go
GRANT REFERENCES ON dbo.CE_CREDIT_ALLOCATION_CODE TO eqa_user
go
GRANT SELECT ON dbo.CE_CREDIT_ALLOCATION_CODE TO eqa_user
go
GRANT SELECT ON dbo.CE_CREDIT_ALLOCATION_CODE TO read_only
go
GRANT SELECT ON dbo.CE_CREDIT_ALLOCATION_CODE TO rma_users
go
GRANT INSERT ON dbo.CE_CREDIT_ALLOCATION_CODE TO eqa_user
go
GRANT DELETE ON dbo.CE_CREDIT_ALLOCATION_CODE TO eqa_user
go
GRANT UPDATE ON dbo.CE_CREDIT_ALLOCATION_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CE_CREDIT_ALLOCATION_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CE_CREDIT_ALLOCATION_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CE_CREDIT_ALLOCATION_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CE_CREDIT_ALLOCATION_CODE TO eqa_user
go
CREATE TABLE dbo.CFN_CATEGORY
(
    cfn_catg_id              OBJECT_ID     NOT NULL,
    cfn_depth_code           code_2        NOT NULL,
    cfn_catg_status_code     code_2        NOT NULL,
    cfn_system_code          code_2        NOT NULL,
    primary_language_code    language      NULL,
    alternate_language_code  language      NULL,
    cfn_catg_number          varchar(8)    NULL,
    cfn_catg_name            name          NOT NULL,
    cfn_catg_name_umlauts    name          NOT NULL,
    cfn_catg_name_alt_lang   name          NULL,
    cfn_catg_descr_text      TEXT_STRING   NULL,
    parent_cfn_catg_id       OBJECT_ID     NULL,
    audit_tran_id            OBJECT_ID     NOT NULL,
    ts                       timestamp     NOT NULL,
    bsas_accreditation_level code_2        NULL,
    expire_by_date           datetime      NULL,
    cfn_catg_status_date     datetime      NOT NULL,
    cfn_catg_external_id     varchar(8)    NULL,
    star_excluded_level_code code_2        NULL,
    cfn_catg_notes           varchar(1000) NULL,
    CONSTRAINT PK_CFN_CATEGORY
    PRIMARY KEY CLUSTERED (cfn_catg_id),
    CONSTRAINT CHK_CFN_CATEGORY_BSAS_ACCR_LVL
    CHECK (bsas_accreditation_level in ('01','02','03','04')),
    CONSTRAINT CHK_CFN_CATEGORY_STAR_EXCL_LVL
    CHECK (star_excluded_level_code in ('01','02','03','04'))
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CFN_CATEGORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CFN_CATEGORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CFN_CATEGORY >>>'
go
ALTER TABLE dbo.CFN_CATEGORY
    ADD CONSTRAINT FK_CFN_CATEGORY_PRIMARY_LANG
    FOREIGN KEY (primary_language_code)
    REFERENCES dbo.LANGUAGE (language_code)
go
ALTER TABLE dbo.CFN_CATEGORY
    ADD CONSTRAINT FK_CFN_CATEGORY_ALT_LANGUAGE
    FOREIGN KEY (alternate_language_code)
    REFERENCES dbo.LANGUAGE (language_code)
go
ALTER TABLE dbo.CFN_CATEGORY
    ADD CONSTRAINT FK_CFN_CATE_BSAS_LVL
    FOREIGN KEY (bsas_accreditation_level)
    REFERENCES dbo.LVL (level_code)
go
ALTER TABLE dbo.CFN_CATEGORY
    ADD CONSTRAINT FK_CFN_CATE_STAR_EXCLUDED_LVL
    FOREIGN KEY (star_excluded_level_code)
    REFERENCES dbo.LVL (level_code)
go
ALTER TABLE dbo.ACCREDITED_ITEM
    ADD CONSTRAINT FK_ACRD_ITEM_CFN_CATEGORY
    FOREIGN KEY (cfn_catg_id)
    REFERENCES dbo.CFN_CATEGORY (cfn_catg_id)
go
ALTER TABLE dbo.AMAP_SCOPE
    ADD CONSTRAINT FK_AMAP_SCOPE_CFN
    FOREIGN KEY (cfn_catg_id)
    REFERENCES dbo.CFN_CATEGORY (cfn_catg_id)
go
ALTER TABLE dbo.CFN_CATEGORY
    ADD CONSTRAINT FK_CFN_CATEGORY_PARENT
    FOREIGN KEY (parent_cfn_catg_id)
    REFERENCES dbo.CFN_CATEGORY (cfn_catg_id)
go
GRANT REFERENCES ON dbo.CFN_CATEGORY TO eqa_user
go
GRANT SELECT ON dbo.CFN_CATEGORY TO eqa_user
go
GRANT SELECT ON dbo.CFN_CATEGORY TO read_only
go
GRANT SELECT ON dbo.CFN_CATEGORY TO rma_users
go
GRANT INSERT ON dbo.CFN_CATEGORY TO eqa_user
go
GRANT DELETE ON dbo.CFN_CATEGORY TO eqa_user
go
GRANT UPDATE ON dbo.CFN_CATEGORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CFN_CATEGORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CFN_CATEGORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CFN_CATEGORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CFN_CATEGORY TO eqa_user
go
CREATE TABLE dbo.CFN_CATEGORY_STATUS
(
    cfn_system_code            code_2      NOT NULL,
    cfn_catg_status_code       code_2      NOT NULL,
    cfn_catg_status_desc       descr       NOT NULL,
    cfn_catg_status_short_desc descr_short NOT NULL,
    active_ind                 yn_ind      NOT NULL,
    sortkey                    sortkey     NOT NULL,
    is_proposal_status         ny_ind      NOT NULL,
    CONSTRAINT PK_CFN_CATEGORY_STATUS
    PRIMARY KEY CLUSTERED (cfn_catg_status_code),
    CONSTRAINT AK_CFN_CATEGORY_STATUS
    UNIQUE NONCLUSTERED (cfn_catg_status_code,cfn_system_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CFN_CATEGORY_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CFN_CATEGORY_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CFN_CATEGORY_STATUS >>>'
go
ALTER TABLE dbo.CFN_CATEGORY
    ADD CONSTRAINT FK_CFN_CATEGORY_STATUS
    FOREIGN KEY (cfn_catg_status_code,cfn_system_code)
    REFERENCES dbo.CFN_CATEGORY_STATUS (cfn_catg_status_code,cfn_system_code)
go
GRANT REFERENCES ON dbo.CFN_CATEGORY_STATUS TO eqa_user
go
GRANT SELECT ON dbo.CFN_CATEGORY_STATUS TO eqa_user
go
GRANT SELECT ON dbo.CFN_CATEGORY_STATUS TO read_only
go
GRANT SELECT ON dbo.CFN_CATEGORY_STATUS TO rma_users
go
GRANT INSERT ON dbo.CFN_CATEGORY_STATUS TO eqa_user
go
GRANT DELETE ON dbo.CFN_CATEGORY_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.CFN_CATEGORY_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CFN_CATEGORY_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CFN_CATEGORY_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CFN_CATEGORY_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CFN_CATEGORY_STATUS TO eqa_user
go
CREATE TABLE dbo.CFN_CATEGORY_STATUS_HISTORY
(
    cfn_catg_id              OBJECT_ID NOT NULL,
    cfn_system_code          code_2    NOT NULL,
    cfn_category_status_code code_2    NOT NULL,
    cfn_category_status_date datetime  NOT NULL,
    audit_tran_id            OBJECT_ID NOT NULL,
    ts                       timestamp NOT NULL,
    CONSTRAINT PK_CFN_CATEGORY_STATUS_HISTORY
    PRIMARY KEY CLUSTERED (cfn_system_code,cfn_catg_id,cfn_category_status_code,cfn_category_status_date)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CFN_CATEGORY_STATUS_HISTORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CFN_CATEGORY_STATUS_HISTORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CFN_CATEGORY_STATUS_HISTORY >>>'
go
ALTER TABLE dbo.CFN_CATEGORY_STATUS_HISTORY
    ADD CONSTRAINT FK_CFN_CAT_STATUS_HIST_CFN_CAT
    FOREIGN KEY (cfn_catg_id)
    REFERENCES dbo.CFN_CATEGORY (cfn_catg_id)
go
ALTER TABLE dbo.CFN_CATEGORY_STATUS_HISTORY
    ADD CONSTRAINT FK_CFN_CAT_STAT_HIST_STAT
    FOREIGN KEY (cfn_category_status_code)
    REFERENCES dbo.CFN_CATEGORY_STATUS (cfn_catg_status_code)
go
GRANT REFERENCES ON dbo.CFN_CATEGORY_STATUS_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.CFN_CATEGORY_STATUS_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.CFN_CATEGORY_STATUS_HISTORY TO read_only
go
GRANT SELECT ON dbo.CFN_CATEGORY_STATUS_HISTORY TO rma_users
go
GRANT INSERT ON dbo.CFN_CATEGORY_STATUS_HISTORY TO eqa_user
go
GRANT DELETE ON dbo.CFN_CATEGORY_STATUS_HISTORY TO eqa_user
go
GRANT UPDATE ON dbo.CFN_CATEGORY_STATUS_HISTORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CFN_CATEGORY_STATUS_HISTORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CFN_CATEGORY_STATUS_HISTORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CFN_CATEGORY_STATUS_HISTORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CFN_CATEGORY_STATUS_HISTORY TO eqa_user
go
CREATE TABLE dbo.CFN_DEPTH_TYPE
(
    cfn_depth_code      code_2  NOT NULL,
    cfn_system_code     code_2  NOT NULL,
    cfn_depth_code_desc descr   NULL,
    active_ind          yn      DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    sortkey             sortkey NOT NULL,
    CONSTRAINT PK_CFN_DEPTH_TYPE
    PRIMARY KEY CLUSTERED (cfn_depth_code),
    CONSTRAINT AK_AK_CFN_DEPTH_TYPE_CFN_DEPT
    UNIQUE NONCLUSTERED (cfn_depth_code,cfn_system_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CFN_DEPTH_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CFN_DEPTH_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CFN_DEPTH_TYPE >>>'
go
ALTER TABLE dbo.CFN_CATEGORY
    ADD CONSTRAINT FK_CFN_CATE_CFN_CA_CFN_DEPT
    FOREIGN KEY (cfn_depth_code)
    REFERENCES dbo.CFN_DEPTH_TYPE (cfn_depth_code)
go
GRANT REFERENCES ON dbo.CFN_DEPTH_TYPE TO eqa_user
go
GRANT SELECT ON dbo.CFN_DEPTH_TYPE TO eqa_user
go
GRANT SELECT ON dbo.CFN_DEPTH_TYPE TO read_only
go
GRANT SELECT ON dbo.CFN_DEPTH_TYPE TO rma_users
go
GRANT INSERT ON dbo.CFN_DEPTH_TYPE TO eqa_user
go
GRANT DELETE ON dbo.CFN_DEPTH_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.CFN_DEPTH_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CFN_DEPTH_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CFN_DEPTH_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CFN_DEPTH_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CFN_DEPTH_TYPE TO eqa_user
go
CREATE TABLE dbo.CFN_RELATIONSHIP_FROM
(
    cfn_catg_id       OBJECT_ID NOT NULL,
    cfn_rel_header_id OBJECT_ID NOT NULL,
    ts                timestamp NULL,
    audit_tran_id     OBJECT_ID NOT NULL,
    CONSTRAINT PK_CFN_RELATIONSHIP_FROM
    PRIMARY KEY CLUSTERED (cfn_catg_id,cfn_rel_header_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CFN_RELATIONSHIP_FROM') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CFN_RELATIONSHIP_FROM >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CFN_RELATIONSHIP_FROM >>>'
go
ALTER TABLE dbo.CFN_RELATIONSHIP_FROM
    ADD CONSTRAINT FK_CFN_REL_FROM_CFN_CATG
    FOREIGN KEY (cfn_catg_id)
    REFERENCES dbo.CFN_CATEGORY (cfn_catg_id)
go
GRANT REFERENCES ON dbo.CFN_RELATIONSHIP_FROM TO eqa_user
go
GRANT SELECT ON dbo.CFN_RELATIONSHIP_FROM TO eqa_user
go
GRANT SELECT ON dbo.CFN_RELATIONSHIP_FROM TO read_only
go
GRANT SELECT ON dbo.CFN_RELATIONSHIP_FROM TO rma_users
go
GRANT INSERT ON dbo.CFN_RELATIONSHIP_FROM TO eqa_user
go
GRANT DELETE ON dbo.CFN_RELATIONSHIP_FROM TO eqa_user
go
GRANT UPDATE ON dbo.CFN_RELATIONSHIP_FROM TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CFN_RELATIONSHIP_FROM TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CFN_RELATIONSHIP_FROM TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CFN_RELATIONSHIP_FROM TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CFN_RELATIONSHIP_FROM TO eqa_user
go
CREATE TABLE dbo.CFN_RELATIONSHIP_HEADER
(
    cfn_rel_header_id     OBJECT_ID NOT NULL,
    cfn_rel_status_code   code_2    NOT NULL,
    cfn_reason_descr_text descr     NULL,
    effective_date        datetime  NOT NULL,
    audit_tran_id         OBJECT_ID NOT NULL,
    ts                    timestamp NOT NULL,
    CONSTRAINT PK_CFN_RELATIONSHIP_HEADER
    PRIMARY KEY CLUSTERED (cfn_rel_header_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CFN_RELATIONSHIP_HEADER') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CFN_RELATIONSHIP_HEADER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CFN_RELATIONSHIP_HEADER >>>'
go
ALTER TABLE dbo.CFN_RELATIONSHIP_FROM
    ADD CONSTRAINT FK_CFN_REL_FROM_HDR
    FOREIGN KEY (cfn_rel_header_id)
    REFERENCES dbo.CFN_RELATIONSHIP_HEADER (cfn_rel_header_id)
go
GRANT REFERENCES ON dbo.CFN_RELATIONSHIP_HEADER TO eqa_user
go
GRANT SELECT ON dbo.CFN_RELATIONSHIP_HEADER TO eqa_user
go
GRANT SELECT ON dbo.CFN_RELATIONSHIP_HEADER TO read_only
go
GRANT SELECT ON dbo.CFN_RELATIONSHIP_HEADER TO rma_users
go
GRANT INSERT ON dbo.CFN_RELATIONSHIP_HEADER TO eqa_user
go
GRANT DELETE ON dbo.CFN_RELATIONSHIP_HEADER TO eqa_user
go
GRANT UPDATE ON dbo.CFN_RELATIONSHIP_HEADER TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CFN_RELATIONSHIP_HEADER TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CFN_RELATIONSHIP_HEADER TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CFN_RELATIONSHIP_HEADER TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CFN_RELATIONSHIP_HEADER TO eqa_user
go
CREATE TABLE dbo.CFN_RELATIONSHIP_STATUS
(
    cfn_rel_status_code code_2  NOT NULL,
    cfn_rel_status_desc descr   NOT NULL,
    sortkey             sortkey NOT NULL,
    CONSTRAINT PK_CFN_RELATIONSHIP_STATUS
    PRIMARY KEY CLUSTERED (cfn_rel_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CFN_RELATIONSHIP_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CFN_RELATIONSHIP_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CFN_RELATIONSHIP_STATUS >>>'
go
ALTER TABLE dbo.CFN_RELATIONSHIP_HEADER
    ADD CONSTRAINT FK_CFN_REL_HDR_STATUS
    FOREIGN KEY (cfn_rel_status_code)
    REFERENCES dbo.CFN_RELATIONSHIP_STATUS (cfn_rel_status_code)
go
GRANT REFERENCES ON dbo.CFN_RELATIONSHIP_STATUS TO eqa_user
go
GRANT SELECT ON dbo.CFN_RELATIONSHIP_STATUS TO eqa_user
go
GRANT SELECT ON dbo.CFN_RELATIONSHIP_STATUS TO read_only
go
GRANT SELECT ON dbo.CFN_RELATIONSHIP_STATUS TO rma_users
go
GRANT INSERT ON dbo.CFN_RELATIONSHIP_STATUS TO eqa_user
go
GRANT DELETE ON dbo.CFN_RELATIONSHIP_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.CFN_RELATIONSHIP_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CFN_RELATIONSHIP_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CFN_RELATIONSHIP_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CFN_RELATIONSHIP_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CFN_RELATIONSHIP_STATUS TO eqa_user
go
CREATE TABLE dbo.CFN_RELATIONSHIP_TO
(
    cfn_catg_id       OBJECT_ID NOT NULL,
    cfn_rel_header_id OBJECT_ID NOT NULL,
    ts                timestamp NULL,
    audit_tran_id     OBJECT_ID NOT NULL,
    CONSTRAINT PK_CFN_RELATIONSHIP_TO
    PRIMARY KEY CLUSTERED (cfn_catg_id,cfn_rel_header_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CFN_RELATIONSHIP_TO') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CFN_RELATIONSHIP_TO >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CFN_RELATIONSHIP_TO >>>'
go
ALTER TABLE dbo.CFN_RELATIONSHIP_TO
    ADD CONSTRAINT FK_CFN_REL_TO_CFN_CATG
    FOREIGN KEY (cfn_catg_id)
    REFERENCES dbo.CFN_CATEGORY (cfn_catg_id)
go
ALTER TABLE dbo.CFN_RELATIONSHIP_TO
    ADD CONSTRAINT FK_CFN_RE_TO_HDR
    FOREIGN KEY (cfn_rel_header_id)
    REFERENCES dbo.CFN_RELATIONSHIP_HEADER (cfn_rel_header_id)
go
GRANT REFERENCES ON dbo.CFN_RELATIONSHIP_TO TO eqa_user
go
GRANT SELECT ON dbo.CFN_RELATIONSHIP_TO TO eqa_user
go
GRANT SELECT ON dbo.CFN_RELATIONSHIP_TO TO read_only
go
GRANT SELECT ON dbo.CFN_RELATIONSHIP_TO TO rma_users
go
GRANT INSERT ON dbo.CFN_RELATIONSHIP_TO TO eqa_user
go
GRANT DELETE ON dbo.CFN_RELATIONSHIP_TO TO eqa_user
go
GRANT UPDATE ON dbo.CFN_RELATIONSHIP_TO TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CFN_RELATIONSHIP_TO TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CFN_RELATIONSHIP_TO TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CFN_RELATIONSHIP_TO TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CFN_RELATIONSHIP_TO TO eqa_user
go
CREATE TABLE dbo.CFN_SYSTEM_TYPE
(
    cfn_system_code code_2   NOT NULL,
    cfn_system_name name     NULL,
    cfn_system_desc descr    NULL,
    cfn_depth_count number_2 NULL,
    active_ind      yn       DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    sortkey         sortkey  NOT NULL,
    CONSTRAINT PK_CFN_SYSTEM_TYPE
    PRIMARY KEY CLUSTERED (cfn_system_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CFN_SYSTEM_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CFN_SYSTEM_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CFN_SYSTEM_TYPE >>>'
go
ALTER TABLE dbo.CFN_CATEGORY
    ADD CONSTRAINT FK_CFN_CATEGORY_CFN_SYSTEM_CO
    FOREIGN KEY (cfn_system_code)
    REFERENCES dbo.CFN_SYSTEM_TYPE (cfn_system_code)
go
ALTER TABLE dbo.CFN_CATEGORY_STATUS
    ADD CONSTRAINT FK_CFN_CAT_STATUS_SYSTEM_TYPE
    FOREIGN KEY (cfn_system_code)
    REFERENCES dbo.CFN_SYSTEM_TYPE (cfn_system_code)
go
ALTER TABLE dbo.CFN_CATEGORY_STATUS_HISTORY
    ADD CONSTRAINT FK_CFN_CAT_STATUS_HIST_SYS_TYP
    FOREIGN KEY (cfn_system_code)
    REFERENCES dbo.CFN_SYSTEM_TYPE (cfn_system_code)
go
ALTER TABLE dbo.CFN_DEPTH_TYPE
    ADD CONSTRAINT FK_CFN_DEPT_FK_CFN_DE_CFN_SYST
    FOREIGN KEY (cfn_system_code)
    REFERENCES dbo.CFN_SYSTEM_TYPE (cfn_system_code)
go
GRANT REFERENCES ON dbo.CFN_SYSTEM_TYPE TO eqa_user
go
GRANT SELECT ON dbo.CFN_SYSTEM_TYPE TO eqa_user
go
GRANT SELECT ON dbo.CFN_SYSTEM_TYPE TO read_only
go
GRANT SELECT ON dbo.CFN_SYSTEM_TYPE TO rma_users
go
GRANT INSERT ON dbo.CFN_SYSTEM_TYPE TO eqa_user
go
GRANT DELETE ON dbo.CFN_SYSTEM_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.CFN_SYSTEM_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CFN_SYSTEM_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CFN_SYSTEM_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CFN_SYSTEM_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CFN_SYSTEM_TYPE TO eqa_user
go
CREATE TABLE dbo.CFN_UPDATES
(
    cfn_catg_id OBJECT_ID NOT NULL,
    update_time datetime  NOT NULL,
    delete_ind  yn        DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    CONSTRAINT PK_CFN_UPDATES
    PRIMARY KEY CLUSTERED (cfn_catg_id,update_time)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.CFN_UPDATES') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CFN_UPDATES >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CFN_UPDATES >>>'
go
GRANT REFERENCES ON dbo.CFN_UPDATES TO eqa_user
go
GRANT SELECT ON dbo.CFN_UPDATES TO eqa_user
go
GRANT SELECT ON dbo.CFN_UPDATES TO read_only
go
GRANT SELECT ON dbo.CFN_UPDATES TO rma_users
go
GRANT INSERT ON dbo.CFN_UPDATES TO eqa_user
go
GRANT DELETE ON dbo.CFN_UPDATES TO eqa_user
go
GRANT UPDATE ON dbo.CFN_UPDATES TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CFN_UPDATES TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CFN_UPDATES TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CFN_UPDATES TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CFN_UPDATES TO eqa_user
go
CREATE TABLE dbo.CHECK_MOD_SELECT_STATUS
(
    check_mod_select_status      code_2 NOT NULL,
    check_mod_select_status_desc descr  NOT NULL,
    active_ind                   yn_ind NOT NULL,
    CONSTRAINT pk_check_mod_select_status
    PRIMARY KEY CLUSTERED (check_mod_select_status)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CHECK_MOD_SELECT_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CHECK_MOD_SELECT_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CHECK_MOD_SELECT_STATUS >>>'
go
GRANT REFERENCES ON dbo.CHECK_MOD_SELECT_STATUS TO eqa_user
go
GRANT SELECT ON dbo.CHECK_MOD_SELECT_STATUS TO eqa_user
go
GRANT SELECT ON dbo.CHECK_MOD_SELECT_STATUS TO read_only
go
GRANT SELECT ON dbo.CHECK_MOD_SELECT_STATUS TO rma_users
go
GRANT INSERT ON dbo.CHECK_MOD_SELECT_STATUS TO eqa_user
go
GRANT DELETE ON dbo.CHECK_MOD_SELECT_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.CHECK_MOD_SELECT_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CHECK_MOD_SELECT_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CHECK_MOD_SELECT_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CHECK_MOD_SELECT_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CHECK_MOD_SELECT_STATUS TO eqa_user
go
CREATE TABLE dbo.CLAIM_CONTRACT
(
    claim_contract_id       OBJECT_ID NOT NULL,
    perorg_role_type_code   number_3  NOT NULL,
    contract_name           name      NOT NULL,
    pse_activity_code       code_2    NOT NULL,
    pse_cost_centre_code    code_3    NOT NULL,
    pse_resource_group_code code_2    NOT NULL,
    academic_cycle          char(4)   NOT NULL,
    active_ind              yn_ind    NOT NULL,
    audit_tran_id           OBJECT_ID NOT NULL,
    ts                      timestamp NOT NULL,
    company_ind             ny_ind    NOT NULL,
    CONSTRAINT PK_CLAIM_CONTRACT
    PRIMARY KEY CLUSTERED (claim_contract_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CLAIM_CONTRACT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CLAIM_CONTRACT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CLAIM_CONTRACT >>>'
go
ALTER TABLE dbo.CLAIM_CONTRACT
    ADD CONSTRAINT FK_CLAIM_CONTRACT_YEAR
    FOREIGN KEY (academic_cycle)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.CLAIM_CONTRACT
    ADD CONSTRAINT FK_CLAIM_CONTRACT_ACT_CODE
    FOREIGN KEY (pse_activity_code)
    REFERENCES dbo.PSE_ACTIVITY_CODE (pse_activity_code)
go
ALTER TABLE dbo.CLAIM_CONTRACT
    ADD CONSTRAINT FK_CLAIM_CONTRACT_COST_CTR
    FOREIGN KEY (pse_cost_centre_code)
    REFERENCES dbo.PSE_COST_CENTRE_CODE (pse_cost_centre_code)
go
ALTER TABLE dbo.CLAIM_CONTRACT
    ADD CONSTRAINT FK_CLAIM_CONTRACT_RESOURCE_GRP
    FOREIGN KEY (pse_resource_group_code)
    REFERENCES dbo.PSE_RESOURCE_GROUP_CODE (pse_resource_group_code)
go
ALTER TABLE dbo.CLAIM_CONTRACT
    ADD CONSTRAINT FK_CLAIM_CONTRACT_ROLE_TYPE
    FOREIGN KEY (perorg_role_type_code)
    REFERENCES dbo.PERORG_ROLE_TYPE (perorg_role_type_code)
go
GRANT REFERENCES ON dbo.CLAIM_CONTRACT TO eqa_user
go
GRANT SELECT ON dbo.CLAIM_CONTRACT TO eqa_user
go
GRANT SELECT ON dbo.CLAIM_CONTRACT TO read_only
go
GRANT SELECT ON dbo.CLAIM_CONTRACT TO rma_users
go
GRANT INSERT ON dbo.CLAIM_CONTRACT TO eqa_user
go
GRANT DELETE ON dbo.CLAIM_CONTRACT TO eqa_user
go
GRANT UPDATE ON dbo.CLAIM_CONTRACT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CLAIM_CONTRACT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CLAIM_CONTRACT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CLAIM_CONTRACT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CLAIM_CONTRACT TO eqa_user
go
CREATE TABLE dbo.CLAIM_CONTRACT_ITEM
(
    claim_contract_id  OBJECT_ID NOT NULL,
    claim_item_type_id OBJECT_ID NOT NULL,
    sortkey            sortkey   NOT NULL,
    active_ind         yn_ind    NOT NULL,
    audit_tran_id      OBJECT_ID NOT NULL,
    ts                 timestamp NOT NULL,
    CONSTRAINT PK_CLAIM_CONTRACT_ITEM
    PRIMARY KEY CLUSTERED (claim_item_type_id,claim_contract_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CLAIM_CONTRACT_ITEM') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CLAIM_CONTRACT_ITEM >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CLAIM_CONTRACT_ITEM >>>'
go
ALTER TABLE dbo.CLAIM_CONTRACT_ITEM
    ADD CONSTRAINT FK_CLAIM_CONTRACT_ITM_CONTRACT
    FOREIGN KEY (claim_contract_id)
    REFERENCES dbo.CLAIM_CONTRACT (claim_contract_id)
go
GRANT REFERENCES ON dbo.CLAIM_CONTRACT_ITEM TO eqa_user
go
GRANT SELECT ON dbo.CLAIM_CONTRACT_ITEM TO eqa_user
go
GRANT SELECT ON dbo.CLAIM_CONTRACT_ITEM TO read_only
go
GRANT SELECT ON dbo.CLAIM_CONTRACT_ITEM TO rma_users
go
GRANT INSERT ON dbo.CLAIM_CONTRACT_ITEM TO eqa_user
go
GRANT DELETE ON dbo.CLAIM_CONTRACT_ITEM TO eqa_user
go
GRANT UPDATE ON dbo.CLAIM_CONTRACT_ITEM TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CLAIM_CONTRACT_ITEM TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CLAIM_CONTRACT_ITEM TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CLAIM_CONTRACT_ITEM TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CLAIM_CONTRACT_ITEM TO eqa_user
go
CREATE TABLE dbo.CLAIM_ITEM
(
    claim_item_id      OBJECT_ID NOT NULL,
    person_claim_id    OBJECT_ID NOT NULL,
    claim_item_type_id OBJECT_ID NOT NULL,
    amount             money     NOT NULL,
    notes              descr     NULL,
    active_ind         yn_ind    NOT NULL,
    audit_tran_id      OBJECT_ID NOT NULL,
    ts                 timestamp NOT NULL,
    CONSTRAINT PK_CLAIM_ITEM
    PRIMARY KEY CLUSTERED (claim_item_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CLAIM_ITEM') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CLAIM_ITEM >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CLAIM_ITEM >>>'
go
ALTER TABLE dbo.CLAIM_ITEM
    ADD CONSTRAINT FK_CLAIM_ITEM_PERSON_CLAIM
    FOREIGN KEY (person_claim_id)
    REFERENCES dbo.PERSON_CLAIM (person_claim_id)
go
GRANT REFERENCES ON dbo.CLAIM_ITEM TO eqa_user
go
GRANT SELECT ON dbo.CLAIM_ITEM TO eqa_user
go
GRANT SELECT ON dbo.CLAIM_ITEM TO read_only
go
GRANT SELECT ON dbo.CLAIM_ITEM TO rma_users
go
GRANT INSERT ON dbo.CLAIM_ITEM TO eqa_user
go
GRANT DELETE ON dbo.CLAIM_ITEM TO eqa_user
go
GRANT UPDATE ON dbo.CLAIM_ITEM TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CLAIM_ITEM TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CLAIM_ITEM TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CLAIM_ITEM TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CLAIM_ITEM TO eqa_user
go
CREATE TABLE dbo.CLAIM_ITEM_TYPE
(
    claim_item_type_id    OBJECT_ID   NOT NULL,
    claim_item_type_desc  descr       NOT NULL,
    claim_multiple_ind    ny_ind      NOT NULL,
    fix_rate_ind          ny_ind      NOT NULL,
    std_required_ind      ny_ind      NOT NULL,
    optional_ind          ny_ind      NOT NULL,
    pse_gl_code           char(4)     NOT NULL,
    pse_element_code      varchar(10) NOT NULL,
    unit_desc             descr_short NULL,
    active_ind            yn_ind      NOT NULL,
    audit_tran_id         OBJECT_ID   NOT NULL,
    ts                    timestamp   NOT NULL,
    claim_item_type       code_3      NULL,
    perorg_role_type_code number_3    NULL,
    claim_threshold       amt         NULL,
    CONSTRAINT PK_CLAIM_ITEM_TYPE
    PRIMARY KEY CLUSTERED (claim_item_type_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CLAIM_ITEM_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CLAIM_ITEM_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CLAIM_ITEM_TYPE >>>'
go
ALTER TABLE dbo.CLAIM_ITEM_TYPE
    ADD CONSTRAINT FK_CLAIM_ITEM_TYPE_GL_CODE
    FOREIGN KEY (pse_gl_code)
    REFERENCES dbo.PSE_GL_CODE (pse_gl_code)
go
ALTER TABLE dbo.CLAIM_ITEM_TYPE
    ADD CONSTRAINT FK_CLAIM_ITEM_TYPE_ROLE
    FOREIGN KEY (perorg_role_type_code)
    REFERENCES dbo.PERORG_ROLE_TYPE (perorg_role_type_code)
go
ALTER TABLE dbo.CLAIM_ITEM_TYPE
    ADD CONSTRAINT FK_CLAIM_ITEM_TYPE_ELEMNT_CODE
    FOREIGN KEY (pse_element_code)
    REFERENCES dbo.PSE_ELEMENT_CODE (pse_element_code)
go
ALTER TABLE dbo.CLAIM_CONTRACT_ITEM
    ADD CONSTRAINT FK_CLAIM_CONTRACT_ITEM_TYPE
    FOREIGN KEY (claim_item_type_id)
    REFERENCES dbo.CLAIM_ITEM_TYPE (claim_item_type_id)
go
ALTER TABLE dbo.CLAIM_ITEM
    ADD CONSTRAINT FK_CLAIM_ITEM_TYPE
    FOREIGN KEY (claim_item_type_id)
    REFERENCES dbo.CLAIM_ITEM_TYPE (claim_item_type_id)
go
GRANT REFERENCES ON dbo.CLAIM_ITEM_TYPE TO eqa_user
go
GRANT SELECT ON dbo.CLAIM_ITEM_TYPE TO eqa_user
go
GRANT SELECT ON dbo.CLAIM_ITEM_TYPE TO read_only
go
GRANT SELECT ON dbo.CLAIM_ITEM_TYPE TO rma_users
go
GRANT INSERT ON dbo.CLAIM_ITEM_TYPE TO eqa_user
go
GRANT DELETE ON dbo.CLAIM_ITEM_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.CLAIM_ITEM_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CLAIM_ITEM_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CLAIM_ITEM_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CLAIM_ITEM_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CLAIM_ITEM_TYPE TO eqa_user
go
CREATE TABLE dbo.CLAIM_QUANTITY_TYPE
(
    claim_quantity_type code_2      NOT NULL,
    claim_quantity_desc descr_short NOT NULL,
    active_ind          yn_ind      NOT NULL,
    CONSTRAINT PK_CLAIM_QUANTITY_TYPE
    PRIMARY KEY CLUSTERED (claim_quantity_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CLAIM_QUANTITY_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CLAIM_QUANTITY_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CLAIM_QUANTITY_TYPE >>>'
go
GRANT REFERENCES ON dbo.CLAIM_QUANTITY_TYPE TO eqa_user
go
GRANT SELECT ON dbo.CLAIM_QUANTITY_TYPE TO eqa_user
go
GRANT SELECT ON dbo.CLAIM_QUANTITY_TYPE TO read_only
go
GRANT SELECT ON dbo.CLAIM_QUANTITY_TYPE TO rma_users
go
GRANT INSERT ON dbo.CLAIM_QUANTITY_TYPE TO eqa_user
go
GRANT DELETE ON dbo.CLAIM_QUANTITY_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.CLAIM_QUANTITY_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CLAIM_QUANTITY_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CLAIM_QUANTITY_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CLAIM_QUANTITY_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CLAIM_QUANTITY_TYPE TO eqa_user
go
CREATE TABLE dbo.CLAIM_RATE
(
    claim_rate_id      OBJECT_ID  NOT NULL,
    claim_contract_id  OBJECT_ID  NOT NULL,
    claim_item_type_id OBJECT_ID  NOT NULL,
    claim_rate         money      NOT NULL,
    std_number         varchar(8) NULL,
    active_ind         yn_ind     NOT NULL,
    audit_tran_id      OBJECT_ID  NOT NULL,
    ts                 timestamp  NOT NULL,
    CONSTRAINT PK_CLAIM_RATE
    PRIMARY KEY CLUSTERED (claim_rate_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CLAIM_RATE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CLAIM_RATE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CLAIM_RATE >>>'
go
ALTER TABLE dbo.CLAIM_RATE
    ADD CONSTRAINT FK_CLAIM_RATE_CONTRACT_ITEM
    FOREIGN KEY (claim_item_type_id,claim_contract_id)
    REFERENCES dbo.CLAIM_CONTRACT_ITEM (claim_item_type_id,claim_contract_id)
go
ALTER TABLE dbo.CLAIM_RATE
    ADD CONSTRAINT FK_CLAIM_RATE_STD
    FOREIGN KEY (std_number)
    REFERENCES dbo.STD (std_number)
go
GRANT REFERENCES ON dbo.CLAIM_RATE TO eqa_user
go
GRANT SELECT ON dbo.CLAIM_RATE TO eqa_user
go
GRANT SELECT ON dbo.CLAIM_RATE TO read_only
go
GRANT SELECT ON dbo.CLAIM_RATE TO rma_users
go
GRANT INSERT ON dbo.CLAIM_RATE TO eqa_user
go
GRANT DELETE ON dbo.CLAIM_RATE TO eqa_user
go
GRANT UPDATE ON dbo.CLAIM_RATE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CLAIM_RATE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CLAIM_RATE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CLAIM_RATE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CLAIM_RATE TO eqa_user
go
CREATE TABLE dbo.CLAIM_STATUS
(
    claim_status      code_2 NOT NULL,
    claim_status_desc descr  NOT NULL,
    active_ind        yn_ind NOT NULL,
    CONSTRAINT PK_CLAIM_STATUS
    PRIMARY KEY CLUSTERED (claim_status)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CLAIM_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CLAIM_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CLAIM_STATUS >>>'
go
GRANT REFERENCES ON dbo.CLAIM_STATUS TO eqa_user
go
GRANT SELECT ON dbo.CLAIM_STATUS TO eqa_user
go
GRANT SELECT ON dbo.CLAIM_STATUS TO read_only
go
GRANT SELECT ON dbo.CLAIM_STATUS TO rma_users
go
GRANT INSERT ON dbo.CLAIM_STATUS TO eqa_user
go
GRANT DELETE ON dbo.CLAIM_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.CLAIM_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CLAIM_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CLAIM_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CLAIM_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CLAIM_STATUS TO eqa_user
go
CREATE TABLE dbo.CLAIM_UNIT
(
    claim_unit_id   OBJECT_ID NOT NULL,
    person_claim_id OBJECT_ID NOT NULL,
    claim_rate_id   OBJECT_ID NOT NULL,
    active_ind      yn_ind    NOT NULL,
    notes           descr     NULL,
    audit_tran_id   OBJECT_ID NOT NULL,
    ts              timestamp NOT NULL,
    CONSTRAINT PK_CLAIM_UNIT
    PRIMARY KEY CLUSTERED (claim_unit_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CLAIM_UNIT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CLAIM_UNIT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CLAIM_UNIT >>>'
go
ALTER TABLE dbo.CLAIM_UNIT
    ADD CONSTRAINT FK_CLAIM_UNIT_CLAIM_RATE
    FOREIGN KEY (claim_rate_id)
    REFERENCES dbo.CLAIM_RATE (claim_rate_id)
go
ALTER TABLE dbo.CLAIM_UNIT
    ADD CONSTRAINT FK_CLAIM_UNIT_PERSON_CLAIM
    FOREIGN KEY (person_claim_id)
    REFERENCES dbo.PERSON_CLAIM (person_claim_id)
go
GRANT REFERENCES ON dbo.CLAIM_UNIT TO eqa_user
go
GRANT SELECT ON dbo.CLAIM_UNIT TO eqa_user
go
GRANT SELECT ON dbo.CLAIM_UNIT TO read_only
go
GRANT SELECT ON dbo.CLAIM_UNIT TO rma_users
go
GRANT INSERT ON dbo.CLAIM_UNIT TO eqa_user
go
GRANT DELETE ON dbo.CLAIM_UNIT TO eqa_user
go
GRANT UPDATE ON dbo.CLAIM_UNIT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CLAIM_UNIT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CLAIM_UNIT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CLAIM_UNIT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CLAIM_UNIT TO eqa_user
go
CREATE TABLE dbo.CLAIM_UNIT_QUANTITY
(
    claim_unit_quantity_id OBJECT_ID    NOT NULL,
    claim_unit_id          OBJECT_ID    NOT NULL,
    claim_quantity_type    code_2       NOT NULL,
    claim_quantity         numeric(9,2) NOT NULL,
    audit_tran_id          OBJECT_ID    NOT NULL,
    ts                     timestamp    NOT NULL,
    CONSTRAINT PK_CLAIM_UNIT_QUANTITY
    PRIMARY KEY CLUSTERED (claim_unit_quantity_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CLAIM_UNIT_QUANTITY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CLAIM_UNIT_QUANTITY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CLAIM_UNIT_QUANTITY >>>'
go
ALTER TABLE dbo.CLAIM_UNIT_QUANTITY
    ADD CONSTRAINT FK_CLAIM_UNIT_QTY_TYPE
    FOREIGN KEY (claim_quantity_type)
    REFERENCES dbo.CLAIM_QUANTITY_TYPE (claim_quantity_type)
go
ALTER TABLE dbo.CLAIM_UNIT_QUANTITY
    ADD CONSTRAINT FK_CLAIM_UNIT_QTY_CLAIM_UNIT
    FOREIGN KEY (claim_unit_id)
    REFERENCES dbo.CLAIM_UNIT (claim_unit_id)
go
GRANT REFERENCES ON dbo.CLAIM_UNIT_QUANTITY TO eqa_user
go
GRANT SELECT ON dbo.CLAIM_UNIT_QUANTITY TO eqa_user
go
GRANT SELECT ON dbo.CLAIM_UNIT_QUANTITY TO read_only
go
GRANT SELECT ON dbo.CLAIM_UNIT_QUANTITY TO rma_users
go
GRANT INSERT ON dbo.CLAIM_UNIT_QUANTITY TO eqa_user
go
GRANT DELETE ON dbo.CLAIM_UNIT_QUANTITY TO eqa_user
go
GRANT UPDATE ON dbo.CLAIM_UNIT_QUANTITY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CLAIM_UNIT_QUANTITY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CLAIM_UNIT_QUANTITY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CLAIM_UNIT_QUANTITY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CLAIM_UNIT_QUANTITY TO eqa_user
go
CREATE TABLE dbo.CODE_TABLE
(
    code_table_id        OBJECT_ID    NOT NULL,
    code_table_catg_code code_4       NOT NULL,
    code_table_name      name         NOT NULL,
    code_table_desc      descr        NOT NULL,
    access_right         varchar(255) NOT NULL,
    comment              varchar(255) NULL,
    audit_tran_id        OBJECT_ID    NOT NULL,
    CONSTRAINT PK_CODE_TABLE
    PRIMARY KEY CLUSTERED (code_table_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CODE_TABLE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CODE_TABLE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CODE_TABLE >>>'
go
GRANT REFERENCES ON dbo.CODE_TABLE TO eqa_user
go
GRANT SELECT ON dbo.CODE_TABLE TO eqa_user
go
GRANT SELECT ON dbo.CODE_TABLE TO read_only
go
GRANT SELECT ON dbo.CODE_TABLE TO rma_users
go
GRANT INSERT ON dbo.CODE_TABLE TO eqa_user
go
GRANT DELETE ON dbo.CODE_TABLE TO eqa_user
go
GRANT UPDATE ON dbo.CODE_TABLE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CODE_TABLE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CODE_TABLE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CODE_TABLE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CODE_TABLE TO eqa_user
go
CREATE TABLE dbo.CODE_TABLE_CATG
(
    code_table_catg_code code_4  NOT NULL,
    code_table_catg_desc descr   NOT NULL,
    sortkey              sortkey NOT NULL,
    active_ind           yn_ind  NOT NULL,
    CONSTRAINT PK_CODE_TABLE_CATG
    PRIMARY KEY CLUSTERED (code_table_catg_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CODE_TABLE_CATG') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CODE_TABLE_CATG >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CODE_TABLE_CATG >>>'
go
ALTER TABLE dbo.CODE_TABLE
    ADD CONSTRAINT FK_CODE_TBL_CODE_TBL_CATG
    FOREIGN KEY (code_table_catg_code)
    REFERENCES dbo.CODE_TABLE_CATG (code_table_catg_code)
go
GRANT REFERENCES ON dbo.CODE_TABLE_CATG TO eqa_user
go
GRANT SELECT ON dbo.CODE_TABLE_CATG TO eqa_user
go
GRANT SELECT ON dbo.CODE_TABLE_CATG TO read_only
go
GRANT SELECT ON dbo.CODE_TABLE_CATG TO rma_users
go
GRANT INSERT ON dbo.CODE_TABLE_CATG TO eqa_user
go
GRANT DELETE ON dbo.CODE_TABLE_CATG TO eqa_user
go
GRANT UPDATE ON dbo.CODE_TABLE_CATG TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CODE_TABLE_CATG TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CODE_TABLE_CATG TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CODE_TABLE_CATG TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CODE_TABLE_CATG TO eqa_user
go
CREATE TABLE dbo.CODE_TABLE_HISTORY
(
    code_table_history_id OBJECT_ID    NOT NULL,
    code_table_id         OBJECT_ID    NOT NULL,
    code_value            code_4       NOT NULL,
    column_name           name         NOT NULL,
    old_value             varchar(255) NOT NULL,
    new_value             varchar(255) NOT NULL,
    [action]              varchar(255) NOT NULL,
    reason_for_change     varchar(255) NOT NULL,
    updated_date          dt           NOT NULL,
    updated_by            usr          NOT NULL,
    audit_tran_id         OBJECT_ID    NOT NULL,
    CONSTRAINT PK_CODE_TABLE_HISTORY
    PRIMARY KEY CLUSTERED (code_table_history_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CODE_TABLE_HISTORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CODE_TABLE_HISTORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CODE_TABLE_HISTORY >>>'
go
ALTER TABLE dbo.CODE_TABLE_HISTORY
    ADD CONSTRAINT FK_CODE_TBL_HISTORY_CODE_TBL
    FOREIGN KEY (code_table_id)
    REFERENCES dbo.CODE_TABLE (code_table_id)
go
GRANT REFERENCES ON dbo.CODE_TABLE_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.CODE_TABLE_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.CODE_TABLE_HISTORY TO read_only
go
GRANT SELECT ON dbo.CODE_TABLE_HISTORY TO rma_users
go
GRANT INSERT ON dbo.CODE_TABLE_HISTORY TO eqa_user
go
GRANT DELETE ON dbo.CODE_TABLE_HISTORY TO eqa_user
go
GRANT UPDATE ON dbo.CODE_TABLE_HISTORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CODE_TABLE_HISTORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CODE_TABLE_HISTORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CODE_TABLE_HISTORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CODE_TABLE_HISTORY TO eqa_user
go
CREATE TABLE dbo.COMPASSIONATE
(
    compassionate_id   OBJECT_ID    NOT NULL,
    reason             text         NOT NULL OFF ROW,
    enrolment_id       OBJECT_ID    NOT NULL,
    perorg_id          OBJECT_ID    NULL,
    create_date        datetime     NOT NULL,
    audit_tran_id      OBJECT_ID    NOT NULL,
    ts                 timestamp    NULL,
    active_ind         yn           DEFAULT 0 NOT NULL,
    impact_reason_desc varchar(400) NULL,
    school_support_ind smallint     NULL,
    CONSTRAINT PK_COMPASSIONATE
    PRIMARY KEY CLUSTERED (compassionate_id),
    CONSTRAINT CHK_SCHOOL_SUPPORT_IND
    CHECK (school_support_ind is null or school_support_ind = 0 or school_support_ind = 1 )
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.COMPASSIONATE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.COMPASSIONATE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.COMPASSIONATE >>>'
go
ALTER TABLE dbo.COMPASSIONATE
    ADD CONSTRAINT FK_COMPASSIONATE_AUDIT_TRANS
    FOREIGN KEY (audit_tran_id)
    REFERENCES dbo.AUDIT_TRANSACTION (audit_tran_oid)
go
ALTER TABLE dbo.COMPASSIONATE
    ADD CONSTRAINT FK_COMPASSIONATE_PERORG
    FOREIGN KEY (perorg_id)
    REFERENCES dbo.PERORG (perorg_id)
go
ALTER TABLE dbo.COMPASSIONATE
    ADD CONSTRAINT FK_COMPASSIONATE_ENROLMENT
    FOREIGN KEY (enrolment_id)
    REFERENCES dbo.LEARNER_ENROLMENT (enrolment_id)
go
GRANT REFERENCES ON dbo.COMPASSIONATE TO eqa_user
go
GRANT SELECT ON dbo.COMPASSIONATE TO eqa_user
go
GRANT SELECT ON dbo.COMPASSIONATE TO read_only
go
GRANT SELECT ON dbo.COMPASSIONATE TO rma_users
go
GRANT INSERT ON dbo.COMPASSIONATE TO eqa_user
go
GRANT DELETE ON dbo.COMPASSIONATE TO eqa_user
go
GRANT UPDATE ON dbo.COMPASSIONATE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.COMPASSIONATE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.COMPASSIONATE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.COMPASSIONATE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.COMPASSIONATE TO eqa_user
go
CREATE TABLE dbo.COMPASSIONATE_ENTRY
(
    compassionate_entry_id    OBJECT_ID  NOT NULL,
    compassionate_id          OBJECT_ID  NOT NULL,
    entry_id                  OBJECT_ID  NOT NULL,
    result_code               varchar(5) NOT NULL,
    audit_tran_id             OBJECT_ID  NOT NULL,
    ts                        timestamp  NULL,
    compassionate_status_code code_2     DEFAULT "PE" NOT NULL,
    CONSTRAINT PK_COMPASSIONATE_ENTRY
    PRIMARY KEY CLUSTERED (compassionate_entry_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.COMPASSIONATE_ENTRY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.COMPASSIONATE_ENTRY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.COMPASSIONATE_ENTRY >>>'
go
ALTER TABLE dbo.COMPASSIONATE_ENTRY
    ADD CONSTRAINT FK_COMP_ENTRY_AUDIT_TRANS
    FOREIGN KEY (audit_tran_id)
    REFERENCES dbo.AUDIT_TRANSACTION (audit_tran_oid)
go
ALTER TABLE dbo.COMPASSIONATE_ENTRY
    ADD CONSTRAINT FK_COMPASSIONATE_ENTRY_COMP
    FOREIGN KEY (compassionate_id)
    REFERENCES dbo.COMPASSIONATE (compassionate_id)
go
ALTER TABLE dbo.COMPASSIONATE_ENTRY
    ADD CONSTRAINT FK_COMPASSIONATE_ENTRY_RESULT
    FOREIGN KEY (result_code)
    REFERENCES dbo.RESULT_CODE (result_code)
go
GRANT REFERENCES ON dbo.COMPASSIONATE_ENTRY TO eqa_user
go
GRANT SELECT ON dbo.COMPASSIONATE_ENTRY TO eqa_user
go
GRANT SELECT ON dbo.COMPASSIONATE_ENTRY TO read_only
go
GRANT SELECT ON dbo.COMPASSIONATE_ENTRY TO rma_users
go
GRANT INSERT ON dbo.COMPASSIONATE_ENTRY TO eqa_user
go
GRANT DELETE ON dbo.COMPASSIONATE_ENTRY TO eqa_user
go
GRANT UPDATE ON dbo.COMPASSIONATE_ENTRY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.COMPASSIONATE_ENTRY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.COMPASSIONATE_ENTRY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.COMPASSIONATE_ENTRY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.COMPASSIONATE_ENTRY TO eqa_user
go
CREATE TABLE dbo.COMPASSIONATE_PEER
(
    compassionate_peer_id  OBJECT_ID NOT NULL,
    compassionate_entry_id OBJECT_ID NOT NULL,
    enrolment_id           OBJECT_ID NOT NULL,
    active_ind             yn        DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    audit_tran_id          OBJECT_ID NOT NULL,
    ts                     timestamp NULL,
    CONSTRAINT PK_COMPASSIONATE_PEER
    PRIMARY KEY CLUSTERED (compassionate_peer_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.COMPASSIONATE_PEER') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.COMPASSIONATE_PEER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.COMPASSIONATE_PEER >>>'
go
ALTER TABLE dbo.COMPASSIONATE_PEER
    ADD CONSTRAINT FK_COMP_PEER_AUDIT_TRANS
    FOREIGN KEY (audit_tran_id)
    REFERENCES dbo.AUDIT_TRANSACTION (audit_tran_oid)
go
ALTER TABLE dbo.COMPASSIONATE_PEER
    ADD CONSTRAINT FK_COMP_PEER_COMP_ENTRY
    FOREIGN KEY (compassionate_entry_id)
    REFERENCES dbo.COMPASSIONATE_ENTRY (compassionate_entry_id)
go
ALTER TABLE dbo.COMPASSIONATE_PEER
    ADD CONSTRAINT FK_COMPASSION_PEER_ENROLMENT
    FOREIGN KEY (enrolment_id)
    REFERENCES dbo.LEARNER_ENROLMENT (enrolment_id)
go
GRANT REFERENCES ON dbo.COMPASSIONATE_PEER TO eqa_user
go
GRANT SELECT ON dbo.COMPASSIONATE_PEER TO eqa_user
go
GRANT SELECT ON dbo.COMPASSIONATE_PEER TO read_only
go
GRANT SELECT ON dbo.COMPASSIONATE_PEER TO rma_users
go
GRANT INSERT ON dbo.COMPASSIONATE_PEER TO eqa_user
go
GRANT DELETE ON dbo.COMPASSIONATE_PEER TO eqa_user
go
GRANT UPDATE ON dbo.COMPASSIONATE_PEER TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.COMPASSIONATE_PEER TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.COMPASSIONATE_PEER TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.COMPASSIONATE_PEER TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.COMPASSIONATE_PEER TO eqa_user
go
CREATE TABLE dbo.COMPASSIONATE_STATUS
(
    compassionate_status_code code_2 NOT NULL,
    compassionate_status_desc descr  NULL,
    CONSTRAINT PK_COMPASSIONATE_STATUS
    PRIMARY KEY CLUSTERED (compassionate_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.COMPASSIONATE_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.COMPASSIONATE_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.COMPASSIONATE_STATUS >>>'
go
ALTER TABLE dbo.COMPASSIONATE_ENTRY
    ADD CONSTRAINT FK_COMPASSIONATE_ENTRY_STATUS
    FOREIGN KEY (compassionate_status_code)
    REFERENCES dbo.COMPASSIONATE_STATUS (compassionate_status_code)
go
GRANT REFERENCES ON dbo.COMPASSIONATE_STATUS TO eqa_user
go
GRANT SELECT ON dbo.COMPASSIONATE_STATUS TO eqa_user
go
GRANT SELECT ON dbo.COMPASSIONATE_STATUS TO read_only
go
GRANT SELECT ON dbo.COMPASSIONATE_STATUS TO rma_users
go
GRANT INSERT ON dbo.COMPASSIONATE_STATUS TO eqa_user
go
GRANT DELETE ON dbo.COMPASSIONATE_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.COMPASSIONATE_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.COMPASSIONATE_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.COMPASSIONATE_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.COMPASSIONATE_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.COMPASSIONATE_STATUS TO eqa_user
go
CREATE TABLE dbo.COM_COMBO
(
    com_type_code   code_2 NOT NULL,
    com_medium_code code_2 NOT NULL,
    CONSTRAINT PK_COM_COMBO
    PRIMARY KEY CLUSTERED (com_type_code,com_medium_code)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.COM_COMBO') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.COM_COMBO >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.COM_COMBO >>>'
go
GRANT REFERENCES ON dbo.COM_COMBO TO eqa_user
go
GRANT SELECT ON dbo.COM_COMBO TO eqa_user
go
GRANT SELECT ON dbo.COM_COMBO TO read_only
go
GRANT SELECT ON dbo.COM_COMBO TO rma_users
go
GRANT INSERT ON dbo.COM_COMBO TO eqa_user
go
GRANT DELETE ON dbo.COM_COMBO TO eqa_user
go
GRANT UPDATE ON dbo.COM_COMBO TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.COM_COMBO TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.COM_COMBO TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.COM_COMBO TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.COM_COMBO TO eqa_user
go
CREATE TABLE dbo.COM_MEDIUM
(
    com_medium_code code_2 NOT NULL,
    com_medium_desc descr  NOT NULL,
    CONSTRAINT PK_COM_MEDIUM
    PRIMARY KEY CLUSTERED (com_medium_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.COM_MEDIUM') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.COM_MEDIUM >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.COM_MEDIUM >>>'
go
ALTER TABLE dbo.COM_COMBO
    ADD CONSTRAINT FK_COM_COMB_FK_COM_CO_COM_MEDI
    FOREIGN KEY (com_medium_code)
    REFERENCES dbo.COM_MEDIUM (com_medium_code)
go
GRANT REFERENCES ON dbo.COM_MEDIUM TO eqa_user
go
GRANT SELECT ON dbo.COM_MEDIUM TO eqa_user
go
GRANT SELECT ON dbo.COM_MEDIUM TO read_only
go
GRANT SELECT ON dbo.COM_MEDIUM TO rma_users
go
GRANT INSERT ON dbo.COM_MEDIUM TO eqa_user
go
GRANT DELETE ON dbo.COM_MEDIUM TO eqa_user
go
GRANT UPDATE ON dbo.COM_MEDIUM TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.COM_MEDIUM TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.COM_MEDIUM TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.COM_MEDIUM TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.COM_MEDIUM TO eqa_user
go
CREATE TABLE dbo.COM_METHOD
(
    com_method_id         OBJECT_ID     NOT NULL,
    perorg_id             OBJECT_ID     NOT NULL,
    com_type_code         code_2        NOT NULL,
    com_medium_code       code_2        NOT NULL,
    merge_request_number  OBJECT_ID     NULL,
    preferred_ind         yn            DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    effective_from_date   dt            NULL,
    effective_to_date     dt            NULL,
    active_ind            yn            DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    addr_1                addr_line     NULL,
    addr_2                addr_line     NULL,
    addr_3                addr_line     NULL,
    addr_4                addr_line     NULL,
    post_code             postcode      NULL,
    country               code_2        NULL,
    stop_mail_indicator   yn            DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    overseas_ind          yn            DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    preferred_address     yn            DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    phone_num             phone_num     NULL,
    e_addr                emailaddr     NULL,
    created_by            usr           NOT NULL,
    audit_tran_id         OBJECT_ID     NOT NULL,
    ts                    timestamp     NOT NULL,
    phone_extension       varchar(10)   NULL,
    batch_input_id        numeric(12,0) NULL,
    preferred_medium_ind  yn            DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    original_reference_id OBJECT_ID     NULL,
    perorg_role_id        OBJECT_ID     NULL,
    phone_country_code    varchar(10)   NULL,
    phone_area_code       varchar(10)   NULL,
    rel_id                OBJECT_ID     NULL,
    comments              varchar(255)  NULL,
    CONSTRAINT PK_COM_METHOD
    PRIMARY KEY NONCLUSTERED (com_method_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.COM_METHOD') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.COM_METHOD >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.COM_METHOD >>>'
go
ALTER TABLE dbo.COM_METHOD
    ADD CONSTRAINT FK_COM_METHOD_BATCH_INPUT
    FOREIGN KEY (batch_input_id)
    REFERENCES dbo.BATCH_INPUT (batch_input_id)
go
ALTER TABLE dbo.COM_METHOD
    ADD CONSTRAINT FK_COM_METHOD_COM_COMBO
    FOREIGN KEY (com_type_code,com_medium_code)
    REFERENCES dbo.COM_COMBO (com_type_code,com_medium_code)
go
ALTER TABLE dbo.COM_METHOD
    ADD CONSTRAINT FK_PERORG_ROLE_ID
    FOREIGN KEY (perorg_role_id)
    REFERENCES dbo.PERORG_ROLE (perorg_role_id)
go
ALTER TABLE dbo.COM_METHOD
    ADD CONSTRAINT FK_COM_METHOD_MERGE_REQ
    FOREIGN KEY (merge_request_number)
    REFERENCES dbo.MERGE_REQUEST (merge_request_number)
go
ALTER TABLE dbo.COM_METHOD
    ADD CONSTRAINT FK_COM_METHOD_RELATIONSHIP
    FOREIGN KEY (rel_id)
    REFERENCES dbo.RELATIONSHIP (rel_id)
go
ALTER TABLE dbo.COM_METHOD
    ADD CONSTRAINT FK_COM_METHOD_PERORG
    FOREIGN KEY (perorg_id)
    REFERENCES dbo.PERORG (perorg_id)
go
ALTER TABLE dbo.COM_METHOD
    ADD CONSTRAINT FK_COM_METHOD_ORIG_REF_ID
    FOREIGN KEY (original_reference_id)
    REFERENCES dbo.COM_METHOD (com_method_id)
go
GRANT REFERENCES ON dbo.COM_METHOD TO eqa_user
go
GRANT SELECT ON dbo.COM_METHOD TO eqa_user
go
GRANT SELECT ON dbo.COM_METHOD TO read_only
go
GRANT SELECT ON dbo.COM_METHOD TO rma_users
go
GRANT INSERT ON dbo.COM_METHOD TO eqa_user
go
GRANT DELETE ON dbo.COM_METHOD TO eqa_user
go
GRANT UPDATE ON dbo.COM_METHOD TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.COM_METHOD TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.COM_METHOD TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.COM_METHOD TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.COM_METHOD TO eqa_user
go
CREATE TABLE dbo.COM_TYPE
(
    com_type_code   code_2 NOT NULL,
    com_type_descr  descr  NULL,
    user_selectable yn     DEFAULT '1' NOT NULL,
    CONSTRAINT PK_COM_TYPE
    PRIMARY KEY CLUSTERED (com_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.COM_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.COM_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.COM_TYPE >>>'
go
ALTER TABLE dbo.COM_COMBO
    ADD CONSTRAINT FK_COM_COMB_FK_COM_CO_COM_TYPE
    FOREIGN KEY (com_type_code)
    REFERENCES dbo.COM_TYPE (com_type_code)
go
GRANT REFERENCES ON dbo.COM_TYPE TO eqa_user
go
GRANT SELECT ON dbo.COM_TYPE TO eqa_user
go
GRANT SELECT ON dbo.COM_TYPE TO read_only
go
GRANT SELECT ON dbo.COM_TYPE TO rma_users
go
GRANT INSERT ON dbo.COM_TYPE TO eqa_user
go
GRANT DELETE ON dbo.COM_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.COM_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.COM_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.COM_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.COM_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.COM_TYPE TO eqa_user
go
CREATE TABLE dbo.CONDITION_STATUS
(
    condition_status_code code_2    NOT NULL,
    condition_status_desc descr     NOT NULL,
    active_ind            yn_ind    NOT NULL,
    sortkey               sortkey   NOT NULL,
    audit_tran_id         OBJECT_ID NOT NULL,
    CONSTRAINT PK_CONDITION_STATUS
    PRIMARY KEY NONCLUSTERED (condition_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CONDITION_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CONDITION_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CONDITION_STATUS >>>'
go
GRANT REFERENCES ON dbo.CONDITION_STATUS TO eqa_user
go
GRANT SELECT ON dbo.CONDITION_STATUS TO eqa_user
go
GRANT SELECT ON dbo.CONDITION_STATUS TO read_only
go
GRANT SELECT ON dbo.CONDITION_STATUS TO rma_users
go
GRANT INSERT ON dbo.CONDITION_STATUS TO eqa_user
go
GRANT DELETE ON dbo.CONDITION_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.CONDITION_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CONDITION_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CONDITION_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CONDITION_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CONDITION_STATUS TO eqa_user
go
CREATE TABLE dbo.CONDITION_TYPE
(
    condition_type_code code_2    NOT NULL,
    condition_type_desc descr     NOT NULL,
    active_ind          yn_ind    NOT NULL,
    sortkey             sortkey   NOT NULL,
    audit_tran_id       OBJECT_ID NOT NULL,
    CONSTRAINT PK_CONDITION_TYPE
    PRIMARY KEY NONCLUSTERED (condition_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CONDITION_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CONDITION_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CONDITION_TYPE >>>'
go
GRANT REFERENCES ON dbo.CONDITION_TYPE TO eqa_user
go
GRANT SELECT ON dbo.CONDITION_TYPE TO eqa_user
go
GRANT SELECT ON dbo.CONDITION_TYPE TO read_only
go
GRANT SELECT ON dbo.CONDITION_TYPE TO rma_users
go
GRANT INSERT ON dbo.CONDITION_TYPE TO eqa_user
go
GRANT DELETE ON dbo.CONDITION_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.CONDITION_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CONDITION_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CONDITION_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CONDITION_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CONDITION_TYPE TO eqa_user
go
CREATE TABLE dbo.COND_TYPE
(
    cond_type_code      code_2 NOT NULL,
    cond_type_code_desc descr  NULL,
    CONSTRAINT PK_COND_TYPE
    PRIMARY KEY CLUSTERED (cond_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.COND_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.COND_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.COND_TYPE >>>'
go
GRANT REFERENCES ON dbo.COND_TYPE TO eqa_user
go
GRANT SELECT ON dbo.COND_TYPE TO eqa_user
go
GRANT SELECT ON dbo.COND_TYPE TO read_only
go
GRANT SELECT ON dbo.COND_TYPE TO rma_users
go
GRANT INSERT ON dbo.COND_TYPE TO eqa_user
go
GRANT DELETE ON dbo.COND_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.COND_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.COND_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.COND_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.COND_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.COND_TYPE TO eqa_user
go
CREATE TABLE dbo.CONTACT_MERGE_DETAIL
(
    contact_merge_run_id OBJECT_ID   NOT NULL,
    related_entity_id    OBJECT_ID   NOT NULL,
    related_entity_name  varchar(30) NOT NULL,
    audit_tran_id        OBJECT_ID   NOT NULL,
    ts                   timestamp   NOT NULL,
    CONSTRAINT PK_CONTACT_MERGE_DETAIL
    PRIMARY KEY CLUSTERED (contact_merge_run_id,related_entity_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CONTACT_MERGE_DETAIL') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CONTACT_MERGE_DETAIL >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CONTACT_MERGE_DETAIL >>>'
go
GRANT REFERENCES ON dbo.CONTACT_MERGE_DETAIL TO eqa_user
go
GRANT SELECT ON dbo.CONTACT_MERGE_DETAIL TO eqa_user
go
GRANT SELECT ON dbo.CONTACT_MERGE_DETAIL TO read_only
go
GRANT SELECT ON dbo.CONTACT_MERGE_DETAIL TO rma_users
go
GRANT INSERT ON dbo.CONTACT_MERGE_DETAIL TO eqa_user
go
GRANT DELETE ON dbo.CONTACT_MERGE_DETAIL TO eqa_user
go
GRANT UPDATE ON dbo.CONTACT_MERGE_DETAIL TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CONTACT_MERGE_DETAIL TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CONTACT_MERGE_DETAIL TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CONTACT_MERGE_DETAIL TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CONTACT_MERGE_DETAIL TO eqa_user
go
CREATE TABLE dbo.CONTACT_MERGE_RUN
(
    contact_merge_run_id     OBJECT_ID     NOT NULL,
    primary_perorg_id        OBJECT_ID     NOT NULL,
    secondary_perorg_id      OBJECT_ID     NOT NULL,
    audit_tran_id            OBJECT_ID     NOT NULL,
    contact_merge_run_status code_2        NOT NULL,
    merge_start_datetime     datetime      NOT NULL,
    ts                       timestamp     NOT NULL,
    merge_end_datetime       datetime      NULL,
    merge_message            varchar(1000) NULL,
    CONSTRAINT PK_CONTACT_MERGE_RUN
    PRIMARY KEY CLUSTERED (contact_merge_run_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CONTACT_MERGE_RUN') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CONTACT_MERGE_RUN >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CONTACT_MERGE_RUN >>>'
go
ALTER TABLE dbo.CONTACT_MERGE_RUN
    ADD CONSTRAINT FK_CONTACT_MERGE_PRIM_PERORG
    FOREIGN KEY (primary_perorg_id)
    REFERENCES dbo.PERORG (perorg_id)
go
ALTER TABLE dbo.CONTACT_MERGE_RUN
    ADD CONSTRAINT FK_CONTACT_MERGE_SEC_PERORG
    FOREIGN KEY (secondary_perorg_id)
    REFERENCES dbo.PERORG (perorg_id)
go
ALTER TABLE dbo.CONTACT_MERGE_DETAIL
    ADD CONSTRAINT FK_CONTACT_MERGE_DETAIL
    FOREIGN KEY (contact_merge_run_id)
    REFERENCES dbo.CONTACT_MERGE_RUN (contact_merge_run_id)
go
GRANT REFERENCES ON dbo.CONTACT_MERGE_RUN TO eqa_user
go
GRANT SELECT ON dbo.CONTACT_MERGE_RUN TO eqa_user
go
GRANT SELECT ON dbo.CONTACT_MERGE_RUN TO read_only
go
GRANT SELECT ON dbo.CONTACT_MERGE_RUN TO rma_users
go
GRANT INSERT ON dbo.CONTACT_MERGE_RUN TO eqa_user
go
GRANT DELETE ON dbo.CONTACT_MERGE_RUN TO eqa_user
go
GRANT UPDATE ON dbo.CONTACT_MERGE_RUN TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CONTACT_MERGE_RUN TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CONTACT_MERGE_RUN TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CONTACT_MERGE_RUN TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CONTACT_MERGE_RUN TO eqa_user
go
CREATE TABLE dbo.CONTACT_MERGE_RUN_STATUS
(
    contact_merge_run_status code_2      NOT NULL,
    contact_merge_run_desc   descr_short NOT NULL,
    active_ind               yn_ind      NOT NULL,
    CONSTRAINT PK_CONTACT_MERGE_RUN_STATUS
    PRIMARY KEY CLUSTERED (contact_merge_run_status)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CONTACT_MERGE_RUN_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CONTACT_MERGE_RUN_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CONTACT_MERGE_RUN_STATUS >>>'
go
ALTER TABLE dbo.CONTACT_MERGE_RUN
    ADD CONSTRAINT FK_CONTACT_MERGE_RUN_STATUS
    FOREIGN KEY (contact_merge_run_status)
    REFERENCES dbo.CONTACT_MERGE_RUN_STATUS (contact_merge_run_status)
go
GRANT REFERENCES ON dbo.CONTACT_MERGE_RUN_STATUS TO eqa_user
go
GRANT SELECT ON dbo.CONTACT_MERGE_RUN_STATUS TO eqa_user
go
GRANT SELECT ON dbo.CONTACT_MERGE_RUN_STATUS TO read_only
go
GRANT SELECT ON dbo.CONTACT_MERGE_RUN_STATUS TO rma_users
go
GRANT INSERT ON dbo.CONTACT_MERGE_RUN_STATUS TO eqa_user
go
GRANT DELETE ON dbo.CONTACT_MERGE_RUN_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.CONTACT_MERGE_RUN_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CONTACT_MERGE_RUN_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CONTACT_MERGE_RUN_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CONTACT_MERGE_RUN_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CONTACT_MERGE_RUN_STATUS TO eqa_user
go
CREATE TABLE dbo.CONTENT_TYPE_CODE
(
    content_type_code       code_2      NOT NULL,
    content_type_code_desc  descr       NOT NULL,
    content_type_short_desc descr_short NOT NULL,
    sortkey                 sortkey     NOT NULL,
    CONSTRAINT PK_CONTENT_TYPE_CODE
    PRIMARY KEY CLUSTERED (content_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CONTENT_TYPE_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CONTENT_TYPE_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CONTENT_TYPE_CODE >>>'
go
GRANT REFERENCES ON dbo.CONTENT_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.CONTENT_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.CONTENT_TYPE_CODE TO read_only
go
GRANT SELECT ON dbo.CONTENT_TYPE_CODE TO rma_users
go
GRANT INSERT ON dbo.CONTENT_TYPE_CODE TO eqa_user
go
GRANT DELETE ON dbo.CONTENT_TYPE_CODE TO eqa_user
go
GRANT UPDATE ON dbo.CONTENT_TYPE_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CONTENT_TYPE_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CONTENT_TYPE_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CONTENT_TYPE_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CONTENT_TYPE_CODE TO eqa_user
go
CREATE TABLE dbo.CONTEXT_CODE
(
    context_code      char(3)      NOT NULL,
    context_code_desc varchar(255) NOT NULL,
    ts                timestamp    NULL,
    CONSTRAINT PK_CONTEXT_CODE
    PRIMARY KEY CLUSTERED (context_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CONTEXT_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CONTEXT_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CONTEXT_CODE >>>'
go
GRANT REFERENCES ON dbo.CONTEXT_CODE TO eqa_user
go
GRANT SELECT ON dbo.CONTEXT_CODE TO eqa_user
go
GRANT SELECT ON dbo.CONTEXT_CODE TO read_only
go
GRANT SELECT ON dbo.CONTEXT_CODE TO rma_users
go
GRANT INSERT ON dbo.CONTEXT_CODE TO eqa_user
go
GRANT DELETE ON dbo.CONTEXT_CODE TO eqa_user
go
GRANT UPDATE ON dbo.CONTEXT_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CONTEXT_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CONTEXT_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CONTEXT_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CONTEXT_CODE TO eqa_user
go
CREATE TABLE dbo.CONTEXT_TYPE
(
    context_type_code code_2  NOT NULL,
    context_type_desc descr   NOT NULL,
    sortkey           sortkey NULL,
    active_ind        yn      DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    CONSTRAINT PK_CONTEXT_TYPE
    PRIMARY KEY CLUSTERED (context_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CONTEXT_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CONTEXT_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CONTEXT_TYPE >>>'
go
GRANT REFERENCES ON dbo.CONTEXT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.CONTEXT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.CONTEXT_TYPE TO read_only
go
GRANT SELECT ON dbo.CONTEXT_TYPE TO rma_users
go
GRANT INSERT ON dbo.CONTEXT_TYPE TO eqa_user
go
GRANT DELETE ON dbo.CONTEXT_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.CONTEXT_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CONTEXT_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CONTEXT_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CONTEXT_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CONTEXT_TYPE TO eqa_user
go
CREATE TABLE dbo.COP_ACCOM_ARRANGED_TYPE
(
    cop_accom_arranged_code code_2    NOT NULL,
    cop_accom_arranged_desc descr     NOT NULL,
    active_ind              yn_ind    NOT NULL,
    sortkey                 sortkey   NOT NULL,
    audit_tran_id           OBJECT_ID NOT NULL,
    CONSTRAINT PK_COP_ACCOM_ARRANGED_TYPE
    PRIMARY KEY CLUSTERED (cop_accom_arranged_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.COP_ACCOM_ARRANGED_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.COP_ACCOM_ARRANGED_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.COP_ACCOM_ARRANGED_TYPE >>>'
go
GRANT REFERENCES ON dbo.COP_ACCOM_ARRANGED_TYPE TO eqa_user
go
GRANT SELECT ON dbo.COP_ACCOM_ARRANGED_TYPE TO eqa_user
go
GRANT SELECT ON dbo.COP_ACCOM_ARRANGED_TYPE TO read_only
go
GRANT SELECT ON dbo.COP_ACCOM_ARRANGED_TYPE TO rma_users
go
GRANT INSERT ON dbo.COP_ACCOM_ARRANGED_TYPE TO eqa_user
go
GRANT DELETE ON dbo.COP_ACCOM_ARRANGED_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.COP_ACCOM_ARRANGED_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.COP_ACCOM_ARRANGED_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.COP_ACCOM_ARRANGED_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.COP_ACCOM_ARRANGED_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.COP_ACCOM_ARRANGED_TYPE TO eqa_user
go
CREATE TABLE dbo.COP_ACCOM_OPTION_TYPE
(
    cop_accom_option_code code_2    NOT NULL,
    cop_accom_option_desc descr     NOT NULL,
    active_ind            yn_ind    NOT NULL,
    sortkey               sortkey   NOT NULL,
    audit_tran_id         OBJECT_ID NOT NULL,
    CONSTRAINT PK_COP_ACCOM_OPTION_TYPE
    PRIMARY KEY CLUSTERED (cop_accom_option_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.COP_ACCOM_OPTION_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.COP_ACCOM_OPTION_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.COP_ACCOM_OPTION_TYPE >>>'
go
GRANT REFERENCES ON dbo.COP_ACCOM_OPTION_TYPE TO eqa_user
go
GRANT SELECT ON dbo.COP_ACCOM_OPTION_TYPE TO eqa_user
go
GRANT SELECT ON dbo.COP_ACCOM_OPTION_TYPE TO read_only
go
GRANT SELECT ON dbo.COP_ACCOM_OPTION_TYPE TO rma_users
go
GRANT INSERT ON dbo.COP_ACCOM_OPTION_TYPE TO eqa_user
go
GRANT DELETE ON dbo.COP_ACCOM_OPTION_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.COP_ACCOM_OPTION_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.COP_ACCOM_OPTION_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.COP_ACCOM_OPTION_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.COP_ACCOM_OPTION_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.COP_ACCOM_OPTION_TYPE TO eqa_user
go
CREATE TABLE dbo.COP_APPRVL_TYPE
(
    cop_apprvl_type_code code_2    NOT NULL,
    cop_apprvl_type_desc descr     NOT NULL,
    active_ind           yn_ind    NOT NULL,
    sortkey              sortkey   NOT NULL,
    audit_tran_id        OBJECT_ID NOT NULL,
    CONSTRAINT PK_COP_APPRVL_TYPE
    PRIMARY KEY CLUSTERED (cop_apprvl_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.COP_APPRVL_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.COP_APPRVL_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.COP_APPRVL_TYPE >>>'
go
GRANT REFERENCES ON dbo.COP_APPRVL_TYPE TO eqa_user
go
GRANT SELECT ON dbo.COP_APPRVL_TYPE TO eqa_user
go
GRANT SELECT ON dbo.COP_APPRVL_TYPE TO read_only
go
GRANT SELECT ON dbo.COP_APPRVL_TYPE TO rma_users
go
GRANT INSERT ON dbo.COP_APPRVL_TYPE TO eqa_user
go
GRANT DELETE ON dbo.COP_APPRVL_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.COP_APPRVL_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.COP_APPRVL_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.COP_APPRVL_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.COP_APPRVL_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.COP_APPRVL_TYPE TO eqa_user
go
CREATE TABLE dbo.COP_SIGNATORY_STATUS_TYPE
(
    cop_signatory_status_code code_2    NOT NULL,
    cop_signatory_status_desc descr     NOT NULL,
    active_ind                yn_ind    NOT NULL,
    sortkey                   sortkey   NOT NULL,
    audit_tran_id             OBJECT_ID NOT NULL,
    CONSTRAINT PK_COP_SIGNATORY_STATUS_TYPE
    PRIMARY KEY CLUSTERED (cop_signatory_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.COP_SIGNATORY_STATUS_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.COP_SIGNATORY_STATUS_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.COP_SIGNATORY_STATUS_TYPE >>>'
go
GRANT REFERENCES ON dbo.COP_SIGNATORY_STATUS_TYPE TO eqa_user
go
GRANT SELECT ON dbo.COP_SIGNATORY_STATUS_TYPE TO eqa_user
go
GRANT SELECT ON dbo.COP_SIGNATORY_STATUS_TYPE TO read_only
go
GRANT SELECT ON dbo.COP_SIGNATORY_STATUS_TYPE TO rma_users
go
GRANT INSERT ON dbo.COP_SIGNATORY_STATUS_TYPE TO eqa_user
go
GRANT DELETE ON dbo.COP_SIGNATORY_STATUS_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.COP_SIGNATORY_STATUS_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.COP_SIGNATORY_STATUS_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.COP_SIGNATORY_STATUS_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.COP_SIGNATORY_STATUS_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.COP_SIGNATORY_STATUS_TYPE TO eqa_user
go
CREATE TABLE dbo.COST_ALLOCATION
(
    cost_allocation_id   OBJECT_ID   NOT NULL,
    transaction_id       OBJECT_ID   NOT NULL,
    cost_centre          varchar(6)  NULL,
    account_code         varchar(12) NULL,
    cost_allocation_desc varchar(40) NULL,
    gst_rate             varchar(2)  NULL,
    amount               amt         NOT NULL,
    gst_amount           amt         NULL,
    audit_tran_id        OBJECT_ID   NOT NULL,
    ts                   timestamp   NOT NULL,
    school_payment_fees  ny_ind      NOT NULL,
    item_code            varchar(20) NULL,
    quantity             int         NULL,
    unit_price           money       NULL,
    CONSTRAINT PK_COST_ALLOCATION
    PRIMARY KEY CLUSTERED (cost_allocation_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.COST_ALLOCATION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.COST_ALLOCATION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.COST_ALLOCATION >>>'
go
GRANT REFERENCES ON dbo.COST_ALLOCATION TO eqa_user
go
GRANT SELECT ON dbo.COST_ALLOCATION TO eqa_user
go
GRANT SELECT ON dbo.COST_ALLOCATION TO read_only
go
GRANT SELECT ON dbo.COST_ALLOCATION TO rma_users
go
GRANT INSERT ON dbo.COST_ALLOCATION TO eqa_user
go
GRANT DELETE ON dbo.COST_ALLOCATION TO eqa_user
go
GRANT UPDATE ON dbo.COST_ALLOCATION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.COST_ALLOCATION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.COST_ALLOCATION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.COST_ALLOCATION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.COST_ALLOCATION TO eqa_user
go
CREATE TABLE dbo.COUNTRY_CODE
(
    country_code       char(3)     NOT NULL,
    country_name       addr_line   NOT NULL,
    country_short_code code_2      NOT NULL,
    active_ind         yn_ind      NOT NULL,
    courier_zone_code  code_3      NULL,
    country_phone_code varchar(10) NULL,
    country_risk_code  code_2      NULL,
    CONSTRAINT PK_COUNTRY_CODE
    PRIMARY KEY NONCLUSTERED (country_code),
    CONSTRAINT uidx_country_code_01
    UNIQUE NONCLUSTERED (country_short_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.COUNTRY_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.COUNTRY_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.COUNTRY_CODE >>>'
go
ALTER TABLE dbo.COM_METHOD
    ADD CONSTRAINT FK_COM_METHOD_COUNTRY
    FOREIGN KEY (country)
    REFERENCES dbo.COUNTRY_CODE (country_short_code)
go
GRANT REFERENCES ON dbo.COUNTRY_CODE TO eqa_user
go
GRANT SELECT ON dbo.COUNTRY_CODE TO eqa_user
go
GRANT SELECT ON dbo.COUNTRY_CODE TO read_only
go
GRANT SELECT ON dbo.COUNTRY_CODE TO rma_users
go
GRANT INSERT ON dbo.COUNTRY_CODE TO eqa_user
go
GRANT DELETE ON dbo.COUNTRY_CODE TO eqa_user
go
GRANT UPDATE ON dbo.COUNTRY_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.COUNTRY_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.COUNTRY_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.COUNTRY_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.COUNTRY_CODE TO eqa_user
go
CREATE TABLE dbo.COUNTRY_RISK_CODE
(
    country_risk_code code_2    NOT NULL,
    country_risk_desc UNI_DESCR NOT NULL,
    active_ind        yn_ind    NOT NULL,
    CONSTRAINT PK_COUNTRY_RISK_CODE
    PRIMARY KEY CLUSTERED (country_risk_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.COUNTRY_RISK_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.COUNTRY_RISK_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.COUNTRY_RISK_CODE >>>'
go
GRANT REFERENCES ON dbo.COUNTRY_RISK_CODE TO eqa_user
go
GRANT SELECT ON dbo.COUNTRY_RISK_CODE TO eqa_user
go
GRANT SELECT ON dbo.COUNTRY_RISK_CODE TO read_only
go
GRANT SELECT ON dbo.COUNTRY_RISK_CODE TO rma_users
go
GRANT INSERT ON dbo.COUNTRY_RISK_CODE TO eqa_user
go
GRANT DELETE ON dbo.COUNTRY_RISK_CODE TO eqa_user
go
GRANT UPDATE ON dbo.COUNTRY_RISK_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.COUNTRY_RISK_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.COUNTRY_RISK_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.COUNTRY_RISK_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.COUNTRY_RISK_CODE TO eqa_user
go
CREATE TABLE dbo.COURIER_PRICE_LIST
(
    courier_price_list_id OBJECT_ID        NOT NULL,
    courier_zone_code     code_3           NOT NULL,
    courier_price         amt              NOT NULL,
    effective_from_date   dt               NOT NULL,
    effective_to_date     dt               NULL,
    note                  univarchar(1000) NULL,
    created_date          dt               NOT NULL,
    created_by            UNI_USR          NOT NULL,
    active_ind            yn_ind           NOT NULL,
    audit_tran_id         OBJECT_ID        NOT NULL,
    CONSTRAINT PK_COURIER_PRICE_LIST
    PRIMARY KEY CLUSTERED (courier_price_list_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.COURIER_PRICE_LIST') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.COURIER_PRICE_LIST >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.COURIER_PRICE_LIST >>>'
go
GRANT REFERENCES ON dbo.COURIER_PRICE_LIST TO eqa_user
go
GRANT SELECT ON dbo.COURIER_PRICE_LIST TO eqa_user
go
GRANT SELECT ON dbo.COURIER_PRICE_LIST TO read_only
go
GRANT SELECT ON dbo.COURIER_PRICE_LIST TO rma_users
go
GRANT INSERT ON dbo.COURIER_PRICE_LIST TO eqa_user
go
GRANT DELETE ON dbo.COURIER_PRICE_LIST TO eqa_user
go
GRANT UPDATE ON dbo.COURIER_PRICE_LIST TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.COURIER_PRICE_LIST TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.COURIER_PRICE_LIST TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.COURIER_PRICE_LIST TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.COURIER_PRICE_LIST TO eqa_user
go
CREATE TABLE dbo.COURIER_ZONE_CODE
(
    courier_zone_code code_3    NOT NULL,
    courier_zone_desc UNI_DESCR NOT NULL,
    active_ind        yn_ind    NOT NULL,
    sortkey           sortkey   NOT NULL,
    CONSTRAINT PK_COURIER_ZONE_CODE
    PRIMARY KEY CLUSTERED (courier_zone_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.COURIER_ZONE_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.COURIER_ZONE_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.COURIER_ZONE_CODE >>>'
go
ALTER TABLE dbo.COUNTRY_CODE
    ADD CONSTRAINT FK_CTRY_CODE_COURIER_ZONE_CODE
    FOREIGN KEY (courier_zone_code)
    REFERENCES dbo.COURIER_ZONE_CODE (courier_zone_code)
go
ALTER TABLE dbo.COURIER_PRICE_LIST
    ADD CONSTRAINT FK_COURIER_PRICE_LST_CTRY_ZONE
    FOREIGN KEY (courier_zone_code)
    REFERENCES dbo.COURIER_ZONE_CODE (courier_zone_code)
go
GRANT REFERENCES ON dbo.COURIER_ZONE_CODE TO eqa_user
go
GRANT SELECT ON dbo.COURIER_ZONE_CODE TO eqa_user
go
GRANT SELECT ON dbo.COURIER_ZONE_CODE TO read_only
go
GRANT SELECT ON dbo.COURIER_ZONE_CODE TO rma_users
go
GRANT INSERT ON dbo.COURIER_ZONE_CODE TO eqa_user
go
GRANT DELETE ON dbo.COURIER_ZONE_CODE TO eqa_user
go
GRANT UPDATE ON dbo.COURIER_ZONE_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.COURIER_ZONE_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.COURIER_ZONE_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.COURIER_ZONE_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.COURIER_ZONE_CODE TO eqa_user
go
CREATE TABLE dbo.COURSE
(
    course_id                   OBJECT_ID   NOT NULL,
    course_number               varchar(8)  NOT NULL,
    course_type                 code_2      NOT NULL,
    tec_qualification_id        varchar(10) NULL,
    latest_course_version_id    OBJECT_ID   NULL,
    legacy_notes                descr_short NULL,
    active_ind                  yn_ind      NOT NULL,
    audit_tran_id               OBJECT_ID   NOT NULL,
    ts                          timestamp   NOT NULL,
    created_perorg_case_id      OBJECT_ID   NULL,
    last_updated_perorg_case_id OBJECT_ID   NULL,
    CONSTRAINT PK_COURSE
    PRIMARY KEY CLUSTERED (course_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.COURSE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.COURSE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.COURSE >>>'
go
ALTER TABLE dbo.COURSE
    ADD CONSTRAINT FK_COURSE_CREATE_PERORG_CASE
    FOREIGN KEY (created_perorg_case_id)
    REFERENCES dbo.PERORG_CASE (perorg_case_id)
go
ALTER TABLE dbo.COURSE
    ADD CONSTRAINT FK_COURSE_UPDATE_PERORG_CASE
    FOREIGN KEY (last_updated_perorg_case_id)
    REFERENCES dbo.PERORG_CASE (perorg_case_id)
go
GRANT REFERENCES ON dbo.COURSE TO eqa_user
go
GRANT SELECT ON dbo.COURSE TO AyaO
go
GRANT SELECT ON dbo.COURSE TO eqa_user
go
GRANT SELECT ON dbo.COURSE TO read_only
go
GRANT SELECT ON dbo.COURSE TO rma_users
go
GRANT INSERT ON dbo.COURSE TO eqa_user
go
GRANT DELETE ON dbo.COURSE TO eqa_user
go
GRANT UPDATE ON dbo.COURSE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.COURSE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.COURSE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.COURSE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.COURSE TO eqa_user
go
CREATE TABLE dbo.COURSE_MONITORING_CYCLE_CODE
(
    course_monitoring_cycle_code code_2  NOT NULL,
    course_monitoring_cycle_desc descr   NOT NULL,
    active_ind                   yn_ind  NOT NULL,
    sortkey                      sortkey NULL,
    CONSTRAINT PK_COURSE_MONITORING_CYCLE_COD
    PRIMARY KEY CLUSTERED (course_monitoring_cycle_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.COURSE_MONITORING_CYCLE_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.COURSE_MONITORING_CYCLE_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.COURSE_MONITORING_CYCLE_CODE >>>'
go
ALTER TABLE dbo.ACCREDITED_ITEM
    ADD CONSTRAINT FK_ACRD_ITEM_COURSE_MON_CYCLE
    FOREIGN KEY (course_monitoring_cycle_code)
    REFERENCES dbo.COURSE_MONITORING_CYCLE_CODE (course_monitoring_cycle_code)
go
GRANT REFERENCES ON dbo.COURSE_MONITORING_CYCLE_CODE TO eqa_user
go
GRANT SELECT ON dbo.COURSE_MONITORING_CYCLE_CODE TO eqa_user
go
GRANT SELECT ON dbo.COURSE_MONITORING_CYCLE_CODE TO read_only
go
GRANT SELECT ON dbo.COURSE_MONITORING_CYCLE_CODE TO rma_users
go
GRANT INSERT ON dbo.COURSE_MONITORING_CYCLE_CODE TO eqa_user
go
GRANT DELETE ON dbo.COURSE_MONITORING_CYCLE_CODE TO eqa_user
go
GRANT UPDATE ON dbo.COURSE_MONITORING_CYCLE_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.COURSE_MONITORING_CYCLE_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.COURSE_MONITORING_CYCLE_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.COURSE_MONITORING_CYCLE_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.COURSE_MONITORING_CYCLE_CODE TO eqa_user
go
CREATE TABLE dbo.COURSE_MONITORING_STATUS
(
    course_monitoring_status      code_2  NOT NULL,
    course_monitoring_status_desc descr   NOT NULL,
    active_ind                    yn_ind  NOT NULL,
    sortkey                       sortkey NULL,
    CONSTRAINT PK_COURSE_MONITORING_STATUS
    PRIMARY KEY CLUSTERED (course_monitoring_status)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.COURSE_MONITORING_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.COURSE_MONITORING_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.COURSE_MONITORING_STATUS >>>'
go
ALTER TABLE dbo.ACCREDITED_ITEM
    ADD CONSTRAINT FK_ACRD_ITEM_COURSE_MON_STATUS
    FOREIGN KEY (course_monitoring_status)
    REFERENCES dbo.COURSE_MONITORING_STATUS (course_monitoring_status)
go
GRANT REFERENCES ON dbo.COURSE_MONITORING_STATUS TO eqa_user
go
GRANT SELECT ON dbo.COURSE_MONITORING_STATUS TO eqa_user
go
GRANT SELECT ON dbo.COURSE_MONITORING_STATUS TO read_only
go
GRANT SELECT ON dbo.COURSE_MONITORING_STATUS TO rma_users
go
GRANT INSERT ON dbo.COURSE_MONITORING_STATUS TO eqa_user
go
GRANT DELETE ON dbo.COURSE_MONITORING_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.COURSE_MONITORING_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.COURSE_MONITORING_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.COURSE_MONITORING_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.COURSE_MONITORING_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.COURSE_MONITORING_STATUS TO eqa_user
go
CREATE TABLE dbo.COURSE_TYPE
(
    course_type      code_2  NOT NULL,
    course_type_desc descr   NOT NULL,
    degree_ind       ny_ind  NOT NULL,
    active_ind       yn_ind  NOT NULL,
    sortkey          sortkey NULL,
    CONSTRAINT PK_COURSE_TYPE
    PRIMARY KEY CLUSTERED (course_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.COURSE_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.COURSE_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.COURSE_TYPE >>>'
go
ALTER TABLE dbo.COURSE
    ADD CONSTRAINT FK_COURSE_COURSE_TYPE
    FOREIGN KEY (course_type)
    REFERENCES dbo.COURSE_TYPE (course_type)
go
GRANT REFERENCES ON dbo.COURSE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.COURSE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.COURSE_TYPE TO read_only
go
GRANT SELECT ON dbo.COURSE_TYPE TO rma_users
go
GRANT INSERT ON dbo.COURSE_TYPE TO eqa_user
go
GRANT DELETE ON dbo.COURSE_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.COURSE_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.COURSE_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.COURSE_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.COURSE_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.COURSE_TYPE TO eqa_user
go
CREATE TABLE dbo.COURSE_VERSION
(
    course_version_id              OBJECT_ID    NOT NULL,
    course_id                      OBJECT_ID    NOT NULL,
    course_version_number          numeric(8,0) NOT NULL,
    course_version_status          code_2       NOT NULL,
    course_version_status_date     datetime     NOT NULL,
    cfn_catg_id                    OBJECT_ID    NULL,
    level_code_from                code_2       NULL,
    course_owner_perorg_role_id    OBJECT_ID    NOT NULL,
    total_study_hours              numeric(8,2) NULL,
    non_nqf_credits_from           numeric(3,0) NULL,
    total_credits_from             numeric(3,0) NULL,
    nqf_credits_from               numeric(3,0) NULL,
    leads_to_teacher_reg_ind       yn_ind       NOT NULL,
    site_specific_accred_ind       ny_ind       NOT NULL,
    aim                            text         NULL     OFF ROW,
    content                        text         NULL     OFF ROW,
    entry_requirement              text         NULL     OFF ROW,
    outcome                        text         NULL     OFF ROW,
    course_title                   descr        NULL,
    active_ind                     yn_ind       NOT NULL,
    audit_tran_id                  OBJECT_ID    NOT NULL,
    ts                             timestamp    NOT NULL,
    created_perorg_case_id         OBJECT_ID    NULL,
    last_updated_perorg_case_id    OBJECT_ID    NULL,
    comments                       text         NULL     OFF ROW,
    leads_to_nursing_reg_ind       ny_ind       NOT NULL,
    leads_to_soc_wrkrs_reg_ind     ny_ind       NOT NULL,
    course_title_umlauts           descr        NULL,
    level_code_to                  code_2       NULL,
    non_nqf_credits_to             number_3     NULL,
    nqf_credits_to                 number_3     NULL,
    total_credits_to               number_3     NULL,
    no_qfn_reason_code             code_2       NULL,
    embedded_into_crse_id          OBJECT_ID    NULL,
    exit_course_ind                ny_ind       NULL,
    qa_aprv_rating_code            code_2       NULL,
    mmeqa_approved_ind             ny_ind       NOT NULL,
    mmeqa_mark_eligible_ind        ny_ind       NOT NULL,
    approved_for_international_ind ny_ind       NULL,
    sch_prog_level_code            code_2       NULL,
    CONSTRAINT PK_COURSE_VERSION
    PRIMARY KEY NONCLUSTERED (course_version_id),
    CONSTRAINT AK_COURSE_VERSION
    UNIQUE NONCLUSTERED (course_id,course_version_number)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.COURSE_VERSION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.COURSE_VERSION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.COURSE_VERSION >>>'
go
ALTER TABLE dbo.COURSE_VERSION
    ADD CONSTRAINT FK_COURSE_VER_CFN_CAT
    FOREIGN KEY (cfn_catg_id)
    REFERENCES dbo.CFN_CATEGORY (cfn_catg_id)
go
ALTER TABLE dbo.COURSE_VERSION
    ADD CONSTRAINT FK_COURSE_VERSION_COURSE
    FOREIGN KEY (course_id)
    REFERENCES dbo.COURSE (course_id)
go
ALTER TABLE dbo.COURSE_VERSION
    ADD CONSTRAINT FK_COURSE_VERSION_LVL_FROM
    FOREIGN KEY (level_code_from)
    REFERENCES dbo.LVL (level_code)
go
ALTER TABLE dbo.COURSE_VERSION
    ADD CONSTRAINT FK_COURSE_VERSION_LVL_MAX
    FOREIGN KEY (level_code_to)
    REFERENCES dbo.LVL (level_code)
go
ALTER TABLE dbo.COURSE_VERSION
    ADD CONSTRAINT FK_COURSE_VER_PERORG_ROLE
    FOREIGN KEY (course_owner_perorg_role_id)
    REFERENCES dbo.PERORG_ROLE (perorg_role_id)
go
ALTER TABLE dbo.COURSE_VERSION
    ADD CONSTRAINT FK_COURSE_V_CREATE_PERORG_CASE
    FOREIGN KEY (created_perorg_case_id)
    REFERENCES dbo.PERORG_CASE (perorg_case_id)
go
ALTER TABLE dbo.COURSE_VERSION
    ADD CONSTRAINT FK_COURSE_V_UPDATE_PERORG_CASE
    FOREIGN KEY (last_updated_perorg_case_id)
    REFERENCES dbo.PERORG_CASE (perorg_case_id)
go
ALTER TABLE dbo.COURSE_VERSION
    ADD CONSTRAINT FK_CRSE_VER_NO_QFN_REASON_CODE
    FOREIGN KEY (no_qfn_reason_code)
    REFERENCES dbo.NO_QFN_REASON_CODE (no_qfn_reason_code)
go
ALTER TABLE dbo.COURSE_VERSION
    ADD CONSTRAINT FK_CRSE_VER_QA_APRV_RTNG_CODE
    FOREIGN KEY (qa_aprv_rating_code)
    REFERENCES dbo.QA_APRV_RATING_CODE (qa_aprv_rating_code)
go
ALTER TABLE dbo.COURSE_VERSION
    ADD CONSTRAINT FK_COURSE_VERSION_SCH_PROG_LEVEL
    FOREIGN KEY (sch_prog_level_code)
    REFERENCES dbo.SCH_PROG_LEVEL_CODE (sch_prog_level_code)
go
ALTER TABLE dbo.ACCREDITED_ITEM
    ADD CONSTRAINT FK_ACRD_ITEM_COURSE_VER
    FOREIGN KEY (course_version_id)
    REFERENCES dbo.COURSE_VERSION (course_version_id)
go
ALTER TABLE dbo.COURSE
    ADD CONSTRAINT FK_COURSE_COURSE_VERSION
    FOREIGN KEY (latest_course_version_id)
    REFERENCES dbo.COURSE_VERSION (course_version_id)
go
ALTER TABLE dbo.COURSE_VERSION
    ADD CONSTRAINT FK_CRSE_VERSION_CRSE_VERSION
    FOREIGN KEY (embedded_into_crse_id)
    REFERENCES dbo.COURSE_VERSION (course_version_id)
go
GRANT REFERENCES ON dbo.COURSE_VERSION TO eqa_user
go
GRANT SELECT ON dbo.COURSE_VERSION TO eqa_user
go
GRANT SELECT ON dbo.COURSE_VERSION TO read_only
go
GRANT SELECT ON dbo.COURSE_VERSION TO rma_users
go
GRANT SELECT ON dbo.COURSE_VERSION TO AyaO
go
GRANT INSERT ON dbo.COURSE_VERSION TO eqa_user
go
GRANT DELETE ON dbo.COURSE_VERSION TO eqa_user
go
GRANT UPDATE ON dbo.COURSE_VERSION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.COURSE_VERSION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.COURSE_VERSION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.COURSE_VERSION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.COURSE_VERSION TO eqa_user
go
CREATE TABLE dbo.COURSE_VERSION_QFN_VERSION
(
    course_version_qfn_version_id OBJECT_ID NOT NULL,
    course_version_id             OBJECT_ID NOT NULL,
    qfn_version_id                OBJECT_ID NULL,
    active_ind                    yn_ind    NOT NULL,
    audit_tran_id                 OBJECT_ID NOT NULL,
    ts                            timestamp NOT NULL,
    CONSTRAINT PK_COURSE_VERSION_QFN_VERSION
    PRIMARY KEY NONCLUSTERED (course_version_qfn_version_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.COURSE_VERSION_QFN_VERSION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.COURSE_VERSION_QFN_VERSION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.COURSE_VERSION_QFN_VERSION >>>'
go
ALTER TABLE dbo.COURSE_VERSION_QFN_VERSION
    ADD CONSTRAINT FK_COURSE_VER_QFN_VER_CRSE_VER
    FOREIGN KEY (course_version_id)
    REFERENCES dbo.COURSE_VERSION (course_version_id)
go
ALTER TABLE dbo.COURSE_VERSION_QFN_VERSION
    ADD CONSTRAINT FK_COURSE_VER_QFN_VERS_QFN_VER
    FOREIGN KEY (qfn_version_id)
    REFERENCES dbo.QFN_VERSION (qfn_version_id)
go
GRANT REFERENCES ON dbo.COURSE_VERSION_QFN_VERSION TO eqa_user
go
GRANT SELECT ON dbo.COURSE_VERSION_QFN_VERSION TO AyaO
go
GRANT SELECT ON dbo.COURSE_VERSION_QFN_VERSION TO eqa_user
go
GRANT SELECT ON dbo.COURSE_VERSION_QFN_VERSION TO read_only
go
GRANT SELECT ON dbo.COURSE_VERSION_QFN_VERSION TO rma_users
go
GRANT INSERT ON dbo.COURSE_VERSION_QFN_VERSION TO eqa_user
go
GRANT DELETE ON dbo.COURSE_VERSION_QFN_VERSION TO eqa_user
go
GRANT UPDATE ON dbo.COURSE_VERSION_QFN_VERSION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.COURSE_VERSION_QFN_VERSION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.COURSE_VERSION_QFN_VERSION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.COURSE_VERSION_QFN_VERSION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.COURSE_VERSION_QFN_VERSION TO eqa_user
go
CREATE TABLE dbo.COURSE_VERSION_STATUS
(
    course_version_status      code_2  NOT NULL,
    course_version_status_desc descr   NOT NULL,
    active_ind                 yn_ind  NOT NULL,
    sortkey                    sortkey NULL,
    CONSTRAINT PK_COURSE_VERSION_STATUS
    PRIMARY KEY CLUSTERED (course_version_status)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.COURSE_VERSION_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.COURSE_VERSION_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.COURSE_VERSION_STATUS >>>'
go
ALTER TABLE dbo.COURSE_VERSION
    ADD CONSTRAINT FK_COURSE_VER_STATUS
    FOREIGN KEY (course_version_status)
    REFERENCES dbo.COURSE_VERSION_STATUS (course_version_status)
go
GRANT REFERENCES ON dbo.COURSE_VERSION_STATUS TO eqa_user
go
GRANT SELECT ON dbo.COURSE_VERSION_STATUS TO eqa_user
go
GRANT SELECT ON dbo.COURSE_VERSION_STATUS TO read_only
go
GRANT SELECT ON dbo.COURSE_VERSION_STATUS TO rma_users
go
GRANT INSERT ON dbo.COURSE_VERSION_STATUS TO eqa_user
go
GRANT DELETE ON dbo.COURSE_VERSION_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.COURSE_VERSION_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.COURSE_VERSION_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.COURSE_VERSION_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.COURSE_VERSION_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.COURSE_VERSION_STATUS TO eqa_user
go
CREATE TABLE dbo.COURSE_VERSION_STATUS_HIST
(
    course_version_status_hist_id OBJECT_ID NOT NULL,
    course_version_status         code_2    NOT NULL,
    course_version_id             OBJECT_ID NOT NULL,
    course_version_status_date    dt        NOT NULL,
    active_ind                    yn_ind    NOT NULL,
    audit_tran_id                 OBJECT_ID NOT NULL,
    ts                            timestamp NOT NULL,
    CONSTRAINT PK_COURSE_VERSION_STATUS_HIST
    PRIMARY KEY CLUSTERED (course_version_status_hist_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.COURSE_VERSION_STATUS_HIST') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.COURSE_VERSION_STATUS_HIST >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.COURSE_VERSION_STATUS_HIST >>>'
go
ALTER TABLE dbo.COURSE_VERSION_STATUS_HIST
    ADD CONSTRAINT FK_COURSE_VER_STA_HIST_VER
    FOREIGN KEY (course_version_id)
    REFERENCES dbo.COURSE_VERSION (course_version_id)
go
ALTER TABLE dbo.COURSE_VERSION_STATUS_HIST
    ADD CONSTRAINT FK_CRS_VERS_STATUS_HIST_STATUS
    FOREIGN KEY (course_version_status)
    REFERENCES dbo.COURSE_VERSION_STATUS (course_version_status)
go
GRANT REFERENCES ON dbo.COURSE_VERSION_STATUS_HIST TO eqa_user
go
GRANT SELECT ON dbo.COURSE_VERSION_STATUS_HIST TO eqa_user
go
GRANT SELECT ON dbo.COURSE_VERSION_STATUS_HIST TO read_only
go
GRANT SELECT ON dbo.COURSE_VERSION_STATUS_HIST TO rma_users
go
GRANT INSERT ON dbo.COURSE_VERSION_STATUS_HIST TO eqa_user
go
GRANT DELETE ON dbo.COURSE_VERSION_STATUS_HIST TO eqa_user
go
GRANT UPDATE ON dbo.COURSE_VERSION_STATUS_HIST TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.COURSE_VERSION_STATUS_HIST TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.COURSE_VERSION_STATUS_HIST TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.COURSE_VERSION_STATUS_HIST TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.COURSE_VERSION_STATUS_HIST TO eqa_user
go
CREATE TABLE dbo.COURSE_VERSION_STD
(
    course_version_std_id OBJECT_ID NOT NULL,
    course_version_id     OBJECT_ID NOT NULL,
    std_id                OBJECT_ID NOT NULL,
    active_ind            yn_ind    NOT NULL,
    audit_tran_id         OBJECT_ID NOT NULL,
    ts                    timestamp NOT NULL,
    CONSTRAINT PK_COURSE_VERSION_STD
    PRIMARY KEY CLUSTERED (course_version_std_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.COURSE_VERSION_STD') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.COURSE_VERSION_STD >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.COURSE_VERSION_STD >>>'
go
ALTER TABLE dbo.COURSE_VERSION_STD
    ADD CONSTRAINT FK_COURSE_VER_STD_COURSE_VER
    FOREIGN KEY (course_version_id)
    REFERENCES dbo.COURSE_VERSION (course_version_id)
go
ALTER TABLE dbo.COURSE_VERSION_STD
    ADD CONSTRAINT FK_COURSE_VER_STD_STD
    FOREIGN KEY (std_id)
    REFERENCES dbo.STD (std_id)
go
GRANT REFERENCES ON dbo.COURSE_VERSION_STD TO eqa_user
go
GRANT SELECT ON dbo.COURSE_VERSION_STD TO eqa_user
go
GRANT SELECT ON dbo.COURSE_VERSION_STD TO read_only
go
GRANT SELECT ON dbo.COURSE_VERSION_STD TO rma_users
go
GRANT SELECT ON dbo.COURSE_VERSION_STD TO AyaO
go
GRANT INSERT ON dbo.COURSE_VERSION_STD TO eqa_user
go
GRANT DELETE ON dbo.COURSE_VERSION_STD TO eqa_user
go
GRANT UPDATE ON dbo.COURSE_VERSION_STD TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.COURSE_VERSION_STD TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.COURSE_VERSION_STD TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.COURSE_VERSION_STD TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.COURSE_VERSION_STD TO eqa_user
go
CREATE TABLE dbo.CRSE_ENDR_ACHV_STA_HIST
(
    crse_endr_achv_sta_hist_id OBJECT_ID NOT NULL,
    crse_endr_result_id        OBJECT_ID NOT NULL,
    achieved_status_code       code_2    NOT NULL,
    actual_crse_endr_code      code_2    NOT NULL,
    achieved_status_date       datetime  NOT NULL,
    audit_tran_id              OBJECT_ID NOT NULL,
    CONSTRAINT PK_CRSE_ENDR_ACHV_STA_HIST
    PRIMARY KEY CLUSTERED (crse_endr_achv_sta_hist_id)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.CRSE_ENDR_ACHV_STA_HIST') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CRSE_ENDR_ACHV_STA_HIST >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CRSE_ENDR_ACHV_STA_HIST >>>'
go
ALTER TABLE dbo.CRSE_ENDR_ACHV_STA_HIST
    ADD CONSTRAINT FK_ENDR_ACHV_STA_HIST_ACH_STA
    FOREIGN KEY (achieved_status_code)
    REFERENCES dbo.ACHIEVED_STATUS_CODE (achieved_status_code)
go
GRANT REFERENCES ON dbo.CRSE_ENDR_ACHV_STA_HIST TO eqa_user
go
GRANT SELECT ON dbo.CRSE_ENDR_ACHV_STA_HIST TO eqa_user
go
GRANT SELECT ON dbo.CRSE_ENDR_ACHV_STA_HIST TO read_only
go
GRANT SELECT ON dbo.CRSE_ENDR_ACHV_STA_HIST TO rma_users
go
GRANT INSERT ON dbo.CRSE_ENDR_ACHV_STA_HIST TO eqa_user
go
GRANT DELETE ON dbo.CRSE_ENDR_ACHV_STA_HIST TO eqa_user
go
GRANT UPDATE ON dbo.CRSE_ENDR_ACHV_STA_HIST TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CRSE_ENDR_ACHV_STA_HIST TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CRSE_ENDR_ACHV_STA_HIST TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CRSE_ENDR_ACHV_STA_HIST TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CRSE_ENDR_ACHV_STA_HIST TO eqa_user
go
CREATE TABLE dbo.CRSE_ENDR_CHK_STATUS
(
    crse_endr_chk_status_code code_2  NOT NULL,
    crse_endr_chk_status_desc descr   NOT NULL,
    active_ind                yn_ind  NOT NULL,
    sortkey                   sortkey NOT NULL,
    CONSTRAINT PK_CRSE_ENDR_CHK_STATUS
    PRIMARY KEY CLUSTERED (crse_endr_chk_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CRSE_ENDR_CHK_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CRSE_ENDR_CHK_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CRSE_ENDR_CHK_STATUS >>>'
go
GRANT REFERENCES ON dbo.CRSE_ENDR_CHK_STATUS TO eqa_user
go
GRANT SELECT ON dbo.CRSE_ENDR_CHK_STATUS TO eqa_user
go
GRANT SELECT ON dbo.CRSE_ENDR_CHK_STATUS TO read_only
go
GRANT SELECT ON dbo.CRSE_ENDR_CHK_STATUS TO rma_users
go
GRANT INSERT ON dbo.CRSE_ENDR_CHK_STATUS TO eqa_user
go
GRANT DELETE ON dbo.CRSE_ENDR_CHK_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.CRSE_ENDR_CHK_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CRSE_ENDR_CHK_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CRSE_ENDR_CHK_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CRSE_ENDR_CHK_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CRSE_ENDR_CHK_STATUS TO eqa_user
go
CREATE TABLE dbo.CRSE_ENDR_CODE
(
    crse_endr_code  code_2       NOT NULL,
    crse_endr_desc  descr        NOT NULL,
    endr_short_desc varchar(100) NULL,
    level_code      code_2       NULL,
    ranking         int          NULL,
    active_ind      yn_ind       NOT NULL,
    sortkey         sortkey      NOT NULL,
    CONSTRAINT PK_CRSE_ENDR_CODE
    PRIMARY KEY CLUSTERED (crse_endr_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CRSE_ENDR_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CRSE_ENDR_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CRSE_ENDR_CODE >>>'
go
ALTER TABLE dbo.CRSE_ENDR_CODE
    ADD CONSTRAINT FK_CRSE_ENDR_CODE_ENDR
    FOREIGN KEY (endr_short_desc)
    REFERENCES dbo.ENDORSEMENT (short_desc)
go
ALTER TABLE dbo.CRSE_ENDR_CODE
    ADD CONSTRAINT FK_CRSE_ENDR_CODE_LVL
    FOREIGN KEY (level_code)
    REFERENCES dbo.LVL (level_code)
go
ALTER TABLE dbo.CRSE_ENDR_ACHV_STA_HIST
    ADD CONSTRAINT FK_ACHV_STA_HIST_CRSE_ENDR_COD
    FOREIGN KEY (actual_crse_endr_code)
    REFERENCES dbo.CRSE_ENDR_CODE (crse_endr_code)
go
GRANT REFERENCES ON dbo.CRSE_ENDR_CODE TO eqa_user
go
GRANT SELECT ON dbo.CRSE_ENDR_CODE TO eqa_user
go
GRANT SELECT ON dbo.CRSE_ENDR_CODE TO read_only
go
GRANT SELECT ON dbo.CRSE_ENDR_CODE TO rma_users
go
GRANT INSERT ON dbo.CRSE_ENDR_CODE TO eqa_user
go
GRANT DELETE ON dbo.CRSE_ENDR_CODE TO eqa_user
go
GRANT UPDATE ON dbo.CRSE_ENDR_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CRSE_ENDR_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CRSE_ENDR_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CRSE_ENDR_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CRSE_ENDR_CODE TO eqa_user
go
CREATE TABLE dbo.CRSE_ENDR_CREDIT_CATG
(
    crse_endr_credit_catg_code code_1  NOT NULL,
    crse_endr_credit_catg_desc descr   NOT NULL,
    endorsable_ind             yn_ind  NOT NULL,
    ranking                    int     NULL,
    active_ind                 yn_ind  NOT NULL,
    sortkey                    sortkey NOT NULL,
    CONSTRAINT PK_CRSE_ENDR_CREDIT_CATG
    PRIMARY KEY CLUSTERED (crse_endr_credit_catg_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CRSE_ENDR_CREDIT_CATG') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CRSE_ENDR_CREDIT_CATG >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CRSE_ENDR_CREDIT_CATG >>>'
go
GRANT REFERENCES ON dbo.CRSE_ENDR_CREDIT_CATG TO eqa_user
go
GRANT SELECT ON dbo.CRSE_ENDR_CREDIT_CATG TO eqa_user
go
GRANT SELECT ON dbo.CRSE_ENDR_CREDIT_CATG TO read_only
go
GRANT SELECT ON dbo.CRSE_ENDR_CREDIT_CATG TO rma_users
go
GRANT INSERT ON dbo.CRSE_ENDR_CREDIT_CATG TO eqa_user
go
GRANT DELETE ON dbo.CRSE_ENDR_CREDIT_CATG TO eqa_user
go
GRANT UPDATE ON dbo.CRSE_ENDR_CREDIT_CATG TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CRSE_ENDR_CREDIT_CATG TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CRSE_ENDR_CREDIT_CATG TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CRSE_ENDR_CREDIT_CATG TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CRSE_ENDR_CREDIT_CATG TO eqa_user
go
CREATE TABLE dbo.CRSE_ENDR_EXEMPTION
(
    crse_endr_exemption_id OBJECT_ID     NOT NULL,
    crse_endr_rule_id      OBJECT_ID     NOT NULL,
    assessment_type_code   code_2        NOT NULL,
    exemption_desc         descr         NOT NULL,
    special_exemption_ind  ny_ind        NOT NULL,
    created_by_user        usr           NOT NULL,
    created_date           dt            NOT NULL,
    audit_tran_id          numeric(12,0) NOT NULL,
    CONSTRAINT PK_CRSE_ENDR_EXEMPTION
    PRIMARY KEY CLUSTERED (crse_endr_exemption_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CRSE_ENDR_EXEMPTION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CRSE_ENDR_EXEMPTION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CRSE_ENDR_EXEMPTION >>>'
go
ALTER TABLE dbo.CRSE_ENDR_EXEMPTION
    ADD CONSTRAINT FK_CRSE_ENDR_RULE_EXE_ASSES_TY
    FOREIGN KEY (assessment_type_code)
    REFERENCES dbo.ASSESSMENT_TYPE (assessment_type_code)
go
GRANT REFERENCES ON dbo.CRSE_ENDR_EXEMPTION TO eqa_user
go
GRANT SELECT ON dbo.CRSE_ENDR_EXEMPTION TO eqa_user
go
GRANT SELECT ON dbo.CRSE_ENDR_EXEMPTION TO read_only
go
GRANT SELECT ON dbo.CRSE_ENDR_EXEMPTION TO rma_users
go
GRANT INSERT ON dbo.CRSE_ENDR_EXEMPTION TO eqa_user
go
GRANT DELETE ON dbo.CRSE_ENDR_EXEMPTION TO eqa_user
go
GRANT UPDATE ON dbo.CRSE_ENDR_EXEMPTION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CRSE_ENDR_EXEMPTION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CRSE_ENDR_EXEMPTION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CRSE_ENDR_EXEMPTION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CRSE_ENDR_EXEMPTION TO eqa_user
go
CREATE TABLE dbo.CRSE_ENDR_RESULT
(
    crse_endr_result_id       OBJECT_ID     NOT NULL,
    enrolment_id              numeric(12,0) NOT NULL,
    secondary_course_id       OBJECT_ID     NOT NULL,
    actual_crse_endr_code     code_2        NOT NULL,
    intr_assess_rqmt_met_code code_1        NOT NULL,
    extr_assess_rqmt_met_code code_1        NOT NULL,
    achieved_status_code      code_2        NOT NULL,
    crse_endr_rule_id         OBJECT_ID     NOT NULL,
    crse_endr_exemption_id    OBJECT_ID     NULL,
    possible_crse_endr_code   code_2        NULL,
    achieved_status_date      datetime      NOT NULL,
    manual_endr_ind           ny_ind        NOT NULL,
    endorsable_ind            yn_ind        NOT NULL,
    manual_endr_reason        varchar(255)  NULL,
    manual_endr_created_user  usr           NULL,
    exclusion_notes           varchar(1000) NULL,
    created_date              dt            NOT NULL,
    last_check_date           dt            NOT NULL,
    withdrawn_ind             ny_ind        NOT NULL,
    withdrawn_by_user         usr           NULL,
    withdrawn_date            dt            NULL,
    withdrawn_comment         descr         NULL,
    active_ind                yn_ind        NOT NULL,
    audit_tran_id             numeric(12,0) NOT NULL,
    achieved_date             datetime      NULL,
    merge_request_number      OBJECT_ID     NULL,
    CONSTRAINT PK_CRSE_ENDR_RESULT
    PRIMARY KEY CLUSTERED (crse_endr_result_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CRSE_ENDR_RESULT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CRSE_ENDR_RESULT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CRSE_ENDR_RESULT >>>'
go
ALTER TABLE dbo.CRSE_ENDR_RESULT
    ADD CONSTRAINT FK_CRSE_ENDR_RESULT_ACHD_STA
    FOREIGN KEY (achieved_status_code)
    REFERENCES dbo.ACHIEVED_STATUS_CODE (achieved_status_code)
go
ALTER TABLE dbo.CRSE_ENDR_RESULT
    ADD CONSTRAINT FK_CRSE_ENDR_RESULT_ENDR_CODE
    FOREIGN KEY (actual_crse_endr_code)
    REFERENCES dbo.CRSE_ENDR_CODE (crse_endr_code)
go
ALTER TABLE dbo.CRSE_ENDR_RESULT
    ADD CONSTRAINT FK_CRSE_ENDR_RSLT_POS_ENDR_CD
    FOREIGN KEY (possible_crse_endr_code)
    REFERENCES dbo.CRSE_ENDR_CODE (crse_endr_code)
go
ALTER TABLE dbo.CRSE_ENDR_RESULT
    ADD CONSTRAINT FK_CRSE_ENDR_RESULT_EXEMPTION
    FOREIGN KEY (crse_endr_exemption_id)
    REFERENCES dbo.CRSE_ENDR_EXEMPTION (crse_endr_exemption_id)
go
ALTER TABLE dbo.CRSE_ENDR_RESULT
    ADD CONSTRAINT FK_CRSE_ENDR_RESULT_SEC_CRSE
    FOREIGN KEY (secondary_course_id)
    REFERENCES dbo.SECONDARY_COURSE (secondary_course_id)
go
ALTER TABLE dbo.CRSE_ENDR_RESULT
    ADD CONSTRAINT FK_CRSE_ENDR_RSLT_LRNR_ENRL
    FOREIGN KEY (enrolment_id)
    REFERENCES dbo.LEARNER_ENROLMENT (enrolment_id)
go
ALTER TABLE dbo.CRSE_ENDR_RESULT
    ADD CONSTRAINT FK_CRSE_ENDR_RSLT_MERGE_REQ
    FOREIGN KEY (merge_request_number)
    REFERENCES dbo.MERGE_REQUEST (merge_request_number)
go
ALTER TABLE dbo.CRSE_ENDR_ACHV_STA_HIST
    ADD CONSTRAINT FK_ENDR_ACHV_STA_HIST_ENDR_RES
    FOREIGN KEY (crse_endr_result_id)
    REFERENCES dbo.CRSE_ENDR_RESULT (crse_endr_result_id)
go
GRANT REFERENCES ON dbo.CRSE_ENDR_RESULT TO eqa_user
go
GRANT SELECT ON dbo.CRSE_ENDR_RESULT TO eqa_user
go
GRANT SELECT ON dbo.CRSE_ENDR_RESULT TO read_only
go
GRANT SELECT ON dbo.CRSE_ENDR_RESULT TO rma_users
go
GRANT INSERT ON dbo.CRSE_ENDR_RESULT TO eqa_user
go
GRANT DELETE ON dbo.CRSE_ENDR_RESULT TO eqa_user
go
GRANT UPDATE ON dbo.CRSE_ENDR_RESULT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CRSE_ENDR_RESULT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CRSE_ENDR_RESULT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CRSE_ENDR_RESULT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CRSE_ENDR_RESULT TO eqa_user
go
CREATE TABLE dbo.CRSE_ENDR_RQMT_CODE
(
    crse_endr_rqmt_code code_1  NOT NULL,
    crse_endr_rqmt_desc descr   NOT NULL,
    active_ind          yn_ind  NOT NULL,
    sortkey             sortkey NOT NULL,
    CONSTRAINT PK_CRSE_ENDR_RQMT_CODE
    PRIMARY KEY CLUSTERED (crse_endr_rqmt_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CRSE_ENDR_RQMT_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CRSE_ENDR_RQMT_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CRSE_ENDR_RQMT_CODE >>>'
go
ALTER TABLE dbo.CRSE_ENDR_RESULT
    ADD CONSTRAINT FK_CRSE_EDNR_RESULT_E_RQMT_CDE
    FOREIGN KEY (extr_assess_rqmt_met_code)
    REFERENCES dbo.CRSE_ENDR_RQMT_CODE (crse_endr_rqmt_code)
go
ALTER TABLE dbo.CRSE_ENDR_RESULT
    ADD CONSTRAINT FK_CRSE_EDNR_RESULT_I_RQMT_CDE
    FOREIGN KEY (intr_assess_rqmt_met_code)
    REFERENCES dbo.CRSE_ENDR_RQMT_CODE (crse_endr_rqmt_code)
go
GRANT REFERENCES ON dbo.CRSE_ENDR_RQMT_CODE TO eqa_user
go
GRANT SELECT ON dbo.CRSE_ENDR_RQMT_CODE TO eqa_user
go
GRANT SELECT ON dbo.CRSE_ENDR_RQMT_CODE TO read_only
go
GRANT SELECT ON dbo.CRSE_ENDR_RQMT_CODE TO rma_users
go
GRANT INSERT ON dbo.CRSE_ENDR_RQMT_CODE TO eqa_user
go
GRANT DELETE ON dbo.CRSE_ENDR_RQMT_CODE TO eqa_user
go
GRANT UPDATE ON dbo.CRSE_ENDR_RQMT_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CRSE_ENDR_RQMT_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CRSE_ENDR_RQMT_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CRSE_ENDR_RQMT_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CRSE_ENDR_RQMT_CODE TO eqa_user
go
CREATE TABLE dbo.CRSE_ENDR_RULE
(
    crse_endr_rule_id        OBJECT_ID     NOT NULL,
    academic_year            char(4)       NOT NULL,
    rule_name                name          NOT NULL,
    total_credits_reqd       number_3      NOT NULL,
    intr_assmnt_credits_reqd number_3      NOT NULL,
    extr_assmnt_credits_reqd number_3      NOT NULL,
    created_by_user          usr           NOT NULL,
    created_date             dt            NOT NULL,
    audit_tran_id            numeric(12,0) NOT NULL,
    CONSTRAINT PK_CRSE_ENDR_RULE
    PRIMARY KEY CLUSTERED (crse_endr_rule_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CRSE_ENDR_RULE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CRSE_ENDR_RULE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CRSE_ENDR_RULE >>>'
go
ALTER TABLE dbo.CRSE_ENDR_RULE
    ADD CONSTRAINT FK_CRSE_EDNR_RULE_ACAD_YEAR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.CRSE_ENDR_EXEMPTION
    ADD CONSTRAINT FK_CRSE_EDNR_RULE_ENDR_EXEMP
    FOREIGN KEY (crse_endr_rule_id)
    REFERENCES dbo.CRSE_ENDR_RULE (crse_endr_rule_id)
go
ALTER TABLE dbo.CRSE_ENDR_RESULT
    ADD CONSTRAINT FK_CRSE_ENDR_RESULT_ENDR_RULE
    FOREIGN KEY (crse_endr_rule_id)
    REFERENCES dbo.CRSE_ENDR_RULE (crse_endr_rule_id)
go
GRANT REFERENCES ON dbo.CRSE_ENDR_RULE TO eqa_user
go
GRANT SELECT ON dbo.CRSE_ENDR_RULE TO eqa_user
go
GRANT SELECT ON dbo.CRSE_ENDR_RULE TO read_only
go
GRANT SELECT ON dbo.CRSE_ENDR_RULE TO rma_users
go
GRANT INSERT ON dbo.CRSE_ENDR_RULE TO eqa_user
go
GRANT DELETE ON dbo.CRSE_ENDR_RULE TO eqa_user
go
GRANT UPDATE ON dbo.CRSE_ENDR_RULE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CRSE_ENDR_RULE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CRSE_ENDR_RULE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CRSE_ENDR_RULE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CRSE_ENDR_RULE TO eqa_user
go
CREATE TABLE dbo.CRSE_ENDR_RULE_STD_TYPE
(
    crse_endr_rule_std_type_id OBJECT_ID     NOT NULL,
    crse_endr_rule_id          OBJECT_ID     NOT NULL,
    std_type_code              code_2        NOT NULL,
    audit_tran_id              numeric(12,0) NOT NULL,
    CONSTRAINT PK_CRSE_ENDR_RULE_STD_TYPE
    PRIMARY KEY CLUSTERED (crse_endr_rule_std_type_id)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.CRSE_ENDR_RULE_STD_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CRSE_ENDR_RULE_STD_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CRSE_ENDR_RULE_STD_TYPE >>>'
go
ALTER TABLE dbo.CRSE_ENDR_RULE_STD_TYPE
    ADD CONSTRAINT FK_RULE_STD_CRSE_ENDR_RULE
    FOREIGN KEY (crse_endr_rule_id)
    REFERENCES dbo.CRSE_ENDR_RULE (crse_endr_rule_id)
go
ALTER TABLE dbo.CRSE_ENDR_RULE_STD_TYPE
    ADD CONSTRAINT FK_CRSE_ENDR_RULE_STD_STD_TYPE
    FOREIGN KEY (std_type_code)
    REFERENCES dbo.STD_TYPE_CODE (std_type_code)
go
GRANT REFERENCES ON dbo.CRSE_ENDR_RULE_STD_TYPE TO eqa_user
go
GRANT SELECT ON dbo.CRSE_ENDR_RULE_STD_TYPE TO eqa_user
go
GRANT SELECT ON dbo.CRSE_ENDR_RULE_STD_TYPE TO read_only
go
GRANT SELECT ON dbo.CRSE_ENDR_RULE_STD_TYPE TO rma_users
go
GRANT INSERT ON dbo.CRSE_ENDR_RULE_STD_TYPE TO eqa_user
go
GRANT DELETE ON dbo.CRSE_ENDR_RULE_STD_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.CRSE_ENDR_RULE_STD_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CRSE_ENDR_RULE_STD_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CRSE_ENDR_RULE_STD_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CRSE_ENDR_RULE_STD_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CRSE_ENDR_RULE_STD_TYPE TO eqa_user
go
CREATE TABLE dbo.CRSE_ENDR_SOP
(
    crse_endr_sop_id OBJECT_ID NOT NULL,
    enrolment_id     OBJECT_ID NOT NULL,
    file_name        name      NOT NULL,
    is_latest_ind    yn_ind    NOT NULL,
    sop_run_date     dt        NOT NULL,
    run_by_type_desc descr     NOT NULL,
    run_by_user      usr       NULL,
    audit_tran_id    OBJECT_ID NOT NULL,
    CONSTRAINT PK_CRSE_ENDR_SOP
    PRIMARY KEY CLUSTERED (crse_endr_sop_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CRSE_ENDR_SOP') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CRSE_ENDR_SOP >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CRSE_ENDR_SOP >>>'
go
ALTER TABLE dbo.CRSE_ENDR_SOP
    ADD CONSTRAINT FK_CRSE_ENDR_SOP_ENROLMENT
    FOREIGN KEY (enrolment_id)
    REFERENCES dbo.LEARNER_ENROLMENT (enrolment_id)
go
GRANT REFERENCES ON dbo.CRSE_ENDR_SOP TO eqa_user
go
GRANT SELECT ON dbo.CRSE_ENDR_SOP TO eqa_user
go
GRANT SELECT ON dbo.CRSE_ENDR_SOP TO read_only
go
GRANT SELECT ON dbo.CRSE_ENDR_SOP TO rma_users
go
GRANT INSERT ON dbo.CRSE_ENDR_SOP TO eqa_user
go
GRANT DELETE ON dbo.CRSE_ENDR_SOP TO eqa_user
go
GRANT UPDATE ON dbo.CRSE_ENDR_SOP TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CRSE_ENDR_SOP TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CRSE_ENDR_SOP TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CRSE_ENDR_SOP TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CRSE_ENDR_SOP TO eqa_user
go
CREATE TABLE dbo.CURRENCY
(
    currency_code varchar(3)   NOT NULL,
    currency_desc varchar(255) NOT NULL,
    international yn           DEFAULT '0' NOT NULL,
    CONSTRAINT PK_CURRENCY
    PRIMARY KEY CLUSTERED (currency_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CURRENCY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CURRENCY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CURRENCY >>>'
go
GRANT REFERENCES ON dbo.CURRENCY TO eqa_user
go
GRANT SELECT ON dbo.CURRENCY TO eqa_user
go
GRANT SELECT ON dbo.CURRENCY TO read_only
go
GRANT SELECT ON dbo.CURRENCY TO rma_users
go
GRANT INSERT ON dbo.CURRENCY TO eqa_user
go
GRANT DELETE ON dbo.CURRENCY TO eqa_user
go
GRANT UPDATE ON dbo.CURRENCY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CURRENCY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CURRENCY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CURRENCY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CURRENCY TO eqa_user
go
CREATE TABLE dbo.CUT_SCORE_STATUS
(
    cut_score_status_code code_3  NOT NULL,
    cut_score_status_desc descr   NOT NULL,
    active_ind            yn_ind  NOT NULL,
    sortkey               sortkey NOT NULL,
    CONSTRAINT PK_CUT_SCORE_STATUS
    PRIMARY KEY CLUSTERED (cut_score_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CUT_SCORE_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CUT_SCORE_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CUT_SCORE_STATUS >>>'
go
ALTER TABLE dbo.ASSESSMENT_SESSION_COMPONENT
    ADD CONSTRAINT FK_ASCMPT_MARKING_SCHEME_STATU
    FOREIGN KEY (cut_score_status_code)
    REFERENCES dbo.CUT_SCORE_STATUS (cut_score_status_code)
go
GRANT REFERENCES ON dbo.CUT_SCORE_STATUS TO eqa_user
go
GRANT SELECT ON dbo.CUT_SCORE_STATUS TO eqa_user
go
GRANT SELECT ON dbo.CUT_SCORE_STATUS TO read_only
go
GRANT SELECT ON dbo.CUT_SCORE_STATUS TO rma_users
go
GRANT INSERT ON dbo.CUT_SCORE_STATUS TO eqa_user
go
GRANT DELETE ON dbo.CUT_SCORE_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.CUT_SCORE_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CUT_SCORE_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CUT_SCORE_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CUT_SCORE_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CUT_SCORE_STATUS TO eqa_user
go
CREATE TABLE dbo.CYCLE_CONTEXT
(
    context_code char(4)      NOT NULL,
    context_desc varchar(255) NOT NULL,
    CONSTRAINT PK_CYCLE_CONTEXT
    PRIMARY KEY CLUSTERED (context_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.CYCLE_CONTEXT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.CYCLE_CONTEXT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.CYCLE_CONTEXT >>>'
go
GRANT REFERENCES ON dbo.CYCLE_CONTEXT TO eqa_user
go
GRANT SELECT ON dbo.CYCLE_CONTEXT TO eqa_user
go
GRANT SELECT ON dbo.CYCLE_CONTEXT TO read_only
go
GRANT SELECT ON dbo.CYCLE_CONTEXT TO rma_users
go
GRANT INSERT ON dbo.CYCLE_CONTEXT TO eqa_user
go
GRANT DELETE ON dbo.CYCLE_CONTEXT TO eqa_user
go
GRANT UPDATE ON dbo.CYCLE_CONTEXT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.CYCLE_CONTEXT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.CYCLE_CONTEXT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.CYCLE_CONTEXT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.CYCLE_CONTEXT TO eqa_user
go
CREATE TABLE dbo.DATABASE_BATCH_VERSION
(
    server       varchar(30)  NULL,
    db           varchar(30)  NULL,
    version_date datetime     DEFAULT getdate() NULL,
    jobname      varchar(255) NULL,
    version      varchar(255) NULL,
    step         varchar(50)  NULL,
    description  varchar(255) NOT NULL,
    outcome      varchar(30)  NULL
)
LOCK ALLPAGES
go
IF OBJECT_ID('dbo.DATABASE_BATCH_VERSION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.DATABASE_BATCH_VERSION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.DATABASE_BATCH_VERSION >>>'
go
GRANT REFERENCES ON dbo.DATABASE_BATCH_VERSION TO public
go
GRANT SELECT ON dbo.DATABASE_BATCH_VERSION TO public
go
GRANT INSERT ON dbo.DATABASE_BATCH_VERSION TO public
go
GRANT DELETE ON dbo.DATABASE_BATCH_VERSION TO public
go
GRANT UPDATE ON dbo.DATABASE_BATCH_VERSION TO public
go
GRANT DELETE STATISTICS ON dbo.DATABASE_BATCH_VERSION TO public
go
GRANT TRUNCATE TABLE ON dbo.DATABASE_BATCH_VERSION TO public
go
GRANT UPDATE STATISTICS ON dbo.DATABASE_BATCH_VERSION TO public
go
GRANT TRANSFER TABLE ON dbo.DATABASE_BATCH_VERSION TO public
go
CREATE TABLE dbo.DATABASE_VERSION
(
    server       varchar(30)  NULL,
    db           varchar(30)  NULL,
    version_date datetime     DEFAULT getdate() NULL,
    application  varchar(255) NULL,
    version      varchar(255) NULL,
    description  varchar(255) NOT NULL,
    outcome      char(30)     NULL
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.DATABASE_VERSION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.DATABASE_VERSION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.DATABASE_VERSION >>>'
go
GRANT REFERENCES ON dbo.DATABASE_VERSION TO eqa_user
go
GRANT SELECT ON dbo.DATABASE_VERSION TO public
go
GRANT INSERT ON dbo.DATABASE_VERSION TO eqa_user
go
GRANT DELETE ON dbo.DATABASE_VERSION TO eqa_user
go
GRANT UPDATE ON dbo.DATABASE_VERSION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.DATABASE_VERSION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.DATABASE_VERSION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.DATABASE_VERSION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.DATABASE_VERSION TO eqa_user
go
CREATE TABLE dbo.DBA_REPL_CONTROL
(
    servername    varchar(30) NOT NULL,
    database_name varchar(30) NOT NULL,
    database_type varchar(30) NOT NULL,
    CONSTRAINT PK_DBA_REPL_CONTROL
    PRIMARY KEY CLUSTERED (servername)
)
LOCK ALLPAGES
go
IF OBJECT_ID('dbo.DBA_REPL_CONTROL') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.DBA_REPL_CONTROL >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.DBA_REPL_CONTROL >>>'
go
GRANT REFERENCES ON dbo.DBA_REPL_CONTROL TO eqa_user
go
GRANT SELECT ON dbo.DBA_REPL_CONTROL TO eqa_user
go
GRANT SELECT ON dbo.DBA_REPL_CONTROL TO read_only
go
GRANT SELECT ON dbo.DBA_REPL_CONTROL TO rma_users
go
GRANT INSERT ON dbo.DBA_REPL_CONTROL TO eqa_user
go
GRANT DELETE ON dbo.DBA_REPL_CONTROL TO eqa_user
go
GRANT UPDATE ON dbo.DBA_REPL_CONTROL TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.DBA_REPL_CONTROL TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.DBA_REPL_CONTROL TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.DBA_REPL_CONTROL TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.DBA_REPL_CONTROL TO eqa_user
go
CREATE TABLE dbo.DEAD_MESSAGE_QUEUE
(
    mq_name   varchar(100)   NOT NULL,
    msg_key   varbinary(32)  NOT NULL,
    msg_size  int            NOT NULL,
    msg_bytes varbinary(255) NULL,
    msg_image image          NULL     OFF ROW,
    msg_lock  varchar(100)   NOT NULL,
    CONSTRAINT PK_DEAD_MESSAGE_QUEUE
    PRIMARY KEY CLUSTERED (mq_name,msg_key)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.DEAD_MESSAGE_QUEUE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.DEAD_MESSAGE_QUEUE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.DEAD_MESSAGE_QUEUE >>>'
go
GRANT REFERENCES ON dbo.DEAD_MESSAGE_QUEUE TO eqa_user
go
GRANT SELECT ON dbo.DEAD_MESSAGE_QUEUE TO eqa_user
go
GRANT SELECT ON dbo.DEAD_MESSAGE_QUEUE TO read_only
go
GRANT SELECT ON dbo.DEAD_MESSAGE_QUEUE TO rma_users
go
GRANT INSERT ON dbo.DEAD_MESSAGE_QUEUE TO eqa_user
go
GRANT DELETE ON dbo.DEAD_MESSAGE_QUEUE TO eqa_user
go
GRANT UPDATE ON dbo.DEAD_MESSAGE_QUEUE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.DEAD_MESSAGE_QUEUE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.DEAD_MESSAGE_QUEUE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.DEAD_MESSAGE_QUEUE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.DEAD_MESSAGE_QUEUE TO eqa_user
go
CREATE TABLE dbo.DEBTOR
(
    debtor_id       OBJECT_ID   NOT NULL,
    provider_id     OBJECT_ID   NOT NULL,
    location        number_2    NOT NULL,
    opm_debtor_code varchar(12) NOT NULL,
    direct_debit    ny_ind      NOT NULL,
    gst_included    yn_ind      NOT NULL,
    active_ind      yn_ind      NOT NULL,
    audit_tran_id   OBJECT_ID   NOT NULL,
    ts              timestamp   NOT NULL,
    CONSTRAINT PK_DEBTOR
    PRIMARY KEY CLUSTERED (debtor_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.DEBTOR') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.DEBTOR >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.DEBTOR >>>'
go
ALTER TABLE dbo.DEBTOR
    ADD CONSTRAINT FK_DEBTOR_PROVIDER
    FOREIGN KEY (provider_id,location)
    REFERENCES dbo.PROVIDER (moe_provider_id,location)
go
GRANT REFERENCES ON dbo.DEBTOR TO eqa_user
go
GRANT SELECT ON dbo.DEBTOR TO eqa_user
go
GRANT SELECT ON dbo.DEBTOR TO read_only
go
GRANT SELECT ON dbo.DEBTOR TO rma_users
go
GRANT INSERT ON dbo.DEBTOR TO eqa_user
go
GRANT DELETE ON dbo.DEBTOR TO eqa_user
go
GRANT UPDATE ON dbo.DEBTOR TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.DEBTOR TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.DEBTOR TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.DEBTOR TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.DEBTOR TO eqa_user
go
CREATE TABLE dbo.DELIVERY_MODE_TYPE
(
    delivery_mode_type      code_2  NOT NULL,
    delivery_mode_type_desc descr   NOT NULL,
    active_ind              yn_ind  NOT NULL,
    sortkey                 sortkey NULL,
    CONSTRAINT PK_DELIVERY_MODE_TYPE
    PRIMARY KEY CLUSTERED (delivery_mode_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.DELIVERY_MODE_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.DELIVERY_MODE_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.DELIVERY_MODE_TYPE >>>'
go
ALTER TABLE dbo.ACCREDITED_ITEM
    ADD CONSTRAINT FK_ACRD_ITEM_DEL_MODE_TYPE
    FOREIGN KEY (delivery_mode_type)
    REFERENCES dbo.DELIVERY_MODE_TYPE (delivery_mode_type)
go
GRANT REFERENCES ON dbo.DELIVERY_MODE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.DELIVERY_MODE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.DELIVERY_MODE_TYPE TO read_only
go
GRANT SELECT ON dbo.DELIVERY_MODE_TYPE TO rma_users
go
GRANT INSERT ON dbo.DELIVERY_MODE_TYPE TO eqa_user
go
GRANT DELETE ON dbo.DELIVERY_MODE_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.DELIVERY_MODE_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.DELIVERY_MODE_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.DELIVERY_MODE_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.DELIVERY_MODE_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.DELIVERY_MODE_TYPE TO eqa_user
go
CREATE TABLE dbo.DELIVERY_SITE_STATUS
(
    delivery_site_status      code_2  NOT NULL,
    delivery_site_status_desc descr   NOT NULL,
    active_ind                yn_ind  NOT NULL,
    sortkey                   sortkey NULL,
    CONSTRAINT PK_DELIVERY_SITE_STATUS
    PRIMARY KEY CLUSTERED (delivery_site_status)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.DELIVERY_SITE_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.DELIVERY_SITE_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.DELIVERY_SITE_STATUS >>>'
go
GRANT REFERENCES ON dbo.DELIVERY_SITE_STATUS TO eqa_user
go
GRANT SELECT ON dbo.DELIVERY_SITE_STATUS TO eqa_user
go
GRANT SELECT ON dbo.DELIVERY_SITE_STATUS TO read_only
go
GRANT SELECT ON dbo.DELIVERY_SITE_STATUS TO rma_users
go
GRANT INSERT ON dbo.DELIVERY_SITE_STATUS TO eqa_user
go
GRANT DELETE ON dbo.DELIVERY_SITE_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.DELIVERY_SITE_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.DELIVERY_SITE_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.DELIVERY_SITE_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.DELIVERY_SITE_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.DELIVERY_SITE_STATUS TO eqa_user
go
CREATE TABLE dbo.DELIVERY_TYPE
(
    delivery_type_code code_3    NOT NULL,
    delivery_type_desc UNI_DESCR NOT NULL,
    active_ind         yn_ind    NOT NULL,
    sortkey            sortkey   NOT NULL,
    CONSTRAINT PK_DELIVERY_TYPE
    PRIMARY KEY CLUSTERED (delivery_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.DELIVERY_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.DELIVERY_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.DELIVERY_TYPE >>>'
go
GRANT REFERENCES ON dbo.DELIVERY_TYPE TO eqa_user
go
GRANT SELECT ON dbo.DELIVERY_TYPE TO eqa_user
go
GRANT SELECT ON dbo.DELIVERY_TYPE TO read_only
go
GRANT SELECT ON dbo.DELIVERY_TYPE TO rma_users
go
GRANT INSERT ON dbo.DELIVERY_TYPE TO eqa_user
go
GRANT DELETE ON dbo.DELIVERY_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.DELIVERY_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.DELIVERY_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.DELIVERY_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.DELIVERY_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.DELIVERY_TYPE TO eqa_user
go
CREATE TABLE dbo.DIARY_EVENT
(
    diary_event_id        OBJECT_ID     NOT NULL,
    perorg_id             OBJECT_ID     NOT NULL,
    event_type            code_2        NOT NULL,
    audit_tran_id         OBJECT_ID     NULL,
    ts                    timestamp     NOT NULL,
    event_subject         descr         NULL,
    event_desc            descr         NULL,
    created_by            usr           NULL,
    event_date_time       dt            NULL,
    active_ind            yn            DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    original_reference_id OBJECT_ID     NULL,
    current_reference_id  OBJECT_ID     NULL,
    previous_reference_id OBJECT_ID     NULL,
    reason_type           char(2)       NULL,
    update_type           char(2)       NULL,
    merge_request_number  numeric(12,0) NULL,
    enrolment_id          OBJECT_ID     NULL,
    CONSTRAINT PK_DIARY_EVENT
    PRIMARY KEY NONCLUSTERED (diary_event_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.DIARY_EVENT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.DIARY_EVENT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.DIARY_EVENT >>>'
go
ALTER TABLE dbo.DIARY_EVENT
    ADD CONSTRAINT FK_DIARY_EV_FK_DIARY__PERORG
    FOREIGN KEY (perorg_id)
    REFERENCES dbo.PERORG (perorg_id)
go
ALTER TABLE dbo.DIARY_EVENT
    ADD CONSTRAINT FK_DIARY_EVENT_MERGE_RE
    FOREIGN KEY (merge_request_number)
    REFERENCES dbo.MERGE_REQUEST (merge_request_number)
go
ALTER TABLE dbo.DIARY_EVENT
    ADD CONSTRAINT FK_DIARY_EVENT_ENRLMNT_ID
    FOREIGN KEY (enrolment_id)
    REFERENCES dbo.LEARNER_ENROLMENT (enrolment_id)
go
GRANT REFERENCES ON dbo.DIARY_EVENT TO eqa_user
go
GRANT SELECT ON dbo.DIARY_EVENT TO eqa_user
go
GRANT SELECT ON dbo.DIARY_EVENT TO read_only
go
GRANT SELECT ON dbo.DIARY_EVENT TO rma_users
go
GRANT INSERT ON dbo.DIARY_EVENT TO eqa_user
go
GRANT INSERT ON dbo.DIARY_EVENT TO eqa_rpt_user
go
GRANT DELETE ON dbo.DIARY_EVENT TO eqa_user
go
GRANT DELETE ON dbo.DIARY_EVENT TO eqa_rpt_user
go
GRANT UPDATE ON dbo.DIARY_EVENT TO eqa_user
go
GRANT UPDATE ON dbo.DIARY_EVENT TO eqa_rpt_user
go
GRANT DELETE STATISTICS ON dbo.DIARY_EVENT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.DIARY_EVENT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.DIARY_EVENT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.DIARY_EVENT TO eqa_user
go
CREATE TABLE dbo.DIARY_EVENT_REASON
(
    reason_type     char(2)      NOT NULL,
    reason_desc     varchar(255) NULL,
    user_selectable yn           DEFAULT 1 NOT NULL,
    CONSTRAINT PK_DIARY_EVENT_REASON
    PRIMARY KEY CLUSTERED (reason_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.DIARY_EVENT_REASON') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.DIARY_EVENT_REASON >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.DIARY_EVENT_REASON >>>'
go
ALTER TABLE dbo.DIARY_EVENT
    ADD CONSTRAINT FK_DIARY_EVENT_REASON
    FOREIGN KEY (reason_type)
    REFERENCES dbo.DIARY_EVENT_REASON (reason_type)
go
GRANT REFERENCES ON dbo.DIARY_EVENT_REASON TO eqa_user
go
GRANT SELECT ON dbo.DIARY_EVENT_REASON TO eqa_user
go
GRANT SELECT ON dbo.DIARY_EVENT_REASON TO read_only
go
GRANT SELECT ON dbo.DIARY_EVENT_REASON TO rma_users
go
GRANT INSERT ON dbo.DIARY_EVENT_REASON TO eqa_user
go
GRANT DELETE ON dbo.DIARY_EVENT_REASON TO eqa_user
go
GRANT UPDATE ON dbo.DIARY_EVENT_REASON TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.DIARY_EVENT_REASON TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.DIARY_EVENT_REASON TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.DIARY_EVENT_REASON TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.DIARY_EVENT_REASON TO eqa_user
go
CREATE TABLE dbo.DIARY_EVENT_TYPE
(
    event_type      code_2 NOT NULL,
    event_type_desc descr  NULL,
    CONSTRAINT PK_DIARY_EVENT_TYPE
    PRIMARY KEY CLUSTERED (event_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.DIARY_EVENT_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.DIARY_EVENT_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.DIARY_EVENT_TYPE >>>'
go
ALTER TABLE dbo.DIARY_EVENT
    ADD CONSTRAINT FK_DIARY_EV_FK_DIARY__DIARY_EV
    FOREIGN KEY (event_type)
    REFERENCES dbo.DIARY_EVENT_TYPE (event_type)
go
GRANT REFERENCES ON dbo.DIARY_EVENT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.DIARY_EVENT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.DIARY_EVENT_TYPE TO read_only
go
GRANT SELECT ON dbo.DIARY_EVENT_TYPE TO rma_users
go
GRANT INSERT ON dbo.DIARY_EVENT_TYPE TO eqa_user
go
GRANT DELETE ON dbo.DIARY_EVENT_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.DIARY_EVENT_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.DIARY_EVENT_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.DIARY_EVENT_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.DIARY_EVENT_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.DIARY_EVENT_TYPE TO eqa_user
go
CREATE TABLE dbo.DIARY_EVENT_UPDATE_TYPE
(
    update_type      char(2)      NOT NULL,
    update_type_desc varchar(255) NOT NULL,
    CONSTRAINT PK_DIARY_EVENT_UPDATE_TYPE
    PRIMARY KEY CLUSTERED (update_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.DIARY_EVENT_UPDATE_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.DIARY_EVENT_UPDATE_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.DIARY_EVENT_UPDATE_TYPE >>>'
go
ALTER TABLE dbo.DIARY_EVENT
    ADD CONSTRAINT FK_DIARY_EV_U_FK_DIARY_EV
    FOREIGN KEY (update_type)
    REFERENCES dbo.DIARY_EVENT_UPDATE_TYPE (update_type)
go
GRANT REFERENCES ON dbo.DIARY_EVENT_UPDATE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.DIARY_EVENT_UPDATE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.DIARY_EVENT_UPDATE_TYPE TO read_only
go
GRANT SELECT ON dbo.DIARY_EVENT_UPDATE_TYPE TO rma_users
go
GRANT INSERT ON dbo.DIARY_EVENT_UPDATE_TYPE TO eqa_user
go
GRANT DELETE ON dbo.DIARY_EVENT_UPDATE_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.DIARY_EVENT_UPDATE_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.DIARY_EVENT_UPDATE_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.DIARY_EVENT_UPDATE_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.DIARY_EVENT_UPDATE_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.DIARY_EVENT_UPDATE_TYPE TO eqa_user
go
CREATE TABLE dbo.DIGITAL_ENTRY
(
    entry_id          numeric(12,0) NOT NULL,
    result_id         numeric(12,0) NULL,
    audit_tran_id     numeric(12,0) NOT NULL,
    assessment_method code_2        NULL,
    withdrawn         smallint      DEFAULT 0 NOT NULL,
    withdrawn_by      varchar(30)   NULL,
    withdrawn_date    datetime      NULL,
    CONSTRAINT PK_DIGITAL_ENTRY
    PRIMARY KEY CLUSTERED (entry_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.DIGITAL_ENTRY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.DIGITAL_ENTRY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.DIGITAL_ENTRY >>>'
go
ALTER TABLE dbo.DIGITAL_ENTRY
    ADD CONSTRAINT FK_DIGITAL_ENTRY_ASS_METHOD
    FOREIGN KEY (assessment_method)
    REFERENCES dbo.ASSESSMENT_METHOD (assessment_method)
go
ALTER TABLE dbo.DIGITAL_ENTRY
    ADD CONSTRAINT FK_DIGITAL_ENTRY_RESULT
    FOREIGN KEY (result_id)
    REFERENCES dbo.RESULT (result_id)
go
GRANT REFERENCES ON dbo.DIGITAL_ENTRY TO eqa_user
go
GRANT SELECT ON dbo.DIGITAL_ENTRY TO eqa_user
go
GRANT SELECT ON dbo.DIGITAL_ENTRY TO read_only
go
GRANT SELECT ON dbo.DIGITAL_ENTRY TO rma_users
go
GRANT INSERT ON dbo.DIGITAL_ENTRY TO eqa_user
go
GRANT DELETE ON dbo.DIGITAL_ENTRY TO eqa_user
go
GRANT UPDATE ON dbo.DIGITAL_ENTRY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.DIGITAL_ENTRY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.DIGITAL_ENTRY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.DIGITAL_ENTRY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.DIGITAL_ENTRY TO eqa_user
go
CREATE TABLE dbo.DIGITAL_RESULT
(
    digital_result_id        numeric(12,0) IDENTITY,
    learner_nsn              nsn           NOT NULL,
    std_number               varchar(8)    NOT NULL,
    moe_provider_id          OBJECT_ID     NULL,
    marker_code              int           NOT NULL,
    result_code              varchar(5)    NOT NULL,
    status                   varchar(8)    NULL,
    entry_id                 OBJECT_ID     NULL,
    creation_date            datetime      NOT NULL,
    academic_year            char(4)       NOT NULL,
    audit_tran_id            OBJECT_ID     NOT NULL,
    panel_leader_marker_code int           NULL,
    CONSTRAINT PK_DIGITAL_RESULT
    PRIMARY KEY CLUSTERED (digital_result_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.DIGITAL_RESULT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.DIGITAL_RESULT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.DIGITAL_RESULT >>>'
go
GRANT REFERENCES ON dbo.DIGITAL_RESULT TO eqa_user
go
GRANT SELECT ON dbo.DIGITAL_RESULT TO eqa_user
go
GRANT SELECT ON dbo.DIGITAL_RESULT TO read_only
go
GRANT SELECT ON dbo.DIGITAL_RESULT TO rma_users
go
GRANT INSERT ON dbo.DIGITAL_RESULT TO eqa_user
go
GRANT DELETE ON dbo.DIGITAL_RESULT TO eqa_user
go
GRANT UPDATE ON dbo.DIGITAL_RESULT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.DIGITAL_RESULT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.DIGITAL_RESULT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.DIGITAL_RESULT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.DIGITAL_RESULT TO eqa_user
go
CREATE TABLE dbo.DOUBLE_DIP_STD_MAPPING
(
    std_number         varchar(8)    NOT NULL,
    std_mapping_number varchar(8)    NOT NULL,
    audit_tran_id      numeric(12,0) NOT NULL,
    CONSTRAINT PK_DOUBLE_DIP_STD_MAPPING
    PRIMARY KEY CLUSTERED (std_number)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.DOUBLE_DIP_STD_MAPPING') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.DOUBLE_DIP_STD_MAPPING >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.DOUBLE_DIP_STD_MAPPING >>>'
go
ALTER TABLE dbo.DOUBLE_DIP_STD_MAPPING
    ADD CONSTRAINT FK_DOUBLE_DIP_STD_MAPPING_STD
    FOREIGN KEY (std_number)
    REFERENCES dbo.STD (std_number)
go
ALTER TABLE dbo.DOUBLE_DIP_STD_MAPPING
    ADD CONSTRAINT FK_DOUBLE_DIP_STD_MAPPING_MAPTO_STD
    FOREIGN KEY (std_mapping_number)
    REFERENCES dbo.STD (std_number)
go
GRANT REFERENCES ON dbo.DOUBLE_DIP_STD_MAPPING TO eqa_user
go
GRANT SELECT ON dbo.DOUBLE_DIP_STD_MAPPING TO eqa_user
go
GRANT SELECT ON dbo.DOUBLE_DIP_STD_MAPPING TO read_only
go
GRANT SELECT ON dbo.DOUBLE_DIP_STD_MAPPING TO rma_users
go
GRANT INSERT ON dbo.DOUBLE_DIP_STD_MAPPING TO eqa_user
go
GRANT DELETE ON dbo.DOUBLE_DIP_STD_MAPPING TO eqa_user
go
GRANT UPDATE ON dbo.DOUBLE_DIP_STD_MAPPING TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.DOUBLE_DIP_STD_MAPPING TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.DOUBLE_DIP_STD_MAPPING TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.DOUBLE_DIP_STD_MAPPING TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.DOUBLE_DIP_STD_MAPPING TO eqa_user
go
CREATE TABLE dbo.ECA_GENDER_CODE
(
    eca_gender_code char(1) NOT NULL,
    eca_gender_desc descr   NOT NULL,
    active_ind      yn_ind  NOT NULL,
    CONSTRAINT PK_ECA_GENDER_CODE
    PRIMARY KEY CLUSTERED (eca_gender_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ECA_GENDER_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ECA_GENDER_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ECA_GENDER_CODE >>>'
go
GRANT REFERENCES ON dbo.ECA_GENDER_CODE TO eqa_user
go
GRANT SELECT ON dbo.ECA_GENDER_CODE TO eqa_user
go
GRANT SELECT ON dbo.ECA_GENDER_CODE TO read_only
go
GRANT SELECT ON dbo.ECA_GENDER_CODE TO rma_users
go
GRANT INSERT ON dbo.ECA_GENDER_CODE TO eqa_user
go
GRANT DELETE ON dbo.ECA_GENDER_CODE TO eqa_user
go
GRANT UPDATE ON dbo.ECA_GENDER_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ECA_GENDER_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ECA_GENDER_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ECA_GENDER_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ECA_GENDER_CODE TO eqa_user
go
CREATE TABLE dbo.ELECTRONIC_DOC_ORDER_ITEM
(
    order_item_id             OBJECT_ID       NOT NULL,
    order_request_id          OBJECT_ID       NOT NULL,
    application_type_code     code_3          NOT NULL,
    product_type_code         code_3          NOT NULL,
    provider_type             varchar(100)    NOT NULL,
    application_fee           amt             NOT NULL,
    cost                      amt             NOT NULL,
    transcript_copy_unit_cost amt             NULL,
    teaching_institution      univarchar(100) NULL,
    qualification_name        univarchar(100) NULL,
    qualification_number      varchar(8)      NULL,
    qualification_level       numeric(2,0)    NULL,
    strand                    univarchar(100) NULL,
    qualification_version     numeric(8,0)    NULL,
    date_completed            dt              NULL,
    transcript_copies         varchar(10)     NULL,
    replacement_cert_type     univarchar(50)  NULL,
    cert_name                 univarchar(100) NULL,
    cert_number               varchar(20)     NULL,
    date_issued               dt              NULL,
    trade_entered             univarchar(100) NULL,
    education_provider        univarchar(100) NULL,
    level_req                 varchar(10)     NULL,
    start_yr                  int             NULL,
    end_yr                    int             NULL,
    start_yr_trade_cert       int             NULL,
    end_yr_trade_cert         int             NULL,
    start_yr_adv_trade_cert   int             NULL,
    end_yr_adv_trade_cert     int             NULL,
    start_yr_industry_reg     int             NULL,
    end_yr_industry_reg       int             NULL,
    school_name               univarchar(100) NULL,
    subject_studied           univarchar(100) NULL,
    CONSTRAINT PK_ORDER_ITEM_RULE
    PRIMARY KEY CLUSTERED (order_item_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ELECTRONIC_DOC_ORDER_ITEM') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ELECTRONIC_DOC_ORDER_ITEM >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ELECTRONIC_DOC_ORDER_ITEM >>>'
go
GRANT REFERENCES ON dbo.ELECTRONIC_DOC_ORDER_ITEM TO eqa_user
go
GRANT SELECT ON dbo.ELECTRONIC_DOC_ORDER_ITEM TO eqa_user
go
GRANT SELECT ON dbo.ELECTRONIC_DOC_ORDER_ITEM TO read_only
go
GRANT SELECT ON dbo.ELECTRONIC_DOC_ORDER_ITEM TO rma_users
go
GRANT INSERT ON dbo.ELECTRONIC_DOC_ORDER_ITEM TO eqa_user
go
GRANT DELETE ON dbo.ELECTRONIC_DOC_ORDER_ITEM TO eqa_user
go
GRANT UPDATE ON dbo.ELECTRONIC_DOC_ORDER_ITEM TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ELECTRONIC_DOC_ORDER_ITEM TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ELECTRONIC_DOC_ORDER_ITEM TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ELECTRONIC_DOC_ORDER_ITEM TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ELECTRONIC_DOC_ORDER_ITEM TO eqa_user
go
CREATE TABLE dbo.ELECTRONIC_DOC_ORDER_REQUEST
(
    order_request_id            OBJECT_ID        NOT NULL,
    order_reference             varchar(20)      NOT NULL,
    order_created_date          dt               NOT NULL,
    payment_id                  OBJECT_ID        NULL,
    first_names                 univarchar(100)  NOT NULL,
    last_name                   univarchar(100)  NOT NULL,
    study_name                  univarchar(100)  NULL,
    dob                         dt               NOT NULL,
    nsn                         nsn              NULL,
    email_address               UNI_EADDR        NOT NULL,
    phone_country_code          varchar(100)     NOT NULL,
    phone_number                varchar(20)      NOT NULL,
    preferred_contact_method    varchar(20)      NULL,
    street_address              univarchar(200)  NULL,
    town                        univarchar(100)  NOT NULL,
    post_code                   varchar(10)      NOT NULL,
    country_code                varchar(10)      NOT NULL,
    country_short_code          varchar(10)      NOT NULL,
    email_copy_flag             ny_ind           NOT NULL,
    additional_comments         univarchar(1000) NULL,
    update_contact_details_flag ny_ind           NOT NULL,
    delivery_type               varchar(50)      NOT NULL,
    shipping_cost               amt              NOT NULL,
    CONSTRAINT PK_ORDER_REQUEST_RULE
    PRIMARY KEY CLUSTERED (order_request_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ELECTRONIC_DOC_ORDER_REQUEST') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ELECTRONIC_DOC_ORDER_REQUEST >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ELECTRONIC_DOC_ORDER_REQUEST >>>'
go
GRANT REFERENCES ON dbo.ELECTRONIC_DOC_ORDER_REQUEST TO eqa_user
go
GRANT SELECT ON dbo.ELECTRONIC_DOC_ORDER_REQUEST TO eqa_user
go
GRANT SELECT ON dbo.ELECTRONIC_DOC_ORDER_REQUEST TO read_only
go
GRANT SELECT ON dbo.ELECTRONIC_DOC_ORDER_REQUEST TO rma_users
go
GRANT INSERT ON dbo.ELECTRONIC_DOC_ORDER_REQUEST TO eqa_user
go
GRANT DELETE ON dbo.ELECTRONIC_DOC_ORDER_REQUEST TO eqa_user
go
GRANT UPDATE ON dbo.ELECTRONIC_DOC_ORDER_REQUEST TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ELECTRONIC_DOC_ORDER_REQUEST TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ELECTRONIC_DOC_ORDER_REQUEST TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ELECTRONIC_DOC_ORDER_REQUEST TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ELECTRONIC_DOC_ORDER_REQUEST TO eqa_user
go
CREATE TABLE dbo.ELECTRONIC_ORDER_ITEM_CATEGORY
(
    application_type_code code_3       NOT NULL,
    application_type_desc varchar(150) NOT NULL,
    provider_type         varchar(100) NOT NULL,
    sortkey               sortkey      NOT NULL,
    active_ind            OBJECT_ID    NOT NULL,
    CONSTRAINT PK_ELEC_ORDR_ITEM_CAT
    PRIMARY KEY CLUSTERED (application_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ELECTRONIC_ORDER_ITEM_CATEGORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ELECTRONIC_ORDER_ITEM_CATEGORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ELECTRONIC_ORDER_ITEM_CATEGORY >>>'
go
GRANT REFERENCES ON dbo.ELECTRONIC_ORDER_ITEM_CATEGORY TO eqa_user
go
GRANT SELECT ON dbo.ELECTRONIC_ORDER_ITEM_CATEGORY TO eqa_user
go
GRANT SELECT ON dbo.ELECTRONIC_ORDER_ITEM_CATEGORY TO read_only
go
GRANT SELECT ON dbo.ELECTRONIC_ORDER_ITEM_CATEGORY TO rma_users
go
GRANT INSERT ON dbo.ELECTRONIC_ORDER_ITEM_CATEGORY TO eqa_user
go
GRANT DELETE ON dbo.ELECTRONIC_ORDER_ITEM_CATEGORY TO eqa_user
go
GRANT UPDATE ON dbo.ELECTRONIC_ORDER_ITEM_CATEGORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ELECTRONIC_ORDER_ITEM_CATEGORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ELECTRONIC_ORDER_ITEM_CATEGORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ELECTRONIC_ORDER_ITEM_CATEGORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ELECTRONIC_ORDER_ITEM_CATEGORY TO eqa_user
go
CREATE TABLE dbo.ELECTRONIC_ORDER_ITEM_TYPE
(
    application_type_code code_3    NOT NULL,
    product_type_code     code_3    NOT NULL,
    sortkey               sortkey   NOT NULL,
    active_ind            OBJECT_ID NOT NULL,
    CONSTRAINT PK_ELEC_ORDR_ITEM_TYPE
    PRIMARY KEY CLUSTERED (application_type_code,product_type_code)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.ELECTRONIC_ORDER_ITEM_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ELECTRONIC_ORDER_ITEM_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ELECTRONIC_ORDER_ITEM_TYPE >>>'
go
ALTER TABLE dbo.ELECTRONIC_ORDER_ITEM_TYPE
    ADD CONSTRAINT FK_ELEC_ORDR_ITEM_TYPE
    FOREIGN KEY (product_type_code)
    REFERENCES dbo.PRODUCT_TYPE (product_type_code)
go
GRANT REFERENCES ON dbo.ELECTRONIC_ORDER_ITEM_TYPE TO eqa_user
go
GRANT SELECT ON dbo.ELECTRONIC_ORDER_ITEM_TYPE TO eqa_user
go
GRANT SELECT ON dbo.ELECTRONIC_ORDER_ITEM_TYPE TO read_only
go
GRANT SELECT ON dbo.ELECTRONIC_ORDER_ITEM_TYPE TO rma_users
go
GRANT INSERT ON dbo.ELECTRONIC_ORDER_ITEM_TYPE TO eqa_user
go
GRANT DELETE ON dbo.ELECTRONIC_ORDER_ITEM_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.ELECTRONIC_ORDER_ITEM_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ELECTRONIC_ORDER_ITEM_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ELECTRONIC_ORDER_ITEM_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ELECTRONIC_ORDER_ITEM_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ELECTRONIC_ORDER_ITEM_TYPE TO eqa_user
go
CREATE TABLE dbo.ENDORSEMENT
(
    endorsement_id   OBJECT_ID    NOT NULL,
    endorsement_code code_2       NOT NULL,
    short_desc       name         NOT NULL,
    long_desc        varchar(255) NULL,
    created_date     datetime     NOT NULL,
    created_by       varchar(100) NOT NULL,
    audit_tran_id    OBJECT_ID    NOT NULL,
    CONSTRAINT PK_ENDORSEMENT
    PRIMARY KEY CLUSTERED (endorsement_id),
    CONSTRAINT AK_ENDORSEMENT
    UNIQUE NONCLUSTERED (endorsement_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ENDORSEMENT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ENDORSEMENT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ENDORSEMENT >>>'
go
GRANT REFERENCES ON dbo.ENDORSEMENT TO eqa_user
go
GRANT SELECT ON dbo.ENDORSEMENT TO eqa_user
go
GRANT SELECT ON dbo.ENDORSEMENT TO read_only
go
GRANT SELECT ON dbo.ENDORSEMENT TO rma_users
go
GRANT INSERT ON dbo.ENDORSEMENT TO eqa_user
go
GRANT DELETE ON dbo.ENDORSEMENT TO eqa_user
go
GRANT UPDATE ON dbo.ENDORSEMENT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ENDORSEMENT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ENDORSEMENT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ENDORSEMENT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ENDORSEMENT TO eqa_user
go
CREATE TABLE dbo.ENDORSEMENT_VERSION
(
    endorsement_version_id        OBJECT_ID    NOT NULL,
    endorsement_id                OBJECT_ID    NOT NULL,
    endorsement_version_number    numeric(8,0) NOT NULL,
    endorsement_version_desc      varchar(255) NOT NULL,
    qfn_cert_display_text         varchar(255) NOT NULL,
    qfn_cert_display_text_umlauts varchar(255) NULL,
    created_date                  datetime     NOT NULL,
    created_by                    varchar(100) NOT NULL,
    audit_tran_id                 OBJECT_ID    NOT NULL,
    CONSTRAINT PK_ENDORSEMENT_VERSION
    PRIMARY KEY CLUSTERED (endorsement_version_id),
    CONSTRAINT AK_ENDORSEMENT_VERSION
    UNIQUE NONCLUSTERED (endorsement_id,endorsement_version_number)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ENDORSEMENT_VERSION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ENDORSEMENT_VERSION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ENDORSEMENT_VERSION >>>'
go
ALTER TABLE dbo.ENDORSEMENT_VERSION
    ADD CONSTRAINT FK_ENDOR_VERSION_ENDOR
    FOREIGN KEY (endorsement_id)
    REFERENCES dbo.ENDORSEMENT (endorsement_id)
go
GRANT REFERENCES ON dbo.ENDORSEMENT_VERSION TO eqa_user
go
GRANT SELECT ON dbo.ENDORSEMENT_VERSION TO eqa_user
go
GRANT SELECT ON dbo.ENDORSEMENT_VERSION TO read_only
go
GRANT SELECT ON dbo.ENDORSEMENT_VERSION TO rma_users
go
GRANT INSERT ON dbo.ENDORSEMENT_VERSION TO eqa_user
go
GRANT DELETE ON dbo.ENDORSEMENT_VERSION TO eqa_user
go
GRANT UPDATE ON dbo.ENDORSEMENT_VERSION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ENDORSEMENT_VERSION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ENDORSEMENT_VERSION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ENDORSEMENT_VERSION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ENDORSEMENT_VERSION TO eqa_user
go
CREATE TABLE dbo.ENDR_RESULT_DETAIL
(
    endr_result_detail_id      OBJECT_ID     NOT NULL,
    crse_endr_result_id        OBJECT_ID     NOT NULL,
    assessment_type_code       code_2        NOT NULL,
    crse_endr_credit_catg_code code_1        NOT NULL,
    level_code                 code_2        NULL,
    credits                    number_3      NULL,
    ce_credit_allocation_code  code_2        NOT NULL,
    created_date               dt            NOT NULL,
    audit_tran_id              numeric(12,0) NOT NULL,
    CONSTRAINT PK_ENDR_RESULT_DETAIL
    PRIMARY KEY CLUSTERED (endr_result_detail_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ENDR_RESULT_DETAIL') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ENDR_RESULT_DETAIL >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ENDR_RESULT_DETAIL >>>'
go
ALTER TABLE dbo.ENDR_RESULT_DETAIL
    ADD CONSTRAINT FK_ENDR_RESULT_DTL_ASSESS_TYPE
    FOREIGN KEY (assessment_type_code)
    REFERENCES dbo.ASSESSMENT_TYPE (assessment_type_code)
go
ALTER TABLE dbo.ENDR_RESULT_DETAIL
    ADD CONSTRAINT FK_ENDR_RSLT_CREDIT_ALLOC
    FOREIGN KEY (ce_credit_allocation_code)
    REFERENCES dbo.CE_CREDIT_ALLOCATION_CODE (ce_credit_allocation_code)
go
ALTER TABLE dbo.ENDR_RESULT_DETAIL
    ADD CONSTRAINT FK_ENDR_RESULT_DTL_CREDIT_CATG
    FOREIGN KEY (crse_endr_credit_catg_code)
    REFERENCES dbo.CRSE_ENDR_CREDIT_CATG (crse_endr_credit_catg_code)
go
ALTER TABLE dbo.ENDR_RESULT_DETAIL
    ADD CONSTRAINT FK_ENDR_RSLT_DETL_CRSE_ENDR_RSL
    FOREIGN KEY (crse_endr_result_id)
    REFERENCES dbo.CRSE_ENDR_RESULT (crse_endr_result_id)
go
ALTER TABLE dbo.ENDR_RESULT_DETAIL
    ADD CONSTRAINT FK_ENDR_RESULT_DTL_LVL
    FOREIGN KEY (level_code)
    REFERENCES dbo.LVL (level_code)
go
GRANT REFERENCES ON dbo.ENDR_RESULT_DETAIL TO eqa_user
go
GRANT SELECT ON dbo.ENDR_RESULT_DETAIL TO eqa_user
go
GRANT SELECT ON dbo.ENDR_RESULT_DETAIL TO read_only
go
GRANT SELECT ON dbo.ENDR_RESULT_DETAIL TO rma_users
go
GRANT INSERT ON dbo.ENDR_RESULT_DETAIL TO eqa_user
go
GRANT DELETE ON dbo.ENDR_RESULT_DETAIL TO eqa_user
go
GRANT UPDATE ON dbo.ENDR_RESULT_DETAIL TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ENDR_RESULT_DETAIL TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ENDR_RESULT_DETAIL TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ENDR_RESULT_DETAIL TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ENDR_RESULT_DETAIL TO eqa_user
go
CREATE TABLE dbo.ENROLMENT_FEE
(
    enrolment_fee_id numeric(12,0) NOT NULL,
    enrolment_id     numeric(12,0) NOT NULL,
    fee_type_code    char(2)       NOT NULL,
    fee_amount       money         DEFAULT 0 NOT NULL,
    audit_tran_id    numeric(12,0) NOT NULL,
    ts               timestamp     NULL,
    CONSTRAINT PK_ENROLMENT_FEE
    PRIMARY KEY CLUSTERED (enrolment_fee_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ENROLMENT_FEE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ENROLMENT_FEE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ENROLMENT_FEE >>>'
go
ALTER TABLE dbo.ENROLMENT_FEE
    ADD CONSTRAINT FK_ENROLMENT_FEE_ENROLMENT
    FOREIGN KEY (enrolment_id)
    REFERENCES dbo.LEARNER_ENROLMENT (enrolment_id)
go
GRANT REFERENCES ON dbo.ENROLMENT_FEE TO eqa_user
go
GRANT SELECT ON dbo.ENROLMENT_FEE TO eqa_user
go
GRANT SELECT ON dbo.ENROLMENT_FEE TO read_only
go
GRANT SELECT ON dbo.ENROLMENT_FEE TO rma_users
go
GRANT INSERT ON dbo.ENROLMENT_FEE TO eqa_user
go
GRANT DELETE ON dbo.ENROLMENT_FEE TO eqa_user
go
GRANT UPDATE ON dbo.ENROLMENT_FEE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ENROLMENT_FEE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ENROLMENT_FEE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ENROLMENT_FEE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ENROLMENT_FEE TO eqa_user
go
CREATE TABLE dbo.ENROLMENT_STATUS
(
    enrolment_status_code code_2 NOT NULL,
    enrolment_status_desc descr  NULL,
    active_ind            yn     DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    CONSTRAINT PK_ENROLMENT_STATUS
    PRIMARY KEY CLUSTERED (enrolment_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ENROLMENT_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ENROLMENT_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ENROLMENT_STATUS >>>'
go
GRANT REFERENCES ON dbo.ENROLMENT_STATUS TO eqa_user
go
GRANT SELECT ON dbo.ENROLMENT_STATUS TO eqa_user
go
GRANT SELECT ON dbo.ENROLMENT_STATUS TO read_only
go
GRANT SELECT ON dbo.ENROLMENT_STATUS TO rma_users
go
GRANT INSERT ON dbo.ENROLMENT_STATUS TO eqa_user
go
GRANT DELETE ON dbo.ENROLMENT_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.ENROLMENT_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ENROLMENT_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ENROLMENT_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ENROLMENT_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ENROLMENT_STATUS TO eqa_user
go
CREATE TABLE dbo.ENTRY
(
    entry_id                    OBJECT_ID     NOT NULL,
    provider_id                 OBJECT_ID     NOT NULL,
    location                    number_2      NOT NULL,
    paid_code                   code_1        NULL,
    enrolment_id                OBJECT_ID     NOT NULL,
    study_provider_id           OBJECT_ID     NOT NULL,
    study_provider_location     number_2      NOT NULL,
    class_identifier            varchar(10)   NULL,
    exam_centre_id              OBJECT_ID     NULL,
    exam_centre_location        number_2      NULL,
    date_entered                dt            NOT NULL,
    answer_in_maori_ind         yn            DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    result_in_maori             yn            DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    te_reo_paper                yn            DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    entry_comment               descr         NULL,
    entry_status                yn            DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    withdrawn_method            code_1        NULL,
    std_number                  varchar(8)    NOT NULL,
    std_version_number          numeric(8,0)  NOT NULL,
    marker_allocation_group_id  OBJECT_ID     NULL,
    merge_request_number        OBJECT_ID     NULL,
    allocation_run_id           OBJECT_ID     NULL,
    withdrawn_by                usr           NULL,
    withdrawn_date              dt            NULL,
    accredited_provider         yn            DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    marker_page                 int           NULL,
    guinea_pig                  yn            DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    audit_tran_id               OBJECT_ID     NOT NULL,
    ts                          timestamp     NOT NULL,
    next_marker_ag_id           OBJECT_ID     NULL,
    loaded_by                   usr           NOT NULL,
    created_batch_input_id      OBJECT_ID     NULL,
    updated_batch_input_id      OBJECT_ID     NULL,
    qfn_number                  varchar(8)    NULL,
    std_context_map_id          OBJECT_ID     NULL,
    supplementary_date          datetime      NULL,
    misconduct_status           char(2)       NULL,
    misconduct_type             char(2)       NULL,
    sup_label_print_date        datetime      NULL,
    academic_year               char(4)       NOT NULL,
    reconsideration_status      char(2)       NULL,
    reconsideration_status_date datetime      NULL,
    withdrawn_batch_input_id    numeric(12,0) NULL,
    loaded_method               char(1)       NULL,
    reactivating_batch_input_id OBJECT_ID     NULL,
    recon_paid_by_provider_ind  ny_ind        NULL,
    breach_category             code_2        NULL,
    secondary_course_id         OBJECT_ID     NULL,
    sec_crse_chg_cut_off_date   dt            NULL,
    sup_label_print_count       int           DEFAULT 0                                                         NULL,
    CONSTRAINT PK_ENTRY
    PRIMARY KEY NONCLUSTERED (entry_id),
    CONSTRAINT IDX_ENTRY_06
    UNIQUE NONCLUSTERED (entry_id,academic_year)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ENTRY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ENTRY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ENTRY >>>'
go
ALTER TABLE dbo.ENTRY
    ADD CONSTRAINT FK_ENTRY_ALLOCATION_RUN
    FOREIGN KEY (allocation_run_id)
    REFERENCES dbo.ALLOCATION_RUN (allocation_run_id)
go
ALTER TABLE dbo.ENTRY
    ADD CONSTRAINT FK_ENTRY_CREATE_BATCH
    FOREIGN KEY (created_batch_input_id)
    REFERENCES dbo.BATCH_INPUT (batch_input_id)
go
ALTER TABLE dbo.ENTRY
    ADD CONSTRAINT FK_ENTRY_UPDATE_BATCH
    FOREIGN KEY (updated_batch_input_id)
    REFERENCES dbo.BATCH_INPUT (batch_input_id)
go
ALTER TABLE dbo.ENTRY
    ADD CONSTRAINT FK_ENTRY_WITHDRAWN_BATCH
    FOREIGN KEY (withdrawn_batch_input_id)
    REFERENCES dbo.BATCH_INPUT (batch_input_id)
go
ALTER TABLE dbo.ENTRY
    ADD CONSTRAINT FK_ENTRY_REACTIVATING_BATCH
    FOREIGN KEY (reactivating_batch_input_id)
    REFERENCES dbo.BATCH_INPUT (batch_input_id)
go
ALTER TABLE dbo.ENTRY
    ADD CONSTRAINT FK_ENTRY_BREACH_CATEGORY
    FOREIGN KEY (breach_category)
    REFERENCES dbo.BREACH_CATEGORY (breach_category)
go
ALTER TABLE dbo.ENTRY
    ADD CONSTRAINT FK_ENTRY_CONTEXT_MAP
    FOREIGN KEY (std_context_map_id,std_number)
    REFERENCES dbo.STD_CONTEXT_MAP (std_context_map_id,std_number)
go
ALTER TABLE dbo.ENTRY
    ADD CONSTRAINT FK_ENTRY_FK_ENTRY_WITHDRAW
    FOREIGN KEY (withdrawn_method)
    REFERENCES dbo.WITHDRAWN_METHOD (withdrawn_method)
go
ALTER TABLE dbo.ENTRY
    ADD CONSTRAINT FK_ENTRY_MARKER_ALLOCATION_GRP
    FOREIGN KEY (marker_allocation_group_id)
    REFERENCES dbo.MARKER_ALLOCATION_GROUP (marker_allocation_group_id)
go
ALTER TABLE dbo.ENTRY
    ADD CONSTRAINT FK_ENTRY_PAID_COD
    FOREIGN KEY (paid_code)
    REFERENCES dbo.PAID_CODE (paid_code)
go
ALTER TABLE dbo.ENTRY
    ADD CONSTRAINT FK_ENTRY_MISCONDUCT_STATUS
    FOREIGN KEY (misconduct_status)
    REFERENCES dbo.MISCONDUCT_STATUS (misconduct_status)
go
ALTER TABLE dbo.ENTRY
    ADD CONSTRAINT FK_ENTRY_MISCONDUCT_TYPE
    FOREIGN KEY (misconduct_type)
    REFERENCES dbo.MISCONDUCT_TYPE (misconduct_type)
go
ALTER TABLE dbo.ENTRY
    ADD CONSTRAINT FK_ENTRY_RECON_STATUS
    FOREIGN KEY (reconsideration_status)
    REFERENCES dbo.RECONSIDERATION_STATUS (reconsideration_status)
go
ALTER TABLE dbo.ENTRY
    ADD CONSTRAINT FK_ENTRY_MERGE_REQUEST
    FOREIGN KEY (merge_request_number)
    REFERENCES dbo.MERGE_REQUEST (merge_request_number)
go
ALTER TABLE dbo.ENTRY
    ADD CONSTRAINT FK_ENTRY_NEXT_MARKER_ALLOC_GRP
    FOREIGN KEY (next_marker_ag_id)
    REFERENCES dbo.MARKER_ALLOCATION_GROUP (marker_allocation_group_id)
go
ALTER TABLE dbo.ENTRY
    ADD CONSTRAINT FK_ENTRY_ENROLMENT_YEAR
    FOREIGN KEY (enrolment_id,academic_year)
    REFERENCES dbo.LEARNER_ENROLMENT (enrolment_id,academic_year)
go
ALTER TABLE dbo.ENTRY
    ADD CONSTRAINT FK_ENTRY_WD_METHOD
    FOREIGN KEY (loaded_method)
    REFERENCES dbo.WITHDRAWN_METHOD (withdrawn_method)
go
ALTER TABLE dbo.ENTRY
    ADD CONSTRAINT FK_ENTRY_ASSESSMENT_CENTRE
    FOREIGN KEY (exam_centre_id,exam_centre_location)
    REFERENCES dbo.ASSESSMENT_CENTRE (moe_provider_id,location)
go
ALTER TABLE dbo.ENTRY
    ADD CONSTRAINT FK_ENTRY_PROVIDER
    FOREIGN KEY (provider_id,location)
    REFERENCES dbo.PROVIDER (moe_provider_id,location)
go
ALTER TABLE dbo.ENTRY
    ADD CONSTRAINT FK_ENTRY_PROVIDER_STUDY
    FOREIGN KEY (study_provider_id,study_provider_location)
    REFERENCES dbo.PROVIDER (moe_provider_id,location)
go
ALTER TABLE dbo.ENTRY
    ADD CONSTRAINT FK_ENTRY_QFN
    FOREIGN KEY (qfn_number)
    REFERENCES dbo.QFN (qfn_number)
go
ALTER TABLE dbo.ENTRY
    ADD CONSTRAINT FK_ENTRY_STD_VERS
    FOREIGN KEY (std_number,std_version_number)
    REFERENCES dbo.STD_VERSION (std_number,std_version_number)
go
ALTER TABLE dbo.ENTRY
    ADD CONSTRAINT FK_ENTRY_SECONDARY_COURSE
    FOREIGN KEY (secondary_course_id)
    REFERENCES dbo.SECONDARY_COURSE (secondary_course_id)
go
ALTER TABLE dbo.ALLOCATION_WORKTABLE
    ADD CONSTRAINT FK_ALLOCATION_WORKTABLE_ENTRY
    FOREIGN KEY (entry_id)
    REFERENCES dbo.ENTRY (entry_id)
go
ALTER TABLE dbo.BOOKLET_RETRIEVAL
    ADD CONSTRAINT FK_BOOKLET_RETRIEVAL_ENTRY
    FOREIGN KEY (entry_id)
    REFERENCES dbo.ENTRY (entry_id)
go
ALTER TABLE dbo.COMPASSIONATE_ENTRY
    ADD CONSTRAINT FK_COMPASSIONATE_ENTRY_ENTRY
    FOREIGN KEY (entry_id)
    REFERENCES dbo.ENTRY (entry_id)
go
ALTER TABLE dbo.DIGITAL_ENTRY
    ADD CONSTRAINT FK_DIGITAL_ENTRY_ENTRY
    FOREIGN KEY (entry_id)
    REFERENCES dbo.ENTRY (entry_id)
go
ALTER TABLE dbo.DIGITAL_RESULT
    ADD CONSTRAINT FK_DIGITAL_RESULT_ENTRY
    FOREIGN KEY (entry_id)
    REFERENCES dbo.ENTRY (entry_id)
go
GRANT REFERENCES ON dbo.ENTRY TO eqa_user
go
GRANT SELECT ON dbo.ENTRY TO eqa_user
go
GRANT SELECT ON dbo.ENTRY TO read_only
go
GRANT SELECT ON dbo.ENTRY TO rma_users
go
GRANT INSERT ON dbo.ENTRY TO eqa_user
go
GRANT DELETE ON dbo.ENTRY TO eqa_user
go
GRANT UPDATE ON dbo.ENTRY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ENTRY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ENTRY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ENTRY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ENTRY TO eqa_user
go
CREATE TABLE dbo.ENTRY_ASSISTANCE
(
    entry_assistance_id          OBJECT_ID     NOT NULL,
    entry_spec_assist_id         OBJECT_ID     NOT NULL,
    assistance_code              code_2        NOT NULL,
    special_assistance_desc      varchar(255)  NULL,
    assistance_quantity          int           NOT NULL,
    assistance_approved          yn            DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    assistance_other_description varchar(1000) NULL,
    requested_by_provider        yn            DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    audit_tran_id                OBJECT_ID     NOT NULL,
    ts                           timestamp     NOT NULL,
    CONSTRAINT PK_ENTRY_ASSISTANCE
    PRIMARY KEY CLUSTERED (entry_assistance_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ENTRY_ASSISTANCE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ENTRY_ASSISTANCE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ENTRY_ASSISTANCE >>>'
go
ALTER TABLE dbo.ENTRY_ASSISTANCE
    ADD CONSTRAINT FK_ENTRY_ASSISS_ASS_CODE
    FOREIGN KEY (assistance_code)
    REFERENCES dbo.ASSISTANCE_CODE (assistance_code)
go
GRANT REFERENCES ON dbo.ENTRY_ASSISTANCE TO eqa_user
go
GRANT SELECT ON dbo.ENTRY_ASSISTANCE TO eqa_user
go
GRANT SELECT ON dbo.ENTRY_ASSISTANCE TO read_only
go
GRANT SELECT ON dbo.ENTRY_ASSISTANCE TO rma_users
go
GRANT INSERT ON dbo.ENTRY_ASSISTANCE TO eqa_user
go
GRANT DELETE ON dbo.ENTRY_ASSISTANCE TO eqa_user
go
GRANT UPDATE ON dbo.ENTRY_ASSISTANCE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ENTRY_ASSISTANCE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ENTRY_ASSISTANCE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ENTRY_ASSISTANCE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ENTRY_ASSISTANCE TO eqa_user
go
CREATE TABLE dbo.ENTRY_CONTEXT
(
    entry_context_id   OBJECT_ID  NOT NULL,
    entry_id           OBJECT_ID  NOT NULL,
    std_context_map_id OBJECT_ID  NOT NULL,
    active_ind         yn_ind     NOT NULL,
    date_updated       dt         NOT NULL,
    ts                 timestamp  NOT NULL,
    audit_tran_id      OBJECT_ID  NOT NULL,
    result_code        varchar(5) NULL,
    CONSTRAINT PK_ENTRY_CONTEXT
    PRIMARY KEY NONCLUSTERED (entry_context_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ENTRY_CONTEXT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ENTRY_CONTEXT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ENTRY_CONTEXT >>>'
go
ALTER TABLE dbo.ENTRY_CONTEXT
    ADD CONSTRAINT FK_ENTRY_CONTEXT_ENTRY
    FOREIGN KEY (entry_id)
    REFERENCES dbo.ENTRY (entry_id)
go
ALTER TABLE dbo.ENTRY_CONTEXT
    ADD CONSTRAINT FK_ENTRY_CONTEXT_STD_CON_MAP
    FOREIGN KEY (std_context_map_id)
    REFERENCES dbo.STD_CONTEXT_MAP (std_context_map_id)
go
ALTER TABLE dbo.ENTRY_CONTEXT
    ADD CONSTRAINT FK_ENTRY_CONTEXT_RESULT
    FOREIGN KEY (result_code)
    REFERENCES dbo.RESULT_CODE (result_code)
go
GRANT REFERENCES ON dbo.ENTRY_CONTEXT TO eqa_user
go
GRANT SELECT ON dbo.ENTRY_CONTEXT TO eqa_user
go
GRANT SELECT ON dbo.ENTRY_CONTEXT TO read_only
go
GRANT SELECT ON dbo.ENTRY_CONTEXT TO rma_users
go
GRANT INSERT ON dbo.ENTRY_CONTEXT TO eqa_user
go
GRANT DELETE ON dbo.ENTRY_CONTEXT TO eqa_user
go
GRANT UPDATE ON dbo.ENTRY_CONTEXT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ENTRY_CONTEXT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ENTRY_CONTEXT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ENTRY_CONTEXT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ENTRY_CONTEXT TO eqa_user
go
CREATE TABLE dbo.ENTRY_PERSONALISATION
(
    entry_id                     OBJECT_ID    NOT NULL,
    personalisation_run_id       OBJECT_ID    NOT NULL,
    entry_personalisation_status code_1       NOT NULL,
    exam_code                    char(4)      NULL,
    assessment_centre_id         OBJECT_ID    NULL,
    marker_allocation_group_id   OBJECT_ID    NULL,
    marker_panel_ag_id           OBJECT_ID    NULL,
    latest_for_entry             ny_ind       NOT NULL,
    te_reo_paper                 ny_ind       NOT NULL,
    ts                           timestamp    NOT NULL,
    return_to_nzqa               ny_ind       NULL,
    std_number                   varchar(8)   NULL,
    std_version_number           numeric(8,0) NULL,
    enrolment_id                 OBJECT_ID    NULL,
    personalisation_run_id_prior OBJECT_ID    NULL,
    learner_id                   OBJECT_ID    NULL,
    assigned_marker_code         int          NULL,
    marker_suffix                char(1)      NULL,
    provider_id                  OBJECT_ID    DEFAULT '0' NOT NULL,
    CONSTRAINT PK_ENTRY_PERSONALISATION
    PRIMARY KEY NONCLUSTERED (entry_id,personalisation_run_id),
    CONSTRAINT CKT_ENTRY_PERSONALISATION
    CHECK ((marker_allocation_group_id is null and marker_panel_ag_id is not null) or
          (marker_allocation_group_id is not null and marker_panel_ag_id is null))
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ENTRY_PERSONALISATION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ENTRY_PERSONALISATION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ENTRY_PERSONALISATION >>>'
go
ALTER TABLE dbo.ENTRY_PERSONALISATION
    ADD CONSTRAINT FK_ENTRY_PER_ENTRY
    FOREIGN KEY (entry_id)
    REFERENCES dbo.ENTRY (entry_id)
go
ALTER TABLE dbo.ENTRY_PERSONALISATION
    ADD CONSTRAINT FK_ENTRY_PER_MARKER_ALL
    FOREIGN KEY (marker_allocation_group_id)
    REFERENCES dbo.MARKER_ALLOCATION_GROUP (marker_allocation_group_id)
go
ALTER TABLE dbo.ENTRY_PERSONALISATION
    ADD CONSTRAINT FK_ENTRY_PER_PRIOR_PERS_RUN
    FOREIGN KEY (personalisation_run_id_prior)
    REFERENCES dbo.PERSONALISATION_RUN (personalisation_run_id)
go
ALTER TABLE dbo.ENTRY_PERSONALISATION
    ADD CONSTRAINT FK_ENTRY_PER_LEARNER
    FOREIGN KEY (learner_id)
    REFERENCES dbo.LEARNER (learner_id)
go
ALTER TABLE dbo.ENTRY_PERSONALISATION
    ADD CONSTRAINT FK_ENTRY_PER_MARKER_PAN_AG
    FOREIGN KEY (marker_panel_ag_id)
    REFERENCES dbo.MARKER_PANEL_ALLOCATION_GRP (marker_panel_ag_id)
go
ALTER TABLE dbo.ENTRY_PERSONALISATION
    ADD CONSTRAINT FK_ENTRY_PER_PER_RUN
    FOREIGN KEY (personalisation_run_id)
    REFERENCES dbo.PERSONALISATION_RUN (personalisation_run_id)
go
ALTER TABLE dbo.ENTRY_PERSONALISATION
    ADD CONSTRAINT FK_ENTRY_PER_ENROLMENT
    FOREIGN KEY (enrolment_id)
    REFERENCES dbo.LEARNER_ENROLMENT (enrolment_id)
go
ALTER TABLE dbo.ENTRY_PERSONALISATION
    ADD CONSTRAINT FK_ENTRY_PER_STD_VERSION
    FOREIGN KEY (std_number,std_version_number)
    REFERENCES dbo.STD_VERSION (std_number,std_version_number)
go
GRANT REFERENCES ON dbo.ENTRY_PERSONALISATION TO eqa_user
go
GRANT SELECT ON dbo.ENTRY_PERSONALISATION TO eqa_user
go
GRANT SELECT ON dbo.ENTRY_PERSONALISATION TO read_only
go
GRANT SELECT ON dbo.ENTRY_PERSONALISATION TO rma_users
go
GRANT INSERT ON dbo.ENTRY_PERSONALISATION TO eqa_user
go
GRANT DELETE ON dbo.ENTRY_PERSONALISATION TO eqa_user
go
GRANT UPDATE ON dbo.ENTRY_PERSONALISATION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ENTRY_PERSONALISATION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ENTRY_PERSONALISATION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ENTRY_PERSONALISATION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ENTRY_PERSONALISATION TO eqa_user
go
CREATE TABLE dbo.ENTRY_PERSONALISATION_SET
(
    assessment_session_id        OBJECT_ID    NOT NULL,
    assessment_start             datetime     NULL,
    session_code                 varchar(12)  NOT NULL,
    session_desc                 varchar(100) NOT NULL,
    enrolment_id                 OBJECT_ID    NOT NULL,
    entry_id                     OBJECT_ID    NOT NULL,
    personalisation_run_id       OBJECT_ID    NOT NULL,
    personalisation_run_id_prior OBJECT_ID    NULL,
    changed_set_status           yn           DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    entry_personalisation_status char(1)      NOT NULL,
    exam_code                    char(4)      NOT NULL,
    marker_allocation_group_id   OBJECT_ID    NOT NULL,
    assessment_centre_id         OBJECT_ID    NOT NULL,
    assessment_centre_id_prior   OBJECT_ID    NULL,
    te_reo_paper                 yn           DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    return_to_nzqa               yn           DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    std_number                   varchar(8)   NOT NULL,
    std_version_number           numeric(8,0) NOT NULL,
    learner_id                   OBJECT_ID    NOT NULL,
    assigned_marker_code         int          NOT NULL,
    marker_suffix                char(1)      NOT NULL,
    exam_code_prior              char(4)      NULL,
    te_reo_paper_prior           smallint     NULL,
    CONSTRAINT PK_ENTRY_PERSONALISATION_SET
    PRIMARY KEY CLUSTERED (assessment_session_id,enrolment_id,entry_id,personalisation_run_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ENTRY_PERSONALISATION_SET') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ENTRY_PERSONALISATION_SET >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ENTRY_PERSONALISATION_SET >>>'
go
ALTER TABLE dbo.ENTRY_PERSONALISATION_SET
    ADD CONSTRAINT FK_ENTRY_PER_SET_ASMT_CTR
    FOREIGN KEY (assessment_centre_id)
    REFERENCES dbo.ASSESSMENT_CENTRE (assessment_centre_id)
go
ALTER TABLE dbo.ENTRY_PERSONALISATION_SET
    ADD CONSTRAINT FK_ENTRY_PER_SET_PR_ASS_CENTRE
    FOREIGN KEY (assessment_centre_id_prior)
    REFERENCES dbo.ASSESSMENT_CENTRE (assessment_centre_id)
go
ALTER TABLE dbo.ENTRY_PERSONALISATION_SET
    ADD CONSTRAINT FK_EPS_ASSESSMENT_SESSION
    FOREIGN KEY (assessment_session_id)
    REFERENCES dbo.ASSESSMENT_SESSION (assessment_session_id)
go
ALTER TABLE dbo.ENTRY_PERSONALISATION_SET
    ADD CONSTRAINT FK_EPS_ENTRY
    FOREIGN KEY (entry_id)
    REFERENCES dbo.ENTRY (entry_id)
go
ALTER TABLE dbo.ENTRY_PERSONALISATION_SET
    ADD CONSTRAINT FK_EPS_ENROLMENT
    FOREIGN KEY (enrolment_id)
    REFERENCES dbo.LEARNER_ENROLMENT (enrolment_id)
go
ALTER TABLE dbo.ENTRY_PERSONALISATION_SET
    ADD CONSTRAINT FK_ENTRY_PER_SET_MARKER_ALL
    FOREIGN KEY (marker_allocation_group_id)
    REFERENCES dbo.MARKER_ALLOCATION_GROUP (marker_allocation_group_id)
go
ALTER TABLE dbo.ENTRY_PERSONALISATION_SET
    ADD CONSTRAINT FK_EPS_PERSONALISATION_RUN
    FOREIGN KEY (personalisation_run_id)
    REFERENCES dbo.PERSONALISATION_RUN (personalisation_run_id)
go
ALTER TABLE dbo.ENTRY_PERSONALISATION_SET
    ADD CONSTRAINT FK_EPS_PERSONALISATION_RUN_PR
    FOREIGN KEY (personalisation_run_id_prior)
    REFERENCES dbo.PERSONALISATION_RUN (personalisation_run_id)
go
ALTER TABLE dbo.ENTRY_PERSONALISATION_SET
    ADD CONSTRAINT FK_EPS_LEARNER
    FOREIGN KEY (learner_id)
    REFERENCES dbo.LEARNER (learner_id)
go
ALTER TABLE dbo.ENTRY_PERSONALISATION_SET
    ADD CONSTRAINT FK_ENTRY_PER_SET_STD_VERSION
    FOREIGN KEY (std_number,std_version_number)
    REFERENCES dbo.STD_VERSION (std_number,std_version_number)
go
GRANT REFERENCES ON dbo.ENTRY_PERSONALISATION_SET TO eqa_user
go
GRANT SELECT ON dbo.ENTRY_PERSONALISATION_SET TO eqa_user
go
GRANT SELECT ON dbo.ENTRY_PERSONALISATION_SET TO read_only
go
GRANT SELECT ON dbo.ENTRY_PERSONALISATION_SET TO rma_users
go
GRANT INSERT ON dbo.ENTRY_PERSONALISATION_SET TO eqa_user
go
GRANT DELETE ON dbo.ENTRY_PERSONALISATION_SET TO eqa_user
go
GRANT UPDATE ON dbo.ENTRY_PERSONALISATION_SET TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ENTRY_PERSONALISATION_SET TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ENTRY_PERSONALISATION_SET TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ENTRY_PERSONALISATION_SET TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ENTRY_PERSONALISATION_SET TO eqa_user
go
CREATE TABLE dbo.ENTRY_PERSONALISATION_STATUS
(
    entry_personalisation_status code_1 NOT NULL,
    description                  descr  NOT NULL,
    CONSTRAINT PK_ENTRY_PERSONALISATION_STATU
    PRIMARY KEY CLUSTERED (entry_personalisation_status)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ENTRY_PERSONALISATION_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ENTRY_PERSONALISATION_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ENTRY_PERSONALISATION_STATUS >>>'
go
ALTER TABLE dbo.ENTRY_PERSONALISATION
    ADD CONSTRAINT FK_ENTRY_PER_ENTRY_PER_STATUS
    FOREIGN KEY (entry_personalisation_status)
    REFERENCES dbo.ENTRY_PERSONALISATION_STATUS (entry_personalisation_status)
go
ALTER TABLE dbo.ENTRY_PERSONALISATION_SET
    ADD CONSTRAINT FK_EPS_ENTRY_PERS_STATUS
    FOREIGN KEY (entry_personalisation_status)
    REFERENCES dbo.ENTRY_PERSONALISATION_STATUS (entry_personalisation_status)
go
GRANT REFERENCES ON dbo.ENTRY_PERSONALISATION_STATUS TO eqa_user
go
GRANT SELECT ON dbo.ENTRY_PERSONALISATION_STATUS TO eqa_user
go
GRANT SELECT ON dbo.ENTRY_PERSONALISATION_STATUS TO read_only
go
GRANT SELECT ON dbo.ENTRY_PERSONALISATION_STATUS TO rma_users
go
GRANT INSERT ON dbo.ENTRY_PERSONALISATION_STATUS TO eqa_user
go
GRANT DELETE ON dbo.ENTRY_PERSONALISATION_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.ENTRY_PERSONALISATION_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ENTRY_PERSONALISATION_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ENTRY_PERSONALISATION_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ENTRY_PERSONALISATION_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ENTRY_PERSONALISATION_STATUS TO eqa_user
go
CREATE TABLE dbo.ENTRY_REVIEW
(
    entry_review_id    OBJECT_ID    NOT NULL,
    entry_id           OBJECT_ID    NOT NULL,
    created_date       datetime     NOT NULL,
    review_status_code code_2       NOT NULL,
    review_status_date datetime     NOT NULL,
    review_comment     varchar(512) NULL,
    audit_tran_id      OBJECT_ID    NOT NULL,
    ts                 timestamp    NULL,
    review_reason_code code_2       NULL,
    CONSTRAINT PK_ENTRY_REVIEW
    PRIMARY KEY CLUSTERED (entry_review_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ENTRY_REVIEW') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ENTRY_REVIEW >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ENTRY_REVIEW >>>'
go
ALTER TABLE dbo.ENTRY_REVIEW
    ADD CONSTRAINT FK_REVIEW_ENTRY
    FOREIGN KEY (entry_id)
    REFERENCES dbo.ENTRY (entry_id)
go
ALTER TABLE dbo.ENTRY_REVIEW
    ADD CONSTRAINT FK_REV_STATUS_CODE
    FOREIGN KEY (review_status_code)
    REFERENCES dbo.REVIEW_STATUS_CODE (review_status_code)
go
ALTER TABLE dbo.ENTRY_REVIEW
    ADD CONSTRAINT FK_REV_REASON_CODE
    FOREIGN KEY (review_reason_code)
    REFERENCES dbo.REVIEW_REASON_CODE (review_reason_code)
go
GRANT REFERENCES ON dbo.ENTRY_REVIEW TO eqa_user
go
GRANT SELECT ON dbo.ENTRY_REVIEW TO eqa_user
go
GRANT SELECT ON dbo.ENTRY_REVIEW TO read_only
go
GRANT SELECT ON dbo.ENTRY_REVIEW TO rma_users
go
GRANT INSERT ON dbo.ENTRY_REVIEW TO eqa_user
go
GRANT DELETE ON dbo.ENTRY_REVIEW TO eqa_user
go
GRANT UPDATE ON dbo.ENTRY_REVIEW TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ENTRY_REVIEW TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ENTRY_REVIEW TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ENTRY_REVIEW TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ENTRY_REVIEW TO eqa_user
go
CREATE TABLE dbo.ENTRY_SEC_COURSE_HIST
(
    entry_sec_course_hist_id numeric(12,0) IDENTITY,
    entry_id                 numeric(12,0) NOT NULL,
    secondary_course_id      OBJECT_ID     NULL,
    effective_from_date      dt            NOT NULL,
    effective_to_date        dt            NULL,
    CONSTRAINT PK_ENTRY_SEC_COURSE_HIST
    PRIMARY KEY CLUSTERED (entry_sec_course_hist_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ENTRY_SEC_COURSE_HIST') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ENTRY_SEC_COURSE_HIST >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ENTRY_SEC_COURSE_HIST >>>'
go
ALTER TABLE dbo.ENTRY_SEC_COURSE_HIST
    ADD CONSTRAINT FK_ENTRY_SEC_CRSE_HIS_ENTRY
    FOREIGN KEY (entry_id)
    REFERENCES dbo.ENTRY (entry_id)
go
ALTER TABLE dbo.ENTRY_SEC_COURSE_HIST
    ADD CONSTRAINT FK_ENTRY_SEC_CRSE_HIS_SEC_CRSE
    FOREIGN KEY (secondary_course_id)
    REFERENCES dbo.SECONDARY_COURSE (secondary_course_id)
go
GRANT REFERENCES ON dbo.ENTRY_SEC_COURSE_HIST TO eqa_user
go
GRANT SELECT ON dbo.ENTRY_SEC_COURSE_HIST TO eqa_user
go
GRANT SELECT ON dbo.ENTRY_SEC_COURSE_HIST TO read_only
go
GRANT SELECT ON dbo.ENTRY_SEC_COURSE_HIST TO rma_users
go
GRANT INSERT ON dbo.ENTRY_SEC_COURSE_HIST TO eqa_user
go
GRANT DELETE ON dbo.ENTRY_SEC_COURSE_HIST TO eqa_user
go
GRANT UPDATE ON dbo.ENTRY_SEC_COURSE_HIST TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ENTRY_SEC_COURSE_HIST TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ENTRY_SEC_COURSE_HIST TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ENTRY_SEC_COURSE_HIST TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ENTRY_SEC_COURSE_HIST TO eqa_user
go
CREATE TABLE dbo.ENTRY_SERIAL_NUMBER
(
    entry_serial_number_id OBJECT_ID   NOT NULL,
    entry_id               OBJECT_ID   NOT NULL,
    serial_number_type     code_2      NOT NULL,
    academic_year          char(4)     NOT NULL,
    serial_number          int         NOT NULL,
    entry_context_id       OBJECT_ID   NULL,
    check_in_datetime      datetime    NULL,
    check_out_datetime     datetime    NULL,
    check_in_by            usr         NULL,
    check_out_by           usr         NULL,
    courier_code           varchar(30) NULL,
    active_ind             yn_ind      NOT NULL,
    audit_tran_id          OBJECT_ID   NOT NULL,
    ts                     timestamp   NOT NULL,
    CONSTRAINT PK_ENTRY_SERIAL_NUMBER
    PRIMARY KEY NONCLUSTERED (entry_serial_number_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ENTRY_SERIAL_NUMBER') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ENTRY_SERIAL_NUMBER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ENTRY_SERIAL_NUMBER >>>'
go
ALTER TABLE dbo.ENTRY_SERIAL_NUMBER
    ADD CONSTRAINT FK_ENTRY_SERIAL_NUMBER_YEAR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.ENTRY_SERIAL_NUMBER
    ADD CONSTRAINT FK_ENTRY_SERIAL_NUMBER_ENTRY
    FOREIGN KEY (entry_id)
    REFERENCES dbo.ENTRY (entry_id)
go
ALTER TABLE dbo.ENTRY_SERIAL_NUMBER
    ADD CONSTRAINT FK_ENTRY_SERIAL_NUMBER_CONTEXT
    FOREIGN KEY (entry_context_id)
    REFERENCES dbo.ENTRY_CONTEXT (entry_context_id)
go
GRANT REFERENCES ON dbo.ENTRY_SERIAL_NUMBER TO eqa_user
go
GRANT SELECT ON dbo.ENTRY_SERIAL_NUMBER TO eqa_user
go
GRANT SELECT ON dbo.ENTRY_SERIAL_NUMBER TO read_only
go
GRANT SELECT ON dbo.ENTRY_SERIAL_NUMBER TO rma_users
go
GRANT INSERT ON dbo.ENTRY_SERIAL_NUMBER TO eqa_user
go
GRANT DELETE ON dbo.ENTRY_SERIAL_NUMBER TO eqa_user
go
GRANT UPDATE ON dbo.ENTRY_SERIAL_NUMBER TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ENTRY_SERIAL_NUMBER TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ENTRY_SERIAL_NUMBER TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ENTRY_SERIAL_NUMBER TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ENTRY_SERIAL_NUMBER TO eqa_user
go
CREATE TABLE dbo.ENTRY_SERIAL_NUMBER_TYPE
(
    serial_number_type      code_2 NOT NULL,
    serial_number_type_desc descr  NOT NULL,
    CONSTRAINT PK_ENTRY_SERIAL_NUMBER_TYPE
    PRIMARY KEY CLUSTERED (serial_number_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ENTRY_SERIAL_NUMBER_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ENTRY_SERIAL_NUMBER_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ENTRY_SERIAL_NUMBER_TYPE >>>'
go
ALTER TABLE dbo.ENTRY_SERIAL_NUMBER
    ADD CONSTRAINT FK_ENTRY_SERIAL_NUMBER_TYPE
    FOREIGN KEY (serial_number_type)
    REFERENCES dbo.ENTRY_SERIAL_NUMBER_TYPE (serial_number_type)
go
GRANT REFERENCES ON dbo.ENTRY_SERIAL_NUMBER_TYPE TO eqa_user
go
GRANT SELECT ON dbo.ENTRY_SERIAL_NUMBER_TYPE TO eqa_user
go
GRANT SELECT ON dbo.ENTRY_SERIAL_NUMBER_TYPE TO read_only
go
GRANT SELECT ON dbo.ENTRY_SERIAL_NUMBER_TYPE TO rma_users
go
GRANT INSERT ON dbo.ENTRY_SERIAL_NUMBER_TYPE TO eqa_user
go
GRANT DELETE ON dbo.ENTRY_SERIAL_NUMBER_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.ENTRY_SERIAL_NUMBER_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ENTRY_SERIAL_NUMBER_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ENTRY_SERIAL_NUMBER_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ENTRY_SERIAL_NUMBER_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ENTRY_SERIAL_NUMBER_TYPE TO eqa_user
go
CREATE TABLE dbo.ENTRY_SPEC_ASSIST
(
    entry_spec_assist_id      OBJECT_ID     NOT NULL,
    entry_id                  OBJECT_ID     NOT NULL,
    spec_assist_status_code   code_2        NOT NULL,
    school_assistance_code    varchar(15)   NULL,
    spec_assist_status_reason varchar(1000) NULL,
    date_entered              datetime      NULL,
    audit_tran_id             OBJECT_ID     NOT NULL,
    ts                        timestamp     NOT NULL,
    expiry_date               dt            NULL,
    CONSTRAINT PK_ENTRY_SPEC_ASSIST
    PRIMARY KEY CLUSTERED (entry_spec_assist_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ENTRY_SPEC_ASSIST') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ENTRY_SPEC_ASSIST >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ENTRY_SPEC_ASSIST >>>'
go
ALTER TABLE dbo.ENTRY_SPEC_ASSIST
    ADD CONSTRAINT FK_ENTRY_SPEC_AUDIT
    FOREIGN KEY (audit_tran_id)
    REFERENCES dbo.AUDIT_TRANSACTION (audit_tran_oid)
go
ALTER TABLE dbo.ENTRY_SPEC_ASSIST
    ADD CONSTRAINT FK_ENTRY_SPEC_ASSIST_ENTRY
    FOREIGN KEY (entry_id)
    REFERENCES dbo.ENTRY (entry_id)
go
ALTER TABLE dbo.ENTRY_SPEC_ASSIST
    ADD CONSTRAINT FK_ENTRY_SPEC_ASS_SPEC_ASS_STA
    FOREIGN KEY (spec_assist_status_code)
    REFERENCES dbo.SPECIAL_ASSISTANCE_STATUS (spec_assist_status_code)
go
ALTER TABLE dbo.ENTRY_SPEC_ASSIST
    ADD CONSTRAINT FK_ENTRY_SPEC_ASS_SCH_ASS_CODE
    FOREIGN KEY (school_assistance_code)
    REFERENCES dbo.SCHOOL_ASSISTANCE_CODE (school_assistance_code)
go
ALTER TABLE dbo.ENTRY_ASSISTANCE
    ADD CONSTRAINT FK_ENTRY_SPEC_ASSIST_ID
    FOREIGN KEY (entry_spec_assist_id)
    REFERENCES dbo.ENTRY_SPEC_ASSIST (entry_spec_assist_id)
go
GRANT REFERENCES ON dbo.ENTRY_SPEC_ASSIST TO eqa_user
go
GRANT SELECT ON dbo.ENTRY_SPEC_ASSIST TO eqa_user
go
GRANT SELECT ON dbo.ENTRY_SPEC_ASSIST TO read_only
go
GRANT SELECT ON dbo.ENTRY_SPEC_ASSIST TO rma_users
go
GRANT INSERT ON dbo.ENTRY_SPEC_ASSIST TO eqa_user
go
GRANT DELETE ON dbo.ENTRY_SPEC_ASSIST TO eqa_user
go
GRANT UPDATE ON dbo.ENTRY_SPEC_ASSIST TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ENTRY_SPEC_ASSIST TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ENTRY_SPEC_ASSIST TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ENTRY_SPEC_ASSIST TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ENTRY_SPEC_ASSIST TO eqa_user
go
CREATE TABLE dbo.ENTRY_WITHDRAWN_COURSE_WORK_TABLE
(
    id                  numeric(12,0) IDENTITY,
    entry_id            OBJECT_ID     NOT NULL,
    entry_status        smallint      NULL,
    std_number          varchar(8)    NOT NULL,
    std_version_number  OBJECT_ID     NOT NULL,
    secondary_course_id OBJECT_ID     NULL,
    action_date         datetime      NOT NULL,
    CONSTRAINT PK_ENTRY_WITHDRAWN_COURSE_WORK_TABLE
    PRIMARY KEY CLUSTERED (id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ENTRY_WITHDRAWN_COURSE_WORK_TABLE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ENTRY_WITHDRAWN_COURSE_WORK_TABLE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ENTRY_WITHDRAWN_COURSE_WORK_TABLE >>>'
go
GRANT REFERENCES ON dbo.ENTRY_WITHDRAWN_COURSE_WORK_TABLE TO eqa_user
go
GRANT SELECT ON dbo.ENTRY_WITHDRAWN_COURSE_WORK_TABLE TO eqa_user
go
GRANT SELECT ON dbo.ENTRY_WITHDRAWN_COURSE_WORK_TABLE TO read_only
go
GRANT SELECT ON dbo.ENTRY_WITHDRAWN_COURSE_WORK_TABLE TO rma_users
go
GRANT INSERT ON dbo.ENTRY_WITHDRAWN_COURSE_WORK_TABLE TO eqa_user
go
GRANT DELETE ON dbo.ENTRY_WITHDRAWN_COURSE_WORK_TABLE TO eqa_user
go
GRANT UPDATE ON dbo.ENTRY_WITHDRAWN_COURSE_WORK_TABLE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ENTRY_WITHDRAWN_COURSE_WORK_TABLE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ENTRY_WITHDRAWN_COURSE_WORK_TABLE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ENTRY_WITHDRAWN_COURSE_WORK_TABLE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ENTRY_WITHDRAWN_COURSE_WORK_TABLE TO eqa_user
go
CREATE TABLE dbo.EQA_SETTING
(
    eqa_setting_id OBJECT_ID     NOT NULL,
    area           varchar(200)  NOT NULL,
    name           varchar(200)  NOT NULL,
    type           int           NULL,
    value          varchar(1024) NULL,
    description    varchar(1024) NULL,
    active_from    datetime      NULL,
    active_to      datetime      NULL,
    active_ind     yn_ind        NOT NULL,
    display_order  varchar(20)   NULL,
    audit_tran_id  OBJECT_ID     NOT NULL,
    CONSTRAINT PK_EQA_SETTING
    PRIMARY KEY CLUSTERED (eqa_setting_id),
    CONSTRAINT AK_EQA_SETTING_02
    UNIQUE NONCLUSTERED (name)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.EQA_SETTING') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EQA_SETTING >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EQA_SETTING >>>'
go
GRANT REFERENCES ON dbo.EQA_SETTING TO eqa_user
go
GRANT SELECT ON dbo.EQA_SETTING TO eqa_user
go
GRANT SELECT ON dbo.EQA_SETTING TO read_only
go
GRANT SELECT ON dbo.EQA_SETTING TO rma_users
go
GRANT INSERT ON dbo.EQA_SETTING TO eqa_user
go
GRANT DELETE ON dbo.EQA_SETTING TO eqa_user
go
GRANT UPDATE ON dbo.EQA_SETTING TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EQA_SETTING TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EQA_SETTING TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EQA_SETTING TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EQA_SETTING TO eqa_user
go
CREATE TABLE dbo.EQA_SETTING_HISTORY
(
    eqa_setting_history_id OBJECT_ID     NOT NULL,
    eqa_setting_id         OBJECT_ID     NOT NULL,
    user_id                varchar(64)   NOT NULL,
    event_time             datetime      NOT NULL,
    reason                 varchar(1000) NOT NULL,
    name                   varchar(200)  NOT NULL,
    old_value              varchar(1024) NOT NULL,
    old_active_from        datetime      NULL,
    old_active_to          datetime      NULL,
    new_value              varchar(1024) NOT NULL,
    new_active_from        datetime      NULL,
    new_active_to          datetime      NULL,
    audit_tran_id          OBJECT_ID     NOT NULL,
    CONSTRAINT PK_EQA_SETTING_HISTORY
    PRIMARY KEY CLUSTERED (eqa_setting_history_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.EQA_SETTING_HISTORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EQA_SETTING_HISTORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EQA_SETTING_HISTORY >>>'
go
ALTER TABLE dbo.EQA_SETTING_HISTORY
    ADD CONSTRAINT FK_EQA_SETTING_HIS_EQA_SETTING
    FOREIGN KEY (eqa_setting_id)
    REFERENCES dbo.EQA_SETTING (eqa_setting_id)
go
GRANT REFERENCES ON dbo.EQA_SETTING_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.EQA_SETTING_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.EQA_SETTING_HISTORY TO read_only
go
GRANT SELECT ON dbo.EQA_SETTING_HISTORY TO rma_users
go
GRANT INSERT ON dbo.EQA_SETTING_HISTORY TO eqa_user
go
GRANT DELETE ON dbo.EQA_SETTING_HISTORY TO eqa_user
go
GRANT UPDATE ON dbo.EQA_SETTING_HISTORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EQA_SETTING_HISTORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EQA_SETTING_HISTORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EQA_SETTING_HISTORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EQA_SETTING_HISTORY TO eqa_user
go
CREATE TABLE dbo.ETHNICITY
(
    ethnicity_id         OBJECT_ID  NOT NULL,
    perorg_id            OBJECT_ID  NOT NULL,
    ethnicity_code       varchar(5) NOT NULL,
    audit_tran_id        OBJECT_ID  NOT NULL,
    ts                   timestamp  NOT NULL,
    active_ind           yn_ind     NOT NULL,
    merge_request_number OBJECT_ID  NULL,
    CONSTRAINT PK_ETHNICITY
    PRIMARY KEY CLUSTERED (ethnicity_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ETHNICITY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ETHNICITY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ETHNICITY >>>'
go
ALTER TABLE dbo.ETHNICITY
    ADD CONSTRAINT FK_ETHNICITY_PERORG
    FOREIGN KEY (perorg_id)
    REFERENCES dbo.PERORG (perorg_id)
go
ALTER TABLE dbo.ETHNICITY
    ADD CONSTRAINT FK_ETHNICITY_MERGE_REQUEST
    FOREIGN KEY (merge_request_number)
    REFERENCES dbo.MERGE_REQUEST (merge_request_number)
go
GRANT REFERENCES ON dbo.ETHNICITY TO eqa_user
go
GRANT SELECT ON dbo.ETHNICITY TO eqa_user
go
GRANT SELECT ON dbo.ETHNICITY TO read_only
go
GRANT SELECT ON dbo.ETHNICITY TO rma_users
go
GRANT INSERT ON dbo.ETHNICITY TO eqa_user
go
GRANT DELETE ON dbo.ETHNICITY TO eqa_user
go
GRANT UPDATE ON dbo.ETHNICITY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ETHNICITY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ETHNICITY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ETHNICITY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ETHNICITY TO eqa_user
go
CREATE TABLE dbo.ETHNICITY_CODE
(
    ethnicity_code        varchar(5) NOT NULL,
    ethnicity_desc        descr      NOT NULL,
    ethnicity_level       number_2   NOT NULL,
    active_ind            yn_ind     NOT NULL,
    valid_input_ind       yn_ind     NOT NULL,
    parent_ethnicity_code varchar(5) NULL,
    CONSTRAINT PK_ETHNICITY_CODE
    PRIMARY KEY CLUSTERED (ethnicity_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ETHNICITY_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ETHNICITY_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ETHNICITY_CODE >>>'
go
ALTER TABLE dbo.ETHNICITY
    ADD CONSTRAINT FK_ETHNICITY_ETHNICITY_CODE
    FOREIGN KEY (ethnicity_code)
    REFERENCES dbo.ETHNICITY_CODE (ethnicity_code)
go
ALTER TABLE dbo.ETHNICITY_CODE
    ADD CONSTRAINT FK_ETHNICITY_CODE_PARENT_CODE
    FOREIGN KEY (parent_ethnicity_code)
    REFERENCES dbo.ETHNICITY_CODE (ethnicity_code)
go
GRANT REFERENCES ON dbo.ETHNICITY_CODE TO eqa_user
go
GRANT SELECT ON dbo.ETHNICITY_CODE TO eqa_user
go
GRANT SELECT ON dbo.ETHNICITY_CODE TO read_only
go
GRANT SELECT ON dbo.ETHNICITY_CODE TO rma_users
go
GRANT INSERT ON dbo.ETHNICITY_CODE TO eqa_user
go
GRANT DELETE ON dbo.ETHNICITY_CODE TO eqa_user
go
GRANT UPDATE ON dbo.ETHNICITY_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ETHNICITY_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ETHNICITY_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ETHNICITY_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ETHNICITY_CODE TO eqa_user
go
CREATE TABLE dbo.EVALUATION_REASON_CODE
(
    evaluation_reason_code code_2    NOT NULL,
    evaluation_reason_desc descr     NOT NULL,
    active_ind             yn_ind    NOT NULL,
    sortkey                sortkey   NOT NULL,
    audit_tran_id          OBJECT_ID NOT NULL,
    CONSTRAINT PK_AGE_RANGE_CODE
    PRIMARY KEY CLUSTERED (evaluation_reason_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.EVALUATION_REASON_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EVALUATION_REASON_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EVALUATION_REASON_CODE >>>'
go
GRANT REFERENCES ON dbo.EVALUATION_REASON_CODE TO eqa_user
go
GRANT SELECT ON dbo.EVALUATION_REASON_CODE TO eqa_user
go
GRANT SELECT ON dbo.EVALUATION_REASON_CODE TO read_only
go
GRANT SELECT ON dbo.EVALUATION_REASON_CODE TO rma_users
go
GRANT INSERT ON dbo.EVALUATION_REASON_CODE TO eqa_user
go
GRANT DELETE ON dbo.EVALUATION_REASON_CODE TO eqa_user
go
GRANT UPDATE ON dbo.EVALUATION_REASON_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EVALUATION_REASON_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EVALUATION_REASON_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EVALUATION_REASON_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EVALUATION_REASON_CODE TO eqa_user
go
CREATE TABLE dbo.EXAM_ABSENT_SCRIPT
(
    standard_code     varchar(8)    NOT NULL,
    learner_id        OBJECT_ID     NOT NULL,
    provider_id       OBJECT_ID     NOT NULL,
    exam_code         char(4)       NOT NULL,
    booklet_code      int           NOT NULL,
    booklet_type_code int           NULL,
    marker_code       int           NOT NULL,
    sort_code         char(6)       NOT NULL,
    scan_type         char(1)       NOT NULL,
    activity_code     code_3        NOT NULL,
    activity_time     char(8)       NULL,
    add_date          datetime      NOT NULL,
    status            char(2)       NOT NULL,
    carton_code       numeric(12,0) NOT NULL,
    file_code         char(20)      NOT NULL,
    booklet_type      char(1)       NULL,
    nsn               nsn           NOT NULL,
    CONSTRAINT EXAM_ABSEN_12244138922
    PRIMARY KEY CLUSTERED (standard_code,learner_id,provider_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.EXAM_ABSENT_SCRIPT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EXAM_ABSENT_SCRIPT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EXAM_ABSENT_SCRIPT >>>'
go
ALTER TABLE dbo.EXAM_ABSENT_SCRIPT
    ADD CONSTRAINT FK_EXAM_ABSENT_SCRIPT_LEARNER_ID
    FOREIGN KEY (learner_id)
    REFERENCES dbo.LEARNER (learner_id)
go
ALTER TABLE dbo.EXAM_ABSENT_SCRIPT
    ADD CONSTRAINT FK_EXAM_ABSENT_SCRIPT_NSN
    FOREIGN KEY (nsn)
    REFERENCES dbo.LEARNER (nsn)
go
GRANT REFERENCES ON dbo.EXAM_ABSENT_SCRIPT TO eqa_user
go
GRANT SELECT ON dbo.EXAM_ABSENT_SCRIPT TO eqa_user
go
GRANT SELECT ON dbo.EXAM_ABSENT_SCRIPT TO read_only
go
GRANT SELECT ON dbo.EXAM_ABSENT_SCRIPT TO rma_users
go
GRANT INSERT ON dbo.EXAM_ABSENT_SCRIPT TO eqa_user
go
GRANT DELETE ON dbo.EXAM_ABSENT_SCRIPT TO eqa_user
go
GRANT UPDATE ON dbo.EXAM_ABSENT_SCRIPT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EXAM_ABSENT_SCRIPT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EXAM_ABSENT_SCRIPT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EXAM_ABSENT_SCRIPT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EXAM_ABSENT_SCRIPT TO eqa_user
go
CREATE TABLE dbo.EXAM_ATTENDANCE
(
    entry_id              OBJECT_ID    NOT NULL,
    exam_centre_id        OBJECT_ID    NOT NULL,
    session_code          varchar(12)  NOT NULL,
    exam_code             char(4)      NOT NULL,
    nsn                   nsn          NOT NULL,
    candidate_surname     varchar(100) NOT NULL,
    candidate_firstname   varchar(100) NOT NULL,
    present_flag          char(1)      NOT NULL,
    standard_code         varchar(8)   NOT NULL,
    barcode_serial_number int          NOT NULL,
    CONSTRAINT EXAM_ATTEN_11124134932
    PRIMARY KEY CLUSTERED (nsn,entry_id,standard_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.EXAM_ATTENDANCE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EXAM_ATTENDANCE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EXAM_ATTENDANCE >>>'
go
ALTER TABLE dbo.EXAM_ATTENDANCE
    ADD CONSTRAINT FK_EXAM_ATTENDANCE_ENTRY_ID
    FOREIGN KEY (entry_id)
    REFERENCES dbo.ENTRY (entry_id)
go
ALTER TABLE dbo.EXAM_ATTENDANCE
    ADD CONSTRAINT FK_EXAM_ATTENDANCE_NSN
    FOREIGN KEY (nsn)
    REFERENCES dbo.LEARNER (nsn)
go
GRANT REFERENCES ON dbo.EXAM_ATTENDANCE TO eqa_user
go
GRANT SELECT ON dbo.EXAM_ATTENDANCE TO eqa_user
go
GRANT SELECT ON dbo.EXAM_ATTENDANCE TO read_only
go
GRANT SELECT ON dbo.EXAM_ATTENDANCE TO rma_users
go
GRANT INSERT ON dbo.EXAM_ATTENDANCE TO eqa_user
go
GRANT DELETE ON dbo.EXAM_ATTENDANCE TO eqa_user
go
GRANT UPDATE ON dbo.EXAM_ATTENDANCE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EXAM_ATTENDANCE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EXAM_ATTENDANCE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EXAM_ATTENDANCE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EXAM_ATTENDANCE TO eqa_user
go
CREATE TABLE dbo.EXAM_CENTRE_ALLOC_RULE
(
    exam_centre_alloc_rule_id OBJECT_ID NOT NULL,
    moe_provider_id           OBJECT_ID NOT NULL,
    location                  number_2  NOT NULL,
    eca_gender_code           char(1)   NOT NULL,
    unallocated_entries_count int       NOT NULL,
    exam_centre_id            OBJECT_ID NULL,
    prev_exam_centre_id       OBJECT_ID NULL,
    audit_tran_id             OBJECT_ID NOT NULL,
    ts                        timestamp NOT NULL,
    CONSTRAINT PK_EXAM_CENTRE_ALLOC_RULE
    PRIMARY KEY CLUSTERED (exam_centre_alloc_rule_id),
    CONSTRAINT AK_EXAM_CENTRE_ALLOC_RULE
    UNIQUE NONCLUSTERED (moe_provider_id,location,eca_gender_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.EXAM_CENTRE_ALLOC_RULE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EXAM_CENTRE_ALLOC_RULE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EXAM_CENTRE_ALLOC_RULE >>>'
go
ALTER TABLE dbo.EXAM_CENTRE_ALLOC_RULE
    ADD CONSTRAINT FK_EXAM_CEN_ALL_RULE_PREV_CTR
    FOREIGN KEY (prev_exam_centre_id)
    REFERENCES dbo.ASSESSMENT_CENTRE (assessment_centre_id)
go
ALTER TABLE dbo.EXAM_CENTRE_ALLOC_RULE
    ADD CONSTRAINT FK_EXAM_CENTRE_ALL_RULE_CENTRE
    FOREIGN KEY (exam_centre_id)
    REFERENCES dbo.ASSESSMENT_CENTRE (assessment_centre_id)
go
ALTER TABLE dbo.EXAM_CENTRE_ALLOC_RULE
    ADD CONSTRAINT FK_EXAM_CENTRE_RULE_GENDER
    FOREIGN KEY (eca_gender_code)
    REFERENCES dbo.ECA_GENDER_CODE (eca_gender_code)
go
ALTER TABLE dbo.EXAM_CENTRE_ALLOC_RULE
    ADD CONSTRAINT FK_EXAM_CENTRE_ALL_RULE_PROV
    FOREIGN KEY (moe_provider_id,location)
    REFERENCES dbo.PROVIDER (moe_provider_id,location)
go
GRANT REFERENCES ON dbo.EXAM_CENTRE_ALLOC_RULE TO eqa_user
go
GRANT SELECT ON dbo.EXAM_CENTRE_ALLOC_RULE TO eqa_user
go
GRANT SELECT ON dbo.EXAM_CENTRE_ALLOC_RULE TO read_only
go
GRANT SELECT ON dbo.EXAM_CENTRE_ALLOC_RULE TO rma_users
go
GRANT INSERT ON dbo.EXAM_CENTRE_ALLOC_RULE TO eqa_user
go
GRANT DELETE ON dbo.EXAM_CENTRE_ALLOC_RULE TO eqa_user
go
GRANT UPDATE ON dbo.EXAM_CENTRE_ALLOC_RULE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EXAM_CENTRE_ALLOC_RULE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EXAM_CENTRE_ALLOC_RULE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EXAM_CENTRE_ALLOC_RULE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EXAM_CENTRE_ALLOC_RULE TO eqa_user
go
CREATE TABLE dbo.EXAM_CENTRE_WORKER
(
    exam_centre_worker_id   numeric(12,0) NOT NULL,
    info_form_recvd_ind     yn_ind        NOT NULL,
    training_attended_ind   yn_ind        NOT NULL,
    supervisor_training_ind yn_ind        NOT NULL,
    paper_planner_ind       yn_ind        NOT NULL,
    manager_ind             ny_ind        NOT NULL,
    nzqa_form_recvd_ind     ny_ind        NOT NULL,
    supervisor_ea_paid_ind  yn_ind        NOT NULL,
    audit_tran_id           numeric(12,0) NOT NULL,
    ts                      timestamp     NOT NULL,
    police_vet_expiry_date  datetime      NULL,
    CONSTRAINT PK_EXAM_CENTRE_WORKER
    PRIMARY KEY CLUSTERED (exam_centre_worker_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.EXAM_CENTRE_WORKER') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EXAM_CENTRE_WORKER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EXAM_CENTRE_WORKER >>>'
go
ALTER TABLE dbo.EXAM_CENTRE_WORKER
    ADD CONSTRAINT FK_EXAM_CENTRE_WORKER_ROLE
    FOREIGN KEY (exam_centre_worker_id)
    REFERENCES dbo.PERORG_ROLE (perorg_role_id)
go
GRANT REFERENCES ON dbo.EXAM_CENTRE_WORKER TO eqa_user
go
GRANT SELECT ON dbo.EXAM_CENTRE_WORKER TO eqa_user
go
GRANT SELECT ON dbo.EXAM_CENTRE_WORKER TO read_only
go
GRANT SELECT ON dbo.EXAM_CENTRE_WORKER TO rma_users
go
GRANT INSERT ON dbo.EXAM_CENTRE_WORKER TO eqa_user
go
GRANT DELETE ON dbo.EXAM_CENTRE_WORKER TO eqa_user
go
GRANT UPDATE ON dbo.EXAM_CENTRE_WORKER TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EXAM_CENTRE_WORKER TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EXAM_CENTRE_WORKER TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EXAM_CENTRE_WORKER TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EXAM_CENTRE_WORKER TO eqa_user
go
CREATE TABLE dbo.EXAM_MATERIAL
(
    exam_material_id             OBJECT_ID   NOT NULL,
    exam_material_type           varchar(10) NOT NULL,
    material_version_number      int         NOT NULL,
    booklet_code                 varchar(13) NOT NULL,
    exam_material_desc           descr       NULL,
    exam_material_status         code_2      NOT NULL,
    personalisation_type         code_2      NULL,
    te_reo_paper                 yn          DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    audit_tran_id                OBJECT_ID   NOT NULL,
    ts                           timestamp   NOT NULL,
    duplicates_permitted_per_set yn          DEFAULT 1                                                         NOT NULL,
    num_pages                    int         NULL,
    CONSTRAINT PK_EXAM_MATERIAL
    PRIMARY KEY CLUSTERED (exam_material_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.EXAM_MATERIAL') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EXAM_MATERIAL >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EXAM_MATERIAL >>>'
go
ALTER TABLE dbo.EXAM_MATERIAL
    ADD CONSTRAINT FK_EXAM_MATERIAL_PERSON_TYPE
    FOREIGN KEY (personalisation_type)
    REFERENCES dbo.PERSONALISATION_TYPE (personalisation_type)
go
ALTER TABLE dbo.ASSMT_SESS_COMP_MATERIAL
    ADD CONSTRAINT FK_ASSMT_SESS_COMP_MAT_MAT
    FOREIGN KEY (exam_material_id)
    REFERENCES dbo.EXAM_MATERIAL (exam_material_id)
go
GRANT REFERENCES ON dbo.EXAM_MATERIAL TO eqa_user
go
GRANT SELECT ON dbo.EXAM_MATERIAL TO eqa_user
go
GRANT SELECT ON dbo.EXAM_MATERIAL TO read_only
go
GRANT SELECT ON dbo.EXAM_MATERIAL TO rma_users
go
GRANT INSERT ON dbo.EXAM_MATERIAL TO eqa_user
go
GRANT DELETE ON dbo.EXAM_MATERIAL TO eqa_user
go
GRANT UPDATE ON dbo.EXAM_MATERIAL TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EXAM_MATERIAL TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EXAM_MATERIAL TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EXAM_MATERIAL TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EXAM_MATERIAL TO eqa_user
go
CREATE TABLE dbo.EXAM_MATERIALS_CODE
(
    exam_materials_code    varchar(13)  NOT NULL,
    material_type          varchar(3)   NOT NULL,
    material_desc          varchar(100) NOT NULL,
    inactive_ind           ny_ind       NOT NULL,
    std_number             varchar(8)   NULL,
    session_code           varchar(12)  NULL,
    rate_num               smallint     NOT NULL,
    rate_den               smallint     NOT NULL,
    translated_ind         yn_ind       NOT NULL,
    num_pages              int          NOT NULL,
    buffer_percent         int          NOT NULL,
    buffer_min             int          NOT NULL,
    buffer_max             int          NOT NULL,
    hub_buffer_amount      int          NULL,
    inserted_ind           yn_ind       NOT NULL,
    personalised_ind       yn_ind       NOT NULL,
    required_volume        int          NULL,
    printed_volume         int          NULL,
    adjustment             int          NULL,
    booklet_code           int          NULL,
    candidate_material_ind yn_ind       NOT NULL,
    CONSTRAINT PK_EXAM_MATERIALS_CODE
    PRIMARY KEY CLUSTERED (exam_materials_code)
)
LOCK ALLPAGES
go
IF OBJECT_ID('dbo.EXAM_MATERIALS_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EXAM_MATERIALS_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EXAM_MATERIALS_CODE >>>'
go
GRANT REFERENCES ON dbo.EXAM_MATERIALS_CODE TO eqa_user
go
GRANT SELECT ON dbo.EXAM_MATERIALS_CODE TO eqa_user
go
GRANT SELECT ON dbo.EXAM_MATERIALS_CODE TO read_only
go
GRANT SELECT ON dbo.EXAM_MATERIALS_CODE TO rma_users
go
GRANT INSERT ON dbo.EXAM_MATERIALS_CODE TO eqa_user
go
GRANT DELETE ON dbo.EXAM_MATERIALS_CODE TO eqa_user
go
GRANT UPDATE ON dbo.EXAM_MATERIALS_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EXAM_MATERIALS_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EXAM_MATERIALS_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EXAM_MATERIALS_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EXAM_MATERIALS_CODE TO eqa_user
go
CREATE TABLE dbo.EXAM_MATERIAL_CMPT
(
    exam_material_cmpt_id     OBJECT_ID    NOT NULL,
    exam_mtl_file_input_id    OBJECT_ID    NOT NULL,
    exam_material_type        varchar(10)  NOT NULL,
    academic_year             char(4)      NOT NULL,
    assessment_session_type   code_2       NOT NULL,
    exam_material_code        varchar(13)  NOT NULL,
    exam_material_desc        descr_short  NOT NULL,
    std_number                varchar(8)   NULL,
    assess_sess_title_name    name         NOT NULL,
    session_code              varchar(12)  NULL,
    cover_colour              varchar(20)  NULL,
    inside_colour             varchar(20)  NULL,
    resolution                varchar(20)  NULL,
    page_type_desc            descr_short  NULL,
    page_weight               number_3     NULL,
    num_pages                 int          NULL,
    translated_ind            ny_ind       NOT NULL,
    inserted_ind              ny_ind       NOT NULL,
    new_assess_sess_cmpt_ind  ny_ind       NOT NULL,
    naf_name                  name         NOT NULL,
    editor_name               name         NOT NULL,
    special_print_rqmts       varchar(100) NULL,
    booklet_code              int          NULL,
    buffer_min                int          NULL,
    buffer_max                int          NULL,
    buffer_prm_updated_date   dt           NULL,
    buffer_entries_pct        int          NULL,
    rate_num                  smallint     NULL,
    rate_den                  smallint     NULL,
    non_bffr_prm_updated_date dt           NULL,
    growth_alw_pct            numeric(6,2) NULL,
    positive_growth_ind       yn_ind       NOT NULL,
    growth_prm_updated_date   dt           NULL,
    print_order_date          dt           NULL,
    print_order_volume        int          NULL,
    pre_est_prod_volume       int          NULL,
    pre_est_prod_vol_date     dt           NULL,
    stock_take_overs          int          NULL,
    sale_volume               int          NULL,
    panel_packs_count         COUNT_1      NULL,
    personalisation_ind       ny_ind       NOT NULL,
    candidate_mtl_ind         ny_ind       NOT NULL,
    active_ind                yn_ind       NOT NULL,
    audit_tran_id             OBJECT_ID    NOT NULL,
    overs_updated_user        usr          NULL,
    overs_updated_date        dt           NULL,
    CONSTRAINT PK_EXAM_MATERIAL_CMPT
    PRIMARY KEY CLUSTERED (exam_material_cmpt_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.EXAM_MATERIAL_CMPT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EXAM_MATERIAL_CMPT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EXAM_MATERIAL_CMPT >>>'
go
ALTER TABLE dbo.EXAM_MATERIAL_CMPT
    ADD CONSTRAINT FK_EX_MTL_CMPT_ACADEMIC_YR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.EXAM_MATERIAL_CMPT
    ADD CONSTRAINT FK_EX_MTL_CMPT_ASSESS_SESS_TYP
    FOREIGN KEY (assessment_session_type)
    REFERENCES dbo.ASSESSMENT_SESSION_TYPE (assessment_session_type)
go
GRANT REFERENCES ON dbo.EXAM_MATERIAL_CMPT TO eqa_user
go
GRANT SELECT ON dbo.EXAM_MATERIAL_CMPT TO eqa_user
go
GRANT SELECT ON dbo.EXAM_MATERIAL_CMPT TO read_only
go
GRANT SELECT ON dbo.EXAM_MATERIAL_CMPT TO rma_users
go
GRANT INSERT ON dbo.EXAM_MATERIAL_CMPT TO eqa_user
go
GRANT DELETE ON dbo.EXAM_MATERIAL_CMPT TO eqa_user
go
GRANT UPDATE ON dbo.EXAM_MATERIAL_CMPT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EXAM_MATERIAL_CMPT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EXAM_MATERIAL_CMPT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EXAM_MATERIAL_CMPT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EXAM_MATERIAL_CMPT TO eqa_user
go
CREATE TABLE dbo.EXAM_MATERIAL_STATUS
(
    exam_material_status      code_2 NOT NULL,
    exam_material_status_desc descr  NOT NULL,
    CONSTRAINT PK_EXAM_MATERIAL_STATUS
    PRIMARY KEY CLUSTERED (exam_material_status)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.EXAM_MATERIAL_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EXAM_MATERIAL_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EXAM_MATERIAL_STATUS >>>'
go
ALTER TABLE dbo.EXAM_MATERIAL
    ADD CONSTRAINT FK_RESOURCE_STATUS
    FOREIGN KEY (exam_material_status)
    REFERENCES dbo.EXAM_MATERIAL_STATUS (exam_material_status)
go
GRANT REFERENCES ON dbo.EXAM_MATERIAL_STATUS TO eqa_user
go
GRANT SELECT ON dbo.EXAM_MATERIAL_STATUS TO eqa_user
go
GRANT SELECT ON dbo.EXAM_MATERIAL_STATUS TO read_only
go
GRANT SELECT ON dbo.EXAM_MATERIAL_STATUS TO rma_users
go
GRANT INSERT ON dbo.EXAM_MATERIAL_STATUS TO eqa_user
go
GRANT DELETE ON dbo.EXAM_MATERIAL_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.EXAM_MATERIAL_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EXAM_MATERIAL_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EXAM_MATERIAL_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EXAM_MATERIAL_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EXAM_MATERIAL_STATUS TO eqa_user
go
CREATE TABLE dbo.EXAM_MATERIAL_TYPE
(
    exam_material_type      varchar(10) NOT NULL,
    exam_material_type_desc descr       NOT NULL,
    buffer_ind              yn_ind      NOT NULL,
    personalisation_ind     ny_ind      NOT NULL,
    candidate_mtl_ind       ny_ind      NOT NULL,
    active_ind              yn_ind      NOT NULL,
    sortkey                 sortkey     NOT NULL,
    CONSTRAINT PK_EXAM_MATERIAL_TYPE
    PRIMARY KEY NONCLUSTERED (exam_material_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.EXAM_MATERIAL_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EXAM_MATERIAL_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EXAM_MATERIAL_TYPE >>>'
go
ALTER TABLE dbo.EXAM_MATERIAL
    ADD CONSTRAINT FK_RESOURCE_RESOURCE_TYPE
    FOREIGN KEY (exam_material_type)
    REFERENCES dbo.EXAM_MATERIAL_TYPE (exam_material_type)
go
ALTER TABLE dbo.EXAM_MATERIAL_CMPT
    ADD CONSTRAINT FK_EX_MTL_CMPT_EXAM_MTL_TYPE
    FOREIGN KEY (exam_material_type)
    REFERENCES dbo.EXAM_MATERIAL_TYPE (exam_material_type)
go
GRANT REFERENCES ON dbo.EXAM_MATERIAL_TYPE TO eqa_user
go
GRANT SELECT ON dbo.EXAM_MATERIAL_TYPE TO eqa_user
go
GRANT SELECT ON dbo.EXAM_MATERIAL_TYPE TO read_only
go
GRANT SELECT ON dbo.EXAM_MATERIAL_TYPE TO rma_users
go
GRANT INSERT ON dbo.EXAM_MATERIAL_TYPE TO eqa_user
go
GRANT DELETE ON dbo.EXAM_MATERIAL_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.EXAM_MATERIAL_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EXAM_MATERIAL_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EXAM_MATERIAL_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EXAM_MATERIAL_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EXAM_MATERIAL_TYPE TO eqa_user
go
CREATE TABLE dbo.EXAM_MTL_CMPT_ADDL_VOL
(
    exam_mtl_cmpt_addl_vol_id    OBJECT_ID NOT NULL,
    addl_volume_type_code        code_4    NOT NULL,
    exam_material_cmpt_id        OBJECT_ID NOT NULL,
    session_pre_pers_addl_vol_id OBJECT_ID NULL,
    exam_centre_id               OBJECT_ID NULL,
    exam_centre_location         number_2  NULL,
    volume                       int       NOT NULL,
    updated_date                 dt        NOT NULL,
    extracted_date               dt        NULL,
    audit_tran_id                OBJECT_ID NOT NULL,
    CONSTRAINT PK_EXAM_MTL_CMPT_ADDL_VOL
    PRIMARY KEY CLUSTERED (exam_mtl_cmpt_addl_vol_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.EXAM_MTL_CMPT_ADDL_VOL') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EXAM_MTL_CMPT_ADDL_VOL >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EXAM_MTL_CMPT_ADDL_VOL >>>'
go
ALTER TABLE dbo.EXAM_MTL_CMPT_ADDL_VOL
    ADD CONSTRAINT FK_EX_MTL_ADDL_VOL_ADDL_VOL_TY
    FOREIGN KEY (addl_volume_type_code)
    REFERENCES dbo.ADDL_VOLUME_TYPE (addl_volume_type_code)
go
ALTER TABLE dbo.EXAM_MTL_CMPT_ADDL_VOL
    ADD CONSTRAINT FK_EX_MTL_ADDL_VOL_EX_MTL_CMPT
    FOREIGN KEY (exam_material_cmpt_id)
    REFERENCES dbo.EXAM_MATERIAL_CMPT (exam_material_cmpt_id)
go
ALTER TABLE dbo.EXAM_MTL_CMPT_ADDL_VOL
    ADD CONSTRAINT FK_EXM_MTL_ADDL_VOL_ASSESS_CTR
    FOREIGN KEY (exam_centre_id,exam_centre_location)
    REFERENCES dbo.ASSESSMENT_CENTRE (moe_provider_id,location)
go
ALTER TABLE dbo.EXAM_MTL_CMPT_ADDL_VOL
    ADD CONSTRAINT FK_EXM_MTL_A_VOL_SESS_A_VOL
    FOREIGN KEY (session_pre_pers_addl_vol_id)
    REFERENCES dbo.SESSION_PRE_PERS_ADDL_VOL (session_pre_pers_addl_vol_id)
go
GRANT REFERENCES ON dbo.EXAM_MTL_CMPT_ADDL_VOL TO eqa_user
go
GRANT SELECT ON dbo.EXAM_MTL_CMPT_ADDL_VOL TO eqa_user
go
GRANT SELECT ON dbo.EXAM_MTL_CMPT_ADDL_VOL TO read_only
go
GRANT SELECT ON dbo.EXAM_MTL_CMPT_ADDL_VOL TO rma_users
go
GRANT INSERT ON dbo.EXAM_MTL_CMPT_ADDL_VOL TO eqa_user
go
GRANT DELETE ON dbo.EXAM_MTL_CMPT_ADDL_VOL TO eqa_user
go
GRANT UPDATE ON dbo.EXAM_MTL_CMPT_ADDL_VOL TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EXAM_MTL_CMPT_ADDL_VOL TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EXAM_MTL_CMPT_ADDL_VOL TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EXAM_MTL_CMPT_ADDL_VOL TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EXAM_MTL_CMPT_ADDL_VOL TO eqa_user
go
CREATE TABLE dbo.EXAM_MTL_CMPT_CHG_HIST
(
    exam_mtl_cmpt_hist_id      OBJECT_ID     NOT NULL,
    exam_mtl_file_input_id     OBJECT_ID     NOT NULL,
    exam_material_cmpt_id      OBJECT_ID     NOT NULL,
    prev_exam_material_cmpt_id OBJECT_ID     NULL,
    approval_required_ind      ny_ind        NOT NULL,
    exam_mtl_cmpt_status_code  code_2        NULL,
    status_date                dt            NULL,
    change_type                varchar(30)   NOT NULL,
    change_desc                varchar(1000) NOT NULL,
    audit_tran_id              OBJECT_ID     NOT NULL,
    CONSTRAINT PK_EXAM_MTL_CMPT_CHG_HIST
    PRIMARY KEY CLUSTERED (exam_mtl_cmpt_hist_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.EXAM_MTL_CMPT_CHG_HIST') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EXAM_MTL_CMPT_CHG_HIST >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EXAM_MTL_CMPT_CHG_HIST >>>'
go
ALTER TABLE dbo.EXAM_MTL_CMPT_CHG_HIST
    ADD CONSTRAINT FK_EX_MTL_CHG_HS_EX_MTL_CMPT
    FOREIGN KEY (exam_material_cmpt_id)
    REFERENCES dbo.EXAM_MATERIAL_CMPT (exam_material_cmpt_id)
go
ALTER TABLE dbo.EXAM_MTL_CMPT_CHG_HIST
    ADD CONSTRAINT FK_EX_MTL_CHG_HS_EX_MTL_CMPT_P
    FOREIGN KEY (prev_exam_material_cmpt_id)
    REFERENCES dbo.EXAM_MATERIAL_CMPT (exam_material_cmpt_id)
go
GRANT REFERENCES ON dbo.EXAM_MTL_CMPT_CHG_HIST TO eqa_user
go
GRANT SELECT ON dbo.EXAM_MTL_CMPT_CHG_HIST TO eqa_user
go
GRANT SELECT ON dbo.EXAM_MTL_CMPT_CHG_HIST TO read_only
go
GRANT SELECT ON dbo.EXAM_MTL_CMPT_CHG_HIST TO rma_users
go
GRANT INSERT ON dbo.EXAM_MTL_CMPT_CHG_HIST TO eqa_user
go
GRANT DELETE ON dbo.EXAM_MTL_CMPT_CHG_HIST TO eqa_user
go
GRANT UPDATE ON dbo.EXAM_MTL_CMPT_CHG_HIST TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EXAM_MTL_CMPT_CHG_HIST TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EXAM_MTL_CMPT_CHG_HIST TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EXAM_MTL_CMPT_CHG_HIST TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EXAM_MTL_CMPT_CHG_HIST TO eqa_user
go
CREATE TABLE dbo.EXAM_MTL_CMPT_CHG_STATUS
(
    exam_mtl_cmpt_status_code code_2      NOT NULL,
    exam_mtl_cmpt_status_desc descr_short NOT NULL,
    active_ind                yn_ind      NOT NULL,
    sortkey                   sortkey     NOT NULL,
    CONSTRAINT PK_EXAM_MTL_CMPT_CHG_STATUS
    PRIMARY KEY NONCLUSTERED (exam_mtl_cmpt_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.EXAM_MTL_CMPT_CHG_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EXAM_MTL_CMPT_CHG_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EXAM_MTL_CMPT_CHG_STATUS >>>'
go
ALTER TABLE dbo.EXAM_MTL_CMPT_CHG_HIST
    ADD CONSTRAINT FK_EXMTL_CHG_HS_EXMTL_CHG_STA
    FOREIGN KEY (exam_mtl_cmpt_status_code)
    REFERENCES dbo.EXAM_MTL_CMPT_CHG_STATUS (exam_mtl_cmpt_status_code)
go
GRANT REFERENCES ON dbo.EXAM_MTL_CMPT_CHG_STATUS TO eqa_user
go
GRANT SELECT ON dbo.EXAM_MTL_CMPT_CHG_STATUS TO eqa_user
go
GRANT SELECT ON dbo.EXAM_MTL_CMPT_CHG_STATUS TO read_only
go
GRANT SELECT ON dbo.EXAM_MTL_CMPT_CHG_STATUS TO rma_users
go
GRANT INSERT ON dbo.EXAM_MTL_CMPT_CHG_STATUS TO eqa_user
go
GRANT DELETE ON dbo.EXAM_MTL_CMPT_CHG_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.EXAM_MTL_CMPT_CHG_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EXAM_MTL_CMPT_CHG_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EXAM_MTL_CMPT_CHG_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EXAM_MTL_CMPT_CHG_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EXAM_MTL_CMPT_CHG_STATUS TO eqa_user
go
CREATE TABLE dbo.EXAM_MTL_EVENT
(
    exam_mtl_event_id OBJECT_ID NOT NULL,
    academic_year     char(4)   NOT NULL,
    exam_mtl_event    descr     NOT NULL,
    event_run_date    dt        NOT NULL,
    created_date      dt        NOT NULL,
    created_by        usr       NOT NULL,
    audit_tran_id     OBJECT_ID NOT NULL,
    CONSTRAINT PK_EXAM_MTL_EVENT
    PRIMARY KEY NONCLUSTERED (exam_mtl_event_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.EXAM_MTL_EVENT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EXAM_MTL_EVENT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EXAM_MTL_EVENT >>>'
go
ALTER TABLE dbo.EXAM_MTL_EVENT
    ADD CONSTRAINT FK_EXAM_MTL_EVENT_ACADEMIC_YR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
GRANT REFERENCES ON dbo.EXAM_MTL_EVENT TO eqa_user
go
GRANT SELECT ON dbo.EXAM_MTL_EVENT TO eqa_user
go
GRANT SELECT ON dbo.EXAM_MTL_EVENT TO read_only
go
GRANT SELECT ON dbo.EXAM_MTL_EVENT TO rma_users
go
GRANT INSERT ON dbo.EXAM_MTL_EVENT TO eqa_user
go
GRANT DELETE ON dbo.EXAM_MTL_EVENT TO eqa_user
go
GRANT UPDATE ON dbo.EXAM_MTL_EVENT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EXAM_MTL_EVENT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EXAM_MTL_EVENT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EXAM_MTL_EVENT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EXAM_MTL_EVENT TO eqa_user
go
CREATE TABLE dbo.EXAM_MTL_FILE_INPUT
(
    exam_mtl_file_input_id OBJECT_ID NOT NULL,
    academic_year          char(4)   NOT NULL,
    file_name              long_name NOT NULL,
    uploaded_user          usr       NOT NULL,
    uploaded_date          dt        NOT NULL,
    audit_tran_id          OBJECT_ID NOT NULL,
    CONSTRAINT PK_EXAM_MTL_FILE_INPUT
    PRIMARY KEY CLUSTERED (exam_mtl_file_input_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.EXAM_MTL_FILE_INPUT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EXAM_MTL_FILE_INPUT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EXAM_MTL_FILE_INPUT >>>'
go
ALTER TABLE dbo.EXAM_MTL_FILE_INPUT
    ADD CONSTRAINT FK_EX_MTL_FILE_INP_ACADEMIC_YR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.EXAM_MATERIAL_CMPT
    ADD CONSTRAINT FK_EX_MTL_CMPT_EX_MTL_FILE_INP
    FOREIGN KEY (exam_mtl_file_input_id)
    REFERENCES dbo.EXAM_MTL_FILE_INPUT (exam_mtl_file_input_id)
go
ALTER TABLE dbo.EXAM_MTL_CMPT_CHG_HIST
    ADD CONSTRAINT FK_EX_MTL_CMPT_CHG_EXMTL_FL_IN
    FOREIGN KEY (exam_mtl_file_input_id)
    REFERENCES dbo.EXAM_MTL_FILE_INPUT (exam_mtl_file_input_id)
go
GRANT REFERENCES ON dbo.EXAM_MTL_FILE_INPUT TO eqa_user
go
GRANT SELECT ON dbo.EXAM_MTL_FILE_INPUT TO eqa_user
go
GRANT SELECT ON dbo.EXAM_MTL_FILE_INPUT TO read_only
go
GRANT SELECT ON dbo.EXAM_MTL_FILE_INPUT TO rma_users
go
GRANT INSERT ON dbo.EXAM_MTL_FILE_INPUT TO eqa_user
go
GRANT DELETE ON dbo.EXAM_MTL_FILE_INPUT TO eqa_user
go
GRANT UPDATE ON dbo.EXAM_MTL_FILE_INPUT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EXAM_MTL_FILE_INPUT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EXAM_MTL_FILE_INPUT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EXAM_MTL_FILE_INPUT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EXAM_MTL_FILE_INPUT TO eqa_user
go
CREATE TABLE dbo.EXCEPTION_ORN_TYPE
(
    exception_orn_type_code code_3      NOT NULL,
    exception_orn_type_desc descr_short NOT NULL,
    active_ind              yn_ind      NOT NULL,
    sortkey                 sortkey     NOT NULL,
    CONSTRAINT PK_EXCEPTION_ORN_TYPE
    PRIMARY KEY CLUSTERED (exception_orn_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.EXCEPTION_ORN_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EXCEPTION_ORN_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EXCEPTION_ORN_TYPE >>>'
go
GRANT REFERENCES ON dbo.EXCEPTION_ORN_TYPE TO eqa_user
go
GRANT SELECT ON dbo.EXCEPTION_ORN_TYPE TO eqa_user
go
GRANT SELECT ON dbo.EXCEPTION_ORN_TYPE TO read_only
go
GRANT SELECT ON dbo.EXCEPTION_ORN_TYPE TO rma_users
go
GRANT INSERT ON dbo.EXCEPTION_ORN_TYPE TO eqa_user
go
GRANT DELETE ON dbo.EXCEPTION_ORN_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.EXCEPTION_ORN_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EXCEPTION_ORN_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EXCEPTION_ORN_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EXCEPTION_ORN_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EXCEPTION_ORN_TYPE TO eqa_user
go
CREATE TABLE dbo.EXCLUDED_ASSISTANCE_CODE
(
    assistance_code code_2     NOT NULL,
    std_number      varchar(8) NOT NULL,
    CONSTRAINT PK_EXCLUDED_ASSISTANCE_CODE
    PRIMARY KEY CLUSTERED (assistance_code,std_number)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.EXCLUDED_ASSISTANCE_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EXCLUDED_ASSISTANCE_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EXCLUDED_ASSISTANCE_CODE >>>'
go
ALTER TABLE dbo.EXCLUDED_ASSISTANCE_CODE
    ADD CONSTRAINT FK_EXCLUDED_ASSISTANCE_ASSIST
    FOREIGN KEY (assistance_code)
    REFERENCES dbo.ASSISTANCE_CODE (assistance_code)
go
ALTER TABLE dbo.EXCLUDED_ASSISTANCE_CODE
    ADD CONSTRAINT FK_EXCLUDED_ASSISTANCE_STD
    FOREIGN KEY (std_number)
    REFERENCES dbo.STD (std_number)
go
GRANT REFERENCES ON dbo.EXCLUDED_ASSISTANCE_CODE TO eqa_user
go
GRANT SELECT ON dbo.EXCLUDED_ASSISTANCE_CODE TO eqa_user
go
GRANT SELECT ON dbo.EXCLUDED_ASSISTANCE_CODE TO read_only
go
GRANT SELECT ON dbo.EXCLUDED_ASSISTANCE_CODE TO rma_users
go
GRANT INSERT ON dbo.EXCLUDED_ASSISTANCE_CODE TO eqa_user
go
GRANT DELETE ON dbo.EXCLUDED_ASSISTANCE_CODE TO eqa_user
go
GRANT UPDATE ON dbo.EXCLUDED_ASSISTANCE_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EXCLUDED_ASSISTANCE_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EXCLUDED_ASSISTANCE_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EXCLUDED_ASSISTANCE_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EXCLUDED_ASSISTANCE_CODE TO eqa_user
go
CREATE TABLE dbo.EXCLUDED_SEARCH_WORDS
(
    search_context_code code_2       NOT NULL,
    excluded_word       varchar(100) NOT NULL,
    active_ind          yn           NULL,
    CONSTRAINT PK_EXCLUDED_SEARCH_WORDS
    PRIMARY KEY CLUSTERED (excluded_word,search_context_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.EXCLUDED_SEARCH_WORDS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EXCLUDED_SEARCH_WORDS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EXCLUDED_SEARCH_WORDS >>>'
go
ALTER TABLE dbo.EXCLUDED_SEARCH_WORDS
    ADD CONSTRAINT FK_EXCL_SEARCH_WD_SEARCH_CONT
    FOREIGN KEY (search_context_code)
    REFERENCES dbo.SEARCH_CONTEXT (search_context_code)
go
GRANT REFERENCES ON dbo.EXCLUDED_SEARCH_WORDS TO eqa_user
go
GRANT SELECT ON dbo.EXCLUDED_SEARCH_WORDS TO eqa_user
go
GRANT SELECT ON dbo.EXCLUDED_SEARCH_WORDS TO read_only
go
GRANT SELECT ON dbo.EXCLUDED_SEARCH_WORDS TO rma_users
go
GRANT INSERT ON dbo.EXCLUDED_SEARCH_WORDS TO eqa_user
go
GRANT DELETE ON dbo.EXCLUDED_SEARCH_WORDS TO eqa_user
go
GRANT UPDATE ON dbo.EXCLUDED_SEARCH_WORDS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EXCLUDED_SEARCH_WORDS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EXCLUDED_SEARCH_WORDS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EXCLUDED_SEARCH_WORDS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EXCLUDED_SEARCH_WORDS TO eqa_user
go
CREATE TABLE dbo.EXT_TASK_PROV_CRIT_WORK_TABLE
(
    accreditation_extension_run_id OBJECT_ID NOT NULL,
    extension_task_number          number_3  NOT NULL,
    criterion_number               number_3  NOT NULL,
    accredited_item_id             OBJECT_ID NOT NULL,
    CONSTRAINT PK_EXT_TASK_PROV_CRIT_WORK_TAB
    PRIMARY KEY CLUSTERED (accreditation_extension_run_id,extension_task_number,criterion_number,accredited_item_id)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.EXT_TASK_PROV_CRIT_WORK_TABLE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EXT_TASK_PROV_CRIT_WORK_TABLE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EXT_TASK_PROV_CRIT_WORK_TABLE >>>'
go
ALTER TABLE dbo.EXT_TASK_PROV_CRIT_WORK_TABLE
    ADD CONSTRAINT FK_EXT_TASK_CRIT_WORK_EXT_RUN
    FOREIGN KEY (accreditation_extension_run_id)
    REFERENCES dbo.ACCREDITATION_EXTENSION_RUN (accreditation_extension_run_id)
go
ALTER TABLE dbo.EXT_TASK_PROV_CRIT_WORK_TABLE
    ADD CONSTRAINT FK_EXT_TASK_CRIT_WK_ACRED_ITEM
    FOREIGN KEY (accredited_item_id)
    REFERENCES dbo.ACCREDITED_ITEM (accredited_item_id)
go
GRANT REFERENCES ON dbo.EXT_TASK_PROV_CRIT_WORK_TABLE TO eqa_user
go
GRANT SELECT ON dbo.EXT_TASK_PROV_CRIT_WORK_TABLE TO eqa_user
go
GRANT SELECT ON dbo.EXT_TASK_PROV_CRIT_WORK_TABLE TO read_only
go
GRANT SELECT ON dbo.EXT_TASK_PROV_CRIT_WORK_TABLE TO rma_users
go
GRANT INSERT ON dbo.EXT_TASK_PROV_CRIT_WORK_TABLE TO eqa_user
go
GRANT DELETE ON dbo.EXT_TASK_PROV_CRIT_WORK_TABLE TO eqa_user
go
GRANT UPDATE ON dbo.EXT_TASK_PROV_CRIT_WORK_TABLE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EXT_TASK_PROV_CRIT_WORK_TABLE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EXT_TASK_PROV_CRIT_WORK_TABLE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EXT_TASK_PROV_CRIT_WORK_TABLE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EXT_TASK_PROV_CRIT_WORK_TABLE TO eqa_user
go
CREATE TABLE dbo.EXT_TASK_PROV_EXTN_WORK_TABLE
(
    accreditation_extension_run_id OBJECT_ID NOT NULL,
    extension_task_number          number_3  NOT NULL,
    extension_number               number_3  NOT NULL,
    provider_id                    OBJECT_ID NOT NULL,
    accredited_item_status         code_2    NOT NULL,
    cfn_catg_id                    OBJECT_ID NULL,
    std_id                         OBJECT_ID NULL,
    perorg_case_id                 OBJECT_ID NULL,
    level_code                     code_2    NULL,
    accredited_item_id             OBJECT_ID NULL,
    extension_action               smallint  NOT NULL,
    CONSTRAINT PK_EXT_TASK_PROV_EXTN_WORK_TAB
    PRIMARY KEY CLUSTERED (accreditation_extension_run_id,extension_task_number,extension_number,provider_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.EXT_TASK_PROV_EXTN_WORK_TABLE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EXT_TASK_PROV_EXTN_WORK_TABLE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EXT_TASK_PROV_EXTN_WORK_TABLE >>>'
go
ALTER TABLE dbo.EXT_TASK_PROV_EXTN_WORK_TABLE
    ADD CONSTRAINT FK_EXT_TASK_EXTN_WORK_EXT_RUN
    FOREIGN KEY (accreditation_extension_run_id)
    REFERENCES dbo.ACCREDITATION_EXTENSION_RUN (accreditation_extension_run_id)
go
ALTER TABLE dbo.EXT_TASK_PROV_EXTN_WORK_TABLE
    ADD CONSTRAINT FK_EXT_TASK_PROV_WK_ACRED_ITEM
    FOREIGN KEY (accredited_item_id)
    REFERENCES dbo.ACCREDITED_ITEM (accredited_item_id)
go
ALTER TABLE dbo.EXT_TASK_PROV_EXTN_WORK_TABLE
    ADD CONSTRAINT FK_EXT_TASK_PROV_WK_ACRED_STAT
    FOREIGN KEY (accredited_item_status)
    REFERENCES dbo.ACCREDITED_ITEM_STATUS (accredited_item_status)
go
ALTER TABLE dbo.EXT_TASK_PROV_EXTN_WORK_TABLE
    ADD CONSTRAINT FK_EXT_TASK_PROV_WORK_CFN_CAT
    FOREIGN KEY (cfn_catg_id)
    REFERENCES dbo.CFN_CATEGORY (cfn_catg_id)
go
ALTER TABLE dbo.EXT_TASK_PROV_EXTN_WORK_TABLE
    ADD CONSTRAINT FK_EXT_TASK_PROV_WORK_PROVIDER
    FOREIGN KEY (provider_id)
    REFERENCES dbo.PROVIDER (provider_id)
go
ALTER TABLE dbo.EXT_TASK_PROV_EXTN_WORK_TABLE
    ADD CONSTRAINT FK_EXT_TASK_PROV_WORK_STD
    FOREIGN KEY (std_id)
    REFERENCES dbo.STD (std_id)
go
ALTER TABLE dbo.EXT_TASK_PROV_EXTN_WORK_TABLE
    ADD CONSTRAINT FK_EXT_TASK_PROV_WK_CASE
    FOREIGN KEY (perorg_case_id)
    REFERENCES dbo.PERORG_CASE (perorg_case_id)
go
ALTER TABLE dbo.EXT_TASK_PROV_EXTN_WORK_TABLE
    ADD CONSTRAINT FK_EXT_TASK_PROV_WORK_LVL
    FOREIGN KEY (level_code)
    REFERENCES dbo.LVL (level_code)
go
GRANT REFERENCES ON dbo.EXT_TASK_PROV_EXTN_WORK_TABLE TO eqa_user
go
GRANT SELECT ON dbo.EXT_TASK_PROV_EXTN_WORK_TABLE TO eqa_user
go
GRANT SELECT ON dbo.EXT_TASK_PROV_EXTN_WORK_TABLE TO read_only
go
GRANT SELECT ON dbo.EXT_TASK_PROV_EXTN_WORK_TABLE TO rma_users
go
GRANT INSERT ON dbo.EXT_TASK_PROV_EXTN_WORK_TABLE TO eqa_user
go
GRANT DELETE ON dbo.EXT_TASK_PROV_EXTN_WORK_TABLE TO eqa_user
go
GRANT UPDATE ON dbo.EXT_TASK_PROV_EXTN_WORK_TABLE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EXT_TASK_PROV_EXTN_WORK_TABLE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EXT_TASK_PROV_EXTN_WORK_TABLE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EXT_TASK_PROV_EXTN_WORK_TABLE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EXT_TASK_PROV_EXTN_WORK_TABLE TO eqa_user
go
CREATE TABLE dbo.EX_MARKER_PAGE
(
    ex_marker_page_id       OBJECT_ID     NOT NULL,
    marker_code             int           NOT NULL,
    marker_page             numeric(12,0) NOT NULL,
    study_provider_id       OBJECT_ID     NULL,
    study_provider_location numeric(2,0)  NULL,
    schedule_type           code_2        NOT NULL,
    academic_year           char(4)       NOT NULL,
    date_to_datamail        datetime      NULL,
    audit_tran_id           numeric(12,0) NOT NULL,
    ts                      timestamp     NULL,
    date_from_datamail      datetime      NULL,
    page_display_type_code  code_2        NOT NULL,
    line_sort_order_code    code_2        NOT NULL,
    CONSTRAINT PK_EX_MARKER_PAGE
    PRIMARY KEY CLUSTERED (ex_marker_page_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.EX_MARKER_PAGE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EX_MARKER_PAGE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EX_MARKER_PAGE >>>'
go
ALTER TABLE dbo.EX_MARKER_PAGE
    ADD CONSTRAINT FK_EX_MARKER_ACADEMIC_YEAR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.EX_MARKER_PAGE
    ADD CONSTRAINT FK_EX_MARKER_PAGE_PROVIDER
    FOREIGN KEY (study_provider_id,study_provider_location)
    REFERENCES dbo.PROVIDER (moe_provider_id,location)
go
ALTER TABLE dbo.EX_MARKER_PAGE
    ADD CONSTRAINT FK_EX_MARKER_PAGE_SCHED_TYPE
    FOREIGN KEY (schedule_type)
    REFERENCES dbo.SCHEDULE_TYPE (schedule_type)
go
ALTER TABLE dbo.EX_MARKER_PAGE
    ADD CONSTRAINT FK_EX_MARKER_PAGE_DISPLAY_TYPE
    FOREIGN KEY (page_display_type_code)
    REFERENCES dbo.PAGE_DISPLAY_TYPE (page_display_type_code)
go
ALTER TABLE dbo.EX_MARKER_PAGE
    ADD CONSTRAINT FK_EX_MARKER_PG_LN_SORT_ORDER
    FOREIGN KEY (line_sort_order_code)
    REFERENCES dbo.LINE_SORT_ORDER_CODE (line_sort_order_code)
go
GRANT REFERENCES ON dbo.EX_MARKER_PAGE TO eqa_user
go
GRANT SELECT ON dbo.EX_MARKER_PAGE TO eqa_user
go
GRANT SELECT ON dbo.EX_MARKER_PAGE TO read_only
go
GRANT SELECT ON dbo.EX_MARKER_PAGE TO rma_users
go
GRANT INSERT ON dbo.EX_MARKER_PAGE TO eqa_user
go
GRANT DELETE ON dbo.EX_MARKER_PAGE TO eqa_user
go
GRANT UPDATE ON dbo.EX_MARKER_PAGE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EX_MARKER_PAGE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EX_MARKER_PAGE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EX_MARKER_PAGE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EX_MARKER_PAGE TO eqa_user
go
CREATE TABLE dbo.EX_MARKER_PAGE_HISTORY
(
    ex_marker_page_history_id OBJECT_ID     NOT NULL,
    ex_marker_page_id         OBJECT_ID     NOT NULL,
    marker_id_old             OBJECT_ID     NOT NULL,
    marker_id_new             OBJECT_ID     NOT NULL,
    audit_tran_id             numeric(12,0) NOT NULL,
    ts                        timestamp     NOT NULL,
    CONSTRAINT PK_EX_MARKER_PAGE_HISTORY
    PRIMARY KEY CLUSTERED (ex_marker_page_history_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.EX_MARKER_PAGE_HISTORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EX_MARKER_PAGE_HISTORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EX_MARKER_PAGE_HISTORY >>>'
go
ALTER TABLE dbo.EX_MARKER_PAGE_HISTORY
    ADD CONSTRAINT FK_EX_MARKER_PAGE_HISTORY_ID
    FOREIGN KEY (ex_marker_page_id)
    REFERENCES dbo.EX_MARKER_PAGE (ex_marker_page_id)
go
ALTER TABLE dbo.EX_MARKER_PAGE_HISTORY
    ADD CONSTRAINT FK_EX_MARKER_PAGE_HISTORY_NEW
    FOREIGN KEY (marker_id_new)
    REFERENCES dbo.MARKER (marker_id)
go
ALTER TABLE dbo.EX_MARKER_PAGE_HISTORY
    ADD CONSTRAINT FK_EX_MARKER_PAGE_HISTORY_OLD
    FOREIGN KEY (marker_id_old)
    REFERENCES dbo.MARKER (marker_id)
go
GRANT REFERENCES ON dbo.EX_MARKER_PAGE_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.EX_MARKER_PAGE_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.EX_MARKER_PAGE_HISTORY TO read_only
go
GRANT SELECT ON dbo.EX_MARKER_PAGE_HISTORY TO rma_users
go
GRANT INSERT ON dbo.EX_MARKER_PAGE_HISTORY TO eqa_user
go
GRANT DELETE ON dbo.EX_MARKER_PAGE_HISTORY TO eqa_user
go
GRANT UPDATE ON dbo.EX_MARKER_PAGE_HISTORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EX_MARKER_PAGE_HISTORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EX_MARKER_PAGE_HISTORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EX_MARKER_PAGE_HISTORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EX_MARKER_PAGE_HISTORY TO eqa_user
go
CREATE TABLE dbo.EX_MARKER_PAGE_LINE
(
    ex_marker_page_line_id   OBJECT_ID     NOT NULL,
    ex_marker_page_id        OBJECT_ID     NOT NULL,
    line_number              numeric(4,0)  NOT NULL,
    serial_number            numeric(5,0)  NULL,
    std_number               varchar(8)    NOT NULL,
    std_version_number       numeric(8,0)  NOT NULL,
    exam_centre_id           OBJECT_ID     NOT NULL,
    exam_code                char(4)       NULL,
    enrolment_id             OBJECT_ID     NOT NULL,
    nsn                      nsn           NOT NULL,
    entry_id                 OBJECT_ID     NOT NULL,
    result_code_initial      varchar(5)    NULL,
    result_code_double       varchar(5)    NULL,
    audit_tran_id            numeric(12,0) NOT NULL,
    ts                       timestamp     NULL,
    date_entered             datetime      NULL,
    is_submitted_internally  yn            DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0                              NULL,
    results_date_to          datetime      NULL,
    results_batch_no         varchar(255)  NULL,
    result_component_link_id OBJECT_ID     NULL,
    line_origin_type_code    code_2        NOT NULL,
    in_sper                  COMPUTE case when results_date_to >= date_entered then 1 else 0 end Materialized MATERIALIZED,
    CONSTRAINT PK_EX_MARKER_PAGE_LINE
    PRIMARY KEY CLUSTERED (ex_marker_page_line_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.EX_MARKER_PAGE_LINE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EX_MARKER_PAGE_LINE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EX_MARKER_PAGE_LINE >>>'
go
ALTER TABLE dbo.EX_MARKER_PAGE_LINE
    ADD CONSTRAINT FK_EX_MARKER_PAGE_ENTRY
    FOREIGN KEY (entry_id)
    REFERENCES dbo.ENTRY (entry_id)
go
ALTER TABLE dbo.EX_MARKER_PAGE_LINE
    ADD CONSTRAINT FK_EX_MARKER_PAGE_LINE
    FOREIGN KEY (ex_marker_page_id)
    REFERENCES dbo.EX_MARKER_PAGE (ex_marker_page_id)
go
ALTER TABLE dbo.EX_MARKER_PAGE_LINE
    ADD CONSTRAINT FK_EX_MRK_PG_RESULT_CDE_INIT
    FOREIGN KEY (result_code_initial)
    REFERENCES dbo.RESULT_CODE (result_code)
go
ALTER TABLE dbo.EX_MARKER_PAGE_LINE
    ADD CONSTRAINT FK_EX_MRK_PG_RESULT_CDE_DBLE
    FOREIGN KEY (result_code_double)
    REFERENCES dbo.RESULT_CODE (result_code)
go
ALTER TABLE dbo.EX_MARKER_PAGE_LINE
    ADD CONSTRAINT FK_EX_MARKER_PAGE_NSN
    FOREIGN KEY (nsn)
    REFERENCES dbo.LEARNER (nsn)
go
ALTER TABLE dbo.EX_MARKER_PAGE_LINE
    ADD CONSTRAINT FK_EX_MARKER_PAGE_STD_VER_NO
    FOREIGN KEY (std_number,std_version_number)
    REFERENCES dbo.STD_VERSION (std_number,std_version_number)
go
ALTER TABLE dbo.EX_MARKER_PAGE_LINE
    ADD CONSTRAINT FK_EX_MARKER_PG_LINE_COMP_LK
    FOREIGN KEY (result_component_link_id)
    REFERENCES dbo.RESULT_COMPONENT_LINK (result_component_link_id)
go
ALTER TABLE dbo.EX_MARKER_PAGE_LINE
    ADD CONSTRAINT FK_EX_MARKER_PAGE_LINE_ORG_TYP
    FOREIGN KEY (line_origin_type_code)
    REFERENCES dbo.LINE_ORIGIN_TYPE (line_origin_type_code)
go
ALTER TABLE dbo.EX_MARKER_PAGE_LINE
    ADD CONSTRAINT FK_EX_MARKER_PAGE_ENROLMENT
    FOREIGN KEY (enrolment_id)
    REFERENCES dbo.LEARNER_ENROLMENT (enrolment_id)
go
GRANT REFERENCES ON dbo.EX_MARKER_PAGE_LINE TO eqa_user
go
GRANT SELECT ON dbo.EX_MARKER_PAGE_LINE TO eqa_user
go
GRANT SELECT ON dbo.EX_MARKER_PAGE_LINE TO read_only
go
GRANT SELECT ON dbo.EX_MARKER_PAGE_LINE TO rma_users
go
GRANT INSERT ON dbo.EX_MARKER_PAGE_LINE TO eqa_user
go
GRANT DELETE ON dbo.EX_MARKER_PAGE_LINE TO eqa_user
go
GRANT UPDATE ON dbo.EX_MARKER_PAGE_LINE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EX_MARKER_PAGE_LINE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EX_MARKER_PAGE_LINE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EX_MARKER_PAGE_LINE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EX_MARKER_PAGE_LINE TO eqa_user
go
CREATE TABLE dbo.EX_MARKER_PAGE_LINE_HISTORY
(
    ex_marker_page_line_history_id OBJECT_ID NOT NULL,
    ex_marker_page_line_id         OBJECT_ID NOT NULL,
    marker_id_old                  OBJECT_ID NOT NULL,
    marker_id_new                  OBJECT_ID NOT NULL,
    audit_tran_id                  OBJECT_ID NOT NULL,
    CONSTRAINT PK_EX_MARKER_PAGE_LINE_HISTORY
    PRIMARY KEY NONCLUSTERED (ex_marker_page_line_history_id)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.EX_MARKER_PAGE_LINE_HISTORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EX_MARKER_PAGE_LINE_HISTORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EX_MARKER_PAGE_LINE_HISTORY >>>'
go
ALTER TABLE dbo.EX_MARKER_PAGE_LINE_HISTORY
    ADD CONSTRAINT FK_EX_MR_PG_LN_HS_EX_MR_PG_LN
    FOREIGN KEY (ex_marker_page_line_id)
    REFERENCES dbo.EX_MARKER_PAGE_LINE (ex_marker_page_line_id)
go
ALTER TABLE dbo.EX_MARKER_PAGE_LINE_HISTORY
    ADD CONSTRAINT FK_EX_MARKER_PAGE_LINE_HS_NEW
    FOREIGN KEY (marker_id_new)
    REFERENCES dbo.MARKER (marker_id)
go
ALTER TABLE dbo.EX_MARKER_PAGE_LINE_HISTORY
    ADD CONSTRAINT FK_EX_MARKER_PAGE_LINE_HS_OLD
    FOREIGN KEY (marker_id_old)
    REFERENCES dbo.MARKER (marker_id)
go
GRANT REFERENCES ON dbo.EX_MARKER_PAGE_LINE_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.EX_MARKER_PAGE_LINE_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.EX_MARKER_PAGE_LINE_HISTORY TO read_only
go
GRANT SELECT ON dbo.EX_MARKER_PAGE_LINE_HISTORY TO rma_users
go
GRANT INSERT ON dbo.EX_MARKER_PAGE_LINE_HISTORY TO eqa_user
go
GRANT DELETE ON dbo.EX_MARKER_PAGE_LINE_HISTORY TO eqa_user
go
GRANT UPDATE ON dbo.EX_MARKER_PAGE_LINE_HISTORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EX_MARKER_PAGE_LINE_HISTORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EX_MARKER_PAGE_LINE_HISTORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EX_MARKER_PAGE_LINE_HISTORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EX_MARKER_PAGE_LINE_HISTORY TO eqa_user
go
CREATE TABLE dbo.EX_MARKER_PAGE_RUN_STATUS
(
    ex_marker_page_run_status_id OBJECT_ID    NOT NULL,
    audit_tran_id                OBJECT_ID    NOT NULL,
    ts                           timestamp    NOT NULL,
    academic_year                char(4)      NOT NULL,
    run_status                   code_2       NOT NULL,
    schedule_type                char(2)      NOT NULL,
    status_message               varchar(255) NULL,
    CONSTRAINT PK_EX_MARKER_PAGE_RUN_STATUS
    PRIMARY KEY NONCLUSTERED (ex_marker_page_run_status_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.EX_MARKER_PAGE_RUN_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EX_MARKER_PAGE_RUN_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EX_MARKER_PAGE_RUN_STATUS >>>'
go
ALTER TABLE dbo.EX_MARKER_PAGE_RUN_STATUS
    ADD CONSTRAINT FK_EX_MARKER_PGE_RUN_STA_SCHED
    FOREIGN KEY (schedule_type)
    REFERENCES dbo.SCHEDULE_TYPE (schedule_type)
go
GRANT REFERENCES ON dbo.EX_MARKER_PAGE_RUN_STATUS TO eqa_user
go
GRANT SELECT ON dbo.EX_MARKER_PAGE_RUN_STATUS TO eqa_user
go
GRANT SELECT ON dbo.EX_MARKER_PAGE_RUN_STATUS TO read_only
go
GRANT SELECT ON dbo.EX_MARKER_PAGE_RUN_STATUS TO rma_users
go
GRANT INSERT ON dbo.EX_MARKER_PAGE_RUN_STATUS TO eqa_user
go
GRANT DELETE ON dbo.EX_MARKER_PAGE_RUN_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.EX_MARKER_PAGE_RUN_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EX_MARKER_PAGE_RUN_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EX_MARKER_PAGE_RUN_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EX_MARKER_PAGE_RUN_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EX_MARKER_PAGE_RUN_STATUS TO eqa_user
go
CREATE TABLE dbo.EX_MRKR_BATCH_INPUT
(
    ex_mrkr_batch_input_id  OBJECT_ID    NOT NULL,
    batch_input_status_code code_2       NOT NULL,
    source_file_name        long_name    NOT NULL,
    creation_date_time      dt           NOT NULL,
    academic_year           char(4)      NOT NULL,
    total_stds_count        numeric(8,0) NOT NULL,
    total_markers_count     numeric(8,0) NOT NULL,
    total_page_count        numeric(8,0) NOT NULL,
    total_line_count        numeric(8,0) NOT NULL,
    CONSTRAINT PK_EX_MRKR_BATCH_INPUT
    PRIMARY KEY CLUSTERED (ex_mrkr_batch_input_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.EX_MRKR_BATCH_INPUT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EX_MRKR_BATCH_INPUT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EX_MRKR_BATCH_INPUT >>>'
go
ALTER TABLE dbo.EX_MRKR_BATCH_INPUT
    ADD CONSTRAINT FK_EX_MRKR_PG_BATCH_IN_STATUS
    FOREIGN KEY (batch_input_status_code)
    REFERENCES dbo.PAGE_INPUT_STATUS (page_input_status_code)
go
GRANT REFERENCES ON dbo.EX_MRKR_BATCH_INPUT TO eqa_user
go
GRANT SELECT ON dbo.EX_MRKR_BATCH_INPUT TO eqa_user
go
GRANT SELECT ON dbo.EX_MRKR_BATCH_INPUT TO read_only
go
GRANT SELECT ON dbo.EX_MRKR_BATCH_INPUT TO rma_users
go
GRANT INSERT ON dbo.EX_MRKR_BATCH_INPUT TO eqa_user
go
GRANT DELETE ON dbo.EX_MRKR_BATCH_INPUT TO eqa_user
go
GRANT UPDATE ON dbo.EX_MRKR_BATCH_INPUT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EX_MRKR_BATCH_INPUT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EX_MRKR_BATCH_INPUT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EX_MRKR_BATCH_INPUT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EX_MRKR_BATCH_INPUT TO eqa_user
go
CREATE TABLE dbo.EX_MRKR_PAGE_INPUT
(
    ex_mrkr_page_input_id      numeric(12,0) NOT NULL,
    ex_mrkr_batch_input_id     OBJECT_ID     NOT NULL,
    marker_code                int           NOT NULL,
    marker_page                numeric(12,0) NOT NULL,
    std_number                 varchar(8)    NOT NULL,
    std_version_number         numeric(8,0)  NULL,
    update_status              code_2        NULL,
    ex_marker_page_id          OBJECT_ID     NULL,
    marker_id                  OBJECT_ID     NULL,
    assessment_session_comp_id OBJECT_ID     NULL,
    CONSTRAINT PK_EX_MRKR_PAGE_INPUT
    PRIMARY KEY CLUSTERED (ex_mrkr_page_input_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.EX_MRKR_PAGE_INPUT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EX_MRKR_PAGE_INPUT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EX_MRKR_PAGE_INPUT >>>'
go
ALTER TABLE dbo.EX_MRKR_PAGE_INPUT
    ADD CONSTRAINT FK_EX_MRKR_PG_INP_BATCH_INP
    FOREIGN KEY (ex_mrkr_batch_input_id)
    REFERENCES dbo.EX_MRKR_BATCH_INPUT (ex_mrkr_batch_input_id)
go
GRANT REFERENCES ON dbo.EX_MRKR_PAGE_INPUT TO eqa_user
go
GRANT SELECT ON dbo.EX_MRKR_PAGE_INPUT TO eqa_user
go
GRANT SELECT ON dbo.EX_MRKR_PAGE_INPUT TO read_only
go
GRANT SELECT ON dbo.EX_MRKR_PAGE_INPUT TO rma_users
go
GRANT INSERT ON dbo.EX_MRKR_PAGE_INPUT TO eqa_user
go
GRANT DELETE ON dbo.EX_MRKR_PAGE_INPUT TO eqa_user
go
GRANT UPDATE ON dbo.EX_MRKR_PAGE_INPUT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EX_MRKR_PAGE_INPUT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EX_MRKR_PAGE_INPUT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EX_MRKR_PAGE_INPUT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EX_MRKR_PAGE_INPUT TO eqa_user
go
CREATE TABLE dbo.EX_MRKR_PAGE_LINE_INPUT
(
    ex_mrkr_page_line_input_id  numeric(12,0) NOT NULL,
    ex_mrkr_page_input_id       numeric(12,0) NOT NULL,
    line_number                 numeric(4,0)  NOT NULL,
    exam_centre_id              numeric(12,0) NOT NULL,
    exam_code                   char(4)       NOT NULL,
    page_line_input_status_code code_2        NOT NULL,
    update_status               code_2        NULL,
    nsn                         numeric(12,0) NOT NULL,
    entry_id                    OBJECT_ID     NULL,
    learner_id                  OBJECT_ID     NULL,
    enrolment_id                OBJECT_ID     NULL,
    ex_marker_page_line_id      OBJECT_ID     NULL,
    comments                    varchar(255)  NULL,
    CONSTRAINT PK_EX_MRKR_PAGE_LINE_INPUT
    PRIMARY KEY CLUSTERED (ex_mrkr_page_line_input_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.EX_MRKR_PAGE_LINE_INPUT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.EX_MRKR_PAGE_LINE_INPUT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.EX_MRKR_PAGE_LINE_INPUT >>>'
go
ALTER TABLE dbo.EX_MRKR_PAGE_LINE_INPUT
    ADD CONSTRAINT FK_EX_MRKR_PG_LN_EX_MRKR_PG_IN
    FOREIGN KEY (ex_mrkr_page_input_id)
    REFERENCES dbo.EX_MRKR_PAGE_INPUT (ex_mrkr_page_input_id)
go
ALTER TABLE dbo.EX_MRKR_PAGE_LINE_INPUT
    ADD CONSTRAINT FK_EX_MRKR_PG_LN_INPUT_STATUS
    FOREIGN KEY (page_line_input_status_code)
    REFERENCES dbo.PAGE_INPUT_STATUS (page_input_status_code)
go
GRANT REFERENCES ON dbo.EX_MRKR_PAGE_LINE_INPUT TO eqa_user
go
GRANT SELECT ON dbo.EX_MRKR_PAGE_LINE_INPUT TO eqa_user
go
GRANT SELECT ON dbo.EX_MRKR_PAGE_LINE_INPUT TO read_only
go
GRANT SELECT ON dbo.EX_MRKR_PAGE_LINE_INPUT TO rma_users
go
GRANT INSERT ON dbo.EX_MRKR_PAGE_LINE_INPUT TO eqa_user
go
GRANT DELETE ON dbo.EX_MRKR_PAGE_LINE_INPUT TO eqa_user
go
GRANT UPDATE ON dbo.EX_MRKR_PAGE_LINE_INPUT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.EX_MRKR_PAGE_LINE_INPUT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.EX_MRKR_PAGE_LINE_INPUT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.EX_MRKR_PAGE_LINE_INPUT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.EX_MRKR_PAGE_LINE_INPUT TO eqa_user
go
CREATE TABLE dbo.FEE_STRUCTURE
(
    fee_structure_id      numeric(12,0) NOT NULL,
    start_year            char(4)       NOT NULL,
    end_year              char(4)       NULL,
    fee_type_code         char(2)       NOT NULL,
    min_criteria          numeric(12,0) NULL,
    max_criteria          numeric(12,0) NULL,
    amount                money         NOT NULL,
    pacific_island_amount money         DEFAULT 0 NOT NULL,
    ts                    timestamp     NULL,
    CONSTRAINT PK_FEE_STRUCTURE
    PRIMARY KEY CLUSTERED (fee_structure_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.FEE_STRUCTURE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.FEE_STRUCTURE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.FEE_STRUCTURE >>>'
go
GRANT REFERENCES ON dbo.FEE_STRUCTURE TO eqa_user
go
GRANT SELECT ON dbo.FEE_STRUCTURE TO eqa_user
go
GRANT SELECT ON dbo.FEE_STRUCTURE TO read_only
go
GRANT SELECT ON dbo.FEE_STRUCTURE TO rma_users
go
GRANT INSERT ON dbo.FEE_STRUCTURE TO eqa_user
go
GRANT DELETE ON dbo.FEE_STRUCTURE TO eqa_user
go
GRANT UPDATE ON dbo.FEE_STRUCTURE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.FEE_STRUCTURE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.FEE_STRUCTURE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.FEE_STRUCTURE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.FEE_STRUCTURE TO eqa_user
go
CREATE TABLE dbo.FEE_TYPE
(
    fee_type_code      char(2)      NOT NULL,
    fee_type_code_desc varchar(255) NOT NULL,
    ts                 timestamp    NULL,
    CONSTRAINT PK_FEE_TYPE
    PRIMARY KEY CLUSTERED (fee_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.FEE_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.FEE_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.FEE_TYPE >>>'
go
ALTER TABLE dbo.ENROLMENT_FEE
    ADD CONSTRAINT FK_ENROLMENT_FEE_TYPE
    FOREIGN KEY (fee_type_code)
    REFERENCES dbo.FEE_TYPE (fee_type_code)
go
ALTER TABLE dbo.FEE_STRUCTURE
    ADD CONSTRAINT FK_FEE_STRUCTURE_FEE_TYPE
    FOREIGN KEY (fee_type_code)
    REFERENCES dbo.FEE_TYPE (fee_type_code)
go
GRANT REFERENCES ON dbo.FEE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.FEE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.FEE_TYPE TO read_only
go
GRANT SELECT ON dbo.FEE_TYPE TO rma_users
go
GRANT INSERT ON dbo.FEE_TYPE TO eqa_user
go
GRANT DELETE ON dbo.FEE_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.FEE_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.FEE_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.FEE_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.FEE_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.FEE_TYPE TO eqa_user
go
CREATE TABLE dbo.FILE_LOCATION
(
    file_location_id OBJECT_ID NOT NULL,
    diary_event_id   OBJECT_ID NOT NULL,
    audit_tran_id    OBJECT_ID NULL,
    ts               timestamp NOT NULL,
    file_path        descr     NULL,
    file_name        descr     NULL,
    CONSTRAINT PK_FILE_LOCATION
    PRIMARY KEY CLUSTERED (file_location_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.FILE_LOCATION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.FILE_LOCATION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.FILE_LOCATION >>>'
go
ALTER TABLE dbo.FILE_LOCATION
    ADD CONSTRAINT FK_FILE_LOC_FK_FILE_L_DIARY_EV
    FOREIGN KEY (diary_event_id)
    REFERENCES dbo.DIARY_EVENT (diary_event_id)
go
GRANT REFERENCES ON dbo.FILE_LOCATION TO eqa_user
go
GRANT SELECT ON dbo.FILE_LOCATION TO eqa_user
go
GRANT SELECT ON dbo.FILE_LOCATION TO read_only
go
GRANT SELECT ON dbo.FILE_LOCATION TO rma_users
go
GRANT INSERT ON dbo.FILE_LOCATION TO eqa_user
go
GRANT DELETE ON dbo.FILE_LOCATION TO eqa_user
go
GRANT UPDATE ON dbo.FILE_LOCATION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.FILE_LOCATION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.FILE_LOCATION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.FILE_LOCATION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.FILE_LOCATION TO eqa_user
go
CREATE TABLE dbo.FINANCE_TRANSACTION
(
    transaction_id          OBJECT_ID    NOT NULL,
    transaction_number      varchar(12)  NOT NULL,
    on_behalf               varchar(100) NULL,
    addr_1                  addr_line    NULL,
    addr_2                  addr_line    NULL,
    addr_3                  addr_line    NULL,
    payee_name              varchar(30)  NULL,
    payment_date            datetime     NOT NULL,
    loaded_date             datetime     NOT NULL,
    audit_tran_id           OBJECT_ID    NOT NULL,
    ts                      timestamp    NOT NULL,
    payment_ref             varchar(22)  NULL,
    provider_id             OBJECT_ID    NULL,
    provider_location       number_2     NULL,
    enrolment_id            OBJECT_ID    NULL,
    fin_transac_type_code   code_2       DEFAULT "03" NOT NULL,
    fin_transac_status_code code_2       DEFAULT "CO" NOT NULL,
    batch_input_id          OBJECT_ID    NULL,
    opm_debtor_code         varchar(12)  NULL,
    direct_debit            ny_ind       NOT NULL,
    comment                 varchar(255) NULL,
    academic_year           char(4)      NULL,
    merge_request_number    OBJECT_ID    NULL,
    override_amount         money        NULL,
    parent_transaction_id   OBJECT_ID    NULL,
    trans_run_id            id           NULL,
    perorg_id               OBJECT_ID    NULL,
    active_ind              yn_ind       NOT NULL,
    CONSTRAINT PK_FINANCE_TRANSACTION
    PRIMARY KEY CLUSTERED (transaction_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.FINANCE_TRANSACTION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.FINANCE_TRANSACTION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.FINANCE_TRANSACTION >>>'
go
ALTER TABLE dbo.FINANCE_TRANSACTION
    ADD CONSTRAINT FK_FINANCE_TRANSACTION_YEAR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.FINANCE_TRANSACTION
    ADD CONSTRAINT FK_FIN_TRANS_BATCH_INPUT
    FOREIGN KEY (batch_input_id)
    REFERENCES dbo.BATCH_INPUT (batch_input_id)
go
ALTER TABLE dbo.FINANCE_TRANSACTION
    ADD CONSTRAINT FK_FINANCE_TRAN_ENROLMENT
    FOREIGN KEY (enrolment_id)
    REFERENCES dbo.LEARNER_ENROLMENT (enrolment_id)
go
ALTER TABLE dbo.FINANCE_TRANSACTION
    ADD CONSTRAINT FK_FIN_TRANS_MERGE_RE
    FOREIGN KEY (merge_request_number)
    REFERENCES dbo.MERGE_REQUEST (merge_request_number)
go
ALTER TABLE dbo.FINANCE_TRANSACTION
    ADD CONSTRAINT FK_FINANCE_TRANS_PROVIDER
    FOREIGN KEY (provider_id,provider_location)
    REFERENCES dbo.PROVIDER (moe_provider_id,location)
go
ALTER TABLE dbo.COST_ALLOCATION
    ADD CONSTRAINT FK_COST_ALLOCATION_FIN_TRANS
    FOREIGN KEY (transaction_id)
    REFERENCES dbo.FINANCE_TRANSACTION (transaction_id)
go
ALTER TABLE dbo.FINANCE_TRANSACTION
    ADD CONSTRAINT FK_PARENT_FINANCE_TRANSACTION
    FOREIGN KEY (parent_transaction_id)
    REFERENCES dbo.FINANCE_TRANSACTION (transaction_id)
go
GRANT REFERENCES ON dbo.FINANCE_TRANSACTION TO eqa_user
go
GRANT SELECT ON dbo.FINANCE_TRANSACTION TO eqa_user
go
GRANT SELECT ON dbo.FINANCE_TRANSACTION TO read_only
go
GRANT SELECT ON dbo.FINANCE_TRANSACTION TO rma_users
go
GRANT INSERT ON dbo.FINANCE_TRANSACTION TO eqa_user
go
GRANT DELETE ON dbo.FINANCE_TRANSACTION TO eqa_user
go
GRANT UPDATE ON dbo.FINANCE_TRANSACTION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.FINANCE_TRANSACTION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.FINANCE_TRANSACTION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.FINANCE_TRANSACTION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.FINANCE_TRANSACTION TO eqa_user
go
CREATE TABLE dbo.FINANCE_TRANSACTION_NSN
(
    finance_transaction_nsn_id OBJECT_ID NOT NULL,
    transaction_id             OBJECT_ID NOT NULL,
    nsn                        nsn       NOT NULL,
    audit_tran_id              OBJECT_ID NOT NULL,
    CONSTRAINT PK_FINANCE_TRANSACTION_NSN
    PRIMARY KEY NONCLUSTERED (finance_transaction_nsn_id)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.FINANCE_TRANSACTION_NSN') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.FINANCE_TRANSACTION_NSN >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.FINANCE_TRANSACTION_NSN >>>'
go
ALTER TABLE dbo.FINANCE_TRANSACTION_NSN
    ADD CONSTRAINT FK_FIN_NSN_FINANCE_TRANSACTION
    FOREIGN KEY (transaction_id)
    REFERENCES dbo.FINANCE_TRANSACTION (transaction_id)
go
GRANT REFERENCES ON dbo.FINANCE_TRANSACTION_NSN TO eqa_user
go
GRANT SELECT ON dbo.FINANCE_TRANSACTION_NSN TO eqa_user
go
GRANT SELECT ON dbo.FINANCE_TRANSACTION_NSN TO read_only
go
GRANT SELECT ON dbo.FINANCE_TRANSACTION_NSN TO rma_users
go
GRANT INSERT ON dbo.FINANCE_TRANSACTION_NSN TO eqa_user
go
GRANT DELETE ON dbo.FINANCE_TRANSACTION_NSN TO eqa_user
go
GRANT UPDATE ON dbo.FINANCE_TRANSACTION_NSN TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.FINANCE_TRANSACTION_NSN TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.FINANCE_TRANSACTION_NSN TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.FINANCE_TRANSACTION_NSN TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.FINANCE_TRANSACTION_NSN TO eqa_user
go
CREATE TABLE dbo.FINANCIAL_DETAIL
(
    financial_detail_id   OBJECT_ID   NOT NULL,
    perorg_id             OBJECT_ID   NOT NULL,
    account_number        varchar(50) NOT NULL,
    financial_detail_type char(2)     NOT NULL,
    active_ind            yn_ind      NOT NULL,
    audit_tran_id         OBJECT_ID   NOT NULL,
    ts                    timestamp   NOT NULL,
    CONSTRAINT PK_FINANCIAL_DETAIL
    PRIMARY KEY CLUSTERED (financial_detail_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.FINANCIAL_DETAIL') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.FINANCIAL_DETAIL >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.FINANCIAL_DETAIL >>>'
go
ALTER TABLE dbo.FINANCIAL_DETAIL
    ADD CONSTRAINT FK_FINANCIAL_DETAIL_PERORG
    FOREIGN KEY (perorg_id)
    REFERENCES dbo.PERORG (perorg_id)
go
GRANT REFERENCES ON dbo.FINANCIAL_DETAIL TO eqa_user
go
GRANT SELECT ON dbo.FINANCIAL_DETAIL TO eqa_user
go
GRANT SELECT ON dbo.FINANCIAL_DETAIL TO read_only
go
GRANT SELECT ON dbo.FINANCIAL_DETAIL TO rma_users
go
GRANT INSERT ON dbo.FINANCIAL_DETAIL TO eqa_user
go
GRANT DELETE ON dbo.FINANCIAL_DETAIL TO eqa_user
go
GRANT UPDATE ON dbo.FINANCIAL_DETAIL TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.FINANCIAL_DETAIL TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.FINANCIAL_DETAIL TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.FINANCIAL_DETAIL TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.FINANCIAL_DETAIL TO eqa_user
go
CREATE TABLE dbo.FINANCIAL_DETAIL_TYPE
(
    financial_detail_type      char(2)      NOT NULL,
    financial_detail_type_desc varchar(100) NOT NULL,
    account_number_mask        varchar(255) NOT NULL,
    CONSTRAINT PK_FINANCIAL_DETAIL_TYPE
    PRIMARY KEY CLUSTERED (financial_detail_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.FINANCIAL_DETAIL_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.FINANCIAL_DETAIL_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.FINANCIAL_DETAIL_TYPE >>>'
go
ALTER TABLE dbo.FINANCIAL_DETAIL
    ADD CONSTRAINT FK_DETAIL_TYPE
    FOREIGN KEY (financial_detail_type)
    REFERENCES dbo.FINANCIAL_DETAIL_TYPE (financial_detail_type)
go
GRANT REFERENCES ON dbo.FINANCIAL_DETAIL_TYPE TO eqa_user
go
GRANT SELECT ON dbo.FINANCIAL_DETAIL_TYPE TO eqa_user
go
GRANT SELECT ON dbo.FINANCIAL_DETAIL_TYPE TO read_only
go
GRANT SELECT ON dbo.FINANCIAL_DETAIL_TYPE TO rma_users
go
GRANT INSERT ON dbo.FINANCIAL_DETAIL_TYPE TO eqa_user
go
GRANT DELETE ON dbo.FINANCIAL_DETAIL_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.FINANCIAL_DETAIL_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.FINANCIAL_DETAIL_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.FINANCIAL_DETAIL_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.FINANCIAL_DETAIL_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.FINANCIAL_DETAIL_TYPE TO eqa_user
go
CREATE TABLE dbo.FIN_ASSIST_APPROVED
(
    fin_assist_approved_code  code_1 NOT NULL,
    fin_assist_approved_descr descr  NULL,
    CONSTRAINT PK_FIN_ASSIST_APPROVED
    PRIMARY KEY CLUSTERED (fin_assist_approved_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.FIN_ASSIST_APPROVED') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.FIN_ASSIST_APPROVED >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.FIN_ASSIST_APPROVED >>>'
go
GRANT REFERENCES ON dbo.FIN_ASSIST_APPROVED TO eqa_user
go
GRANT SELECT ON dbo.FIN_ASSIST_APPROVED TO eqa_user
go
GRANT SELECT ON dbo.FIN_ASSIST_APPROVED TO read_only
go
GRANT SELECT ON dbo.FIN_ASSIST_APPROVED TO rma_users
go
GRANT INSERT ON dbo.FIN_ASSIST_APPROVED TO eqa_user
go
GRANT DELETE ON dbo.FIN_ASSIST_APPROVED TO eqa_user
go
GRANT UPDATE ON dbo.FIN_ASSIST_APPROVED TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.FIN_ASSIST_APPROVED TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.FIN_ASSIST_APPROVED TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.FIN_ASSIST_APPROVED TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.FIN_ASSIST_APPROVED TO eqa_user
go
CREATE TABLE dbo.FIN_ASSIST_TYPE
(
    fin_assist_type_code      code_1 NOT NULL,
    fin_assist_type_code_desc descr  NULL,
    CONSTRAINT PK_FIN_ASSIST_TYPE
    PRIMARY KEY CLUSTERED (fin_assist_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.FIN_ASSIST_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.FIN_ASSIST_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.FIN_ASSIST_TYPE >>>'
go
GRANT REFERENCES ON dbo.FIN_ASSIST_TYPE TO eqa_user
go
GRANT SELECT ON dbo.FIN_ASSIST_TYPE TO eqa_user
go
GRANT SELECT ON dbo.FIN_ASSIST_TYPE TO read_only
go
GRANT SELECT ON dbo.FIN_ASSIST_TYPE TO rma_users
go
GRANT INSERT ON dbo.FIN_ASSIST_TYPE TO eqa_user
go
GRANT DELETE ON dbo.FIN_ASSIST_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.FIN_ASSIST_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.FIN_ASSIST_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.FIN_ASSIST_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.FIN_ASSIST_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.FIN_ASSIST_TYPE TO eqa_user
go
CREATE TABLE dbo.FIN_TRANSACTION_STATUS_CODE
(
    fin_transac_status_code      code_2    NOT NULL,
    fin_transac_status_code_desc descr     NOT NULL,
    ts                           timestamp NOT NULL,
    CONSTRAINT PK_FIN_TRANSACTION_STATUS_CODE
    PRIMARY KEY CLUSTERED (fin_transac_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.FIN_TRANSACTION_STATUS_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.FIN_TRANSACTION_STATUS_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.FIN_TRANSACTION_STATUS_CODE >>>'
go
ALTER TABLE dbo.FINANCE_TRANSACTION
    ADD CONSTRAINT FK_FIN_TRANS_STATUS_CODE
    FOREIGN KEY (fin_transac_status_code)
    REFERENCES dbo.FIN_TRANSACTION_STATUS_CODE (fin_transac_status_code)
go
GRANT REFERENCES ON dbo.FIN_TRANSACTION_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.FIN_TRANSACTION_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.FIN_TRANSACTION_STATUS_CODE TO read_only
go
GRANT SELECT ON dbo.FIN_TRANSACTION_STATUS_CODE TO rma_users
go
GRANT INSERT ON dbo.FIN_TRANSACTION_STATUS_CODE TO eqa_user
go
GRANT DELETE ON dbo.FIN_TRANSACTION_STATUS_CODE TO eqa_user
go
GRANT UPDATE ON dbo.FIN_TRANSACTION_STATUS_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.FIN_TRANSACTION_STATUS_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.FIN_TRANSACTION_STATUS_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.FIN_TRANSACTION_STATUS_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.FIN_TRANSACTION_STATUS_CODE TO eqa_user
go
CREATE TABLE dbo.FIN_TRANSACTION_TYPE_CODE
(
    fin_transac_type_code      code_2    NOT NULL,
    fin_transac_type_code_desc descr     NOT NULL,
    ts                         timestamp NOT NULL,
    CONSTRAINT PK_FIN_TRANSACTION_TYPE_CODE
    PRIMARY KEY CLUSTERED (fin_transac_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.FIN_TRANSACTION_TYPE_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.FIN_TRANSACTION_TYPE_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.FIN_TRANSACTION_TYPE_CODE >>>'
go
ALTER TABLE dbo.FINANCE_TRANSACTION
    ADD CONSTRAINT FK_FIN_TRANS_TYPE_CODE
    FOREIGN KEY (fin_transac_type_code)
    REFERENCES dbo.FIN_TRANSACTION_TYPE_CODE (fin_transac_type_code)
go
GRANT REFERENCES ON dbo.FIN_TRANSACTION_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.FIN_TRANSACTION_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.FIN_TRANSACTION_TYPE_CODE TO read_only
go
GRANT SELECT ON dbo.FIN_TRANSACTION_TYPE_CODE TO rma_users
go
GRANT INSERT ON dbo.FIN_TRANSACTION_TYPE_CODE TO eqa_user
go
GRANT DELETE ON dbo.FIN_TRANSACTION_TYPE_CODE TO eqa_user
go
GRANT UPDATE ON dbo.FIN_TRANSACTION_TYPE_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.FIN_TRANSACTION_TYPE_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.FIN_TRANSACTION_TYPE_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.FIN_TRANSACTION_TYPE_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.FIN_TRANSACTION_TYPE_CODE TO eqa_user
go
CREATE TABLE dbo.FORBIDDEN_LEARNER
(
    learner_id OBJECT_ID NOT NULL,
    marker_id  OBJECT_ID NOT NULL,
    CONSTRAINT PK_FORBIDDEN_LEARNER
    PRIMARY KEY CLUSTERED (learner_id,marker_id)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.FORBIDDEN_LEARNER') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.FORBIDDEN_LEARNER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.FORBIDDEN_LEARNER >>>'
go
ALTER TABLE dbo.FORBIDDEN_LEARNER
    ADD CONSTRAINT FK_FORBIDDEN_LEARNER_LEARNER
    FOREIGN KEY (learner_id)
    REFERENCES dbo.LEARNER (learner_id)
go
ALTER TABLE dbo.FORBIDDEN_LEARNER
    ADD CONSTRAINT FK_FORBIDDEN_LEARNER_MKR
    FOREIGN KEY (marker_id)
    REFERENCES dbo.MARKER (marker_id)
go
GRANT REFERENCES ON dbo.FORBIDDEN_LEARNER TO eqa_user
go
GRANT SELECT ON dbo.FORBIDDEN_LEARNER TO eqa_user
go
GRANT SELECT ON dbo.FORBIDDEN_LEARNER TO read_only
go
GRANT SELECT ON dbo.FORBIDDEN_LEARNER TO rma_users
go
GRANT INSERT ON dbo.FORBIDDEN_LEARNER TO eqa_user
go
GRANT DELETE ON dbo.FORBIDDEN_LEARNER TO eqa_user
go
GRANT UPDATE ON dbo.FORBIDDEN_LEARNER TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.FORBIDDEN_LEARNER TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.FORBIDDEN_LEARNER TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.FORBIDDEN_LEARNER TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.FORBIDDEN_LEARNER TO eqa_user
go
CREATE TABLE dbo.FORBIDDEN_PROVIDER
(
    provider_id OBJECT_ID NOT NULL,
    marker_id   OBJECT_ID NOT NULL,
    CONSTRAINT PK_FORBIDDEN_PROVIDER
    PRIMARY KEY CLUSTERED (provider_id,marker_id)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.FORBIDDEN_PROVIDER') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.FORBIDDEN_PROVIDER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.FORBIDDEN_PROVIDER >>>'
go
ALTER TABLE dbo.FORBIDDEN_PROVIDER
    ADD CONSTRAINT FK_FORBIDDEN_PROVIDER_PROVIDER
    FOREIGN KEY (provider_id)
    REFERENCES dbo.PROVIDER (provider_id)
go
ALTER TABLE dbo.FORBIDDEN_PROVIDER
    ADD CONSTRAINT FK_FORBIDDEN_PROV_MKR
    FOREIGN KEY (marker_id)
    REFERENCES dbo.MARKER (marker_id)
go
GRANT REFERENCES ON dbo.FORBIDDEN_PROVIDER TO eqa_user
go
GRANT SELECT ON dbo.FORBIDDEN_PROVIDER TO eqa_user
go
GRANT SELECT ON dbo.FORBIDDEN_PROVIDER TO read_only
go
GRANT SELECT ON dbo.FORBIDDEN_PROVIDER TO rma_users
go
GRANT INSERT ON dbo.FORBIDDEN_PROVIDER TO eqa_user
go
GRANT DELETE ON dbo.FORBIDDEN_PROVIDER TO eqa_user
go
GRANT UPDATE ON dbo.FORBIDDEN_PROVIDER TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.FORBIDDEN_PROVIDER TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.FORBIDDEN_PROVIDER TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.FORBIDDEN_PROVIDER TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.FORBIDDEN_PROVIDER TO eqa_user
go
CREATE TABLE dbo.GENDER_CODE
(
    gender_code      code_1 NOT NULL,
    gender_code_desc descr  NULL,
    CONSTRAINT PK_GENDER_CODE
    PRIMARY KEY CLUSTERED (gender_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.GENDER_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.GENDER_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.GENDER_CODE >>>'
go
GRANT REFERENCES ON dbo.GENDER_CODE TO eqa_user
go
GRANT SELECT ON dbo.GENDER_CODE TO eqa_user
go
GRANT SELECT ON dbo.GENDER_CODE TO read_only
go
GRANT SELECT ON dbo.GENDER_CODE TO rma_users
go
GRANT INSERT ON dbo.GENDER_CODE TO eqa_user
go
GRANT DELETE ON dbo.GENDER_CODE TO eqa_user
go
GRANT UPDATE ON dbo.GENDER_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.GENDER_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.GENDER_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.GENDER_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.GENDER_CODE TO eqa_user
go
CREATE TABLE dbo.database_backup_date
(
    server_name varchar(30) NOT NULL,
    db_name     varchar(30) NOT NULL,
    backup_date datetime    NOT NULL
)
LOCK ALLPAGES
go
IF OBJECT_ID('dbo.database_backup_date') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.database_backup_date >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.database_backup_date >>>'
go
GRANT REFERENCES ON dbo.database_backup_date TO eqa_user
go
GRANT SELECT ON dbo.database_backup_date TO public
go
GRANT INSERT ON dbo.database_backup_date TO eqa_user
go
GRANT DELETE ON dbo.database_backup_date TO eqa_user
go
GRANT UPDATE ON dbo.database_backup_date TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.database_backup_date TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.database_backup_date TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.database_backup_date TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.database_backup_date TO eqa_user
go
CREATE EXISTING TABLE dbo.dba_pxy_audit_trans_dr
(
    audit_tran_oid numeric(12,0) NOT NULL,
    user_id        varchar(30)   NULL,
    operation      varchar(100)  NOT NULL,
    change_date    datetime      NOT NULL,
    comment        varchar(255)  NULL,
    ts             timestamp     NULL
)
EXTERNAL TABLE AT 'PRODEQADS02.eqa_prod.."audit_transaction"'
go
IF OBJECT_ID('dbo.dba_pxy_audit_trans_dr') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.dba_pxy_audit_trans_dr >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.dba_pxy_audit_trans_dr >>>'
go
GRANT REFERENCES ON dbo.dba_pxy_audit_trans_dr TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_audit_trans_dr TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_audit_trans_dr TO read_only
go
GRANT SELECT ON dbo.dba_pxy_audit_trans_dr TO rma_users
go
GRANT INSERT ON dbo.dba_pxy_audit_trans_dr TO eqa_user
go
GRANT DELETE ON dbo.dba_pxy_audit_trans_dr TO eqa_user
go
GRANT UPDATE ON dbo.dba_pxy_audit_trans_dr TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.dba_pxy_audit_trans_dr TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.dba_pxy_audit_trans_dr TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.dba_pxy_audit_trans_dr TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.dba_pxy_audit_trans_dr TO eqa_user
go
CREATE EXISTING TABLE dbo.dba_pxy_audit_trans_pdrpt2
(
    audit_tran_oid numeric(12,0) NOT NULL,
    user_id        varchar(30)   NULL,
    operation      varchar(100)  NOT NULL,
    change_date    datetime      NOT NULL,
    comment        varchar(255)  NULL,
    ts             timestamp     NULL
)
EXTERNAL TABLE AT 'PRODRPTDS01.eqa.."audit_transaction"'
go
IF OBJECT_ID('dbo.dba_pxy_audit_trans_pdrpt2') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.dba_pxy_audit_trans_pdrpt2 >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.dba_pxy_audit_trans_pdrpt2 >>>'
go
GRANT REFERENCES ON dbo.dba_pxy_audit_trans_pdrpt2 TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_audit_trans_pdrpt2 TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_audit_trans_pdrpt2 TO read_only
go
GRANT SELECT ON dbo.dba_pxy_audit_trans_pdrpt2 TO rma_users
go
GRANT INSERT ON dbo.dba_pxy_audit_trans_pdrpt2 TO eqa_user
go
GRANT DELETE ON dbo.dba_pxy_audit_trans_pdrpt2 TO eqa_user
go
GRANT UPDATE ON dbo.dba_pxy_audit_trans_pdrpt2 TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.dba_pxy_audit_trans_pdrpt2 TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.dba_pxy_audit_trans_pdrpt2 TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.dba_pxy_audit_trans_pdrpt2 TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.dba_pxy_audit_trans_pdrpt2 TO eqa_user
go
CREATE EXISTING TABLE dbo.dba_pxy_audit_trans_pdtec2
(
    audit_tran_oid numeric(12,0) NOT NULL,
    user_id        varchar(30)   NULL,
    operation      varchar(100)  NOT NULL,
    change_date    datetime      NOT NULL,
    comment        varchar(255)  NULL,
    ts             timestamp     NULL
)
EXTERNAL TABLE AT 'PRODGVTDS01.tec_eqa.."AUDIT_TRANSACTION"'
go
IF OBJECT_ID('dbo.dba_pxy_audit_trans_pdtec2') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.dba_pxy_audit_trans_pdtec2 >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.dba_pxy_audit_trans_pdtec2 >>>'
go
GRANT REFERENCES ON dbo.dba_pxy_audit_trans_pdtec2 TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_audit_trans_pdtec2 TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_audit_trans_pdtec2 TO read_only
go
GRANT SELECT ON dbo.dba_pxy_audit_trans_pdtec2 TO rma_users
go
GRANT INSERT ON dbo.dba_pxy_audit_trans_pdtec2 TO eqa_user
go
GRANT DELETE ON dbo.dba_pxy_audit_trans_pdtec2 TO eqa_user
go
GRANT UPDATE ON dbo.dba_pxy_audit_trans_pdtec2 TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.dba_pxy_audit_trans_pdtec2 TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.dba_pxy_audit_trans_pdtec2 TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.dba_pxy_audit_trans_pdtec2 TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.dba_pxy_audit_trans_pdtec2 TO eqa_user
go
CREATE EXISTING TABLE dbo.dba_pxy_audit_trans_web11
(
    audit_tran_oid numeric(12,0) NOT NULL,
    user_id        varchar(30)   NULL,
    operation      varchar(100)  NOT NULL,
    change_date    datetime      NOT NULL,
    comment        varchar(255)  NULL,
    ts             timestamp     NULL
)
EXTERNAL TABLE AT 'PRODWEBDS01.web_eqa.."AUDIT_TRANSACTION"'
go
IF OBJECT_ID('dbo.dba_pxy_audit_trans_web11') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.dba_pxy_audit_trans_web11 >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.dba_pxy_audit_trans_web11 >>>'
go
GRANT REFERENCES ON dbo.dba_pxy_audit_trans_web11 TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_audit_trans_web11 TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_audit_trans_web11 TO read_only
go
GRANT SELECT ON dbo.dba_pxy_audit_trans_web11 TO rma_users
go
GRANT INSERT ON dbo.dba_pxy_audit_trans_web11 TO eqa_user
go
GRANT DELETE ON dbo.dba_pxy_audit_trans_web11 TO eqa_user
go
GRANT UPDATE ON dbo.dba_pxy_audit_trans_web11 TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.dba_pxy_audit_trans_web11 TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.dba_pxy_audit_trans_web11 TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.dba_pxy_audit_trans_web11 TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.dba_pxy_audit_trans_web11 TO eqa_user
go
CREATE EXISTING TABLE dbo.dba_pxy_audit_trans_web12
(
    audit_tran_oid numeric(12,0) NOT NULL,
    user_id        varchar(30)   NULL,
    operation      varchar(100)  NOT NULL,
    change_date    datetime      NOT NULL,
    comment        varchar(255)  NULL,
    ts             timestamp     NULL
)
EXTERNAL TABLE AT 'PRODWEBDS02.web_eqa.."AUDIT_TRANSACTION"'
go
IF OBJECT_ID('dbo.dba_pxy_audit_trans_web12') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.dba_pxy_audit_trans_web12 >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.dba_pxy_audit_trans_web12 >>>'
go
GRANT REFERENCES ON dbo.dba_pxy_audit_trans_web12 TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_audit_trans_web12 TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_audit_trans_web12 TO read_only
go
GRANT SELECT ON dbo.dba_pxy_audit_trans_web12 TO rma_users
go
GRANT INSERT ON dbo.dba_pxy_audit_trans_web12 TO eqa_user
go
GRANT DELETE ON dbo.dba_pxy_audit_trans_web12 TO eqa_user
go
GRANT UPDATE ON dbo.dba_pxy_audit_trans_web12 TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.dba_pxy_audit_trans_web12 TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.dba_pxy_audit_trans_web12 TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.dba_pxy_audit_trans_web12 TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.dba_pxy_audit_trans_web12 TO eqa_user
go
CREATE EXISTING TABLE dbo.dba_pxy_dba_test_rep_dr
(
    rep_id      numeric(8,0) NOT NULL,
    server_name varchar(30)  NOT NULL,
    update_date datetime     NOT NULL
)
EXTERNAL TABLE AT 'PRODEQADS02.eqa_prod.."dba_test_rep"'
go
IF OBJECT_ID('dbo.dba_pxy_dba_test_rep_dr') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.dba_pxy_dba_test_rep_dr >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.dba_pxy_dba_test_rep_dr >>>'
go
GRANT REFERENCES ON dbo.dba_pxy_dba_test_rep_dr TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_dba_test_rep_dr TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_dba_test_rep_dr TO read_only
go
GRANT SELECT ON dbo.dba_pxy_dba_test_rep_dr TO rma_users
go
GRANT INSERT ON dbo.dba_pxy_dba_test_rep_dr TO eqa_user
go
GRANT DELETE ON dbo.dba_pxy_dba_test_rep_dr TO eqa_user
go
GRANT UPDATE ON dbo.dba_pxy_dba_test_rep_dr TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.dba_pxy_dba_test_rep_dr TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.dba_pxy_dba_test_rep_dr TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.dba_pxy_dba_test_rep_dr TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.dba_pxy_dba_test_rep_dr TO eqa_user
go
CREATE EXISTING TABLE dbo.dba_pxy_dba_test_rep_pdrpt2
(
    rep_id      numeric(8,0) NOT NULL,
    server_name varchar(30)  NOT NULL,
    update_date datetime     NOT NULL
)
EXTERNAL TABLE AT 'PRODRPTDS01.eqa.."dba_test_rep"'
go
IF OBJECT_ID('dbo.dba_pxy_dba_test_rep_pdrpt2') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.dba_pxy_dba_test_rep_pdrpt2 >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.dba_pxy_dba_test_rep_pdrpt2 >>>'
go
GRANT REFERENCES ON dbo.dba_pxy_dba_test_rep_pdrpt2 TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_dba_test_rep_pdrpt2 TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_dba_test_rep_pdrpt2 TO read_only
go
GRANT SELECT ON dbo.dba_pxy_dba_test_rep_pdrpt2 TO rma_users
go
GRANT INSERT ON dbo.dba_pxy_dba_test_rep_pdrpt2 TO eqa_user
go
GRANT DELETE ON dbo.dba_pxy_dba_test_rep_pdrpt2 TO eqa_user
go
GRANT UPDATE ON dbo.dba_pxy_dba_test_rep_pdrpt2 TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.dba_pxy_dba_test_rep_pdrpt2 TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.dba_pxy_dba_test_rep_pdrpt2 TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.dba_pxy_dba_test_rep_pdrpt2 TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.dba_pxy_dba_test_rep_pdrpt2 TO eqa_user
go
CREATE EXISTING TABLE dbo.dba_pxy_dba_test_rep_pdtec2
(
    rep_id      numeric(8,0) NOT NULL,
    server_name varchar(30)  NOT NULL,
    update_date datetime     NOT NULL
)
EXTERNAL TABLE AT 'PRODGVTDS01.tec_eqa.."dba_test_rep"'
go
IF OBJECT_ID('dbo.dba_pxy_dba_test_rep_pdtec2') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.dba_pxy_dba_test_rep_pdtec2 >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.dba_pxy_dba_test_rep_pdtec2 >>>'
go
GRANT REFERENCES ON dbo.dba_pxy_dba_test_rep_pdtec2 TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_dba_test_rep_pdtec2 TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_dba_test_rep_pdtec2 TO read_only
go
GRANT SELECT ON dbo.dba_pxy_dba_test_rep_pdtec2 TO rma_users
go
GRANT INSERT ON dbo.dba_pxy_dba_test_rep_pdtec2 TO eqa_user
go
GRANT DELETE ON dbo.dba_pxy_dba_test_rep_pdtec2 TO eqa_user
go
GRANT UPDATE ON dbo.dba_pxy_dba_test_rep_pdtec2 TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.dba_pxy_dba_test_rep_pdtec2 TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.dba_pxy_dba_test_rep_pdtec2 TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.dba_pxy_dba_test_rep_pdtec2 TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.dba_pxy_dba_test_rep_pdtec2 TO eqa_user
go
CREATE EXISTING TABLE dbo.dba_pxy_dba_test_rep_web11
(
    rep_id      numeric(8,0) NOT NULL,
    server_name varchar(30)  NOT NULL,
    update_date datetime     NOT NULL
)
EXTERNAL TABLE AT 'PRODWEBDS01.web_eqa.."dba_test_rep"'
go
IF OBJECT_ID('dbo.dba_pxy_dba_test_rep_web11') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.dba_pxy_dba_test_rep_web11 >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.dba_pxy_dba_test_rep_web11 >>>'
go
GRANT REFERENCES ON dbo.dba_pxy_dba_test_rep_web11 TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_dba_test_rep_web11 TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_dba_test_rep_web11 TO read_only
go
GRANT SELECT ON dbo.dba_pxy_dba_test_rep_web11 TO rma_users
go
GRANT INSERT ON dbo.dba_pxy_dba_test_rep_web11 TO eqa_user
go
GRANT DELETE ON dbo.dba_pxy_dba_test_rep_web11 TO eqa_user
go
GRANT UPDATE ON dbo.dba_pxy_dba_test_rep_web11 TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.dba_pxy_dba_test_rep_web11 TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.dba_pxy_dba_test_rep_web11 TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.dba_pxy_dba_test_rep_web11 TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.dba_pxy_dba_test_rep_web11 TO eqa_user
go
CREATE EXISTING TABLE dbo.dba_pxy_dba_test_rep_web12
(
    rep_id      numeric(8,0) NOT NULL,
    server_name varchar(30)  NOT NULL,
    update_date datetime     NOT NULL
)
EXTERNAL TABLE AT 'PRODWEBDS02.web_eqa.."dba_test_rep"'
go
IF OBJECT_ID('dbo.dba_pxy_dba_test_rep_web12') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.dba_pxy_dba_test_rep_web12 >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.dba_pxy_dba_test_rep_web12 >>>'
go
GRANT REFERENCES ON dbo.dba_pxy_dba_test_rep_web12 TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_dba_test_rep_web12 TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_dba_test_rep_web12 TO read_only
go
GRANT SELECT ON dbo.dba_pxy_dba_test_rep_web12 TO rma_users
go
GRANT INSERT ON dbo.dba_pxy_dba_test_rep_web12 TO eqa_user
go
GRANT DELETE ON dbo.dba_pxy_dba_test_rep_web12 TO eqa_user
go
GRANT UPDATE ON dbo.dba_pxy_dba_test_rep_web12 TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.dba_pxy_dba_test_rep_web12 TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.dba_pxy_dba_test_rep_web12 TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.dba_pxy_dba_test_rep_web12 TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.dba_pxy_dba_test_rep_web12 TO eqa_user
go
CREATE EXISTING TABLE dbo.dba_pxy_dr_sysobjects
(
    name         varchar(255)      NOT NULL,
    id           int               NOT NULL,
    uid          int               NOT NULL,
    type         char(2)           NOT NULL,
    userstat     smallint          NOT NULL,
    sysstat      smallint          NOT NULL,
    indexdel     smallint          NOT NULL,
    schemacnt    smallint          NOT NULL,
    sysstat2     int               NOT NULL,
    crdate       datetime          NOT NULL,
    expdate      datetime          NOT NULL,
    deltrig      int               NOT NULL,
    instrig      int               NOT NULL,
    updtrig      int               NOT NULL,
    seltrig      int               NOT NULL,
    ckfirst      int               NOT NULL,
    cache        smallint          NOT NULL,
    audflags     int               NULL,
    objspare     unsigned smallint NOT NULL,
    versionts    varbinary(12)     NULL,
    loginame     varchar(30)       NULL,
    identburnmax numeric(38,0)     NULL,
    spacestate   smallint          NULL,
    erlchgts     varbinary(8)      NULL,
    sysstat3     unsigned smallint NOT NULL,
    lobcomp_lvl  tinyint           NULL
)
EXTERNAL TABLE AT 'PRODEQADS02.eqa_prod.."sysobjects"'
go
IF OBJECT_ID('dbo.dba_pxy_dr_sysobjects') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.dba_pxy_dr_sysobjects >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.dba_pxy_dr_sysobjects >>>'
go
GRANT REFERENCES ON dbo.dba_pxy_dr_sysobjects TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_dr_sysobjects TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_dr_sysobjects TO read_only
go
GRANT SELECT ON dbo.dba_pxy_dr_sysobjects TO rma_users
go
GRANT INSERT ON dbo.dba_pxy_dr_sysobjects TO eqa_user
go
GRANT DELETE ON dbo.dba_pxy_dr_sysobjects TO eqa_user
go
GRANT UPDATE ON dbo.dba_pxy_dr_sysobjects TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.dba_pxy_dr_sysobjects TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.dba_pxy_dr_sysobjects TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.dba_pxy_dr_sysobjects TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.dba_pxy_dr_sysobjects TO eqa_user
go
CREATE EXISTING TABLE dbo.dba_pxy_next_id_dr
(
    id_type varchar(100)  NOT NULL,
    next_id numeric(12,0) NOT NULL
)
EXTERNAL TABLE AT 'PRODEQADS02.eqa_prod.."next_id"'
go
IF OBJECT_ID('dbo.dba_pxy_next_id_dr') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.dba_pxy_next_id_dr >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.dba_pxy_next_id_dr >>>'
go
GRANT REFERENCES ON dbo.dba_pxy_next_id_dr TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_next_id_dr TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_next_id_dr TO read_only
go
GRANT SELECT ON dbo.dba_pxy_next_id_dr TO rma_users
go
GRANT INSERT ON dbo.dba_pxy_next_id_dr TO eqa_user
go
GRANT DELETE ON dbo.dba_pxy_next_id_dr TO eqa_user
go
GRANT UPDATE ON dbo.dba_pxy_next_id_dr TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.dba_pxy_next_id_dr TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.dba_pxy_next_id_dr TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.dba_pxy_next_id_dr TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.dba_pxy_next_id_dr TO eqa_user
go
CREATE EXISTING TABLE dbo.dba_pxy_next_id_pdrpt2
(
    id_type varchar(100)  NOT NULL,
    next_id numeric(12,0) NOT NULL
)
EXTERNAL TABLE AT 'PRODRPTDS01.eqa.."next_id"'
go
IF OBJECT_ID('dbo.dba_pxy_next_id_pdrpt2') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.dba_pxy_next_id_pdrpt2 >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.dba_pxy_next_id_pdrpt2 >>>'
go
GRANT REFERENCES ON dbo.dba_pxy_next_id_pdrpt2 TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_next_id_pdrpt2 TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_next_id_pdrpt2 TO read_only
go
GRANT SELECT ON dbo.dba_pxy_next_id_pdrpt2 TO rma_users
go
GRANT INSERT ON dbo.dba_pxy_next_id_pdrpt2 TO eqa_user
go
GRANT DELETE ON dbo.dba_pxy_next_id_pdrpt2 TO eqa_user
go
GRANT UPDATE ON dbo.dba_pxy_next_id_pdrpt2 TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.dba_pxy_next_id_pdrpt2 TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.dba_pxy_next_id_pdrpt2 TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.dba_pxy_next_id_pdrpt2 TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.dba_pxy_next_id_pdrpt2 TO eqa_user
go
CREATE EXISTING TABLE dbo.dba_pxy_next_id_web11
(
    id_type varchar(100)  NOT NULL,
    next_id numeric(12,0) NOT NULL
)
EXTERNAL TABLE AT 'PRODWEBDS01.web_eqa.."next_id"'
go
IF OBJECT_ID('dbo.dba_pxy_next_id_web11') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.dba_pxy_next_id_web11 >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.dba_pxy_next_id_web11 >>>'
go
GRANT REFERENCES ON dbo.dba_pxy_next_id_web11 TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_next_id_web11 TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_next_id_web11 TO read_only
go
GRANT SELECT ON dbo.dba_pxy_next_id_web11 TO rma_users
go
GRANT INSERT ON dbo.dba_pxy_next_id_web11 TO eqa_user
go
GRANT DELETE ON dbo.dba_pxy_next_id_web11 TO eqa_user
go
GRANT UPDATE ON dbo.dba_pxy_next_id_web11 TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.dba_pxy_next_id_web11 TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.dba_pxy_next_id_web11 TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.dba_pxy_next_id_web11 TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.dba_pxy_next_id_web11 TO eqa_user
go
CREATE EXISTING TABLE dbo.dba_pxy_next_id_web12
(
    id_type varchar(100)  NOT NULL,
    next_id numeric(12,0) NOT NULL
)
EXTERNAL TABLE AT 'PRODWEBDS02.web_eqa.."next_id"'
go
IF OBJECT_ID('dbo.dba_pxy_next_id_web12') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.dba_pxy_next_id_web12 >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.dba_pxy_next_id_web12 >>>'
go
GRANT REFERENCES ON dbo.dba_pxy_next_id_web12 TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_next_id_web12 TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_next_id_web12 TO read_only
go
GRANT SELECT ON dbo.dba_pxy_next_id_web12 TO rma_users
go
GRANT INSERT ON dbo.dba_pxy_next_id_web12 TO eqa_user
go
GRANT DELETE ON dbo.dba_pxy_next_id_web12 TO eqa_user
go
GRANT UPDATE ON dbo.dba_pxy_next_id_web12 TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.dba_pxy_next_id_web12 TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.dba_pxy_next_id_web12 TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.dba_pxy_next_id_web12 TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.dba_pxy_next_id_web12 TO eqa_user
go
CREATE EXISTING TABLE dbo.dba_pxy_sqr_event_dr
(
    se_id          numeric(12,0) IDENTITY,
    table_name     varchar(255)  NULL,
    system_key     numeric(12,0) NULL,
    natural_key_1  varchar(20)   NULL,
    natural_key_2  numeric(12,0) NULL,
    change_type    char(1)       NULL,
    created_date   datetime      NULL,
    completed_date datetime      NULL,
    event_table    varchar(255)  NULL,
    event_table_id numeric(12,0) NULL
)
EXTERNAL TABLE AT 'PRODEQADS02.eqa_prod.."SQR_EVENT"'
go
IF OBJECT_ID('dbo.dba_pxy_sqr_event_dr') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.dba_pxy_sqr_event_dr >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.dba_pxy_sqr_event_dr >>>'
go
GRANT REFERENCES ON dbo.dba_pxy_sqr_event_dr TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_sqr_event_dr TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_sqr_event_dr TO read_only
go
GRANT SELECT ON dbo.dba_pxy_sqr_event_dr TO rma_users
go
GRANT INSERT ON dbo.dba_pxy_sqr_event_dr TO eqa_user
go
GRANT DELETE ON dbo.dba_pxy_sqr_event_dr TO eqa_user
go
GRANT UPDATE ON dbo.dba_pxy_sqr_event_dr TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.dba_pxy_sqr_event_dr TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.dba_pxy_sqr_event_dr TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.dba_pxy_sqr_event_dr TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.dba_pxy_sqr_event_dr TO eqa_user
go
CREATE EXISTING TABLE dbo.dba_pxy_sqr_event_web1
(
    se_id          numeric(12,0) IDENTITY,
    table_name     varchar(255)  NULL,
    system_key     numeric(12,0) NULL,
    natural_key_1  varchar(20)   NULL,
    natural_key_2  numeric(12,0) NULL,
    change_type    char(1)       NULL,
    created_date   datetime      NULL,
    completed_date datetime      NULL,
    event_table    varchar(255)  NULL,
    event_table_id numeric(12,0) NULL
)
EXTERNAL TABLE AT 'PRODWEBDS01.web_eqa.."sqr_event"'
go
IF OBJECT_ID('dbo.dba_pxy_sqr_event_web1') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.dba_pxy_sqr_event_web1 >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.dba_pxy_sqr_event_web1 >>>'
go
GRANT REFERENCES ON dbo.dba_pxy_sqr_event_web1 TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_sqr_event_web1 TO eqa_user
go
GRANT SELECT ON dbo.dba_pxy_sqr_event_web1 TO read_only
go
GRANT SELECT ON dbo.dba_pxy_sqr_event_web1 TO rma_users
go
GRANT INSERT ON dbo.dba_pxy_sqr_event_web1 TO eqa_user
go
GRANT DELETE ON dbo.dba_pxy_sqr_event_web1 TO eqa_user
go
GRANT UPDATE ON dbo.dba_pxy_sqr_event_web1 TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.dba_pxy_sqr_event_web1 TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.dba_pxy_sqr_event_web1 TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.dba_pxy_sqr_event_web1 TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.dba_pxy_sqr_event_web1 TO eqa_user
go
CREATE TABLE dbo.dba_test_rep
(
    rep_id      numeric(8,0) NOT NULL,
    server_name varchar(30)  NOT NULL,
    update_date datetime     NOT NULL,
    CONSTRAINT pk_dba_test_rep
    PRIMARY KEY NONCLUSTERED (rep_id)
)
LOCK ALLPAGES
go
IF OBJECT_ID('dbo.dba_test_rep') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.dba_test_rep >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.dba_test_rep >>>'
go
GRANT REFERENCES ON dbo.dba_test_rep TO eqa_user
go
GRANT SELECT ON dbo.dba_test_rep TO eqa_user
go
GRANT SELECT ON dbo.dba_test_rep TO read_only
go
GRANT SELECT ON dbo.dba_test_rep TO rma_users
go
GRANT INSERT ON dbo.dba_test_rep TO eqa_user
go
GRANT DELETE ON dbo.dba_test_rep TO eqa_user
go
GRANT UPDATE ON dbo.dba_test_rep TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.dba_test_rep TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.dba_test_rep TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.dba_test_rep TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.dba_test_rep TO eqa_user
go
CREATE TABLE dbo.GLBL_GROWTH_ALW_PRM
(
    glbl_growth_alw_prm_id OBJECT_ID    NOT NULL,
    academic_year          char(4)      NOT NULL,
    growth_pct             numeric(5,2) NOT NULL,
    positive_growth_ind    yn_ind       NOT NULL,
    created_date           dt           NOT NULL,
    audit_tran_id          OBJECT_ID    NOT NULL,
    CONSTRAINT PK_GLBL_GROWTH_ALW_PRM
    PRIMARY KEY NONCLUSTERED (glbl_growth_alw_prm_id)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.GLBL_GROWTH_ALW_PRM') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.GLBL_GROWTH_ALW_PRM >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.GLBL_GROWTH_ALW_PRM >>>'
go
ALTER TABLE dbo.GLBL_GROWTH_ALW_PRM
    ADD CONSTRAINT FK_GLBL_GWT_PRM_ACADEMIC_YR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
GRANT REFERENCES ON dbo.GLBL_GROWTH_ALW_PRM TO eqa_user
go
GRANT SELECT ON dbo.GLBL_GROWTH_ALW_PRM TO eqa_user
go
GRANT SELECT ON dbo.GLBL_GROWTH_ALW_PRM TO read_only
go
GRANT SELECT ON dbo.GLBL_GROWTH_ALW_PRM TO rma_users
go
GRANT INSERT ON dbo.GLBL_GROWTH_ALW_PRM TO eqa_user
go
GRANT DELETE ON dbo.GLBL_GROWTH_ALW_PRM TO eqa_user
go
GRANT UPDATE ON dbo.GLBL_GROWTH_ALW_PRM TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.GLBL_GROWTH_ALW_PRM TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.GLBL_GROWTH_ALW_PRM TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.GLBL_GROWTH_ALW_PRM TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.GLBL_GROWTH_ALW_PRM TO eqa_user
go
CREATE TABLE dbo.GLOBAL_BUFFER_PRM
(
    global_buffer_prm_id  OBJECT_ID NOT NULL,
    academic_year         char(4)   NOT NULL,
    assess_sess_catg_code code_4    NOT NULL,
    buffer_min            int       NOT NULL,
    buffer_max            int       NOT NULL,
    buffer_entries_pct    int       NOT NULL,
    created_date          dt        NOT NULL,
    audit_tran_id         OBJECT_ID NOT NULL,
    CONSTRAINT PK_GLOBAL_BUFFER_PRM
    PRIMARY KEY NONCLUSTERED (global_buffer_prm_id)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.GLOBAL_BUFFER_PRM') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.GLOBAL_BUFFER_PRM >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.GLOBAL_BUFFER_PRM >>>'
go
ALTER TABLE dbo.GLOBAL_BUFFER_PRM
    ADD CONSTRAINT FK_GLBL_BFR_PRM_ACADEMIC_YR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.GLOBAL_BUFFER_PRM
    ADD CONSTRAINT FK_GLBL_BFR_PRM_ASSESS_SESS_CG
    FOREIGN KEY (assess_sess_catg_code)
    REFERENCES dbo.ASSESS_SESS_CATG (assess_sess_catg_code)
go
GRANT REFERENCES ON dbo.GLOBAL_BUFFER_PRM TO eqa_user
go
GRANT SELECT ON dbo.GLOBAL_BUFFER_PRM TO eqa_user
go
GRANT SELECT ON dbo.GLOBAL_BUFFER_PRM TO read_only
go
GRANT SELECT ON dbo.GLOBAL_BUFFER_PRM TO rma_users
go
GRANT INSERT ON dbo.GLOBAL_BUFFER_PRM TO eqa_user
go
GRANT DELETE ON dbo.GLOBAL_BUFFER_PRM TO eqa_user
go
GRANT UPDATE ON dbo.GLOBAL_BUFFER_PRM TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.GLOBAL_BUFFER_PRM TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.GLOBAL_BUFFER_PRM TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.GLOBAL_BUFFER_PRM TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.GLOBAL_BUFFER_PRM TO eqa_user
go
CREATE TABLE dbo.GLOBAL_NON_BUFFER_PRM
(
    global_non_buffer_prm_id OBJECT_ID   NOT NULL,
    academic_year            char(4)     NOT NULL,
    exam_material_type       varchar(10) NOT NULL,
    rate_num                 smallint    NOT NULL,
    rate_den                 smallint    NOT NULL,
    created_date             dt          NOT NULL,
    audit_tran_id            OBJECT_ID   NOT NULL,
    CONSTRAINT PK_GLOBAL_NON_BUFFER_PRM
    PRIMARY KEY NONCLUSTERED (global_non_buffer_prm_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.GLOBAL_NON_BUFFER_PRM') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.GLOBAL_NON_BUFFER_PRM >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.GLOBAL_NON_BUFFER_PRM >>>'
go
ALTER TABLE dbo.GLOBAL_NON_BUFFER_PRM
    ADD CONSTRAINT FK_GLBL_NBFR_PRM_ACADEMIC_YR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.GLOBAL_NON_BUFFER_PRM
    ADD CONSTRAINT FK_GLBL_NBFR_PRM_EXAM_MTL_TYPE
    FOREIGN KEY (exam_material_type)
    REFERENCES dbo.EXAM_MATERIAL_TYPE (exam_material_type)
go
GRANT REFERENCES ON dbo.GLOBAL_NON_BUFFER_PRM TO eqa_user
go
GRANT SELECT ON dbo.GLOBAL_NON_BUFFER_PRM TO eqa_user
go
GRANT SELECT ON dbo.GLOBAL_NON_BUFFER_PRM TO read_only
go
GRANT SELECT ON dbo.GLOBAL_NON_BUFFER_PRM TO rma_users
go
GRANT INSERT ON dbo.GLOBAL_NON_BUFFER_PRM TO eqa_user
go
GRANT DELETE ON dbo.GLOBAL_NON_BUFFER_PRM TO eqa_user
go
GRANT UPDATE ON dbo.GLOBAL_NON_BUFFER_PRM TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.GLOBAL_NON_BUFFER_PRM TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.GLOBAL_NON_BUFFER_PRM TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.GLOBAL_NON_BUFFER_PRM TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.GLOBAL_NON_BUFFER_PRM TO eqa_user
go
CREATE TABLE dbo.HOLD_STATE_CODE
(
    hold_state_code      char(1)      NOT NULL,
    hold_state_code_desc varchar(255) NOT NULL,
    ts                   varbinary(8) NULL,
    CONSTRAINT PK_HOLD_STATE_CODE
    PRIMARY KEY CLUSTERED (hold_state_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.HOLD_STATE_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.HOLD_STATE_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.HOLD_STATE_CODE >>>'
go
GRANT REFERENCES ON dbo.HOLD_STATE_CODE TO eqa_user
go
GRANT SELECT ON dbo.HOLD_STATE_CODE TO eqa_user
go
GRANT SELECT ON dbo.HOLD_STATE_CODE TO read_only
go
GRANT SELECT ON dbo.HOLD_STATE_CODE TO rma_users
go
GRANT INSERT ON dbo.HOLD_STATE_CODE TO eqa_user
go
GRANT DELETE ON dbo.HOLD_STATE_CODE TO eqa_user
go
GRANT UPDATE ON dbo.HOLD_STATE_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.HOLD_STATE_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.HOLD_STATE_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.HOLD_STATE_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.HOLD_STATE_CODE TO eqa_user
go
CREATE TABLE dbo.HOOKFEE_OVERRIDE_TYPE
(
    hookfee_override_type code_1 NOT NULL,
    hookfee_override_desc descr  NOT NULL,
    CONSTRAINT PK_HOOKFEE_OVERRIDE_TYPE
    PRIMARY KEY CLUSTERED (hookfee_override_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.HOOKFEE_OVERRIDE_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.HOOKFEE_OVERRIDE_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.HOOKFEE_OVERRIDE_TYPE >>>'
go
GRANT REFERENCES ON dbo.HOOKFEE_OVERRIDE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.HOOKFEE_OVERRIDE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.HOOKFEE_OVERRIDE_TYPE TO read_only
go
GRANT SELECT ON dbo.HOOKFEE_OVERRIDE_TYPE TO rma_users
go
GRANT INSERT ON dbo.HOOKFEE_OVERRIDE_TYPE TO eqa_user
go
GRANT DELETE ON dbo.HOOKFEE_OVERRIDE_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.HOOKFEE_OVERRIDE_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.HOOKFEE_OVERRIDE_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.HOOKFEE_OVERRIDE_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.HOOKFEE_OVERRIDE_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.HOOKFEE_OVERRIDE_TYPE TO eqa_user
go
CREATE TABLE dbo.INPUT_BATCH_ERROR
(
    input_batch_error_id      OBJECT_ID     NOT NULL,
    batch_ref                 OBJECT_ID     NOT NULL,
    batch_input_id            OBJECT_ID     NULL,
    learner_input_id          OBJECT_ID     NULL,
    standard_input_id         OBJECT_ID     NULL,
    batch_error_code          OBJECT_ID     NOT NULL,
    value_0                   varchar(255)  NULL,
    value_1                   varchar(255)  NULL,
    ts                        timestamp     NULL,
    value_2                   varchar(255)  NULL,
    version_id                numeric(12,0) DEFAULT 0 NOT NULL,
    mark_input_id             OBJECT_ID     NULL,
    severity_code             numeric(12,0) DEFAULT 0 NOT NULL,
    secondary_course_input_id OBJECT_ID     NULL,
    CONSTRAINT PK_INPUT_BATCH_ERROR
    PRIMARY KEY NONCLUSTERED (input_batch_error_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.INPUT_BATCH_ERROR') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.INPUT_BATCH_ERROR >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.INPUT_BATCH_ERROR >>>'
go
ALTER TABLE dbo.INPUT_BATCH_ERROR
    ADD CONSTRAINT FK_INPUT_BATCH_ERROR_BATCH_REF
    FOREIGN KEY (batch_ref)
    REFERENCES dbo.BATCH_INPUT (batch_input_id)
go
ALTER TABLE dbo.INPUT_BATCH_ERROR
    ADD CONSTRAINT FK_INPUT_BATCH_ERROR_SEVERITY
    FOREIGN KEY (severity_code)
    REFERENCES dbo.SEVERITY (severity_code)
go
ALTER TABLE dbo.INPUT_BATCH_ERROR
    ADD CONSTRAINT FK_INPUT_BATCH_ERROR_BATCH_INP
    FOREIGN KEY (batch_input_id)
    REFERENCES dbo.BATCH_INPUT (batch_input_id)
go
ALTER TABLE dbo.INPUT_BATCH_ERROR
    ADD CONSTRAINT FK_INPUT_BATCH_ERROR_ERROR_CDE
    FOREIGN KEY (batch_error_code)
    REFERENCES dbo.BATCH_ERROR_CODE (batch_error_code)
go
ALTER TABLE dbo.INPUT_BATCH_ERROR
    ADD CONSTRAINT FK_INPUT_BATCH_ERROR_STANDARD
    FOREIGN KEY (standard_input_id)
    REFERENCES dbo.STANDARD_INPUT (standard_input_id)
go
ALTER TABLE dbo.INPUT_BATCH_ERROR
    ADD CONSTRAINT FK_INPUT_BATCH_ERROR_COURSE
    FOREIGN KEY (secondary_course_input_id)
    REFERENCES dbo.SECONDARY_COURSE_INPUT (secondary_course_input_id)
go
GRANT REFERENCES ON dbo.INPUT_BATCH_ERROR TO eqa_user
go
GRANT SELECT ON dbo.INPUT_BATCH_ERROR TO eqa_user
go
GRANT SELECT ON dbo.INPUT_BATCH_ERROR TO read_only
go
GRANT SELECT ON dbo.INPUT_BATCH_ERROR TO rma_users
go
GRANT INSERT ON dbo.INPUT_BATCH_ERROR TO eqa_user
go
GRANT DELETE ON dbo.INPUT_BATCH_ERROR TO eqa_user
go
GRANT UPDATE ON dbo.INPUT_BATCH_ERROR TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.INPUT_BATCH_ERROR TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.INPUT_BATCH_ERROR TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.INPUT_BATCH_ERROR TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.INPUT_BATCH_ERROR TO eqa_user
go
CREATE TABLE dbo.IR330
(
    ir330_id           OBJECT_ID    NOT NULL,
    perorg_id          OBJECT_ID    NOT NULL,
    tax_code           varchar(5)   NOT NULL,
    tax_rate           numeric(5,2) NULL,
    end_date           datetime     NULL,
    sighted_date       datetime     NOT NULL,
    sighted_by_user_id varchar(64)  NOT NULL,
    active_ind         yn_ind       NOT NULL,
    audit_tran_id      OBJECT_ID    NOT NULL,
    ts                 timestamp    NOT NULL,
    CONSTRAINT PK_IR330
    PRIMARY KEY CLUSTERED (ir330_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.IR330') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.IR330 >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.IR330 >>>'
go
ALTER TABLE dbo.IR330
    ADD CONSTRAINT FK_IR330_TAX_CODE
    FOREIGN KEY (tax_code)
    REFERENCES dbo.TAX_CODE (tax_code)
go
GRANT REFERENCES ON dbo.IR330 TO eqa_user
go
GRANT SELECT ON dbo.IR330 TO eqa_user
go
GRANT SELECT ON dbo.IR330 TO read_only
go
GRANT SELECT ON dbo.IR330 TO rma_users
go
GRANT INSERT ON dbo.IR330 TO eqa_user
go
GRANT DELETE ON dbo.IR330 TO eqa_user
go
GRANT UPDATE ON dbo.IR330 TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.IR330 TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.IR330 TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.IR330 TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.IR330 TO eqa_user
go
CREATE TABLE dbo.IWI
(
    iwi_id               OBJECT_ID NOT NULL,
    perorg_id            OBJECT_ID NOT NULL,
    iwi_code             char(4)   NOT NULL,
    audit_tran_id        OBJECT_ID NOT NULL,
    ts                   timestamp NOT NULL,
    active_ind           yn_ind    NOT NULL,
    merge_request_number OBJECT_ID NULL,
    CONSTRAINT PK_IWI
    PRIMARY KEY CLUSTERED (iwi_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.IWI') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.IWI >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.IWI >>>'
go
GRANT REFERENCES ON dbo.IWI TO eqa_user
go
GRANT SELECT ON dbo.IWI TO eqa_user
go
GRANT SELECT ON dbo.IWI TO read_only
go
GRANT SELECT ON dbo.IWI TO rma_users
go
GRANT INSERT ON dbo.IWI TO eqa_user
go
GRANT DELETE ON dbo.IWI TO eqa_user
go
GRANT UPDATE ON dbo.IWI TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.IWI TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.IWI TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.IWI TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.IWI TO eqa_user
go
CREATE TABLE dbo.IWI_CODE
(
    iwi_code   char(4) NOT NULL,
    iwi_desc   descr   NOT NULL,
    active_ind yn_ind  NOT NULL,
    CONSTRAINT PK_IWI_CODE
    PRIMARY KEY CLUSTERED (iwi_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.IWI_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.IWI_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.IWI_CODE >>>'
go
ALTER TABLE dbo.IWI
    ADD CONSTRAINT FK_IWI_IWI_CODE
    FOREIGN KEY (iwi_code)
    REFERENCES dbo.IWI_CODE (iwi_code)
go
GRANT REFERENCES ON dbo.IWI_CODE TO eqa_user
go
GRANT SELECT ON dbo.IWI_CODE TO eqa_user
go
GRANT SELECT ON dbo.IWI_CODE TO read_only
go
GRANT SELECT ON dbo.IWI_CODE TO rma_users
go
GRANT INSERT ON dbo.IWI_CODE TO eqa_user
go
GRANT DELETE ON dbo.IWI_CODE TO eqa_user
go
GRANT UPDATE ON dbo.IWI_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.IWI_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.IWI_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.IWI_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.IWI_CODE TO eqa_user
go
CREATE TABLE dbo.JBM_COUNTER
(
    NAME    varchar(255)  NOT NULL,
    NEXT_ID decimal(19,0) NOT NULL,
    CONSTRAINT JBM_COUNTE_17722955342
    PRIMARY KEY CLUSTERED (NAME)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.JBM_COUNTER') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.JBM_COUNTER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.JBM_COUNTER >>>'
go
GRANT REFERENCES ON dbo.JBM_COUNTER TO eqa_user
go
GRANT SELECT ON dbo.JBM_COUNTER TO eqa_user
go
GRANT SELECT ON dbo.JBM_COUNTER TO read_only
go
GRANT SELECT ON dbo.JBM_COUNTER TO rma_users
go
GRANT INSERT ON dbo.JBM_COUNTER TO eqa_user
go
GRANT DELETE ON dbo.JBM_COUNTER TO eqa_user
go
GRANT UPDATE ON dbo.JBM_COUNTER TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.JBM_COUNTER TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.JBM_COUNTER TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.JBM_COUNTER TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.JBM_COUNTER TO eqa_user
go
CREATE TABLE dbo.JBM_DUAL
(
    DUAL_DUMMY int NOT NULL,
    CONSTRAINT JBM_DUAL_15642947932
    PRIMARY KEY CLUSTERED (DUAL_DUMMY)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.JBM_DUAL') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.JBM_DUAL >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.JBM_DUAL >>>'
go
GRANT REFERENCES ON dbo.JBM_DUAL TO eqa_user
go
GRANT SELECT ON dbo.JBM_DUAL TO eqa_user
go
GRANT SELECT ON dbo.JBM_DUAL TO read_only
go
GRANT SELECT ON dbo.JBM_DUAL TO rma_users
go
GRANT INSERT ON dbo.JBM_DUAL TO eqa_user
go
GRANT DELETE ON dbo.JBM_DUAL TO eqa_user
go
GRANT UPDATE ON dbo.JBM_DUAL TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.JBM_DUAL TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.JBM_DUAL TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.JBM_DUAL TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.JBM_DUAL TO eqa_user
go
CREATE TABLE dbo.JBM_ID_CACHE
(
    NODE_ID int          NOT NULL,
    CNTR    int          NOT NULL,
    JBM_ID  varchar(255) NOT NULL,
    CONSTRAINT JBM_ID_CAC_18202957052
    PRIMARY KEY CLUSTERED (NODE_ID,CNTR)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.JBM_ID_CACHE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.JBM_ID_CACHE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.JBM_ID_CACHE >>>'
go
GRANT REFERENCES ON dbo.JBM_ID_CACHE TO eqa_user
go
GRANT SELECT ON dbo.JBM_ID_CACHE TO eqa_user
go
GRANT SELECT ON dbo.JBM_ID_CACHE TO read_only
go
GRANT SELECT ON dbo.JBM_ID_CACHE TO rma_users
go
GRANT INSERT ON dbo.JBM_ID_CACHE TO eqa_user
go
GRANT DELETE ON dbo.JBM_ID_CACHE TO eqa_user
go
GRANT UPDATE ON dbo.JBM_ID_CACHE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.JBM_ID_CACHE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.JBM_ID_CACHE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.JBM_ID_CACHE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.JBM_ID_CACHE TO eqa_user
go
CREATE TABLE dbo.JBM_MSG
(
    MESSAGE_ID  decimal(19,0) NOT NULL,
    RELIABLE    char(1)       NOT NULL,
    EXPIRATION  decimal(19,0) NOT NULL,
    [TIMESTAMP] decimal(19,0) NOT NULL,
    PRIORITY    tinyint       NOT NULL,
    TYPE        tinyint       NOT NULL,
    HEADERS     image         NULL     OFF ROW,
    PAYLOAD     image         NULL     OFF ROW,
    CONSTRAINT JBM_MSG_16762951922
    PRIMARY KEY CLUSTERED (MESSAGE_ID)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.JBM_MSG') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.JBM_MSG >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.JBM_MSG >>>'
go
GRANT REFERENCES ON dbo.JBM_MSG TO eqa_user
go
GRANT SELECT ON dbo.JBM_MSG TO eqa_user
go
GRANT SELECT ON dbo.JBM_MSG TO read_only
go
GRANT SELECT ON dbo.JBM_MSG TO rma_users
go
GRANT INSERT ON dbo.JBM_MSG TO eqa_user
go
GRANT DELETE ON dbo.JBM_MSG TO eqa_user
go
GRANT UPDATE ON dbo.JBM_MSG TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.JBM_MSG TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.JBM_MSG TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.JBM_MSG TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.JBM_MSG TO eqa_user
go
CREATE TABLE dbo.JBM_MSG_REF
(
    MESSAGE_ID     decimal(19,0) NOT NULL,
    CHANNEL_ID     decimal(19,0) NOT NULL,
    TRANSACTION_ID decimal(19,0) NULL,
    STATE          char(1)       NOT NULL,
    ORD            decimal(19,0) NOT NULL,
    PAGE_ORD       decimal(19,0) NULL,
    DELIVERY_COUNT int           NOT NULL,
    SCHED_DELIVERY decimal(19,0) NOT NULL,
    CONSTRAINT JBM_MSG_RE_16122949642
    PRIMARY KEY CLUSTERED (MESSAGE_ID,CHANNEL_ID)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.JBM_MSG_REF') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.JBM_MSG_REF >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.JBM_MSG_REF >>>'
go
GRANT REFERENCES ON dbo.JBM_MSG_REF TO eqa_user
go
GRANT SELECT ON dbo.JBM_MSG_REF TO eqa_user
go
GRANT SELECT ON dbo.JBM_MSG_REF TO read_only
go
GRANT SELECT ON dbo.JBM_MSG_REF TO rma_users
go
GRANT INSERT ON dbo.JBM_MSG_REF TO eqa_user
go
GRANT DELETE ON dbo.JBM_MSG_REF TO eqa_user
go
GRANT UPDATE ON dbo.JBM_MSG_REF TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.JBM_MSG_REF TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.JBM_MSG_REF TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.JBM_MSG_REF TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.JBM_MSG_REF TO eqa_user
go
CREATE TABLE dbo.JBM_POSTOFFICE
(
    POSTOFFICE_NAME varchar(255)  NOT NULL,
    NODE_ID         smallint      NOT NULL,
    QUEUE_NAME      varchar(255)  NOT NULL,
    COND            varchar(1023) NOT NULL,
    SELECTOR        varchar(1023) NULL,
    CHANNEL_ID      int           NOT NULL,
    CLSTERED        char(1)       NOT NULL,
    ALL_NODES       char(1)       NOT NULL,
    CONSTRAINT JBM_POSTOF_18682958762
    PRIMARY KEY CLUSTERED (POSTOFFICE_NAME,NODE_ID,QUEUE_NAME)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.JBM_POSTOFFICE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.JBM_POSTOFFICE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.JBM_POSTOFFICE >>>'
go
GRANT REFERENCES ON dbo.JBM_POSTOFFICE TO eqa_user
go
GRANT SELECT ON dbo.JBM_POSTOFFICE TO eqa_user
go
GRANT SELECT ON dbo.JBM_POSTOFFICE TO read_only
go
GRANT SELECT ON dbo.JBM_POSTOFFICE TO rma_users
go
GRANT INSERT ON dbo.JBM_POSTOFFICE TO eqa_user
go
GRANT DELETE ON dbo.JBM_POSTOFFICE TO eqa_user
go
GRANT UPDATE ON dbo.JBM_POSTOFFICE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.JBM_POSTOFFICE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.JBM_POSTOFFICE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.JBM_POSTOFFICE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.JBM_POSTOFFICE TO eqa_user
go
CREATE TABLE dbo.JBM_ROLE
(
    ROLE_ID varchar(32) NOT NULL,
    USER_ID varchar(32) NOT NULL,
    CONSTRAINT JBM_ROLE_19642962182
    PRIMARY KEY CLUSTERED (USER_ID,ROLE_ID)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.JBM_ROLE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.JBM_ROLE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.JBM_ROLE >>>'
go
GRANT REFERENCES ON dbo.JBM_ROLE TO eqa_user
go
GRANT SELECT ON dbo.JBM_ROLE TO eqa_user
go
GRANT SELECT ON dbo.JBM_ROLE TO read_only
go
GRANT SELECT ON dbo.JBM_ROLE TO rma_users
go
GRANT INSERT ON dbo.JBM_ROLE TO eqa_user
go
GRANT DELETE ON dbo.JBM_ROLE TO eqa_user
go
GRANT UPDATE ON dbo.JBM_ROLE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.JBM_ROLE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.JBM_ROLE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.JBM_ROLE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.JBM_ROLE TO eqa_user
go
CREATE TABLE dbo.JBM_TX
(
    NODE_ID        int            NOT NULL,
    TRANSACTION_ID decimal(19,0)  NOT NULL,
    BRANCH_QUAL    varbinary(254) NULL,
    FORMAT_ID      int            NULL,
    GLOBAL_TXID    varbinary(254) NULL,
    CONSTRAINT JBM_TX_17242953632
    PRIMARY KEY CLUSTERED (TRANSACTION_ID)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.JBM_TX') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.JBM_TX >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.JBM_TX >>>'
go
GRANT REFERENCES ON dbo.JBM_TX TO eqa_user
go
GRANT SELECT ON dbo.JBM_TX TO eqa_user
go
GRANT SELECT ON dbo.JBM_TX TO read_only
go
GRANT SELECT ON dbo.JBM_TX TO rma_users
go
GRANT INSERT ON dbo.JBM_TX TO eqa_user
go
GRANT DELETE ON dbo.JBM_TX TO eqa_user
go
GRANT UPDATE ON dbo.JBM_TX TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.JBM_TX TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.JBM_TX TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.JBM_TX TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.JBM_TX TO eqa_user
go
CREATE TABLE dbo.JBM_USER
(
    USER_ID  varchar(32)  NOT NULL,
    PASSWD   varchar(32)  NOT NULL,
    CLIENTID varchar(128) NOT NULL,
    CONSTRAINT JBM_USER_19162960472
    PRIMARY KEY CLUSTERED (USER_ID)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.JBM_USER') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.JBM_USER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.JBM_USER >>>'
go
GRANT REFERENCES ON dbo.JBM_USER TO eqa_user
go
GRANT SELECT ON dbo.JBM_USER TO eqa_user
go
GRANT SELECT ON dbo.JBM_USER TO read_only
go
GRANT SELECT ON dbo.JBM_USER TO rma_users
go
GRANT INSERT ON dbo.JBM_USER TO eqa_user
go
GRANT DELETE ON dbo.JBM_USER TO eqa_user
go
GRANT UPDATE ON dbo.JBM_USER TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.JBM_USER TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.JBM_USER TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.JBM_USER TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.JBM_USER TO eqa_user
go
CREATE TABLE dbo.JMS_MESSAGES
(
    messageid   int          NOT NULL,
    destination varchar(255) NOT NULL,
    txid        int          NULL,
    txop        char(1)      NOT NULL,
    messageblob image        NOT NULL OFF ROW,
    CONSTRAINT PKY_JMS_MESSAGES
    PRIMARY KEY CLUSTERED (messageid,destination)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.JMS_MESSAGES') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.JMS_MESSAGES >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.JMS_MESSAGES >>>'
go
GRANT REFERENCES ON dbo.JMS_MESSAGES TO eqa_user
go
GRANT SELECT ON dbo.JMS_MESSAGES TO eqa_user
go
GRANT SELECT ON dbo.JMS_MESSAGES TO read_only
go
GRANT SELECT ON dbo.JMS_MESSAGES TO rma_users
go
GRANT INSERT ON dbo.JMS_MESSAGES TO eqa_user
go
GRANT DELETE ON dbo.JMS_MESSAGES TO eqa_user
go
GRANT UPDATE ON dbo.JMS_MESSAGES TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.JMS_MESSAGES TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.JMS_MESSAGES TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.JMS_MESSAGES TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.JMS_MESSAGES TO eqa_user
go
CREATE TABLE dbo.JMS_ROLES
(
    roleid varchar(32) NOT NULL,
    userid varchar(32) NOT NULL,
    CONSTRAINT PK_JMS_ROLES
    PRIMARY KEY CLUSTERED (userid,roleid)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.JMS_ROLES') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.JMS_ROLES >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.JMS_ROLES >>>'
go
GRANT REFERENCES ON dbo.JMS_ROLES TO eqa_user
go
GRANT SELECT ON dbo.JMS_ROLES TO eqa_user
go
GRANT SELECT ON dbo.JMS_ROLES TO read_only
go
GRANT SELECT ON dbo.JMS_ROLES TO rma_users
go
GRANT INSERT ON dbo.JMS_ROLES TO eqa_user
go
GRANT DELETE ON dbo.JMS_ROLES TO eqa_user
go
GRANT UPDATE ON dbo.JMS_ROLES TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.JMS_ROLES TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.JMS_ROLES TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.JMS_ROLES TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.JMS_ROLES TO eqa_user
go
CREATE TABLE dbo.JMS_SUBSCRIPTIONS
(
    clientid varchar(128) NOT NULL,
    subname  varchar(128) NOT NULL,
    topic    varchar(255) NOT NULL,
    selector varchar(255) NOT NULL,
    CONSTRAINT PK_JMS_SUBSCRIPTIONS
    PRIMARY KEY CLUSTERED (clientid,subname)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.JMS_SUBSCRIPTIONS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.JMS_SUBSCRIPTIONS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.JMS_SUBSCRIPTIONS >>>'
go
GRANT REFERENCES ON dbo.JMS_SUBSCRIPTIONS TO eqa_user
go
GRANT SELECT ON dbo.JMS_SUBSCRIPTIONS TO eqa_user
go
GRANT SELECT ON dbo.JMS_SUBSCRIPTIONS TO read_only
go
GRANT SELECT ON dbo.JMS_SUBSCRIPTIONS TO rma_users
go
GRANT INSERT ON dbo.JMS_SUBSCRIPTIONS TO eqa_user
go
GRANT DELETE ON dbo.JMS_SUBSCRIPTIONS TO eqa_user
go
GRANT UPDATE ON dbo.JMS_SUBSCRIPTIONS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.JMS_SUBSCRIPTIONS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.JMS_SUBSCRIPTIONS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.JMS_SUBSCRIPTIONS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.JMS_SUBSCRIPTIONS TO eqa_user
go
CREATE TABLE dbo.JMS_TRANSACTIONS
(
    txid int NOT NULL,
    CONSTRAINT PKY_JMS_TRANSACTIONS
    PRIMARY KEY CLUSTERED (txid)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.JMS_TRANSACTIONS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.JMS_TRANSACTIONS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.JMS_TRANSACTIONS >>>'
go
GRANT REFERENCES ON dbo.JMS_TRANSACTIONS TO eqa_user
go
GRANT SELECT ON dbo.JMS_TRANSACTIONS TO eqa_user
go
GRANT SELECT ON dbo.JMS_TRANSACTIONS TO read_only
go
GRANT SELECT ON dbo.JMS_TRANSACTIONS TO rma_users
go
GRANT INSERT ON dbo.JMS_TRANSACTIONS TO eqa_user
go
GRANT DELETE ON dbo.JMS_TRANSACTIONS TO eqa_user
go
GRANT UPDATE ON dbo.JMS_TRANSACTIONS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.JMS_TRANSACTIONS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.JMS_TRANSACTIONS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.JMS_TRANSACTIONS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.JMS_TRANSACTIONS TO eqa_user
go
CREATE TABLE dbo.JMS_USERS
(
    userid   varchar(32)  NOT NULL,
    passwd   varchar(32)  NOT NULL,
    clientid varchar(128) NULL,
    CONSTRAINT PK_JMS_USERS
    PRIMARY KEY CLUSTERED (userid)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.JMS_USERS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.JMS_USERS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.JMS_USERS >>>'
go
ALTER TABLE dbo.JMS_ROLES
    ADD CONSTRAINT FK_JMS_ROLES_JMS_USERS
    FOREIGN KEY (userid)
    REFERENCES dbo.JMS_USERS (userid)
go
GRANT REFERENCES ON dbo.JMS_USERS TO eqa_user
go
GRANT SELECT ON dbo.JMS_USERS TO eqa_user
go
GRANT SELECT ON dbo.JMS_USERS TO read_only
go
GRANT SELECT ON dbo.JMS_USERS TO rma_users
go
GRANT INSERT ON dbo.JMS_USERS TO eqa_user
go
GRANT DELETE ON dbo.JMS_USERS TO eqa_user
go
GRANT UPDATE ON dbo.JMS_USERS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.JMS_USERS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.JMS_USERS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.JMS_USERS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.JMS_USERS TO eqa_user
go
CREATE TABLE dbo.JOINING_WORDS
(
    join_word_code          code_2  NOT NULL,
    join_word_desc          descr   NOT NULL,
    join_word_alt_lang_desc descr   NULL,
    sortkey                 sortkey NULL,
    active_ind              yn      DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    CONSTRAINT PK_JOINING_WORDS
    PRIMARY KEY CLUSTERED (join_word_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.JOINING_WORDS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.JOINING_WORDS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.JOINING_WORDS >>>'
go
GRANT REFERENCES ON dbo.JOINING_WORDS TO eqa_user
go
GRANT SELECT ON dbo.JOINING_WORDS TO eqa_user
go
GRANT SELECT ON dbo.JOINING_WORDS TO read_only
go
GRANT SELECT ON dbo.JOINING_WORDS TO rma_users
go
GRANT INSERT ON dbo.JOINING_WORDS TO eqa_user
go
GRANT DELETE ON dbo.JOINING_WORDS TO eqa_user
go
GRANT UPDATE ON dbo.JOINING_WORDS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.JOINING_WORDS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.JOINING_WORDS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.JOINING_WORDS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.JOINING_WORDS TO eqa_user
go
CREATE TABLE dbo.KEY_DATE
(
    academic_year      char(4)  NOT NULL,
    key_date_type_code code_2   NOT NULL,
    key_date_value     datetime NOT NULL,
    CONSTRAINT PK_KEY_DATE
    PRIMARY KEY CLUSTERED (academic_year,key_date_type_code)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.KEY_DATE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.KEY_DATE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.KEY_DATE >>>'
go
ALTER TABLE dbo.KEY_DATE
    ADD CONSTRAINT FK_KEY_DATE_ACADEMIC_YEAR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
GRANT REFERENCES ON dbo.KEY_DATE TO eqa_user
go
GRANT SELECT ON dbo.KEY_DATE TO eqa_user
go
GRANT SELECT ON dbo.KEY_DATE TO read_only
go
GRANT SELECT ON dbo.KEY_DATE TO rma_users
go
GRANT INSERT ON dbo.KEY_DATE TO eqa_user
go
GRANT DELETE ON dbo.KEY_DATE TO eqa_user
go
GRANT UPDATE ON dbo.KEY_DATE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.KEY_DATE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.KEY_DATE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.KEY_DATE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.KEY_DATE TO eqa_user
go
CREATE TABLE dbo.KEY_DATE_TYPE
(
    key_date_type_code code_2 NOT NULL,
    key_date_type_desc descr  NOT NULL,
    CONSTRAINT PK_KEY_DATE_TYPE
    PRIMARY KEY CLUSTERED (key_date_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.KEY_DATE_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.KEY_DATE_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.KEY_DATE_TYPE >>>'
go
ALTER TABLE dbo.KEY_DATE
    ADD CONSTRAINT FK_KEY_DATE_KEY_DATE_TYPE
    FOREIGN KEY (key_date_type_code)
    REFERENCES dbo.KEY_DATE_TYPE (key_date_type_code)
go
GRANT REFERENCES ON dbo.KEY_DATE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.KEY_DATE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.KEY_DATE_TYPE TO read_only
go
GRANT SELECT ON dbo.KEY_DATE_TYPE TO rma_users
go
GRANT INSERT ON dbo.KEY_DATE_TYPE TO eqa_user
go
GRANT DELETE ON dbo.KEY_DATE_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.KEY_DATE_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.KEY_DATE_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.KEY_DATE_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.KEY_DATE_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.KEY_DATE_TYPE TO eqa_user
go
CREATE TABLE dbo.KEY_LOG
(
    msg_key varbinary(32) NOT NULL,
    mq_name varchar(100)  NOT NULL,
    CONSTRAINT PK_KEY_LOG
    PRIMARY KEY CLUSTERED (mq_name,msg_key)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.KEY_LOG') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.KEY_LOG >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.KEY_LOG >>>'
go
GRANT REFERENCES ON dbo.KEY_LOG TO eqa_user
go
GRANT SELECT ON dbo.KEY_LOG TO eqa_user
go
GRANT SELECT ON dbo.KEY_LOG TO read_only
go
GRANT SELECT ON dbo.KEY_LOG TO rma_users
go
GRANT INSERT ON dbo.KEY_LOG TO eqa_user
go
GRANT DELETE ON dbo.KEY_LOG TO eqa_user
go
GRANT UPDATE ON dbo.KEY_LOG TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.KEY_LOG TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.KEY_LOG TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.KEY_LOG TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.KEY_LOG TO eqa_user
go
CREATE TABLE dbo.LANGUAGE
(
    language_code       language    NOT NULL,
    language_desc       descr       NOT NULL,
    active_ind          yn_ind      NOT NULL,
    language_short_desc descr_short NOT NULL,
    draft_language_ind  yn_ind      NOT NULL,
    CONSTRAINT PK_LANGUAGE
    PRIMARY KEY CLUSTERED (language_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.LANGUAGE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.LANGUAGE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.LANGUAGE >>>'
go
GRANT REFERENCES ON dbo.LANGUAGE TO eqa_user
go
GRANT SELECT ON dbo.LANGUAGE TO eqa_user
go
GRANT SELECT ON dbo.LANGUAGE TO read_only
go
GRANT SELECT ON dbo.LANGUAGE TO rma_users
go
GRANT INSERT ON dbo.LANGUAGE TO eqa_user
go
GRANT DELETE ON dbo.LANGUAGE TO eqa_user
go
GRANT UPDATE ON dbo.LANGUAGE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.LANGUAGE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.LANGUAGE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.LANGUAGE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.LANGUAGE TO eqa_user
go
CREATE TABLE dbo.LEARNER
(
    learner_id                 OBJECT_ID NOT NULL,
    perorg_id                  OBJECT_ID NOT NULL,
    res_stat_verification_code code_2    NOT NULL,
    name_dob_verification_code code_2    NOT NULL,
    nsn                        nsn       NOT NULL,
    publish_on_web             yn_ind    NOT NULL,
    dob_update_allowed_ind     yn_ind    NOT NULL,
    nsi_sync_ind               ny_ind    NOT NULL,
    created_user               usr       NOT NULL,
    audit_tran_id              OBJECT_ID NOT NULL,
    ts                         timestamp NOT NULL,
    country_code               char(3)   NOT NULL,
    master_learner_id          OBJECT_ID NULL,
    nsi_status_code            code_1    NULL,
    hookfee_paid               ny_ind    NULL,
    hookon_provider            OBJECT_ID NULL,
    hookon_provider_location   number_2  NULL,
    hookon_date                dt        NULL,
    loaded_fields_dt           dt        NULL,
    last_rol_date              dt        NULL,
    advice_dt                  dt        NULL,
    org_dt                     dt        NULL,
    school_qualcheck_status    code_2    NULL,
    web_pin                    pin       NULL,
    web_pin_letter_date        dt        NULL,
    phone_pin                  pin       NULL,
    phone_pin_letter_date      dt        NULL,
    created_batch_input_id     OBJECT_ID NULL,
    updated_batch_input_id     OBJECT_ID NULL,
    hookon_batch_id            OBJECT_ID NULL,
    hookfee_override_type      char(1)   NULL,
    hold_state_code            char(1)   NULL,
    merge_request_number       OBJECT_ID NULL,
    school_qc_status_date      datetime  NULL,
    multibirth_sibling_ind     ny_ind    NULL,
    CONSTRAINT PK_LEARNER
    PRIMARY KEY CLUSTERED (learner_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.LEARNER') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.LEARNER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.LEARNER >>>'
go
ALTER TABLE dbo.LEARNER
    ADD CONSTRAINT FK_LEARNER_HOLD_STATE_CODE
    FOREIGN KEY (hold_state_code)
    REFERENCES dbo.HOLD_STATE_CODE (hold_state_code)
go
ALTER TABLE dbo.LEARNER
    ADD CONSTRAINT FK_HOOKFEE_OVERRIDE
    FOREIGN KEY (hookfee_override_type)
    REFERENCES dbo.HOOKFEE_OVERRIDE_TYPE (hookfee_override_type)
go
ALTER TABLE dbo.LEARNER
    ADD CONSTRAINT FK_LEARNER_CREATE_BATCH
    FOREIGN KEY (created_batch_input_id)
    REFERENCES dbo.BATCH_INPUT (batch_input_id)
go
ALTER TABLE dbo.LEARNER
    ADD CONSTRAINT FK_LEARNER_UPDATE_BATCH
    FOREIGN KEY (updated_batch_input_id)
    REFERENCES dbo.BATCH_INPUT (batch_input_id)
go
ALTER TABLE dbo.LEARNER
    ADD CONSTRAINT FK_LEARNER_HOOKON_BATCH
    FOREIGN KEY (hookon_batch_id)
    REFERENCES dbo.BATCH_INPUT (batch_input_id)
go
ALTER TABLE dbo.LEARNER
    ADD CONSTRAINT FK_LEARNER_FK_LEARNE_RES_STAT
    FOREIGN KEY (res_stat_verification_code)
    REFERENCES dbo.RES_STAT_VERIFICATION_CODE (res_stat_verification_code)
go
ALTER TABLE dbo.LEARNER
    ADD CONSTRAINT FK_SCHOOL_QUALCHECK_STATUS
    FOREIGN KEY (school_qualcheck_status)
    REFERENCES dbo.SCHOOL_QUALCHECK_STATUS (school_qualcheck_status_code)
go
ALTER TABLE dbo.LEARNER
    ADD CONSTRAINT FK_LEARNER_PROVIDER
    FOREIGN KEY (hookon_provider,hookon_provider_location)
    REFERENCES dbo.PROVIDER (moe_provider_id,location)
go
ALTER TABLE dbo.LEARNER
    ADD CONSTRAINT FK_LEARNER_COUNTRY_CODE
    FOREIGN KEY (country_code)
    REFERENCES dbo.COUNTRY_CODE (country_code)
go
ALTER TABLE dbo.LEARNER
    ADD CONSTRAINT FK_LEARNER_MASTER_LEARNER
    FOREIGN KEY (master_learner_id)
    REFERENCES dbo.LEARNER (learner_id)
go
GRANT REFERENCES ON dbo.LEARNER TO eqa_user
go
GRANT SELECT ON dbo.LEARNER TO eqa_user
go
GRANT SELECT ON dbo.LEARNER TO read_only
go
GRANT SELECT ON dbo.LEARNER TO rma_users
go
GRANT INSERT ON dbo.LEARNER TO eqa_user
go
GRANT DELETE ON dbo.LEARNER TO eqa_user
go
GRANT UPDATE ON dbo.LEARNER TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.LEARNER TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.LEARNER TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.LEARNER TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.LEARNER TO eqa_user
go
CREATE TABLE dbo.LEARNER_ASSESSMENT_CENTRE
(
    learner_id    OBJECT_ID NOT NULL,
    provider_id   OBJECT_ID NOT NULL,
    location      number_2  NOT NULL,
    academic_year char(4)   NOT NULL,
    exam_code     char(4)   NOT NULL,
    CONSTRAINT PK_LEARNER_ASSESSMENT_CENTRE
    PRIMARY KEY CLUSTERED (learner_id,provider_id,location,academic_year)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.LEARNER_ASSESSMENT_CENTRE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.LEARNER_ASSESSMENT_CENTRE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.LEARNER_ASSESSMENT_CENTRE >>>'
go
ALTER TABLE dbo.LEARNER_ASSESSMENT_CENTRE
    ADD CONSTRAINT FK_LEARNER_ASSESS_CTR_LEARNER
    FOREIGN KEY (learner_id)
    REFERENCES dbo.LEARNER (learner_id)
go
ALTER TABLE dbo.LEARNER_ASSESSMENT_CENTRE
    ADD CONSTRAINT FK_LEARNER_ASS_CENTRE_YEAR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.LEARNER_ASSESSMENT_CENTRE
    ADD CONSTRAINT FK_LEARNER_ASS_CTR_ASSESS_CTR
    FOREIGN KEY (provider_id,location)
    REFERENCES dbo.ASSESSMENT_CENTRE (moe_provider_id,location)
go
GRANT REFERENCES ON dbo.LEARNER_ASSESSMENT_CENTRE TO eqa_user
go
GRANT SELECT ON dbo.LEARNER_ASSESSMENT_CENTRE TO eqa_user
go
GRANT SELECT ON dbo.LEARNER_ASSESSMENT_CENTRE TO read_only
go
GRANT SELECT ON dbo.LEARNER_ASSESSMENT_CENTRE TO rma_users
go
GRANT INSERT ON dbo.LEARNER_ASSESSMENT_CENTRE TO eqa_user
go
GRANT DELETE ON dbo.LEARNER_ASSESSMENT_CENTRE TO eqa_user
go
GRANT UPDATE ON dbo.LEARNER_ASSESSMENT_CENTRE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.LEARNER_ASSESSMENT_CENTRE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.LEARNER_ASSESSMENT_CENTRE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.LEARNER_ASSESSMENT_CENTRE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.LEARNER_ASSESSMENT_CENTRE TO eqa_user
go
CREATE TABLE dbo.LEARNER_CATEGORY
(
    learner_category_code code_2  NOT NULL,
    learner_category_desc descr   NOT NULL,
    active_ind            yn_ind  NOT NULL,
    sortkey               sortkey NOT NULL,
    CONSTRAINT PK_LEARNER_CATEGORY
    PRIMARY KEY NONCLUSTERED (learner_category_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.LEARNER_CATEGORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.LEARNER_CATEGORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.LEARNER_CATEGORY >>>'
go
GRANT REFERENCES ON dbo.LEARNER_CATEGORY TO eqa_user
go
GRANT SELECT ON dbo.LEARNER_CATEGORY TO eqa_user
go
GRANT SELECT ON dbo.LEARNER_CATEGORY TO read_only
go
GRANT SELECT ON dbo.LEARNER_CATEGORY TO rma_users
go
GRANT INSERT ON dbo.LEARNER_CATEGORY TO eqa_user
go
GRANT DELETE ON dbo.LEARNER_CATEGORY TO eqa_user
go
GRANT UPDATE ON dbo.LEARNER_CATEGORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.LEARNER_CATEGORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.LEARNER_CATEGORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.LEARNER_CATEGORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.LEARNER_CATEGORY TO eqa_user
go
CREATE TABLE dbo.LEARNER_ENROLMENT
(
    enrolment_id                OBJECT_ID     NOT NULL,
    provider_id                 OBJECT_ID     NOT NULL,
    location                    number_2      NOT NULL,
    enrolment_status_code       code_2        NOT NULL,
    academic_year               char(4)       NOT NULL,
    learner_id                  OBJECT_ID     NOT NULL,
    audit_tran_id               OBJECT_ID     NOT NULL,
    ts                          timestamp     NOT NULL,
    recalculate_fees            ny_ind        NOT NULL,
    created_user                usr           NOT NULL,
    created_date                datetime      NOT NULL,
    internal_assmt_verified_ind ny_ind        NOT NULL,
    late_fee                    ny_ind        NOT NULL,
    web_candcode                numeric(10,0) NULL,
    paid_code                   code_1        NULL,
    fin_assist_approved_code    code_1        NULL,
    fin_assist_type_code        code_1        NULL,
    enrolment_date              dt            NULL,
    local_id                    varchar(10)   NULL,
    hsc_ind                     ny_ind        NOT NULL,
    tertiary_release_ind        ny_ind        NOT NULL,
    results_held_ind            ny_ind        NOT NULL,
    fw_flat_fee_applicable      code_1        NULL,
    moe_year_level_code         number_2      NULL,
    admin_group_code            varchar(6)    NULL,
    home_school_ind             ny_ind        NOT NULL,
    entry_first_recvd_date      dt            NULL,
    entry_last_recvd_date       dt            NULL,
    exam_centre_id              OBJECT_ID     NULL,
    exam_centre_location        number_2      NULL,
    merge_request_number        OBJECT_ID     NULL,
    sortkey                     varchar(6)    NULL,
    withdrawal_date             datetime      NULL,
    leaving_code                char(1)       NULL,
    first_batch_input_id        OBJECT_ID     NULL,
    last_batch_input_id         OBJECT_ID     NULL,
    number_siblings             numeric(2,0)  NULL,
    fin_assist_app_number       varchar(15)   NULL,
    fin_assist_benefit_number   varchar(15)   NULL,
    payment_amount              money         NULL,
    withdrawn_batch_input_id    OBJECT_ID     NULL,
    student_type                varchar(6)    NULL,
    first_wd_batch_input_id     OBJECT_ID     NULL,
    withdrawn_method            char(1)       NULL,
    leaving_date                datetime      NULL,
    results_subj_to_embargo_ind yn_ind        NOT NULL,
    crse_endr_chk_status_code   code_2        NULL,
    crse_endr_chk_status_date   dt            NULL,
    exception_orn_type_code     code_3        NULL,
    late_fee_waiver_ind         ny_ind        NULL,
    CONSTRAINT PK_LEARNER_ENROLMENT
    PRIMARY KEY NONCLUSTERED (enrolment_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.LEARNER_ENROLMENT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.LEARNER_ENROLMENT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.LEARNER_ENROLMENT >>>'
go
ALTER TABLE dbo.LEARNER_ENROLMENT
    ADD CONSTRAINT FK_LEARNER_ENROLMENT_LEARNER
    FOREIGN KEY (learner_id)
    REFERENCES dbo.LEARNER (learner_id)
go
ALTER TABLE dbo.LEARNER_ENROLMENT
    ADD CONSTRAINT FK_LEARNER_ENROLMENT_PROVIDER
    FOREIGN KEY (provider_id,location)
    REFERENCES dbo.PROVIDER (moe_provider_id,location)
go
ALTER TABLE dbo.LEARNER_ENROLMENT
    ADD CONSTRAINT FK_LEARNER_ENROLMENT_EXCEPTION_ORN_TYPE
    FOREIGN KEY (exception_orn_type_code)
    REFERENCES dbo.EXCEPTION_ORN_TYPE (exception_orn_type_code)
go
ALTER TABLE dbo.LEARNER_ENROLMENT
    ADD CONSTRAINT FK_LEARNER_ENROL_FIRST_BATCH
    FOREIGN KEY (first_batch_input_id)
    REFERENCES dbo.BATCH_INPUT (batch_input_id)
go
ALTER TABLE dbo.LEARNER_ENROLMENT
    ADD CONSTRAINT FK_LEARNER_ENROL_LAST_BATCH
    FOREIGN KEY (last_batch_input_id)
    REFERENCES dbo.BATCH_INPUT (batch_input_id)
go
ALTER TABLE dbo.LEARNER_ENROLMENT
    ADD CONSTRAINT FK_ENROLMENT_ACADEMIC_YEAR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.LEARNER_ENROLMENT
    ADD CONSTRAINT FK_ENROLMENT_FA_TYPE
    FOREIGN KEY (fin_assist_type_code)
    REFERENCES dbo.FIN_ASSIST_TYPE (fin_assist_type_code)
go
ALTER TABLE dbo.LEARNER_ENROLMENT
    ADD CONSTRAINT FK_LEARNER_ENROLMENT_STATUS
    FOREIGN KEY (enrolment_status_code)
    REFERENCES dbo.ENROLMENT_STATUS (enrolment_status_code)
go
ALTER TABLE dbo.LEARNER_ENROLMENT
    ADD CONSTRAINT FK_ENROLMENT_FA_APPROVED
    FOREIGN KEY (fin_assist_approved_code)
    REFERENCES dbo.FIN_ASSIST_APPROVED (fin_assist_approved_code)
go
ALTER TABLE dbo.LEARNER_ENROLMENT
    ADD CONSTRAINT FK_ENROLMENT_STUDENT_TYPE
    FOREIGN KEY (student_type)
    REFERENCES dbo.STUDENT_TYPE (student_type)
go
ALTER TABLE dbo.LEARNER_ENROLMENT
    ADD CONSTRAINT FK_ENROLMENT_WD_BATCH
    FOREIGN KEY (first_wd_batch_input_id)
    REFERENCES dbo.BATCH_INPUT (batch_input_id)
go
ALTER TABLE dbo.LEARNER_ENROLMENT
    ADD CONSTRAINT FK_ENROLMENT_WD_METHOD
    FOREIGN KEY (withdrawn_method)
    REFERENCES dbo.WITHDRAWN_METHOD (withdrawn_method)
go
ALTER TABLE dbo.LEARNER_ENROLMENT
    ADD CONSTRAINT FK_LRNR_ENRL_CRSE_ENDR_CHK_STA
    FOREIGN KEY (crse_endr_chk_status_code)
    REFERENCES dbo.CRSE_ENDR_CHK_STATUS (crse_endr_chk_status_code)
go
GRANT REFERENCES ON dbo.LEARNER_ENROLMENT TO eqa_user
go
GRANT SELECT ON dbo.LEARNER_ENROLMENT TO eqa_user
go
GRANT SELECT ON dbo.LEARNER_ENROLMENT TO read_only
go
GRANT SELECT ON dbo.LEARNER_ENROLMENT TO rma_users
go
GRANT INSERT ON dbo.LEARNER_ENROLMENT TO eqa_user
go
GRANT DELETE ON dbo.LEARNER_ENROLMENT TO eqa_user
go
GRANT UPDATE ON dbo.LEARNER_ENROLMENT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.LEARNER_ENROLMENT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.LEARNER_ENROLMENT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.LEARNER_ENROLMENT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.LEARNER_ENROLMENT TO eqa_user
go
CREATE TABLE dbo.LEARNER_ENROL_SPEC_ASSIST
(
    learner_enrol_spec_assist_id OBJECT_ID     NOT NULL,
    enrolment_id                 OBJECT_ID     NOT NULL,
    spec_assist_evidence_ind     yn            DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    spec_assist_withdrawn_ind    yn            DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    needs_analysis_ind           ny_ind        NOT NULL,
    internals_only_ind           ny_ind        NOT NULL,
    report_available_ind         ny_ind        NOT NULL,
    physical_disability_ind      ny_ind        NOT NULL,
    medical_disability_ind       ny_ind        NOT NULL,
    learning_disability_ind      ny_ind        NOT NULL,
    previous_year_results_ind    ny_ind        NULL,
    spec_assist_general_reason   text          NULL     OFF ROW,
    spec_assist_contact          varchar(1024) NULL,
    application_number           varchar(20)   NULL,
    school_contact_name          LONGNAME      NULL,
    school_contact_email         emailaddr     NULL,
    school_contact_phone_num     phone_num     NULL,
    assessor_name                long_name     NULL,
    assessor_qualification_name  LONGNAME      NULL,
    assessment_date              dt            NULL,
    ts                           timestamp     NOT NULL,
    audit_tran_id                numeric(12,0) NOT NULL,
    sensory_disability_ind       ny_ind        NOT NULL,
    CONSTRAINT PK_LEARNER_ENROL_SPEC_ASSIST
    PRIMARY KEY NONCLUSTERED (learner_enrol_spec_assist_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.LEARNER_ENROL_SPEC_ASSIST') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.LEARNER_ENROL_SPEC_ASSIST >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.LEARNER_ENROL_SPEC_ASSIST >>>'
go
ALTER TABLE dbo.LEARNER_ENROL_SPEC_ASSIST
    ADD CONSTRAINT FK_LEARNER_ENROL_SPEC_ASSIST
    FOREIGN KEY (enrolment_id)
    REFERENCES dbo.LEARNER_ENROLMENT (enrolment_id)
go
GRANT REFERENCES ON dbo.LEARNER_ENROL_SPEC_ASSIST TO eqa_user
go
GRANT SELECT ON dbo.LEARNER_ENROL_SPEC_ASSIST TO eqa_user
go
GRANT SELECT ON dbo.LEARNER_ENROL_SPEC_ASSIST TO read_only
go
GRANT SELECT ON dbo.LEARNER_ENROL_SPEC_ASSIST TO rma_users
go
GRANT INSERT ON dbo.LEARNER_ENROL_SPEC_ASSIST TO eqa_user
go
GRANT DELETE ON dbo.LEARNER_ENROL_SPEC_ASSIST TO eqa_user
go
GRANT UPDATE ON dbo.LEARNER_ENROL_SPEC_ASSIST TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.LEARNER_ENROL_SPEC_ASSIST TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.LEARNER_ENROL_SPEC_ASSIST TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.LEARNER_ENROL_SPEC_ASSIST TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.LEARNER_ENROL_SPEC_ASSIST TO eqa_user
go
CREATE TABLE dbo.LEARNER_INPUT
(
    learner_input_id          OBJECT_ID     NOT NULL,
    batch_input_id            OBJECT_ID     NOT NULL,
    matching_result_code      OBJECT_ID     NOT NULL,
    is_resolved               ny_ind        NOT NULL,
    is_processed              ny_ind        NOT NULL,
    withdrawn_flag            ny_ind        NOT NULL,
    version_id                numeric(12,0) DEFAULT 0 NOT NULL,
    sort_key                  varchar(6)    NULL,
    local_id                  varchar(10)   NULL,
    nzqa_id                   numeric(10,0) NULL,
    hook_on_flag              tinyint       NULL,
    surname                   long_name     NULL,
    name1                     long_name     NULL,
    name2                     long_name     NULL,
    name3                     long_name     NULL,
    address_line_1            varchar(80)   NULL,
    address_line_2            varchar(80)   NULL,
    address_line_3            varchar(80)   NULL,
    address_line_4            varchar(80)   NULL,
    post_code                 postcode      NULL,
    overseas_flag             tinyint       NULL,
    date_of_birth             datetime      NULL,
    gender                    code_1        NULL,
    ethnic_1                  varchar(5)    NULL,
    ethnic_2                  varchar(5)    NULL,
    ethnic_3                  varchar(5)    NULL,
    h_div                     varchar(6)    NULL,
    years_secondary           numeric(1,0)  NULL,
    citizen_flag              tinyint       NULL,
    tertiary_rel_flag         tinyint       NULL,
    hsc_flag                  tinyint       NULL,
    fin_assistance            code_1        NULL,
    exam_centre_code          OBJECT_ID     NULL,
    selected_match            OBJECT_ID     NULL,
    ts                        timestamp     NULL,
    learner_id                numeric(12,0) NULL,
    enrolment_date            datetime      NULL,
    leaving_date              datetime      NULL,
    leaving_code              char(1)       NULL,
    payment_amount            money         NULL,
    cell_phone_number         varchar(10)   NULL,
    foreign_fee_payer_ind     ny_ind        NULL,
    qfn_number                varchar(8)    NULL,
    strand_number             numeric(12,0) NULL,
    qfn_version_number        numeric(8,0)  NULL,
    qfn_issue_flag            char(1)       NULL,
    qfn_return_to_provider    ny_ind        NULL,
    qfn_completion_date       datetime      NULL,
    qfn_awd_provider_code     numeric(12,0) NULL,
    qfn_awd_provider_location numeric(2,0)  NULL,
    optional_strands          varchar(255)  NULL,
    qfn_achieved_id           numeric(12,0) NULL,
    number_siblings           numeric(2,0)  NULL,
    fin_assist_app_number     varchar(15)   NULL,
    fin_assist_benefit_number varchar(15)   NULL,
    qual_check_status         code_2        NULL,
    line_number               int           NULL,
    iwi_1                     varchar(4)    NULL,
    iwi_2                     varchar(4)    NULL,
    iwi_3                     varchar(4)    NULL,
    moe_year_level            number_2      NULL,
    student_type              varchar(6)    NULL,
    country_of_citizenship    varchar(3)    NULL,
    ncea_lvl1_qc_status       code_2        NULL,
    lvl1_qfn_achieved_id      numeric(12,0) NULL,
    ncea_lvl2_qc_status       code_2        NULL,
    lvl2_qfn_achieved_id      numeric(12,0) NULL,
    ncea_lvl3_qc_status       code_2        NULL,
    lvl3_qfn_achieved_id      numeric(12,0) NULL,
    ncea_ue_qc_status         code_2        NULL,
    ue_qfn_achieved_id        numeric(12,0) NULL,
    exam_centre_location      number_2      NULL,
    CONSTRAINT PK_LEARNER_INPUT
    PRIMARY KEY CLUSTERED (learner_input_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.LEARNER_INPUT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.LEARNER_INPUT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.LEARNER_INPUT >>>'
go
ALTER TABLE dbo.LEARNER_INPUT
    ADD CONSTRAINT FK_LEARNER_INPUT_LEARNER
    FOREIGN KEY (learner_id)
    REFERENCES dbo.LEARNER (learner_id)
go
ALTER TABLE dbo.LEARNER_INPUT
    ADD CONSTRAINT FK_LEARNER_INPUT_QC_STATUS
    FOREIGN KEY (qual_check_status)
    REFERENCES dbo.QUAL_CHECK_STATUS_CODE (qual_check_status_code)
go
ALTER TABLE dbo.LEARNER_INPUT
    ADD CONSTRAINT FK_LEARNER_INPUT_BATCH_INPUT
    FOREIGN KEY (batch_input_id)
    REFERENCES dbo.BATCH_INPUT (batch_input_id)
go
ALTER TABLE dbo.INPUT_BATCH_ERROR
    ADD CONSTRAINT FK_INPUT_BATCH_ERROR_LEARNER
    FOREIGN KEY (learner_input_id)
    REFERENCES dbo.LEARNER_INPUT (learner_input_id)
go
GRANT REFERENCES ON dbo.LEARNER_INPUT TO eqa_user
go
GRANT SELECT ON dbo.LEARNER_INPUT TO eqa_user
go
GRANT SELECT ON dbo.LEARNER_INPUT TO read_only
go
GRANT SELECT ON dbo.LEARNER_INPUT TO rma_users
go
GRANT INSERT ON dbo.LEARNER_INPUT TO eqa_user
go
GRANT DELETE ON dbo.LEARNER_INPUT TO eqa_user
go
GRANT UPDATE ON dbo.LEARNER_INPUT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.LEARNER_INPUT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.LEARNER_INPUT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.LEARNER_INPUT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.LEARNER_INPUT TO eqa_user
go
CREATE TABLE dbo.LEARNER_INPUT_MATCH
(
    learner_input_match_id     OBJECT_ID     NOT NULL,
    learner_input_id           OBJECT_ID     NOT NULL,
    surname                    long_name     NOT NULL,
    first_names                varchar(30)   NULL,
    alias_ind                  ny_ind        NOT NULL,
    date_of_birth              datetime      NULL,
    gender_code                char(1)       NULL,
    nsn                        numeric(10,0) NULL,
    nzqa_learner_id            OBJECT_ID     NULL,
    is_exact                   bit           NOT NULL,
    is_from_nzqa               bit           NOT NULL,
    local_id                   varchar(10)   NULL,
    ranking                    int           NULL,
    residential_status_code    ny_ind        NOT NULL,
    res_stat_verification_code code_2        NULL,
    name_dob_verification_code code_2        NULL,
    ts                         timestamp     NOT NULL,
    version_id                 numeric(12,0) DEFAULT 0 NOT NULL,
    provider_id                OBJECT_ID     NULL,
    location                   number_2      NULL,
    CONSTRAINT PK_LEARNER_INPUT_MATCH
    PRIMARY KEY NONCLUSTERED (learner_input_match_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.LEARNER_INPUT_MATCH') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.LEARNER_INPUT_MATCH >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.LEARNER_INPUT_MATCH >>>'
go
ALTER TABLE dbo.LEARNER_INPUT_MATCH
    ADD CONSTRAINT FK_LEARNER_INPUT_MATCH_LEARNER
    FOREIGN KEY (nzqa_learner_id)
    REFERENCES dbo.LEARNER (learner_id)
go
ALTER TABLE dbo.LEARNER_INPUT_MATCH
    ADD CONSTRAINT FK_LEARNER_INPUT_MATCH_LEARNE
    FOREIGN KEY (learner_input_id)
    REFERENCES dbo.LEARNER_INPUT (learner_input_id)
go
ALTER TABLE dbo.LEARNER_INPUT_MATCH
    ADD CONSTRAINT FK_LEARNER_INP_MATCH_RES_STAT
    FOREIGN KEY (res_stat_verification_code)
    REFERENCES dbo.RES_STAT_VERIFICATION_CODE (res_stat_verification_code)
go
ALTER TABLE dbo.LEARNER_INPUT_MATCH
    ADD CONSTRAINT FK_LEARNER_INP_MATCH_PROVIDER
    FOREIGN KEY (provider_id,location)
    REFERENCES dbo.PROVIDER (moe_provider_id,location)
go
GRANT REFERENCES ON dbo.LEARNER_INPUT_MATCH TO eqa_user
go
GRANT SELECT ON dbo.LEARNER_INPUT_MATCH TO eqa_user
go
GRANT SELECT ON dbo.LEARNER_INPUT_MATCH TO read_only
go
GRANT SELECT ON dbo.LEARNER_INPUT_MATCH TO rma_users
go
GRANT INSERT ON dbo.LEARNER_INPUT_MATCH TO eqa_user
go
GRANT DELETE ON dbo.LEARNER_INPUT_MATCH TO eqa_user
go
GRANT UPDATE ON dbo.LEARNER_INPUT_MATCH TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.LEARNER_INPUT_MATCH TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.LEARNER_INPUT_MATCH TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.LEARNER_INPUT_MATCH TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.LEARNER_INPUT_MATCH TO eqa_user
go
CREATE TABLE dbo.LEARNER_MAINTENANCE_RESULT
(
    learner_mtce_result_id OBJECT_ID NOT NULL,
    learner_id             OBJECT_ID NOT NULL,
    diary_event_id         OBJECT_ID NULL,
    update_successful_ind  yn        DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    date_processed         datetime  NOT NULL,
    audit_tran_id          OBJECT_ID NOT NULL,
    ts                     timestamp NOT NULL,
    moe_provider_id        OBJECT_ID NULL,
    provider_location      number_2  NULL,
    CONSTRAINT PK_LEARNER_MAINTENANCE_RESULT
    PRIMARY KEY CLUSTERED (learner_mtce_result_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.LEARNER_MAINTENANCE_RESULT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.LEARNER_MAINTENANCE_RESULT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.LEARNER_MAINTENANCE_RESULT >>>'
go
ALTER TABLE dbo.LEARNER_MAINTENANCE_RESULT
    ADD CONSTRAINT FK_LEARNER_MAINT_RES_LEARNER
    FOREIGN KEY (learner_id)
    REFERENCES dbo.LEARNER (learner_id)
go
ALTER TABLE dbo.LEARNER_MAINTENANCE_RESULT
    ADD CONSTRAINT FK_LEARNER_MAINT_RESULT_DIARY
    FOREIGN KEY (diary_event_id)
    REFERENCES dbo.DIARY_EVENT (diary_event_id)
go
ALTER TABLE dbo.LEARNER_MAINTENANCE_RESULT
    ADD CONSTRAINT FK_LEARNER_MAINT_RESULT_PROV
    FOREIGN KEY (moe_provider_id,provider_location)
    REFERENCES dbo.PROVIDER (moe_provider_id,location)
go
GRANT REFERENCES ON dbo.LEARNER_MAINTENANCE_RESULT TO eqa_user
go
GRANT SELECT ON dbo.LEARNER_MAINTENANCE_RESULT TO eqa_user
go
GRANT SELECT ON dbo.LEARNER_MAINTENANCE_RESULT TO read_only
go
GRANT SELECT ON dbo.LEARNER_MAINTENANCE_RESULT TO rma_users
go
GRANT INSERT ON dbo.LEARNER_MAINTENANCE_RESULT TO eqa_user
go
GRANT DELETE ON dbo.LEARNER_MAINTENANCE_RESULT TO eqa_user
go
GRANT UPDATE ON dbo.LEARNER_MAINTENANCE_RESULT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.LEARNER_MAINTENANCE_RESULT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.LEARNER_MAINTENANCE_RESULT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.LEARNER_MAINTENANCE_RESULT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.LEARNER_MAINTENANCE_RESULT TO eqa_user
go
CREATE TABLE dbo.LEARNER_SORT_CODE
(
    learner_id    OBJECT_ID NOT NULL,
    academic_year char(4)   NOT NULL,
    sort_code     char(6)   NOT NULL,
    CONSTRAINT PK_LEARNER_SORT_CODE
    PRIMARY KEY CLUSTERED (learner_id,academic_year)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.LEARNER_SORT_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.LEARNER_SORT_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.LEARNER_SORT_CODE >>>'
go
ALTER TABLE dbo.LEARNER_SORT_CODE
    ADD CONSTRAINT FK_LEARNER_SORT_CODE_LEARNER
    FOREIGN KEY (learner_id)
    REFERENCES dbo.LEARNER (learner_id)
go
ALTER TABLE dbo.LEARNER_SORT_CODE
    ADD CONSTRAINT FK_LEARNER_SORT_CODE_YEAR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
GRANT REFERENCES ON dbo.LEARNER_SORT_CODE TO eqa_user
go
GRANT SELECT ON dbo.LEARNER_SORT_CODE TO eqa_user
go
GRANT SELECT ON dbo.LEARNER_SORT_CODE TO read_only
go
GRANT SELECT ON dbo.LEARNER_SORT_CODE TO rma_users
go
GRANT INSERT ON dbo.LEARNER_SORT_CODE TO eqa_user
go
GRANT DELETE ON dbo.LEARNER_SORT_CODE TO eqa_user
go
GRANT UPDATE ON dbo.LEARNER_SORT_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.LEARNER_SORT_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.LEARNER_SORT_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.LEARNER_SORT_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.LEARNER_SORT_CODE TO eqa_user
go
CREATE TABLE dbo.LEARNER_SORT_CODE_UNALLOC
(
    sort_group_1     tinyint      NOT NULL,
    sort_group_2     tinyint      NOT NULL,
    sort_group_3     tinyint      NOT NULL,
    seq_nbr          numeric(6,0) NULL,
    can_allocate_ind yn_ind       NOT NULL,
    CONSTRAINT PK_LEARNER_SORT_CODE_UNALLOC
    PRIMARY KEY CLUSTERED (sort_group_1,sort_group_2,sort_group_3)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.LEARNER_SORT_CODE_UNALLOC') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.LEARNER_SORT_CODE_UNALLOC >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.LEARNER_SORT_CODE_UNALLOC >>>'
go
GRANT REFERENCES ON dbo.LEARNER_SORT_CODE_UNALLOC TO eqa_user
go
GRANT SELECT ON dbo.LEARNER_SORT_CODE_UNALLOC TO eqa_user
go
GRANT SELECT ON dbo.LEARNER_SORT_CODE_UNALLOC TO read_only
go
GRANT SELECT ON dbo.LEARNER_SORT_CODE_UNALLOC TO rma_users
go
GRANT INSERT ON dbo.LEARNER_SORT_CODE_UNALLOC TO eqa_user
go
GRANT DELETE ON dbo.LEARNER_SORT_CODE_UNALLOC TO eqa_user
go
GRANT UPDATE ON dbo.LEARNER_SORT_CODE_UNALLOC TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.LEARNER_SORT_CODE_UNALLOC TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.LEARNER_SORT_CODE_UNALLOC TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.LEARNER_SORT_CODE_UNALLOC TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.LEARNER_SORT_CODE_UNALLOC TO eqa_user
go
CREATE TABLE dbo.LEARNER_STATISTIC
(
    learner_statistic_id OBJECT_ID    NOT NULL,
    learner_id           OBJECT_ID    NOT NULL,
    academic_year        char(4)      NOT NULL,
    statistic_type_code  char(2)      NOT NULL,
    active_ind           yn           DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    statistic_value      varchar(100) NOT NULL,
    audit_tran_id        OBJECT_ID    NOT NULL,
    ts                   timestamp    NOT NULL,
    CONSTRAINT PK_LEARNER_STATISTIC
    PRIMARY KEY CLUSTERED (learner_statistic_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.LEARNER_STATISTIC') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.LEARNER_STATISTIC >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.LEARNER_STATISTIC >>>'
go
ALTER TABLE dbo.LEARNER_STATISTIC
    ADD CONSTRAINT FK_LEARNER_ID
    FOREIGN KEY (learner_id)
    REFERENCES dbo.LEARNER (learner_id)
go
ALTER TABLE dbo.LEARNER_STATISTIC
    ADD CONSTRAINT FK_LEARN_STAT_ACADEMIC_YEAR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
GRANT REFERENCES ON dbo.LEARNER_STATISTIC TO eqa_user
go
GRANT SELECT ON dbo.LEARNER_STATISTIC TO eqa_user
go
GRANT SELECT ON dbo.LEARNER_STATISTIC TO read_only
go
GRANT SELECT ON dbo.LEARNER_STATISTIC TO rma_users
go
GRANT INSERT ON dbo.LEARNER_STATISTIC TO eqa_user
go
GRANT DELETE ON dbo.LEARNER_STATISTIC TO eqa_user
go
GRANT UPDATE ON dbo.LEARNER_STATISTIC TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.LEARNER_STATISTIC TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.LEARNER_STATISTIC TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.LEARNER_STATISTIC TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.LEARNER_STATISTIC TO eqa_user
go
CREATE TABLE dbo.LEARNER_STATISTIC_TYPE
(
    statistic_type_code      char(2)      NOT NULL,
    statistic_type_code_desc varchar(255) NOT NULL,
    ts                       timestamp    NULL,
    CONSTRAINT PK_LEARNER_STATISTIC_TYPE
    PRIMARY KEY CLUSTERED (statistic_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.LEARNER_STATISTIC_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.LEARNER_STATISTIC_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.LEARNER_STATISTIC_TYPE >>>'
go
ALTER TABLE dbo.LEARNER_STATISTIC
    ADD CONSTRAINT FK_STATISTIC_TYPE
    FOREIGN KEY (statistic_type_code)
    REFERENCES dbo.LEARNER_STATISTIC_TYPE (statistic_type_code)
go
GRANT REFERENCES ON dbo.LEARNER_STATISTIC_TYPE TO eqa_user
go
GRANT SELECT ON dbo.LEARNER_STATISTIC_TYPE TO eqa_user
go
GRANT SELECT ON dbo.LEARNER_STATISTIC_TYPE TO read_only
go
GRANT SELECT ON dbo.LEARNER_STATISTIC_TYPE TO rma_users
go
GRANT INSERT ON dbo.LEARNER_STATISTIC_TYPE TO eqa_user
go
GRANT DELETE ON dbo.LEARNER_STATISTIC_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.LEARNER_STATISTIC_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.LEARNER_STATISTIC_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.LEARNER_STATISTIC_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.LEARNER_STATISTIC_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.LEARNER_STATISTIC_TYPE TO eqa_user
go
CREATE TABLE dbo.LEAVING_CODE
(
    leaving_code      char(1)      NOT NULL,
    ts                timestamp    NULL,
    leaving_code_desc varchar(255) DEFAULT '' NOT NULL,
    CONSTRAINT PK_LEAVING_CODE
    PRIMARY KEY CLUSTERED (leaving_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.LEAVING_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.LEAVING_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.LEAVING_CODE >>>'
go
ALTER TABLE dbo.LEARNER_ENROLMENT
    ADD CONSTRAINT FK_ENROLMENT_LEAVING_CODE
    FOREIGN KEY (leaving_code)
    REFERENCES dbo.LEAVING_CODE (leaving_code)
go
GRANT REFERENCES ON dbo.LEAVING_CODE TO eqa_user
go
GRANT SELECT ON dbo.LEAVING_CODE TO eqa_user
go
GRANT SELECT ON dbo.LEAVING_CODE TO read_only
go
GRANT SELECT ON dbo.LEAVING_CODE TO rma_users
go
GRANT INSERT ON dbo.LEAVING_CODE TO eqa_user
go
GRANT DELETE ON dbo.LEAVING_CODE TO eqa_user
go
GRANT UPDATE ON dbo.LEAVING_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.LEAVING_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.LEAVING_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.LEAVING_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.LEAVING_CODE TO eqa_user
go
CREATE TABLE dbo.LINE_ORIGIN_TYPE
(
    line_origin_type_code code_2      NOT NULL,
    line_origin_type_desc descr_short NOT NULL,
    sortkey               sortkey     NOT NULL,
    CONSTRAINT PK_LINE_ORIGIN_TYPE
    PRIMARY KEY CLUSTERED (line_origin_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.LINE_ORIGIN_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.LINE_ORIGIN_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.LINE_ORIGIN_TYPE >>>'
go
GRANT REFERENCES ON dbo.LINE_ORIGIN_TYPE TO eqa_user
go
GRANT SELECT ON dbo.LINE_ORIGIN_TYPE TO eqa_user
go
GRANT SELECT ON dbo.LINE_ORIGIN_TYPE TO read_only
go
GRANT SELECT ON dbo.LINE_ORIGIN_TYPE TO rma_users
go
GRANT INSERT ON dbo.LINE_ORIGIN_TYPE TO eqa_user
go
GRANT DELETE ON dbo.LINE_ORIGIN_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.LINE_ORIGIN_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.LINE_ORIGIN_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.LINE_ORIGIN_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.LINE_ORIGIN_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.LINE_ORIGIN_TYPE TO eqa_user
go
CREATE TABLE dbo.LINE_SORT_ORDER_CODE
(
    line_sort_order_code code_2      NOT NULL,
    line_sort_order_desc descr_short NULL,
    sortkey              sortkey     NULL,
    CONSTRAINT PK_LINE_SORT_ORDER_CODE
    PRIMARY KEY CLUSTERED (line_sort_order_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.LINE_SORT_ORDER_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.LINE_SORT_ORDER_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.LINE_SORT_ORDER_CODE >>>'
go
GRANT REFERENCES ON dbo.LINE_SORT_ORDER_CODE TO eqa_user
go
GRANT SELECT ON dbo.LINE_SORT_ORDER_CODE TO eqa_user
go
GRANT SELECT ON dbo.LINE_SORT_ORDER_CODE TO read_only
go
GRANT SELECT ON dbo.LINE_SORT_ORDER_CODE TO rma_users
go
GRANT INSERT ON dbo.LINE_SORT_ORDER_CODE TO eqa_user
go
GRANT DELETE ON dbo.LINE_SORT_ORDER_CODE TO eqa_user
go
GRANT UPDATE ON dbo.LINE_SORT_ORDER_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.LINE_SORT_ORDER_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.LINE_SORT_ORDER_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.LINE_SORT_ORDER_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.LINE_SORT_ORDER_CODE TO eqa_user
go
CREATE TABLE dbo.LODGEMENT_DETAIL
(
    lodgement_detail_id          OBJECT_ID     NOT NULL,
    outstanding_fee_lodgement_id OBJECT_ID     NOT NULL,
    enrolment_id                 numeric(12,0) NOT NULL,
    payment_amount               amt           NOT NULL,
    incl_late_fee_amount         amt           NULL,
    audit_tran_id                OBJECT_ID     NOT NULL,
    CONSTRAINT PK_LODGEMENT_DETAIL
    PRIMARY KEY CLUSTERED (lodgement_detail_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.LODGEMENT_DETAIL') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.LODGEMENT_DETAIL >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.LODGEMENT_DETAIL >>>'
go
ALTER TABLE dbo.LODGEMENT_DETAIL
    ADD CONSTRAINT FK_LDGM_DETL_LRNR_ENRL
    FOREIGN KEY (enrolment_id)
    REFERENCES dbo.LEARNER_ENROLMENT (enrolment_id)
go
GRANT REFERENCES ON dbo.LODGEMENT_DETAIL TO eqa_user
go
GRANT SELECT ON dbo.LODGEMENT_DETAIL TO eqa_user
go
GRANT SELECT ON dbo.LODGEMENT_DETAIL TO read_only
go
GRANT SELECT ON dbo.LODGEMENT_DETAIL TO rma_users
go
GRANT INSERT ON dbo.LODGEMENT_DETAIL TO eqa_user
go
GRANT DELETE ON dbo.LODGEMENT_DETAIL TO eqa_user
go
GRANT UPDATE ON dbo.LODGEMENT_DETAIL TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.LODGEMENT_DETAIL TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.LODGEMENT_DETAIL TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.LODGEMENT_DETAIL TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.LODGEMENT_DETAIL TO eqa_user
go
CREATE TABLE dbo.LVL
(
    level_number         number_2    NOT NULL,
    process_text         TEXT_STRING NULL,
    learning_demand_text TEXT_STRING NULL,
    responsibility_text  TEXT_STRING NULL,
    other_text           TEXT_STRING NULL,
    level_code           code_2      NOT NULL,
    active_ind           yn_ind      NOT NULL,
    level_code_desc      descr       NOT NULL,
    star_excluded_ind    yn_ind      NOT NULL,
    bsas_ind             yn_ind      NOT NULL,
    CONSTRAINT PK_LVL
    PRIMARY KEY CLUSTERED (level_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.LVL') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.LVL >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.LVL >>>'
go
GRANT REFERENCES ON dbo.LVL TO eqa_user
go
GRANT SELECT ON dbo.LVL TO eqa_user
go
GRANT SELECT ON dbo.LVL TO read_only
go
GRANT SELECT ON dbo.LVL TO rma_users
go
GRANT INSERT ON dbo.LVL TO eqa_user
go
GRANT DELETE ON dbo.LVL TO eqa_user
go
GRANT UPDATE ON dbo.LVL TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.LVL TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.LVL TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.LVL TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.LVL TO eqa_user
go
CREATE TABLE dbo.MARKER
(
    marker_id                  OBJECT_ID    NOT NULL,
    perorg_role_id             OBJECT_ID    NULL,
    return_type                code_2       NULL,
    te_reo                     smallint     NOT NULL,
    assigned_marker_code       int          NULL,
    oe_country_code            code_2       NULL,
    current_teaching_position  varchar(100) NULL,
    years_experience_nz        numeric(3,1) NULL,
    years_experience_overseas  numeric(3,1) NULL,
    referee_name               varchar(100) NULL,
    referee_position           varchar(100) NULL,
    referee_contact_phone      varchar(15)  NULL,
    teaching_experience        text         NULL     OFF ROW,
    standards_experience       text         NULL     OFF ROW,
    prof_working_relationships text         NULL     OFF ROW,
    relevant_abilities         text         NULL     OFF ROW,
    actual_marker_id           OBJECT_ID    NULL,
    marker_submission_status   char(2)      DEFAULT 'NC' NULL,
    moe_provider_id            OBJECT_ID    NULL,
    audit_tran_id              OBJECT_ID    NOT NULL,
    ts                         timestamp    NOT NULL,
    location                   numeric(2,0) NULL,
    region_code                code_2       NULL,
    marker_subm_status_date    dt           NULL,
    sper_batch_subm_date       dt           NULL,
    hold_results_subm_ind      ny_ind       NOT NULL,
    CONSTRAINT PK_MARKER
    PRIMARY KEY NONCLUSTERED (marker_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MARKER') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MARKER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MARKER >>>'
go
ALTER TABLE dbo.MARKER
    ADD CONSTRAINT FK_MARKER_COUNTRY_CODE
    FOREIGN KEY (oe_country_code)
    REFERENCES dbo.COUNTRY_CODE (country_short_code)
go
ALTER TABLE dbo.MARKER
    ADD CONSTRAINT FK_MARKER_PROVIDER
    FOREIGN KEY (moe_provider_id,location)
    REFERENCES dbo.PROVIDER (moe_provider_id,location)
go
ALTER TABLE dbo.MARKER
    ADD CONSTRAINT FK_MARKER_REGION
    FOREIGN KEY (region_code)
    REFERENCES dbo.REGION (region_code)
go
ALTER TABLE dbo.MARKER
    ADD CONSTRAINT FK_MARKER_RETURN_TYPE
    FOREIGN KEY (return_type)
    REFERENCES dbo.RETURN_TYPE (return_type)
go
ALTER TABLE dbo.MARKER
    ADD CONSTRAINT FK_MARKER_ACTUAL_MARKER
    FOREIGN KEY (actual_marker_id)
    REFERENCES dbo.MARKER (marker_id)
go
GRANT REFERENCES ON dbo.MARKER TO eqa_user
go
GRANT SELECT ON dbo.MARKER TO eqa_user
go
GRANT SELECT ON dbo.MARKER TO read_only
go
GRANT SELECT ON dbo.MARKER TO rma_users
go
GRANT INSERT ON dbo.MARKER TO eqa_user
go
GRANT DELETE ON dbo.MARKER TO eqa_user
go
GRANT UPDATE ON dbo.MARKER TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MARKER TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MARKER TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MARKER TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MARKER TO eqa_user
go
CREATE TABLE dbo.MARKER_ALLOCATION_GROUP
(
    marker_allocation_group_id OBJECT_ID NOT NULL,
    panel_member_id            OBJECT_ID NOT NULL,
    max_allocation             int       NOT NULL,
    audit_tran_id              OBJECT_ID NOT NULL,
    ts                         timestamp NOT NULL,
    marker_panel_ag_id         OBJECT_ID NOT NULL,
    accept_supplementary       yn        DEFAULT 0 NOT NULL,
    CONSTRAINT PK_MARKER_ALLOCATION_GROUP
    PRIMARY KEY NONCLUSTERED (marker_allocation_group_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MARKER_ALLOCATION_GROUP') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MARKER_ALLOCATION_GROUP >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MARKER_ALLOCATION_GROUP >>>'
go
GRANT REFERENCES ON dbo.MARKER_ALLOCATION_GROUP TO eqa_user
go
GRANT SELECT ON dbo.MARKER_ALLOCATION_GROUP TO eqa_user
go
GRANT SELECT ON dbo.MARKER_ALLOCATION_GROUP TO read_only
go
GRANT SELECT ON dbo.MARKER_ALLOCATION_GROUP TO rma_users
go
GRANT INSERT ON dbo.MARKER_ALLOCATION_GROUP TO eqa_user
go
GRANT DELETE ON dbo.MARKER_ALLOCATION_GROUP TO eqa_user
go
GRANT UPDATE ON dbo.MARKER_ALLOCATION_GROUP TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MARKER_ALLOCATION_GROUP TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MARKER_ALLOCATION_GROUP TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MARKER_ALLOCATION_GROUP TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MARKER_ALLOCATION_GROUP TO eqa_user
go
CREATE TABLE dbo.MARKER_CATEGORY
(
    marker_category       char(2)      NOT NULL,
    marker_category_desc  varchar(255) NOT NULL,
    allocate_to           smallint     NOT NULL,
    max_allocation_factor numeric(4,3) DEFAULT 1.0 NOT NULL,
    CONSTRAINT PK_MARKER_CATEGORY
    PRIMARY KEY NONCLUSTERED (marker_category)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MARKER_CATEGORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MARKER_CATEGORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MARKER_CATEGORY >>>'
go
GRANT REFERENCES ON dbo.MARKER_CATEGORY TO eqa_user
go
GRANT SELECT ON dbo.MARKER_CATEGORY TO eqa_user
go
GRANT SELECT ON dbo.MARKER_CATEGORY TO read_only
go
GRANT SELECT ON dbo.MARKER_CATEGORY TO rma_users
go
GRANT INSERT ON dbo.MARKER_CATEGORY TO eqa_user
go
GRANT DELETE ON dbo.MARKER_CATEGORY TO eqa_user
go
GRANT UPDATE ON dbo.MARKER_CATEGORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MARKER_CATEGORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MARKER_CATEGORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MARKER_CATEGORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MARKER_CATEGORY TO eqa_user
go
CREATE TABLE dbo.MARKER_CODE
(
    academic_year        char(4) NOT NULL,
    assigned_marker_code int     NOT NULL CONSTRAINT MARKER_COD_assign_233413220
    CHECK (assigned_marker_code between 1000 and 9999),
    CONSTRAINT PK_MARKER_CODE
    PRIMARY KEY CLUSTERED (academic_year,assigned_marker_code)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.MARKER_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MARKER_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MARKER_CODE >>>'
go
ALTER TABLE dbo.MARKER_CODE
    ADD CONSTRAINT FK_MARKER_CODE_ACADEMIC_YEAR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
GRANT REFERENCES ON dbo.MARKER_CODE TO eqa_user
go
GRANT SELECT ON dbo.MARKER_CODE TO eqa_user
go
GRANT SELECT ON dbo.MARKER_CODE TO read_only
go
GRANT SELECT ON dbo.MARKER_CODE TO rma_users
go
GRANT INSERT ON dbo.MARKER_CODE TO eqa_user
go
GRANT DELETE ON dbo.MARKER_CODE TO eqa_user
go
GRANT UPDATE ON dbo.MARKER_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MARKER_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MARKER_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MARKER_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MARKER_CODE TO eqa_user
go
CREATE TABLE dbo.MARKER_CODE_SUFFIX
(
    academic_year      char(4)      NOT NULL,
    marker_code        int          NOT NULL,
    std_number         varchar(8)   NOT NULL,
    std_version_number numeric(8,0) NOT NULL,
    marker_suffix      char(1)      NOT NULL,
    CONSTRAINT PK_MARKER_CODE_SUFFIX
    PRIMARY KEY CLUSTERED (academic_year,marker_code,std_number,std_version_number,marker_suffix)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MARKER_CODE_SUFFIX') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MARKER_CODE_SUFFIX >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MARKER_CODE_SUFFIX >>>'
go
ALTER TABLE dbo.MARKER_CODE_SUFFIX
    ADD CONSTRAINT FK_MARKER_CODE_SUFFIX_YEAR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.MARKER_CODE_SUFFIX
    ADD CONSTRAINT FK_MARKER_CODE_SUFFIX_STD_VER
    FOREIGN KEY (std_number,std_version_number)
    REFERENCES dbo.STD_VERSION (std_number,std_version_number)
go
GRANT REFERENCES ON dbo.MARKER_CODE_SUFFIX TO eqa_user
go
GRANT SELECT ON dbo.MARKER_CODE_SUFFIX TO eqa_user
go
GRANT SELECT ON dbo.MARKER_CODE_SUFFIX TO read_only
go
GRANT SELECT ON dbo.MARKER_CODE_SUFFIX TO rma_users
go
GRANT INSERT ON dbo.MARKER_CODE_SUFFIX TO eqa_user
go
GRANT DELETE ON dbo.MARKER_CODE_SUFFIX TO eqa_user
go
GRANT UPDATE ON dbo.MARKER_CODE_SUFFIX TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MARKER_CODE_SUFFIX TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MARKER_CODE_SUFFIX TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MARKER_CODE_SUFFIX TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MARKER_CODE_SUFFIX TO eqa_user
go
CREATE TABLE dbo.MARKER_DETAIL_SNAPSHOT
(
    academic_year        char(4)   NOT NULL,
    address_type         code_2    NOT NULL,
    assigned_marker_code int       NOT NULL,
    run_date_time        dt        NOT NULL,
    difference_reason    int       NOT NULL,
    perorg_role_id       OBJECT_ID NULL,
    perorg_id            OBJECT_ID NULL,
    marker_id            OBJECT_ID NULL,
    actual_marker_id     OBJECT_ID NULL,
    first_name           long_name NULL,
    surname              long_name NULL,
    addr_1               addr_line NULL,
    addr_2               addr_line NULL,
    addr_3               addr_line NULL,
    addr_4               addr_line NULL,
    previous_run_date    dt        NULL,
    CONSTRAINT PK_MARKER_DETAIL_SNAPSHOT
    PRIMARY KEY CLUSTERED (academic_year,address_type,assigned_marker_code,run_date_time)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MARKER_DETAIL_SNAPSHOT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MARKER_DETAIL_SNAPSHOT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MARKER_DETAIL_SNAPSHOT >>>'
go
GRANT REFERENCES ON dbo.MARKER_DETAIL_SNAPSHOT TO eqa_user
go
GRANT SELECT ON dbo.MARKER_DETAIL_SNAPSHOT TO eqa_user
go
GRANT SELECT ON dbo.MARKER_DETAIL_SNAPSHOT TO read_only
go
GRANT SELECT ON dbo.MARKER_DETAIL_SNAPSHOT TO rma_users
go
GRANT INSERT ON dbo.MARKER_DETAIL_SNAPSHOT TO eqa_user
go
GRANT DELETE ON dbo.MARKER_DETAIL_SNAPSHOT TO eqa_user
go
GRANT UPDATE ON dbo.MARKER_DETAIL_SNAPSHOT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MARKER_DETAIL_SNAPSHOT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MARKER_DETAIL_SNAPSHOT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MARKER_DETAIL_SNAPSHOT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MARKER_DETAIL_SNAPSHOT TO eqa_user
go
CREATE TABLE dbo.MARKER_PANEL
(
    panel_id                   OBJECT_ID   NOT NULL,
    panel_name                 descr       NOT NULL,
    hub_id                     char(3)     NULL,
    hub_sub_id                 char(3)     NULL,
    academic_year              char(4)     NOT NULL,
    ts                         timestamp   NOT NULL,
    audit_tran_id              OBJECT_ID   NOT NULL,
    region_code                code_2      NULL,
    panel_location_description varchar(30) NULL,
    CONSTRAINT PK_MARKER_PANEL
    PRIMARY KEY CLUSTERED (panel_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MARKER_PANEL') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MARKER_PANEL >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MARKER_PANEL >>>'
go
ALTER TABLE dbo.MARKER_PANEL
    ADD CONSTRAINT FK_MARKER_PANEL_YEAR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.MARKER_PANEL
    ADD CONSTRAINT FK_MARKER_PANEL_REGION
    FOREIGN KEY (region_code)
    REFERENCES dbo.REGION (region_code)
go
GRANT REFERENCES ON dbo.MARKER_PANEL TO eqa_user
go
GRANT SELECT ON dbo.MARKER_PANEL TO eqa_user
go
GRANT SELECT ON dbo.MARKER_PANEL TO read_only
go
GRANT SELECT ON dbo.MARKER_PANEL TO rma_users
go
GRANT INSERT ON dbo.MARKER_PANEL TO eqa_user
go
GRANT DELETE ON dbo.MARKER_PANEL TO eqa_user
go
GRANT UPDATE ON dbo.MARKER_PANEL TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MARKER_PANEL TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MARKER_PANEL TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MARKER_PANEL TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MARKER_PANEL TO eqa_user
go
CREATE TABLE dbo.MARKER_PANEL_ALLOCATION_GRP
(
    marker_panel_ag_id  OBJECT_ID NOT NULL,
    panel_id            OBJECT_ID NOT NULL,
    allocation_group_id OBJECT_ID NOT NULL,
    active_ind          yn        DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    audit_tran_id       OBJECT_ID NOT NULL,
    ts                  timestamp NOT NULL,
    CONSTRAINT PK_MARKER_PANEL_ALLOCATION_GRP
    PRIMARY KEY CLUSTERED (marker_panel_ag_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MARKER_PANEL_ALLOCATION_GRP') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MARKER_PANEL_ALLOCATION_GRP >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MARKER_PANEL_ALLOCATION_GRP >>>'
go
ALTER TABLE dbo.MARKER_PANEL_ALLOCATION_GRP
    ADD CONSTRAINT FK_MARKER_PANEL
    FOREIGN KEY (panel_id)
    REFERENCES dbo.MARKER_PANEL (panel_id)
go
ALTER TABLE dbo.MARKER_PANEL_ALLOCATION_GRP
    ADD CONSTRAINT FK_MARKER_P_ALL_GRP_ALL_GRP
    FOREIGN KEY (allocation_group_id)
    REFERENCES dbo.ALLOCATION_GROUP (allocation_group_id)
go
ALTER TABLE dbo.MARKER_ALLOCATION_GROUP
    ADD CONSTRAINT FK_MARKER_AG_MARKER_PANEL_AG
    FOREIGN KEY (marker_panel_ag_id)
    REFERENCES dbo.MARKER_PANEL_ALLOCATION_GRP (marker_panel_ag_id)
go
GRANT REFERENCES ON dbo.MARKER_PANEL_ALLOCATION_GRP TO eqa_user
go
GRANT SELECT ON dbo.MARKER_PANEL_ALLOCATION_GRP TO eqa_user
go
GRANT SELECT ON dbo.MARKER_PANEL_ALLOCATION_GRP TO read_only
go
GRANT SELECT ON dbo.MARKER_PANEL_ALLOCATION_GRP TO rma_users
go
GRANT INSERT ON dbo.MARKER_PANEL_ALLOCATION_GRP TO eqa_user
go
GRANT DELETE ON dbo.MARKER_PANEL_ALLOCATION_GRP TO eqa_user
go
GRANT UPDATE ON dbo.MARKER_PANEL_ALLOCATION_GRP TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MARKER_PANEL_ALLOCATION_GRP TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MARKER_PANEL_ALLOCATION_GRP TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MARKER_PANEL_ALLOCATION_GRP TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MARKER_PANEL_ALLOCATION_GRP TO eqa_user
go
CREATE TABLE dbo.MARKER_PANEL_MEMBER
(
    panel_member_id OBJECT_ID     NOT NULL,
    marker_id       numeric(12,0) NOT NULL,
    marker_category code_2        NOT NULL,
    panel_id        numeric(12,0) NOT NULL,
    mpm_status      code_2        NOT NULL,
    audit_tran_id   OBJECT_ID     NOT NULL,
    ts              timestamp     NOT NULL,
    mpmsr_code      code_2        DEFAULT 'NR' NOT NULL,
    CONSTRAINT PK_MARKER_PANEL_MEMBER
    PRIMARY KEY CLUSTERED (panel_member_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MARKER_PANEL_MEMBER') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MARKER_PANEL_MEMBER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MARKER_PANEL_MEMBER >>>'
go
ALTER TABLE dbo.MARKER_PANEL_MEMBER
    ADD CONSTRAINT FK_MARKER_P_MEMBER_MARKER
    FOREIGN KEY (marker_id)
    REFERENCES dbo.MARKER (marker_id)
go
ALTER TABLE dbo.MARKER_PANEL_MEMBER
    ADD CONSTRAINT FK_MARKER_P_MEMBER_MARKER_C
    FOREIGN KEY (marker_category)
    REFERENCES dbo.MARKER_CATEGORY (marker_category)
go
ALTER TABLE dbo.MARKER_PANEL_MEMBER
    ADD CONSTRAINT FK_MARKER_PANEL_MEMB_MP
    FOREIGN KEY (panel_id)
    REFERENCES dbo.MARKER_PANEL (panel_id)
go
ALTER TABLE dbo.MARKER_ALLOCATION_GROUP
    ADD CONSTRAINT FK_MARKER_ALLOC_GRP_MPM
    FOREIGN KEY (panel_member_id)
    REFERENCES dbo.MARKER_PANEL_MEMBER (panel_member_id)
go
GRANT REFERENCES ON dbo.MARKER_PANEL_MEMBER TO eqa_user
go
GRANT SELECT ON dbo.MARKER_PANEL_MEMBER TO eqa_user
go
GRANT SELECT ON dbo.MARKER_PANEL_MEMBER TO read_only
go
GRANT SELECT ON dbo.MARKER_PANEL_MEMBER TO rma_users
go
GRANT INSERT ON dbo.MARKER_PANEL_MEMBER TO eqa_user
go
GRANT DELETE ON dbo.MARKER_PANEL_MEMBER TO eqa_user
go
GRANT UPDATE ON dbo.MARKER_PANEL_MEMBER TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MARKER_PANEL_MEMBER TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MARKER_PANEL_MEMBER TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MARKER_PANEL_MEMBER TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MARKER_PANEL_MEMBER TO eqa_user
go
CREATE TABLE dbo.MARKER_PANEL_MEMBER_STATUS
(
    mpm_status       code_2 NOT NULL,
    mpm_status_descr descr  NOT NULL,
    allocate_to      yn     DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    CONSTRAINT PK_MARKER_PANEL_MEMBER_STATUS
    PRIMARY KEY CLUSTERED (mpm_status)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MARKER_PANEL_MEMBER_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MARKER_PANEL_MEMBER_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MARKER_PANEL_MEMBER_STATUS >>>'
go
ALTER TABLE dbo.MARKER_PANEL_MEMBER
    ADD CONSTRAINT FK_MARKER_P_MEMBER_STATUS
    FOREIGN KEY (mpm_status)
    REFERENCES dbo.MARKER_PANEL_MEMBER_STATUS (mpm_status)
go
GRANT REFERENCES ON dbo.MARKER_PANEL_MEMBER_STATUS TO eqa_user
go
GRANT SELECT ON dbo.MARKER_PANEL_MEMBER_STATUS TO eqa_user
go
GRANT SELECT ON dbo.MARKER_PANEL_MEMBER_STATUS TO read_only
go
GRANT SELECT ON dbo.MARKER_PANEL_MEMBER_STATUS TO rma_users
go
GRANT INSERT ON dbo.MARKER_PANEL_MEMBER_STATUS TO eqa_user
go
GRANT DELETE ON dbo.MARKER_PANEL_MEMBER_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.MARKER_PANEL_MEMBER_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MARKER_PANEL_MEMBER_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MARKER_PANEL_MEMBER_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MARKER_PANEL_MEMBER_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MARKER_PANEL_MEMBER_STATUS TO eqa_user
go
CREATE TABLE dbo.MARKER_PANEL_MEMBER_ST_REASON
(
    mpmsr_code code_2       NOT NULL,
    mpmsr_desc varchar(255) NOT NULL,
    CONSTRAINT PK_MARKER_PANEL_MEMBER_ST_REAS
    PRIMARY KEY CLUSTERED (mpmsr_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MARKER_PANEL_MEMBER_ST_REASON') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MARKER_PANEL_MEMBER_ST_REASON >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MARKER_PANEL_MEMBER_ST_REASON >>>'
go
ALTER TABLE dbo.MARKER_PANEL_MEMBER
    ADD CONSTRAINT FK_MARKER_P_MARKER_REASON
    FOREIGN KEY (mpmsr_code)
    REFERENCES dbo.MARKER_PANEL_MEMBER_ST_REASON (mpmsr_code)
go
GRANT REFERENCES ON dbo.MARKER_PANEL_MEMBER_ST_REASON TO eqa_user
go
GRANT SELECT ON dbo.MARKER_PANEL_MEMBER_ST_REASON TO eqa_user
go
GRANT SELECT ON dbo.MARKER_PANEL_MEMBER_ST_REASON TO read_only
go
GRANT SELECT ON dbo.MARKER_PANEL_MEMBER_ST_REASON TO rma_users
go
GRANT INSERT ON dbo.MARKER_PANEL_MEMBER_ST_REASON TO eqa_user
go
GRANT DELETE ON dbo.MARKER_PANEL_MEMBER_ST_REASON TO eqa_user
go
GRANT UPDATE ON dbo.MARKER_PANEL_MEMBER_ST_REASON TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MARKER_PANEL_MEMBER_ST_REASON TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MARKER_PANEL_MEMBER_ST_REASON TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MARKER_PANEL_MEMBER_ST_REASON TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MARKER_PANEL_MEMBER_ST_REASON TO eqa_user
go
CREATE TABLE dbo.MARKER_PANEL_MEMBER_ST_R_COMBO
(
    mpmsr_code code_2 NOT NULL,
    mpm_status code_2 NOT NULL,
    CONSTRAINT PK_MARKER_PANEL_M_ST_R_COMBO
    PRIMARY KEY CLUSTERED (mpmsr_code,mpm_status)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.MARKER_PANEL_MEMBER_ST_R_COMBO') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MARKER_PANEL_MEMBER_ST_R_COMBO >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MARKER_PANEL_MEMBER_ST_R_COMBO >>>'
go
ALTER TABLE dbo.MARKER_PANEL_MEMBER_ST_R_COMBO
    ADD CONSTRAINT FK_MARKER_PANEL_MEMBER_ST_S
    FOREIGN KEY (mpm_status)
    REFERENCES dbo.MARKER_PANEL_MEMBER_STATUS (mpm_status)
go
ALTER TABLE dbo.MARKER_PANEL_MEMBER_ST_R_COMBO
    ADD CONSTRAINT FK_MARKER_PANEL_MEMBER_ST_R
    FOREIGN KEY (mpmsr_code)
    REFERENCES dbo.MARKER_PANEL_MEMBER_ST_REASON (mpmsr_code)
go
GRANT REFERENCES ON dbo.MARKER_PANEL_MEMBER_ST_R_COMBO TO eqa_user
go
GRANT SELECT ON dbo.MARKER_PANEL_MEMBER_ST_R_COMBO TO eqa_user
go
GRANT SELECT ON dbo.MARKER_PANEL_MEMBER_ST_R_COMBO TO read_only
go
GRANT SELECT ON dbo.MARKER_PANEL_MEMBER_ST_R_COMBO TO rma_users
go
GRANT INSERT ON dbo.MARKER_PANEL_MEMBER_ST_R_COMBO TO eqa_user
go
GRANT DELETE ON dbo.MARKER_PANEL_MEMBER_ST_R_COMBO TO eqa_user
go
GRANT UPDATE ON dbo.MARKER_PANEL_MEMBER_ST_R_COMBO TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MARKER_PANEL_MEMBER_ST_R_COMBO TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MARKER_PANEL_MEMBER_ST_R_COMBO TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MARKER_PANEL_MEMBER_ST_R_COMBO TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MARKER_PANEL_MEMBER_ST_R_COMBO TO eqa_user
go
CREATE TABLE dbo.MARKER_STD_CONTEXT_MAP
(
    marker_id          OBJECT_ID NOT NULL,
    std_context_map_id OBJECT_ID NOT NULL,
    audit_tran_id      OBJECT_ID NOT NULL,
    ts                 timestamp NOT NULL,
    CONSTRAINT PK_MARKER_STD_CONTEXT_MAP
    PRIMARY KEY CLUSTERED (marker_id,std_context_map_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MARKER_STD_CONTEXT_MAP') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MARKER_STD_CONTEXT_MAP >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MARKER_STD_CONTEXT_MAP >>>'
go
ALTER TABLE dbo.MARKER_STD_CONTEXT_MAP
    ADD CONSTRAINT FK_MARKER_STD_CONTEXT_MAP_MKR
    FOREIGN KEY (marker_id)
    REFERENCES dbo.MARKER (marker_id)
go
ALTER TABLE dbo.MARKER_STD_CONTEXT_MAP
    ADD CONSTRAINT FK_STD_STD_CONTEXT_MAP
    FOREIGN KEY (std_context_map_id)
    REFERENCES dbo.STD_CONTEXT_MAP (std_context_map_id)
go
GRANT REFERENCES ON dbo.MARKER_STD_CONTEXT_MAP TO eqa_user
go
GRANT SELECT ON dbo.MARKER_STD_CONTEXT_MAP TO eqa_user
go
GRANT SELECT ON dbo.MARKER_STD_CONTEXT_MAP TO read_only
go
GRANT SELECT ON dbo.MARKER_STD_CONTEXT_MAP TO rma_users
go
GRANT INSERT ON dbo.MARKER_STD_CONTEXT_MAP TO eqa_user
go
GRANT DELETE ON dbo.MARKER_STD_CONTEXT_MAP TO eqa_user
go
GRANT UPDATE ON dbo.MARKER_STD_CONTEXT_MAP TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MARKER_STD_CONTEXT_MAP TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MARKER_STD_CONTEXT_MAP TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MARKER_STD_CONTEXT_MAP TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MARKER_STD_CONTEXT_MAP TO eqa_user
go
CREATE TABLE dbo.MARKER_SUBMISSION_STATUS
(
    marker_submission_status code_2       NOT NULL,
    marker_submission_desc   varchar(100) NOT NULL,
    CONSTRAINT PK_MARKER_SUBMISSION_STATUS
    PRIMARY KEY CLUSTERED (marker_submission_status)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MARKER_SUBMISSION_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MARKER_SUBMISSION_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MARKER_SUBMISSION_STATUS >>>'
go
ALTER TABLE dbo.MARKER
    ADD CONSTRAINT FK_MARKER_MARKER_SUB_STATUS
    FOREIGN KEY (marker_submission_status)
    REFERENCES dbo.MARKER_SUBMISSION_STATUS (marker_submission_status)
go
GRANT REFERENCES ON dbo.MARKER_SUBMISSION_STATUS TO eqa_user
go
GRANT SELECT ON dbo.MARKER_SUBMISSION_STATUS TO eqa_user
go
GRANT SELECT ON dbo.MARKER_SUBMISSION_STATUS TO read_only
go
GRANT SELECT ON dbo.MARKER_SUBMISSION_STATUS TO rma_users
go
GRANT INSERT ON dbo.MARKER_SUBMISSION_STATUS TO eqa_user
go
GRANT DELETE ON dbo.MARKER_SUBMISSION_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.MARKER_SUBMISSION_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MARKER_SUBMISSION_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MARKER_SUBMISSION_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MARKER_SUBMISSION_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MARKER_SUBMISSION_STATUS TO eqa_user
go
CREATE TABLE dbo.MARKER_TRANSFER_HISTORY
(
    from_marker_id     numeric(12,0) NOT NULL,
    to_marker_id       numeric(12,0) NOT NULL,
    transferred_date   datetime      NOT NULL,
    audit_tran_id      numeric(12,0) NOT NULL,
    ts                 timestamp     NOT NULL,
    original_marker_id numeric(12,0) NULL,
    CONSTRAINT PK_MARKER_TRANSFER_HISTORY
    PRIMARY KEY CLUSTERED (from_marker_id,to_marker_id,transferred_date)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MARKER_TRANSFER_HISTORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MARKER_TRANSFER_HISTORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MARKER_TRANSFER_HISTORY >>>'
go
ALTER TABLE dbo.MARKER_TRANSFER_HISTORY
    ADD CONSTRAINT FK_TO_MARKER_REF
    FOREIGN KEY (to_marker_id)
    REFERENCES dbo.MARKER (marker_id)
go
ALTER TABLE dbo.MARKER_TRANSFER_HISTORY
    ADD CONSTRAINT FK_FROM_MARKER_REF
    FOREIGN KEY (from_marker_id)
    REFERENCES dbo.MARKER (marker_id)
go
ALTER TABLE dbo.MARKER_TRANSFER_HISTORY
    ADD CONSTRAINT FK_MARKER_TRANS_HIST_ORIG_MKR
    FOREIGN KEY (original_marker_id)
    REFERENCES dbo.MARKER (marker_id)
go
GRANT REFERENCES ON dbo.MARKER_TRANSFER_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.MARKER_TRANSFER_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.MARKER_TRANSFER_HISTORY TO read_only
go
GRANT SELECT ON dbo.MARKER_TRANSFER_HISTORY TO rma_users
go
GRANT INSERT ON dbo.MARKER_TRANSFER_HISTORY TO eqa_user
go
GRANT DELETE ON dbo.MARKER_TRANSFER_HISTORY TO eqa_user
go
GRANT UPDATE ON dbo.MARKER_TRANSFER_HISTORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MARKER_TRANSFER_HISTORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MARKER_TRANSFER_HISTORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MARKER_TRANSFER_HISTORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MARKER_TRANSFER_HISTORY TO eqa_user
go
CREATE TABLE dbo.MARKING_SCHEME_TYPE
(
    marking_scheme_type_code code_2  NOT NULL,
    marking_scheme_type_desc descr   NOT NULL,
    active_ind               yn_ind  NOT NULL,
    sortkey                  sortkey NOT NULL,
    CONSTRAINT PK_MARKING_SCHEME_TYPE
    PRIMARY KEY CLUSTERED (marking_scheme_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MARKING_SCHEME_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MARKING_SCHEME_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MARKING_SCHEME_TYPE >>>'
go
GRANT REFERENCES ON dbo.MARKING_SCHEME_TYPE TO eqa_user
go
GRANT SELECT ON dbo.MARKING_SCHEME_TYPE TO eqa_user
go
GRANT SELECT ON dbo.MARKING_SCHEME_TYPE TO read_only
go
GRANT SELECT ON dbo.MARKING_SCHEME_TYPE TO rma_users
go
GRANT INSERT ON dbo.MARKING_SCHEME_TYPE TO eqa_user
go
GRANT DELETE ON dbo.MARKING_SCHEME_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.MARKING_SCHEME_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MARKING_SCHEME_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MARKING_SCHEME_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MARKING_SCHEME_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MARKING_SCHEME_TYPE TO eqa_user
go
CREATE TABLE dbo.MARK_INPUT
(
    mark_input_id            OBJECT_ID    NOT NULL,
    batch_input_id           OBJECT_ID    NOT NULL,
    page_number              int          NULL,
    std_number               varchar(8)   NULL,
    marker_code              int          NULL,
    new_marker_code          int          NULL,
    marks                    varchar(100) NULL,
    provider_id              OBJECT_ID    NULL,
    serial_number            int          NULL,
    version_id               OBJECT_ID    NOT NULL,
    is_processed             yn           DEFAULT 0 NOT NULL,
    ts                       timestamp    NULL,
    entry_id                 OBJECT_ID    NULL,
    line_number              int          NULL,
    nsn                      OBJECT_ID    NULL,
    study_school             OBJECT_ID    NULL,
    exam_centre              OBJECT_ID    NULL,
    date_completed           datetime     NULL,
    result_component_link_id OBJECT_ID    NULL,
    CONSTRAINT PK_MARK_INPUT
    PRIMARY KEY NONCLUSTERED (mark_input_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MARK_INPUT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MARK_INPUT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MARK_INPUT >>>'
go
ALTER TABLE dbo.MARK_INPUT
    ADD CONSTRAINT FK_MARK_INPUT_BATCH_INPUT
    FOREIGN KEY (batch_input_id)
    REFERENCES dbo.BATCH_INPUT (batch_input_id)
go
ALTER TABLE dbo.INPUT_BATCH_ERROR
    ADD CONSTRAINT FK_INPUT_BATCH_ERROR_MARK_INP
    FOREIGN KEY (mark_input_id)
    REFERENCES dbo.MARK_INPUT (mark_input_id)
go
GRANT REFERENCES ON dbo.MARK_INPUT TO eqa_user
go
GRANT SELECT ON dbo.MARK_INPUT TO eqa_user
go
GRANT SELECT ON dbo.MARK_INPUT TO read_only
go
GRANT SELECT ON dbo.MARK_INPUT TO rma_users
go
GRANT INSERT ON dbo.MARK_INPUT TO eqa_user
go
GRANT DELETE ON dbo.MARK_INPUT TO eqa_user
go
GRANT UPDATE ON dbo.MARK_INPUT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MARK_INPUT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MARK_INPUT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MARK_INPUT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MARK_INPUT TO eqa_user
go
CREATE TABLE dbo.MATCHING_RESULT_CODE
(
    matching_result_code OBJECT_ID NOT NULL,
    matching_result_desc descr     NOT NULL,
    ts                   timestamp NULL,
    CONSTRAINT PK_MATCHING_RESULT_CODE
    PRIMARY KEY CLUSTERED (matching_result_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MATCHING_RESULT_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MATCHING_RESULT_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MATCHING_RESULT_CODE >>>'
go
ALTER TABLE dbo.LEARNER_INPUT
    ADD CONSTRAINT FK_LEARNER_INPUT_MATCHING_RES
    FOREIGN KEY (matching_result_code)
    REFERENCES dbo.MATCHING_RESULT_CODE (matching_result_code)
go
GRANT REFERENCES ON dbo.MATCHING_RESULT_CODE TO eqa_user
go
GRANT SELECT ON dbo.MATCHING_RESULT_CODE TO eqa_user
go
GRANT SELECT ON dbo.MATCHING_RESULT_CODE TO read_only
go
GRANT SELECT ON dbo.MATCHING_RESULT_CODE TO rma_users
go
GRANT INSERT ON dbo.MATCHING_RESULT_CODE TO eqa_user
go
GRANT DELETE ON dbo.MATCHING_RESULT_CODE TO eqa_user
go
GRANT UPDATE ON dbo.MATCHING_RESULT_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MATCHING_RESULT_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MATCHING_RESULT_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MATCHING_RESULT_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MATCHING_RESULT_CODE TO eqa_user
go
CREATE TABLE dbo.MEMO_OF_AGREEMENT
(
    memo_of_agreement_id OBJECT_ID    NOT NULL,
    academic_year        char(4)      NOT NULL,
    moe_provider_id      OBJECT_ID    NOT NULL,
    location             number_2     NOT NULL,
    agreed_ind           ny_ind       NOT NULL,
    person_name          name         NOT NULL,
    position_title       varchar(100) NOT NULL,
    agreed_date          dt           NOT NULL,
    audit_tran_id        OBJECT_ID    NOT NULL,
    CONSTRAINT PK_MEMO_OF_AGREEMENT
    PRIMARY KEY CLUSTERED (memo_of_agreement_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MEMO_OF_AGREEMENT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MEMO_OF_AGREEMENT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MEMO_OF_AGREEMENT >>>'
go
ALTER TABLE dbo.MEMO_OF_AGREEMENT
    ADD CONSTRAINT FK_MEMO_OF_AGREEMENT_PROVIDER
    FOREIGN KEY (moe_provider_id,location)
    REFERENCES dbo.PROVIDER (moe_provider_id,location)
go
ALTER TABLE dbo.MEMO_OF_AGREEMENT
    ADD CONSTRAINT FK_MEMO_OF_AGREEMENT_ACA_YEAR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
GRANT REFERENCES ON dbo.MEMO_OF_AGREEMENT TO eqa_user
go
GRANT SELECT ON dbo.MEMO_OF_AGREEMENT TO eqa_user
go
GRANT SELECT ON dbo.MEMO_OF_AGREEMENT TO read_only
go
GRANT SELECT ON dbo.MEMO_OF_AGREEMENT TO rma_users
go
GRANT INSERT ON dbo.MEMO_OF_AGREEMENT TO eqa_user
go
GRANT DELETE ON dbo.MEMO_OF_AGREEMENT TO eqa_user
go
GRANT UPDATE ON dbo.MEMO_OF_AGREEMENT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MEMO_OF_AGREEMENT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MEMO_OF_AGREEMENT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MEMO_OF_AGREEMENT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MEMO_OF_AGREEMENT TO eqa_user
go
CREATE TABLE dbo.MERGE_REQUEST
(
    request_id           OBJECT_ID NOT NULL,
    merge_request_number OBJECT_ID NOT NULL,
    master_learner_id    OBJECT_ID NOT NULL,
    slave_learner_id     OBJECT_ID NOT NULL,
    nsi_instruction_code code_2    NULL,
    request_date         datetime  NOT NULL,
    request_by           usr       NOT NULL,
    use_slave_address    yn        DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    audit_tran_id        OBJECT_ID NOT NULL,
    ts                   timestamp NOT NULL,
    CONSTRAINT PK_MERGE_REQUEST
    PRIMARY KEY CLUSTERED (request_id),
    CONSTRAINT AK_MERGE_REQUEST
    UNIQUE NONCLUSTERED (merge_request_number)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MERGE_REQUEST') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MERGE_REQUEST >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MERGE_REQUEST >>>'
go
ALTER TABLE dbo.MERGE_REQUEST
    ADD CONSTRAINT FK_MERGE_REQUEST_MSTER_LEARNER
    FOREIGN KEY (master_learner_id)
    REFERENCES dbo.LEARNER (learner_id)
go
ALTER TABLE dbo.MERGE_REQUEST
    ADD CONSTRAINT FK_MERGE_REQUEST_SLAVE_LEARNER
    FOREIGN KEY (slave_learner_id)
    REFERENCES dbo.LEARNER (learner_id)
go
ALTER TABLE dbo.IWI
    ADD CONSTRAINT FK_IWI_MERGE_REQUEST
    FOREIGN KEY (merge_request_number)
    REFERENCES dbo.MERGE_REQUEST (merge_request_number)
go
ALTER TABLE dbo.LEARNER
    ADD CONSTRAINT FK_LEARNER_MERGE_REQUEST2
    FOREIGN KEY (merge_request_number)
    REFERENCES dbo.MERGE_REQUEST (merge_request_number)
go
ALTER TABLE dbo.LEARNER_ENROLMENT
    ADD CONSTRAINT FK_LEARNER_ENROLMENT_MERGE_REQ
    FOREIGN KEY (merge_request_number)
    REFERENCES dbo.MERGE_REQUEST (merge_request_number)
go
GRANT REFERENCES ON dbo.MERGE_REQUEST TO eqa_user
go
GRANT SELECT ON dbo.MERGE_REQUEST TO eqa_user
go
GRANT SELECT ON dbo.MERGE_REQUEST TO read_only
go
GRANT SELECT ON dbo.MERGE_REQUEST TO rma_users
go
GRANT INSERT ON dbo.MERGE_REQUEST TO eqa_user
go
GRANT DELETE ON dbo.MERGE_REQUEST TO eqa_user
go
GRANT UPDATE ON dbo.MERGE_REQUEST TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MERGE_REQUEST TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MERGE_REQUEST TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MERGE_REQUEST TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MERGE_REQUEST TO eqa_user
go
CREATE TABLE dbo.MERGE_REQUEST_STATUS_CODE
(
    merge_request_status_code code_2 NOT NULL,
    merge_request_status_desc descr  NOT NULL,
    sortkey                   int    DEFAULT 0 NOT NULL,
    CONSTRAINT PK_MERGE_REQUEST_STATUS_CODE
    PRIMARY KEY CLUSTERED (merge_request_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MERGE_REQUEST_STATUS_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MERGE_REQUEST_STATUS_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MERGE_REQUEST_STATUS_CODE >>>'
go
GRANT REFERENCES ON dbo.MERGE_REQUEST_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.MERGE_REQUEST_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.MERGE_REQUEST_STATUS_CODE TO read_only
go
GRANT SELECT ON dbo.MERGE_REQUEST_STATUS_CODE TO rma_users
go
GRANT INSERT ON dbo.MERGE_REQUEST_STATUS_CODE TO eqa_user
go
GRANT DELETE ON dbo.MERGE_REQUEST_STATUS_CODE TO eqa_user
go
GRANT UPDATE ON dbo.MERGE_REQUEST_STATUS_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MERGE_REQUEST_STATUS_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MERGE_REQUEST_STATUS_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MERGE_REQUEST_STATUS_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MERGE_REQUEST_STATUS_CODE TO eqa_user
go
CREATE TABLE dbo.MERGE_REQUEST_STATUS_HISTORY
(
    merge_status_id           OBJECT_ID NOT NULL,
    request_id                OBJECT_ID NOT NULL,
    merge_status_date         datetime  NOT NULL,
    merge_request_status_code code_2    NOT NULL,
    merge_comment             descr     NULL,
    active_ind                yn        DEFAULT 1 NOT NULL,
    created_by                usr       NOT NULL,
    audit_tran_id             OBJECT_ID NULL,
    ts                        timestamp NULL,
    CONSTRAINT PK_MERGE_REQUEST_STATUS_HISTOR
    PRIMARY KEY CLUSTERED (merge_status_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MERGE_REQUEST_STATUS_HISTORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MERGE_REQUEST_STATUS_HISTORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MERGE_REQUEST_STATUS_HISTORY >>>'
go
ALTER TABLE dbo.MERGE_REQUEST_STATUS_HISTORY
    ADD CONSTRAINT FK_MERGE_REQ_STATUS_HIST2
    FOREIGN KEY (request_id)
    REFERENCES dbo.MERGE_REQUEST (request_id)
go
ALTER TABLE dbo.MERGE_REQUEST_STATUS_HISTORY
    ADD CONSTRAINT FK_MERGE_REQ_STATUS_CODE_HIST
    FOREIGN KEY (merge_request_status_code)
    REFERENCES dbo.MERGE_REQUEST_STATUS_CODE (merge_request_status_code)
go
GRANT REFERENCES ON dbo.MERGE_REQUEST_STATUS_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.MERGE_REQUEST_STATUS_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.MERGE_REQUEST_STATUS_HISTORY TO read_only
go
GRANT SELECT ON dbo.MERGE_REQUEST_STATUS_HISTORY TO rma_users
go
GRANT INSERT ON dbo.MERGE_REQUEST_STATUS_HISTORY TO eqa_user
go
GRANT DELETE ON dbo.MERGE_REQUEST_STATUS_HISTORY TO eqa_user
go
GRANT UPDATE ON dbo.MERGE_REQUEST_STATUS_HISTORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MERGE_REQUEST_STATUS_HISTORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MERGE_REQUEST_STATUS_HISTORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MERGE_REQUEST_STATUS_HISTORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MERGE_REQUEST_STATUS_HISTORY TO eqa_user
go
CREATE TABLE dbo.MESSAGE_LISTENER
(
    mq_name  varchar(100)   NOT NULL,
    ml_key   varbinary(16)  NOT NULL,
    ml_bytes varbinary(255) NULL,
    ml_image image          NULL     OFF ROW,
    CONSTRAINT PK_MESSAGE_LISTENER
    PRIMARY KEY CLUSTERED (mq_name,ml_key)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MESSAGE_LISTENER') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MESSAGE_LISTENER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MESSAGE_LISTENER >>>'
go
GRANT REFERENCES ON dbo.MESSAGE_LISTENER TO eqa_user
go
GRANT SELECT ON dbo.MESSAGE_LISTENER TO eqa_user
go
GRANT SELECT ON dbo.MESSAGE_LISTENER TO read_only
go
GRANT SELECT ON dbo.MESSAGE_LISTENER TO rma_users
go
GRANT INSERT ON dbo.MESSAGE_LISTENER TO eqa_user
go
GRANT DELETE ON dbo.MESSAGE_LISTENER TO eqa_user
go
GRANT UPDATE ON dbo.MESSAGE_LISTENER TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MESSAGE_LISTENER TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MESSAGE_LISTENER TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MESSAGE_LISTENER TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MESSAGE_LISTENER TO eqa_user
go
CREATE TABLE dbo.MESSAGE_PROPS
(
    mp_type tinyint      NOT NULL,
    mp_name varchar(100) NOT NULL,
    mp_data varchar(255) NOT NULL,
    CONSTRAINT PK_MESSAGE_PROPS
    PRIMARY KEY CLUSTERED (mp_type,mp_name)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MESSAGE_PROPS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MESSAGE_PROPS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MESSAGE_PROPS >>>'
go
GRANT REFERENCES ON dbo.MESSAGE_PROPS TO eqa_user
go
GRANT SELECT ON dbo.MESSAGE_PROPS TO eqa_user
go
GRANT SELECT ON dbo.MESSAGE_PROPS TO read_only
go
GRANT SELECT ON dbo.MESSAGE_PROPS TO rma_users
go
GRANT INSERT ON dbo.MESSAGE_PROPS TO eqa_user
go
GRANT DELETE ON dbo.MESSAGE_PROPS TO eqa_user
go
GRANT UPDATE ON dbo.MESSAGE_PROPS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MESSAGE_PROPS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MESSAGE_PROPS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MESSAGE_PROPS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MESSAGE_PROPS TO eqa_user
go
CREATE TABLE dbo.MESSAGE_QUEUE
(
    mq_name   varchar(100)   NOT NULL,
    msg_key   varbinary(32)  NOT NULL,
    msg_size  int            NOT NULL,
    msg_bytes varbinary(255) NULL,
    msg_image image          NULL     OFF ROW,
    msg_lock  varchar(100)   NOT NULL,
    CONSTRAINT PK_MESSAGE_QUEUE
    PRIMARY KEY CLUSTERED (mq_name,msg_key)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MESSAGE_QUEUE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MESSAGE_QUEUE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MESSAGE_QUEUE >>>'
go
GRANT REFERENCES ON dbo.MESSAGE_QUEUE TO eqa_user
go
GRANT SELECT ON dbo.MESSAGE_QUEUE TO eqa_user
go
GRANT SELECT ON dbo.MESSAGE_QUEUE TO read_only
go
GRANT SELECT ON dbo.MESSAGE_QUEUE TO rma_users
go
GRANT INSERT ON dbo.MESSAGE_QUEUE TO eqa_user
go
GRANT DELETE ON dbo.MESSAGE_QUEUE TO eqa_user
go
GRANT UPDATE ON dbo.MESSAGE_QUEUE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MESSAGE_QUEUE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MESSAGE_QUEUE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MESSAGE_QUEUE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MESSAGE_QUEUE TO eqa_user
go
CREATE TABLE dbo.MESSAGE_ROLES
(
    mr_type tinyint      NOT NULL,
    mr_name varchar(100) NOT NULL,
    mr_role varchar(100) NOT NULL,
    CONSTRAINT PK_MESSAGE_ROLES
    PRIMARY KEY CLUSTERED (mr_type,mr_name,mr_role)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MESSAGE_ROLES') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MESSAGE_ROLES >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MESSAGE_ROLES >>>'
go
GRANT REFERENCES ON dbo.MESSAGE_ROLES TO eqa_user
go
GRANT SELECT ON dbo.MESSAGE_ROLES TO eqa_user
go
GRANT SELECT ON dbo.MESSAGE_ROLES TO read_only
go
GRANT SELECT ON dbo.MESSAGE_ROLES TO rma_users
go
GRANT INSERT ON dbo.MESSAGE_ROLES TO eqa_user
go
GRANT DELETE ON dbo.MESSAGE_ROLES TO eqa_user
go
GRANT UPDATE ON dbo.MESSAGE_ROLES TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MESSAGE_ROLES TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MESSAGE_ROLES TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MESSAGE_ROLES TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MESSAGE_ROLES TO eqa_user
go
CREATE TABLE dbo.MESSAGE_SELECTOR
(
    mq_name  varchar(100)   NOT NULL,
    ms_key   varbinary(16)  NOT NULL,
    ms_bytes varbinary(255) NULL,
    ms_image image          NULL     OFF ROW,
    CONSTRAINT PK_MESSAGE_SELECTOR
    PRIMARY KEY CLUSTERED (mq_name,ms_key)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MESSAGE_SELECTOR') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MESSAGE_SELECTOR >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MESSAGE_SELECTOR >>>'
go
GRANT REFERENCES ON dbo.MESSAGE_SELECTOR TO eqa_user
go
GRANT SELECT ON dbo.MESSAGE_SELECTOR TO eqa_user
go
GRANT SELECT ON dbo.MESSAGE_SELECTOR TO read_only
go
GRANT SELECT ON dbo.MESSAGE_SELECTOR TO rma_users
go
GRANT INSERT ON dbo.MESSAGE_SELECTOR TO eqa_user
go
GRANT DELETE ON dbo.MESSAGE_SELECTOR TO eqa_user
go
GRANT UPDATE ON dbo.MESSAGE_SELECTOR TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MESSAGE_SELECTOR TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MESSAGE_SELECTOR TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MESSAGE_SELECTOR TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MESSAGE_SELECTOR TO eqa_user
go
CREATE TABLE dbo.MISCONDUCT_STATUS
(
    misconduct_status      char(2)      NOT NULL,
    misconduct_status_desc varchar(255) NOT NULL,
    CONSTRAINT PK_MISCONDUCT_STATUS
    PRIMARY KEY CLUSTERED (misconduct_status)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MISCONDUCT_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MISCONDUCT_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MISCONDUCT_STATUS >>>'
go
GRANT REFERENCES ON dbo.MISCONDUCT_STATUS TO eqa_user
go
GRANT SELECT ON dbo.MISCONDUCT_STATUS TO eqa_user
go
GRANT SELECT ON dbo.MISCONDUCT_STATUS TO read_only
go
GRANT SELECT ON dbo.MISCONDUCT_STATUS TO rma_users
go
GRANT INSERT ON dbo.MISCONDUCT_STATUS TO eqa_user
go
GRANT DELETE ON dbo.MISCONDUCT_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.MISCONDUCT_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MISCONDUCT_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MISCONDUCT_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MISCONDUCT_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MISCONDUCT_STATUS TO eqa_user
go
CREATE TABLE dbo.MISCONDUCT_TYPE
(
    misconduct_type           char(2)      NOT NULL,
    misconduct_type_desc      varchar(255) NOT NULL,
    misconduct_type_long_desc varchar(255) NOT NULL,
    CONSTRAINT PK_MISCONDUCT_TYPE
    PRIMARY KEY CLUSTERED (misconduct_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MISCONDUCT_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MISCONDUCT_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MISCONDUCT_TYPE >>>'
go
GRANT REFERENCES ON dbo.MISCONDUCT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.MISCONDUCT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.MISCONDUCT_TYPE TO read_only
go
GRANT SELECT ON dbo.MISCONDUCT_TYPE TO rma_users
go
GRANT INSERT ON dbo.MISCONDUCT_TYPE TO eqa_user
go
GRANT DELETE ON dbo.MISCONDUCT_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.MISCONDUCT_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MISCONDUCT_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MISCONDUCT_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MISCONDUCT_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MISCONDUCT_TYPE TO eqa_user
go
CREATE TABLE dbo.MODERATION_ASSESSMENT_PLAN
(
    assessment_plan_id          OBJECT_ID     NOT NULL,
    moe_provider_id             numeric(12,0) NULL,
    provider_location           numeric(2,0)  NULL,
    academic_year               char(4)       NULL,
    assessment_plan_status_code code_2        NULL,
    assessment_plan_status_date datetime      NULL,
    date_plan_completed         datetime      NULL,
    contact_name                name          NULL,
    contact_title               varchar(20)   NULL,
    contact_email               emailaddr     NULL,
    active_ind                  yn_ind        NOT NULL,
    ts                          timestamp     NOT NULL,
    audit_tran_id               OBJECT_ID     NOT NULL,
    provider_notes              varchar(2048) NULL,
    nzqa_notes                  text          NULL     OFF ROW,
    CONSTRAINT PK_MODERATION_ASSESSMENT_PLAN
    PRIMARY KEY CLUSTERED (assessment_plan_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MODERATION_ASSESSMENT_PLAN') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MODERATION_ASSESSMENT_PLAN >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MODERATION_ASSESSMENT_PLAN >>>'
go
ALTER TABLE dbo.MODERATION_ASSESSMENT_PLAN
    ADD CONSTRAINT FK_MODERATION_ASS_PLAN_YEAR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.MODERATION_ASSESSMENT_PLAN
    ADD CONSTRAINT FK_MOD_ASS_PLAN_PROVIDER
    FOREIGN KEY (moe_provider_id,provider_location)
    REFERENCES dbo.PROVIDER (moe_provider_id,location)
go
GRANT REFERENCES ON dbo.MODERATION_ASSESSMENT_PLAN TO eqa_user
go
GRANT SELECT ON dbo.MODERATION_ASSESSMENT_PLAN TO eqa_user
go
GRANT SELECT ON dbo.MODERATION_ASSESSMENT_PLAN TO read_only
go
GRANT SELECT ON dbo.MODERATION_ASSESSMENT_PLAN TO rma_users
go
GRANT INSERT ON dbo.MODERATION_ASSESSMENT_PLAN TO eqa_user
go
GRANT DELETE ON dbo.MODERATION_ASSESSMENT_PLAN TO eqa_user
go
GRANT UPDATE ON dbo.MODERATION_ASSESSMENT_PLAN TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MODERATION_ASSESSMENT_PLAN TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MODERATION_ASSESSMENT_PLAN TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MODERATION_ASSESSMENT_PLAN TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MODERATION_ASSESSMENT_PLAN TO eqa_user
go
CREATE TABLE dbo.MODERATION_ASSESSMENT_STD
(
    assessment_std_id            OBJECT_ID    NOT NULL,
    assessment_subject_id        OBJECT_ID    NULL,
    std_number                   varchar(8)   NULL,
    std_version_number           numeric(8,0) NULL,
    assessment_std_status_code   code_2       NULL,
    assessment_std_status_date   datetime     NULL,
    assessment_date              datetime     NULL,
    te_reo_required_ind          ny_ind       NULL,
    nominated_for_moderation_ind ny_ind       NULL,
    moderation_required_ind      ny_ind       NULL,
    latest_report_id             OBJECT_ID    NULL,
    active_ind                   yn           DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    ts                           timestamp    NULL,
    audit_tran_id                OBJECT_ID    NOT NULL,
    mandatory_for_provider_ind   ny_ind       NOT NULL,
    materials_url                descr        NULL,
    materials_submission_date    datetime     NULL,
    materials_username           descr        NULL,
    materials_password           descr        NULL,
    CONSTRAINT PK_MODERATION_ASSESSMENT_STD
    PRIMARY KEY NONCLUSTERED (assessment_std_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MODERATION_ASSESSMENT_STD') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MODERATION_ASSESSMENT_STD >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MODERATION_ASSESSMENT_STD >>>'
go
ALTER TABLE dbo.MODERATION_ASSESSMENT_STD
    ADD CONSTRAINT FK_MOD_ASS_STD_STD
    FOREIGN KEY (std_number)
    REFERENCES dbo.STD (std_number)
go
GRANT REFERENCES ON dbo.MODERATION_ASSESSMENT_STD TO eqa_user
go
GRANT SELECT ON dbo.MODERATION_ASSESSMENT_STD TO eqa_user
go
GRANT SELECT ON dbo.MODERATION_ASSESSMENT_STD TO read_only
go
GRANT SELECT ON dbo.MODERATION_ASSESSMENT_STD TO rma_users
go
GRANT INSERT ON dbo.MODERATION_ASSESSMENT_STD TO eqa_user
go
GRANT DELETE ON dbo.MODERATION_ASSESSMENT_STD TO eqa_user
go
GRANT UPDATE ON dbo.MODERATION_ASSESSMENT_STD TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MODERATION_ASSESSMENT_STD TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MODERATION_ASSESSMENT_STD TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MODERATION_ASSESSMENT_STD TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MODERATION_ASSESSMENT_STD TO eqa_user
go
CREATE TABLE dbo.MODERATION_ASSESSMENT_SUBJ
(
    assessment_subject_id       OBJECT_ID NOT NULL,
    assessment_plan_id          OBJECT_ID NOT NULL,
    std_group_id                OBJECT_ID NULL,
    subject_complete_date       datetime  NULL,
    assessment_subj_status_code code_2    NULL,
    active_ind                  yn        DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    ts                          timestamp NULL,
    audit_tran_id               OBJECT_ID NOT NULL,
    CONSTRAINT PK_MODERATION_ASSESSMENT_SUBJ
    PRIMARY KEY NONCLUSTERED (assessment_subject_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MODERATION_ASSESSMENT_SUBJ') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MODERATION_ASSESSMENT_SUBJ >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MODERATION_ASSESSMENT_SUBJ >>>'
go
ALTER TABLE dbo.MODERATION_ASSESSMENT_SUBJ
    ADD CONSTRAINT FK_MODERATION_ASS_PLAN_ID
    FOREIGN KEY (assessment_plan_id)
    REFERENCES dbo.MODERATION_ASSESSMENT_PLAN (assessment_plan_id)
go
ALTER TABLE dbo.MODERATION_ASSESSMENT_SUBJ
    ADD CONSTRAINT FK_MOD_ASS_SUBJ_STD_GROUP_ID
    FOREIGN KEY (std_group_id)
    REFERENCES dbo.STD_GROUP (std_group_id)
go
ALTER TABLE dbo.MODERATION_ASSESSMENT_STD
    ADD CONSTRAINT FK_MOD_ASS_SUBJECT_ID
    FOREIGN KEY (assessment_subject_id)
    REFERENCES dbo.MODERATION_ASSESSMENT_SUBJ (assessment_subject_id)
go
GRANT REFERENCES ON dbo.MODERATION_ASSESSMENT_SUBJ TO eqa_user
go
GRANT SELECT ON dbo.MODERATION_ASSESSMENT_SUBJ TO eqa_user
go
GRANT SELECT ON dbo.MODERATION_ASSESSMENT_SUBJ TO read_only
go
GRANT SELECT ON dbo.MODERATION_ASSESSMENT_SUBJ TO rma_users
go
GRANT INSERT ON dbo.MODERATION_ASSESSMENT_SUBJ TO eqa_user
go
GRANT DELETE ON dbo.MODERATION_ASSESSMENT_SUBJ TO eqa_user
go
GRANT UPDATE ON dbo.MODERATION_ASSESSMENT_SUBJ TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MODERATION_ASSESSMENT_SUBJ TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MODERATION_ASSESSMENT_SUBJ TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MODERATION_ASSESSMENT_SUBJ TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MODERATION_ASSESSMENT_SUBJ TO eqa_user
go
CREATE TABLE dbo.MODERATION_MAT_STATUS_CODE
(
    materials_status_code code_1 NOT NULL,
    materials_status_desc descr  NULL,
    CONSTRAINT PK_MODERATION_MAT_STATUS_CODE
    PRIMARY KEY CLUSTERED (materials_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MODERATION_MAT_STATUS_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MODERATION_MAT_STATUS_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MODERATION_MAT_STATUS_CODE >>>'
go
GRANT REFERENCES ON dbo.MODERATION_MAT_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.MODERATION_MAT_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.MODERATION_MAT_STATUS_CODE TO read_only
go
GRANT SELECT ON dbo.MODERATION_MAT_STATUS_CODE TO rma_users
go
GRANT INSERT ON dbo.MODERATION_MAT_STATUS_CODE TO eqa_user
go
GRANT DELETE ON dbo.MODERATION_MAT_STATUS_CODE TO eqa_user
go
GRANT UPDATE ON dbo.MODERATION_MAT_STATUS_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MODERATION_MAT_STATUS_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MODERATION_MAT_STATUS_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MODERATION_MAT_STATUS_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MODERATION_MAT_STATUS_CODE TO eqa_user
go
CREATE TABLE dbo.MODERATION_MAT_TYPE_CODE
(
    materials_type_code code_2 NOT NULL,
    materials_type_desc descr  NULL,
    CONSTRAINT PK_MODERATION_MAT_TYPE_CODE
    PRIMARY KEY CLUSTERED (materials_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MODERATION_MAT_TYPE_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MODERATION_MAT_TYPE_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MODERATION_MAT_TYPE_CODE >>>'
go
GRANT REFERENCES ON dbo.MODERATION_MAT_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.MODERATION_MAT_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.MODERATION_MAT_TYPE_CODE TO read_only
go
GRANT SELECT ON dbo.MODERATION_MAT_TYPE_CODE TO rma_users
go
GRANT INSERT ON dbo.MODERATION_MAT_TYPE_CODE TO eqa_user
go
GRANT DELETE ON dbo.MODERATION_MAT_TYPE_CODE TO eqa_user
go
GRANT UPDATE ON dbo.MODERATION_MAT_TYPE_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MODERATION_MAT_TYPE_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MODERATION_MAT_TYPE_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MODERATION_MAT_TYPE_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MODERATION_MAT_TYPE_CODE TO eqa_user
go
CREATE TABLE dbo.MODERATION_REPORT
(
    moderation_report_id        OBJECT_ID     NOT NULL,
    assessment_std_id           OBJECT_ID     NOT NULL,
    moderator_role_id           OBJECT_ID     NULL,
    mod_report_status_code      code_2        NOT NULL,
    mod_report_status_date      datetime      NULL,
    mod_report_type_code        code_2        NOT NULL,
    submission_date_id          OBJECT_ID     NOT NULL,
    results_pass                int           NULL,
    results_total               int           NULL,
    materials_status_code       char(1)       NULL,
    materials_type_code         code_2        NULL,
    date_materials_received     datetime      NULL,
    instructions_approp         code_1        NULL,
    standard_identified         code_1        NULL,
    summary                     text          NULL     OFF ROW,
    activity                    text          NULL     OFF ROW,
    activity_comment            text          NULL     OFF ROW,
    schedule_consistent         code_1        NULL,
    schedule_comment            text          NULL     OFF ROW,
    report_comment              varchar(2048) NULL,
    check_mod_select_status     code_2        NULL,
    check_mod_mat_approved      char(1)       NULL,
    check_mod_jud_approved      char(1)       NULL,
    check_mod_role_id           OBJECT_ID     NULL,
    appeal_mod_role_id          OBJECT_ID     NULL,
    reasons_for_appeal          text          NULL     OFF ROW,
    check_mod_date_mat_received datetime      NULL,
    check_mod_approval_comment  text          NULL     OFF ROW,
    check_mod_instr_appropriate char(1)       NULL,
    check_mod_std_identified    char(1)       NULL,
    check_mod_activity          text          NULL     OFF ROW,
    check_mod_activity_comment  text          NULL     OFF ROW,
    commentary                  text          NULL     OFF ROW,
    materials_pre_mod_ind       ny_ind        NOT NULL,
    lit_num_only_ind            ny_ind        NOT NULL,
    active_ind                  smallint      NOT NULL,
    audit_tran_id               numeric(12,0) NOT NULL,
    CONSTRAINT PK_MODERATION_REPORT
    PRIMARY KEY NONCLUSTERED (moderation_report_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MODERATION_REPORT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MODERATION_REPORT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MODERATION_REPORT >>>'
go
ALTER TABLE dbo.MODERATION_REPORT
    ADD CONSTRAINT FK_MODERATION_ASSESSMENT_ID
    FOREIGN KEY (assessment_std_id)
    REFERENCES dbo.MODERATION_ASSESSMENT_STD (assessment_std_id)
go
ALTER TABLE dbo.MODERATION_REPORT
    ADD CONSTRAINT FK_MOD_MAT_STATUS_CODE
    FOREIGN KEY (materials_status_code)
    REFERENCES dbo.MODERATION_MAT_STATUS_CODE (materials_status_code)
go
ALTER TABLE dbo.MODERATION_REPORT
    ADD CONSTRAINT FK_MOD_MAT_TYPE_CODE
    FOREIGN KEY (materials_type_code)
    REFERENCES dbo.MODERATION_MAT_TYPE_CODE (materials_type_code)
go
ALTER TABLE dbo.MODERATION_REPORT
    ADD CONSTRAINT FK_MOD_REPORT_CHECK_MOD_STATUS
    FOREIGN KEY (check_mod_select_status)
    REFERENCES dbo.CHECK_MOD_SELECT_STATUS (check_mod_select_status)
go
ALTER TABLE dbo.MODERATION_ASSESSMENT_STD
    ADD CONSTRAINT FK_MOD_ASS_STD_MOD_REPORT
    FOREIGN KEY (latest_report_id)
    REFERENCES dbo.MODERATION_REPORT (moderation_report_id)
go
GRANT REFERENCES ON dbo.MODERATION_REPORT TO eqa_user
go
GRANT SELECT ON dbo.MODERATION_REPORT TO eqa_user
go
GRANT SELECT ON dbo.MODERATION_REPORT TO read_only
go
GRANT SELECT ON dbo.MODERATION_REPORT TO rma_users
go
GRANT INSERT ON dbo.MODERATION_REPORT TO eqa_user
go
GRANT DELETE ON dbo.MODERATION_REPORT TO eqa_user
go
GRANT UPDATE ON dbo.MODERATION_REPORT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MODERATION_REPORT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MODERATION_REPORT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MODERATION_REPORT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MODERATION_REPORT TO eqa_user
go
CREATE TABLE dbo.MODERATION_REPORT_COMPONENT
(
    component_id         OBJECT_ID     NOT NULL,
    moderation_report_id OBJECT_ID     NOT NULL,
    component_type_code  code_2        NOT NULL,
    task                 varchar(1024) NULL,
    answer               char(1)       NULL,
    moderator_comment    varchar(1400) NULL,
    check_mod_agreement  code_1        NULL,
    check_mod_comment    varchar(1400) NULL,
    active_ind           yn            DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    ts                   timestamp     NULL,
    audit_tran_id        OBJECT_ID     NOT NULL,
    CONSTRAINT PK_MODERATION_REPORT_COMPONENT
    PRIMARY KEY NONCLUSTERED (component_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MODERATION_REPORT_COMPONENT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MODERATION_REPORT_COMPONENT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MODERATION_REPORT_COMPONENT >>>'
go
ALTER TABLE dbo.MODERATION_REPORT_COMPONENT
    ADD CONSTRAINT FK_MOD_REPORT_COMPONENT_REP
    FOREIGN KEY (moderation_report_id)
    REFERENCES dbo.MODERATION_REPORT (moderation_report_id)
go
GRANT REFERENCES ON dbo.MODERATION_REPORT_COMPONENT TO eqa_user
go
GRANT SELECT ON dbo.MODERATION_REPORT_COMPONENT TO eqa_user
go
GRANT SELECT ON dbo.MODERATION_REPORT_COMPONENT TO read_only
go
GRANT SELECT ON dbo.MODERATION_REPORT_COMPONENT TO rma_users
go
GRANT INSERT ON dbo.MODERATION_REPORT_COMPONENT TO eqa_user
go
GRANT DELETE ON dbo.MODERATION_REPORT_COMPONENT TO eqa_user
go
GRANT UPDATE ON dbo.MODERATION_REPORT_COMPONENT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MODERATION_REPORT_COMPONENT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MODERATION_REPORT_COMPONENT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MODERATION_REPORT_COMPONENT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MODERATION_REPORT_COMPONENT TO eqa_user
go
CREATE TABLE dbo.MODERATION_REPORT_JUDGEMENT
(
    judgement_id         OBJECT_ID     NOT NULL,
    moderation_report_id OBJECT_ID     NOT NULL,
    sortkey              sortkey       NOT NULL,
    learner_name         varchar(255)  NULL,
    assessor_judgement   varchar(5)    NULL,
    moderator_judgement  varchar(5)    NULL,
    moderator_comment    varchar(1400) NULL,
    check_mod_agreement  code_1        NULL,
    check_mod_comment    varchar(1400) NULL,
    active_ind           yn            DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    ts                   timestamp     NOT NULL,
    audit_tran_id        OBJECT_ID     NOT NULL,
    CONSTRAINT PK_MODERATION_REPORT_JUDGEMENT
    PRIMARY KEY NONCLUSTERED (judgement_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MODERATION_REPORT_JUDGEMENT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MODERATION_REPORT_JUDGEMENT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MODERATION_REPORT_JUDGEMENT >>>'
go
ALTER TABLE dbo.MODERATION_REPORT_JUDGEMENT
    ADD CONSTRAINT FK_MODERATION_REPORT_ID_2
    FOREIGN KEY (moderation_report_id)
    REFERENCES dbo.MODERATION_REPORT (moderation_report_id)
go
GRANT REFERENCES ON dbo.MODERATION_REPORT_JUDGEMENT TO eqa_user
go
GRANT SELECT ON dbo.MODERATION_REPORT_JUDGEMENT TO eqa_user
go
GRANT SELECT ON dbo.MODERATION_REPORT_JUDGEMENT TO read_only
go
GRANT SELECT ON dbo.MODERATION_REPORT_JUDGEMENT TO rma_users
go
GRANT INSERT ON dbo.MODERATION_REPORT_JUDGEMENT TO eqa_user
go
GRANT DELETE ON dbo.MODERATION_REPORT_JUDGEMENT TO eqa_user
go
GRANT UPDATE ON dbo.MODERATION_REPORT_JUDGEMENT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MODERATION_REPORT_JUDGEMENT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MODERATION_REPORT_JUDGEMENT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MODERATION_REPORT_JUDGEMENT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MODERATION_REPORT_JUDGEMENT TO eqa_user
go
CREATE TABLE dbo.MODERATION_SUBMISSION_DATE
(
    submission_date_id OBJECT_ID NOT NULL,
    assessment_plan_id OBJECT_ID NOT NULL,
    submission_date    datetime  NULL,
    active_ind         yn        DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    ts                 timestamp NULL,
    audit_tran_id      OBJECT_ID NOT NULL,
    CONSTRAINT PK_MODERATION_SUBMISSION_DATE
    PRIMARY KEY NONCLUSTERED (submission_date_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MODERATION_SUBMISSION_DATE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MODERATION_SUBMISSION_DATE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MODERATION_SUBMISSION_DATE >>>'
go
ALTER TABLE dbo.MODERATION_SUBMISSION_DATE
    ADD CONSTRAINT FK_MOD_ASSESS_PLAN_ID
    FOREIGN KEY (assessment_plan_id)
    REFERENCES dbo.MODERATION_ASSESSMENT_PLAN (assessment_plan_id)
go
ALTER TABLE dbo.MODERATION_REPORT
    ADD CONSTRAINT FK_MOD_SUBMISSION_DATE_2
    FOREIGN KEY (submission_date_id)
    REFERENCES dbo.MODERATION_SUBMISSION_DATE (submission_date_id)
go
GRANT REFERENCES ON dbo.MODERATION_SUBMISSION_DATE TO eqa_user
go
GRANT SELECT ON dbo.MODERATION_SUBMISSION_DATE TO eqa_user
go
GRANT SELECT ON dbo.MODERATION_SUBMISSION_DATE TO read_only
go
GRANT SELECT ON dbo.MODERATION_SUBMISSION_DATE TO rma_users
go
GRANT INSERT ON dbo.MODERATION_SUBMISSION_DATE TO eqa_user
go
GRANT DELETE ON dbo.MODERATION_SUBMISSION_DATE TO eqa_user
go
GRANT UPDATE ON dbo.MODERATION_SUBMISSION_DATE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MODERATION_SUBMISSION_DATE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MODERATION_SUBMISSION_DATE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MODERATION_SUBMISSION_DATE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MODERATION_SUBMISSION_DATE TO eqa_user
go
CREATE TABLE dbo.MODERATOR
(
    moderator_id         OBJECT_ID    NOT NULL,
    perorg_id            OBJECT_ID    NOT NULL,
    web_moderator_ind    yn_ind       NOT NULL,
    te_reo_ind           ny_ind       NOT NULL,
    active_ind           yn_ind       NOT NULL,
    employer_provider_id OBJECT_ID    NULL,
    current_employer     varchar(255) NULL,
    current_position     varchar(255) NULL,
    ts                   timestamp    NOT NULL,
    audit_tran_id        OBJECT_ID    NOT NULL,
    bank_account_number  varchar(32)  NULL,
    ird_number           varchar(32)  NULL,
    gst_number           varchar(32)  NULL,
    billing_info         varchar(250) NULL,
    CONSTRAINT PK_MODERATOR
    PRIMARY KEY NONCLUSTERED (moderator_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MODERATOR') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MODERATOR >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MODERATOR >>>'
go
GRANT REFERENCES ON dbo.MODERATOR TO eqa_user
go
GRANT SELECT ON dbo.MODERATOR TO eqa_user
go
GRANT SELECT ON dbo.MODERATOR TO read_only
go
GRANT SELECT ON dbo.MODERATOR TO rma_users
go
GRANT INSERT ON dbo.MODERATOR TO eqa_user
go
GRANT DELETE ON dbo.MODERATOR TO eqa_user
go
GRANT UPDATE ON dbo.MODERATOR TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MODERATOR TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MODERATOR TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MODERATOR TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MODERATOR TO eqa_user
go
CREATE TABLE dbo.MODERATOR_CAPACITY
(
    moderator_capacity_id OBJECT_ID    NOT NULL,
    moderator_role_id     OBJECT_ID    NOT NULL,
    capacity              int          NULL,
    from_date             datetime     NOT NULL,
    to_date               datetime     NOT NULL,
    capacity_reason_code  code_2       NOT NULL,
    active_ind            yn_ind       NOT NULL,
    ts                    timestamp    NOT NULL,
    audit_tran_id         OBJECT_ID    NOT NULL,
    notes                 varchar(255) NULL,
    CONSTRAINT PK_MODERATOR_CAPACITY
    PRIMARY KEY CLUSTERED (moderator_capacity_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MODERATOR_CAPACITY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MODERATOR_CAPACITY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MODERATOR_CAPACITY >>>'
go
GRANT REFERENCES ON dbo.MODERATOR_CAPACITY TO eqa_user
go
GRANT SELECT ON dbo.MODERATOR_CAPACITY TO eqa_user
go
GRANT SELECT ON dbo.MODERATOR_CAPACITY TO read_only
go
GRANT SELECT ON dbo.MODERATOR_CAPACITY TO rma_users
go
GRANT INSERT ON dbo.MODERATOR_CAPACITY TO eqa_user
go
GRANT DELETE ON dbo.MODERATOR_CAPACITY TO eqa_user
go
GRANT UPDATE ON dbo.MODERATOR_CAPACITY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MODERATOR_CAPACITY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MODERATOR_CAPACITY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MODERATOR_CAPACITY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MODERATOR_CAPACITY TO eqa_user
go
CREATE TABLE dbo.MODERATOR_ROLE
(
    moderator_role_id        OBJECT_ID    NOT NULL,
    perorg_role_id           OBJECT_ID    NOT NULL,
    moderator_id             OBJECT_ID    NOT NULL,
    primary_capacity         int          NULL,
    notes                    text         NULL     OFF ROW,
    check_moderator_role_id  OBJECT_ID    NULL,
    mod_role_status_code     char(3)      NOT NULL,
    mod_role_status_date     datetime     NULL,
    mod_role_status_reason   code_2       NULL,
    reason_not_inv_back_code code_2       NULL,
    bank_account_number      varchar(32)  NULL,
    ird_number               varchar(32)  NULL,
    gst_number               varchar(32)  NULL,
    billing_info             varchar(500) NULL,
    active_ind               yn           DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    ts                       timestamp    NOT NULL,
    audit_tran_id            OBJECT_ID    NOT NULL,
    CONSTRAINT PK_MODERATOR_ROLE
    PRIMARY KEY CLUSTERED (moderator_role_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MODERATOR_ROLE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MODERATOR_ROLE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MODERATOR_ROLE >>>'
go
ALTER TABLE dbo.MODERATOR_ROLE
    ADD CONSTRAINT FK_MODERATOR_ID
    FOREIGN KEY (moderator_id)
    REFERENCES dbo.MODERATOR (moderator_id)
go
ALTER TABLE dbo.MODERATION_REPORT
    ADD CONSTRAINT FK_APPEAL_MOD_ROLE_ID_1
    FOREIGN KEY (appeal_mod_role_id)
    REFERENCES dbo.MODERATOR_ROLE (moderator_role_id)
go
ALTER TABLE dbo.MODERATION_REPORT
    ADD CONSTRAINT FK_CHECK_MOD_ROLE_ID_1
    FOREIGN KEY (check_mod_role_id)
    REFERENCES dbo.MODERATOR_ROLE (moderator_role_id)
go
ALTER TABLE dbo.MODERATION_REPORT
    ADD CONSTRAINT FK_MOD_ROLE_ID_1
    FOREIGN KEY (moderator_role_id)
    REFERENCES dbo.MODERATOR_ROLE (moderator_role_id)
go
ALTER TABLE dbo.MODERATOR_CAPACITY
    ADD CONSTRAINT FK_MOD_CAP_MOD_ROLE_ID
    FOREIGN KEY (moderator_role_id)
    REFERENCES dbo.MODERATOR_ROLE (moderator_role_id)
go
ALTER TABLE dbo.MODERATOR_ROLE
    ADD CONSTRAINT FK_MODERATOR_ROLE_CHECK_MOD
    FOREIGN KEY (check_moderator_role_id)
    REFERENCES dbo.MODERATOR_ROLE (moderator_role_id)
go
GRANT REFERENCES ON dbo.MODERATOR_ROLE TO eqa_user
go
GRANT SELECT ON dbo.MODERATOR_ROLE TO eqa_user
go
GRANT SELECT ON dbo.MODERATOR_ROLE TO read_only
go
GRANT SELECT ON dbo.MODERATOR_ROLE TO rma_users
go
GRANT INSERT ON dbo.MODERATOR_ROLE TO eqa_user
go
GRANT DELETE ON dbo.MODERATOR_ROLE TO eqa_user
go
GRANT UPDATE ON dbo.MODERATOR_ROLE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MODERATOR_ROLE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MODERATOR_ROLE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MODERATOR_ROLE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MODERATOR_ROLE TO eqa_user
go
CREATE TABLE dbo.MOD_ASSESS_PLAN_STATUS_CODE
(
    assessment_plan_status_code code_2 NOT NULL,
    assessment_plan_status_desc descr  NULL,
    CONSTRAINT PK_MOD_ASSESS_PLAN_STATUS_CODE
    PRIMARY KEY CLUSTERED (assessment_plan_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MOD_ASSESS_PLAN_STATUS_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MOD_ASSESS_PLAN_STATUS_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MOD_ASSESS_PLAN_STATUS_CODE >>>'
go
ALTER TABLE dbo.MODERATION_ASSESSMENT_PLAN
    ADD CONSTRAINT FK_ASS_PLAN_STATUS_CODE
    FOREIGN KEY (assessment_plan_status_code)
    REFERENCES dbo.MOD_ASSESS_PLAN_STATUS_CODE (assessment_plan_status_code)
go
GRANT REFERENCES ON dbo.MOD_ASSESS_PLAN_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.MOD_ASSESS_PLAN_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.MOD_ASSESS_PLAN_STATUS_CODE TO read_only
go
GRANT SELECT ON dbo.MOD_ASSESS_PLAN_STATUS_CODE TO rma_users
go
GRANT INSERT ON dbo.MOD_ASSESS_PLAN_STATUS_CODE TO eqa_user
go
GRANT DELETE ON dbo.MOD_ASSESS_PLAN_STATUS_CODE TO eqa_user
go
GRANT UPDATE ON dbo.MOD_ASSESS_PLAN_STATUS_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MOD_ASSESS_PLAN_STATUS_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MOD_ASSESS_PLAN_STATUS_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MOD_ASSESS_PLAN_STATUS_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MOD_ASSESS_PLAN_STATUS_CODE TO eqa_user
go
CREATE TABLE dbo.MOD_ASSESS_STD_STATUS_CODE
(
    assessment_std_status_code code_2 NOT NULL,
    assessment_std_status_desc descr  NULL,
    CONSTRAINT PK_MOD_ASSESS_STD_STATUS_CODE
    PRIMARY KEY CLUSTERED (assessment_std_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MOD_ASSESS_STD_STATUS_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MOD_ASSESS_STD_STATUS_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MOD_ASSESS_STD_STATUS_CODE >>>'
go
ALTER TABLE dbo.MODERATION_ASSESSMENT_STD
    ADD CONSTRAINT FK_MODERATI_FK_ASS_STD_STAT
    FOREIGN KEY (assessment_std_status_code)
    REFERENCES dbo.MOD_ASSESS_STD_STATUS_CODE (assessment_std_status_code)
go
GRANT REFERENCES ON dbo.MOD_ASSESS_STD_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.MOD_ASSESS_STD_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.MOD_ASSESS_STD_STATUS_CODE TO read_only
go
GRANT SELECT ON dbo.MOD_ASSESS_STD_STATUS_CODE TO rma_users
go
GRANT INSERT ON dbo.MOD_ASSESS_STD_STATUS_CODE TO eqa_user
go
GRANT DELETE ON dbo.MOD_ASSESS_STD_STATUS_CODE TO eqa_user
go
GRANT UPDATE ON dbo.MOD_ASSESS_STD_STATUS_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MOD_ASSESS_STD_STATUS_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MOD_ASSESS_STD_STATUS_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MOD_ASSESS_STD_STATUS_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MOD_ASSESS_STD_STATUS_CODE TO eqa_user
go
CREATE TABLE dbo.MOD_ASSESS_SUBJ_STATUS_CODE
(
    assessment_subj_status_code code_2 NOT NULL,
    assessment_subj_status_desc descr  NULL,
    CONSTRAINT PK_MOD_ASSESS_SUBJ_STATUS_CODE
    PRIMARY KEY CLUSTERED (assessment_subj_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MOD_ASSESS_SUBJ_STATUS_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MOD_ASSESS_SUBJ_STATUS_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MOD_ASSESS_SUBJ_STATUS_CODE >>>'
go
ALTER TABLE dbo.MODERATION_ASSESSMENT_SUBJ
    ADD CONSTRAINT FK_MODERATI_FK_ASS_SU_MOD_ASSE
    FOREIGN KEY (assessment_subj_status_code)
    REFERENCES dbo.MOD_ASSESS_SUBJ_STATUS_CODE (assessment_subj_status_code)
go
GRANT REFERENCES ON dbo.MOD_ASSESS_SUBJ_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.MOD_ASSESS_SUBJ_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.MOD_ASSESS_SUBJ_STATUS_CODE TO read_only
go
GRANT SELECT ON dbo.MOD_ASSESS_SUBJ_STATUS_CODE TO rma_users
go
GRANT INSERT ON dbo.MOD_ASSESS_SUBJ_STATUS_CODE TO eqa_user
go
GRANT DELETE ON dbo.MOD_ASSESS_SUBJ_STATUS_CODE TO eqa_user
go
GRANT UPDATE ON dbo.MOD_ASSESS_SUBJ_STATUS_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MOD_ASSESS_SUBJ_STATUS_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MOD_ASSESS_SUBJ_STATUS_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MOD_ASSESS_SUBJ_STATUS_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MOD_ASSESS_SUBJ_STATUS_CODE TO eqa_user
go
CREATE TABLE dbo.MOD_CAPACITY_REASON_CODE
(
    capacity_reason_code code_2 NOT NULL,
    capacity_reason_desc descr  NULL,
    CONSTRAINT PK_MOD_CAPACITY_REASON_CODE
    PRIMARY KEY CLUSTERED (capacity_reason_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MOD_CAPACITY_REASON_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MOD_CAPACITY_REASON_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MOD_CAPACITY_REASON_CODE >>>'
go
ALTER TABLE dbo.MODERATOR_CAPACITY
    ADD CONSTRAINT FK_MOD_CAP_REASON
    FOREIGN KEY (capacity_reason_code)
    REFERENCES dbo.MOD_CAPACITY_REASON_CODE (capacity_reason_code)
go
GRANT REFERENCES ON dbo.MOD_CAPACITY_REASON_CODE TO eqa_user
go
GRANT SELECT ON dbo.MOD_CAPACITY_REASON_CODE TO eqa_user
go
GRANT SELECT ON dbo.MOD_CAPACITY_REASON_CODE TO read_only
go
GRANT SELECT ON dbo.MOD_CAPACITY_REASON_CODE TO rma_users
go
GRANT INSERT ON dbo.MOD_CAPACITY_REASON_CODE TO eqa_user
go
GRANT DELETE ON dbo.MOD_CAPACITY_REASON_CODE TO eqa_user
go
GRANT UPDATE ON dbo.MOD_CAPACITY_REASON_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MOD_CAPACITY_REASON_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MOD_CAPACITY_REASON_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MOD_CAPACITY_REASON_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MOD_CAPACITY_REASON_CODE TO eqa_user
go
CREATE TABLE dbo.MOD_FORBIDDEN_PROVIDER
(
    forbidden_provider_id OBJECT_ID NOT NULL,
    moderator_role_id     OBJECT_ID NOT NULL,
    moe_provider_id       OBJECT_ID NOT NULL,
    provider_location     number_2  NOT NULL,
    active_ind            yn        DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    ts                    timestamp NULL,
    audit_tran_id         OBJECT_ID NOT NULL,
    CONSTRAINT PK_MOD_FORBIDDEN_PROVIDER
    PRIMARY KEY CLUSTERED (forbidden_provider_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MOD_FORBIDDEN_PROVIDER') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MOD_FORBIDDEN_PROVIDER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MOD_FORBIDDEN_PROVIDER >>>'
go
ALTER TABLE dbo.MOD_FORBIDDEN_PROVIDER
    ADD CONSTRAINT FK_MODERATOR_ROLE_ID_FB
    FOREIGN KEY (moderator_role_id)
    REFERENCES dbo.MODERATOR_ROLE (moderator_role_id)
go
ALTER TABLE dbo.MOD_FORBIDDEN_PROVIDER
    ADD CONSTRAINT FK_MOD_FORBID_PROV_PROVIDER
    FOREIGN KEY (moe_provider_id,provider_location)
    REFERENCES dbo.PROVIDER (moe_provider_id,location)
go
GRANT REFERENCES ON dbo.MOD_FORBIDDEN_PROVIDER TO eqa_user
go
GRANT SELECT ON dbo.MOD_FORBIDDEN_PROVIDER TO eqa_user
go
GRANT SELECT ON dbo.MOD_FORBIDDEN_PROVIDER TO read_only
go
GRANT SELECT ON dbo.MOD_FORBIDDEN_PROVIDER TO rma_users
go
GRANT INSERT ON dbo.MOD_FORBIDDEN_PROVIDER TO eqa_user
go
GRANT DELETE ON dbo.MOD_FORBIDDEN_PROVIDER TO eqa_user
go
GRANT UPDATE ON dbo.MOD_FORBIDDEN_PROVIDER TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MOD_FORBIDDEN_PROVIDER TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MOD_FORBIDDEN_PROVIDER TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MOD_FORBIDDEN_PROVIDER TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MOD_FORBIDDEN_PROVIDER TO eqa_user
go
CREATE TABLE dbo.MOD_REASON_NOT_INV_BACK
(
    reason_not_inv_back_code code_2 NOT NULL,
    reason_not_inv_back_desc descr  NULL,
    CONSTRAINT PK_MOD_REASON_NOT_INV_BACK
    PRIMARY KEY CLUSTERED (reason_not_inv_back_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MOD_REASON_NOT_INV_BACK') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MOD_REASON_NOT_INV_BACK >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MOD_REASON_NOT_INV_BACK >>>'
go
ALTER TABLE dbo.MODERATOR_ROLE
    ADD CONSTRAINT FK_MOD_REASON_NOT_INV_BACK
    FOREIGN KEY (reason_not_inv_back_code)
    REFERENCES dbo.MOD_REASON_NOT_INV_BACK (reason_not_inv_back_code)
go
GRANT REFERENCES ON dbo.MOD_REASON_NOT_INV_BACK TO eqa_user
go
GRANT SELECT ON dbo.MOD_REASON_NOT_INV_BACK TO eqa_user
go
GRANT SELECT ON dbo.MOD_REASON_NOT_INV_BACK TO read_only
go
GRANT SELECT ON dbo.MOD_REASON_NOT_INV_BACK TO rma_users
go
GRANT INSERT ON dbo.MOD_REASON_NOT_INV_BACK TO eqa_user
go
GRANT DELETE ON dbo.MOD_REASON_NOT_INV_BACK TO eqa_user
go
GRANT UPDATE ON dbo.MOD_REASON_NOT_INV_BACK TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MOD_REASON_NOT_INV_BACK TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MOD_REASON_NOT_INV_BACK TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MOD_REASON_NOT_INV_BACK TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MOD_REASON_NOT_INV_BACK TO eqa_user
go
CREATE TABLE dbo.MOD_REBATE_RATE
(
    mod_rebate_rate_id OBJECT_ID NOT NULL,
    start_date         datetime  NOT NULL,
    end_date           datetime  NULL,
    amount             money     NOT NULL,
    CONSTRAINT PK_MOD_REBATE_RATE
    PRIMARY KEY CLUSTERED (mod_rebate_rate_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MOD_REBATE_RATE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MOD_REBATE_RATE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MOD_REBATE_RATE >>>'
go
GRANT REFERENCES ON dbo.MOD_REBATE_RATE TO eqa_user
go
GRANT SELECT ON dbo.MOD_REBATE_RATE TO eqa_user
go
GRANT SELECT ON dbo.MOD_REBATE_RATE TO read_only
go
GRANT SELECT ON dbo.MOD_REBATE_RATE TO rma_users
go
GRANT INSERT ON dbo.MOD_REBATE_RATE TO eqa_user
go
GRANT DELETE ON dbo.MOD_REBATE_RATE TO eqa_user
go
GRANT UPDATE ON dbo.MOD_REBATE_RATE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MOD_REBATE_RATE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MOD_REBATE_RATE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MOD_REBATE_RATE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MOD_REBATE_RATE TO eqa_user
go
CREATE TABLE dbo.MOD_REPORT_COMP_TYPE_CODE
(
    component_type_code code_2 NOT NULL,
    component_type_desc descr  NULL,
    CONSTRAINT PK_MOD_REPORT_COMP_TYPE_CODE
    PRIMARY KEY CLUSTERED (component_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MOD_REPORT_COMP_TYPE_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MOD_REPORT_COMP_TYPE_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MOD_REPORT_COMP_TYPE_CODE >>>'
go
ALTER TABLE dbo.MODERATION_REPORT_COMPONENT
    ADD CONSTRAINT FK_MODERATION_COMP_TYPE
    FOREIGN KEY (component_type_code)
    REFERENCES dbo.MOD_REPORT_COMP_TYPE_CODE (component_type_code)
go
GRANT REFERENCES ON dbo.MOD_REPORT_COMP_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.MOD_REPORT_COMP_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.MOD_REPORT_COMP_TYPE_CODE TO read_only
go
GRANT SELECT ON dbo.MOD_REPORT_COMP_TYPE_CODE TO rma_users
go
GRANT INSERT ON dbo.MOD_REPORT_COMP_TYPE_CODE TO eqa_user
go
GRANT DELETE ON dbo.MOD_REPORT_COMP_TYPE_CODE TO eqa_user
go
GRANT UPDATE ON dbo.MOD_REPORT_COMP_TYPE_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MOD_REPORT_COMP_TYPE_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MOD_REPORT_COMP_TYPE_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MOD_REPORT_COMP_TYPE_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MOD_REPORT_COMP_TYPE_CODE TO eqa_user
go
CREATE TABLE dbo.MOD_REPORT_STATUS_CODE
(
    mod_report_status_code code_2 NOT NULL,
    mod_report_status_desc descr  NULL,
    CONSTRAINT PK_MOD_REPORT_STATUS_CODE
    PRIMARY KEY CLUSTERED (mod_report_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MOD_REPORT_STATUS_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MOD_REPORT_STATUS_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MOD_REPORT_STATUS_CODE >>>'
go
ALTER TABLE dbo.MODERATION_REPORT
    ADD CONSTRAINT FK_MOD_REPORT_STATUS_CODE
    FOREIGN KEY (mod_report_status_code)
    REFERENCES dbo.MOD_REPORT_STATUS_CODE (mod_report_status_code)
go
GRANT REFERENCES ON dbo.MOD_REPORT_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.MOD_REPORT_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.MOD_REPORT_STATUS_CODE TO read_only
go
GRANT SELECT ON dbo.MOD_REPORT_STATUS_CODE TO rma_users
go
GRANT INSERT ON dbo.MOD_REPORT_STATUS_CODE TO eqa_user
go
GRANT DELETE ON dbo.MOD_REPORT_STATUS_CODE TO eqa_user
go
GRANT UPDATE ON dbo.MOD_REPORT_STATUS_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MOD_REPORT_STATUS_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MOD_REPORT_STATUS_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MOD_REPORT_STATUS_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MOD_REPORT_STATUS_CODE TO eqa_user
go
CREATE TABLE dbo.MOD_REPORT_STATUS_HISTORY
(
    mod_report_history_id  OBJECT_ID    NOT NULL,
    moderation_report_id   OBJECT_ID    NOT NULL,
    mod_report_status_code char(2)      NOT NULL,
    mod_report_status_date datetime     NULL,
    changed_by             varchar(255) NULL,
    perorg_id              OBJECT_ID    NULL,
    ts                     timestamp    NULL,
    audit_tran_id          OBJECT_ID    NOT NULL,
    CONSTRAINT PK_MOD_REPORT_STATUS_HISTORY
    PRIMARY KEY CLUSTERED (mod_report_history_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MOD_REPORT_STATUS_HISTORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MOD_REPORT_STATUS_HISTORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MOD_REPORT_STATUS_HISTORY >>>'
go
ALTER TABLE dbo.MOD_REPORT_STATUS_HISTORY
    ADD CONSTRAINT FK_MOD_REP_STATUS_HIST_REPORT
    FOREIGN KEY (moderation_report_id)
    REFERENCES dbo.MODERATION_REPORT (moderation_report_id)
go
ALTER TABLE dbo.MOD_REPORT_STATUS_HISTORY
    ADD CONSTRAINT FK_MOD_REP_STATUS_HIST_STATUS
    FOREIGN KEY (mod_report_status_code)
    REFERENCES dbo.MOD_REPORT_STATUS_CODE (mod_report_status_code)
go
GRANT REFERENCES ON dbo.MOD_REPORT_STATUS_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.MOD_REPORT_STATUS_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.MOD_REPORT_STATUS_HISTORY TO read_only
go
GRANT SELECT ON dbo.MOD_REPORT_STATUS_HISTORY TO rma_users
go
GRANT INSERT ON dbo.MOD_REPORT_STATUS_HISTORY TO eqa_user
go
GRANT DELETE ON dbo.MOD_REPORT_STATUS_HISTORY TO eqa_user
go
GRANT UPDATE ON dbo.MOD_REPORT_STATUS_HISTORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MOD_REPORT_STATUS_HISTORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MOD_REPORT_STATUS_HISTORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MOD_REPORT_STATUS_HISTORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MOD_REPORT_STATUS_HISTORY TO eqa_user
go
CREATE TABLE dbo.MOD_REPORT_TYPE_CODE
(
    mod_report_type_code code_2 NOT NULL,
    mod_report_type_desc descr  NULL,
    CONSTRAINT PK_MOD_REPORT_TYPE_CODE
    PRIMARY KEY CLUSTERED (mod_report_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MOD_REPORT_TYPE_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MOD_REPORT_TYPE_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MOD_REPORT_TYPE_CODE >>>'
go
ALTER TABLE dbo.MODERATION_REPORT
    ADD CONSTRAINT FK_MOD_REPORT_TYPE_CODE
    FOREIGN KEY (mod_report_type_code)
    REFERENCES dbo.MOD_REPORT_TYPE_CODE (mod_report_type_code)
go
GRANT REFERENCES ON dbo.MOD_REPORT_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.MOD_REPORT_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.MOD_REPORT_TYPE_CODE TO read_only
go
GRANT SELECT ON dbo.MOD_REPORT_TYPE_CODE TO rma_users
go
GRANT INSERT ON dbo.MOD_REPORT_TYPE_CODE TO eqa_user
go
GRANT DELETE ON dbo.MOD_REPORT_TYPE_CODE TO eqa_user
go
GRANT UPDATE ON dbo.MOD_REPORT_TYPE_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MOD_REPORT_TYPE_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MOD_REPORT_TYPE_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MOD_REPORT_TYPE_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MOD_REPORT_TYPE_CODE TO eqa_user
go
CREATE TABLE dbo.MOD_ROLE_STATUS_CODE
(
    mod_role_status_code char(3) NOT NULL,
    mod_role_status_desc descr   NULL,
    sort_key             sortkey NOT NULL,
    CONSTRAINT PK_MOD_ROLE_STATUS_CODE
    PRIMARY KEY CLUSTERED (mod_role_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MOD_ROLE_STATUS_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MOD_ROLE_STATUS_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MOD_ROLE_STATUS_CODE >>>'
go
ALTER TABLE dbo.MODERATOR_ROLE
    ADD CONSTRAINT FK_MOD_ROLE_STATUS
    FOREIGN KEY (mod_role_status_code)
    REFERENCES dbo.MOD_ROLE_STATUS_CODE (mod_role_status_code)
go
GRANT REFERENCES ON dbo.MOD_ROLE_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.MOD_ROLE_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.MOD_ROLE_STATUS_CODE TO read_only
go
GRANT SELECT ON dbo.MOD_ROLE_STATUS_CODE TO rma_users
go
GRANT INSERT ON dbo.MOD_ROLE_STATUS_CODE TO eqa_user
go
GRANT DELETE ON dbo.MOD_ROLE_STATUS_CODE TO eqa_user
go
GRANT UPDATE ON dbo.MOD_ROLE_STATUS_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MOD_ROLE_STATUS_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MOD_ROLE_STATUS_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MOD_ROLE_STATUS_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MOD_ROLE_STATUS_CODE TO eqa_user
go
CREATE TABLE dbo.MOD_ROLE_STATUS_REASON
(
    mod_role_status_reason code_2 NOT NULL,
    status_reason_desc     descr  NULL,
    CONSTRAINT PK_MOD_ROLE_STATUS_REASON
    PRIMARY KEY CLUSTERED (mod_role_status_reason)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MOD_ROLE_STATUS_REASON') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MOD_ROLE_STATUS_REASON >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MOD_ROLE_STATUS_REASON >>>'
go
ALTER TABLE dbo.MODERATOR_ROLE
    ADD CONSTRAINT FK_MOD_ROLE_REASON
    FOREIGN KEY (mod_role_status_reason)
    REFERENCES dbo.MOD_ROLE_STATUS_REASON (mod_role_status_reason)
go
GRANT REFERENCES ON dbo.MOD_ROLE_STATUS_REASON TO eqa_user
go
GRANT SELECT ON dbo.MOD_ROLE_STATUS_REASON TO eqa_user
go
GRANT SELECT ON dbo.MOD_ROLE_STATUS_REASON TO read_only
go
GRANT SELECT ON dbo.MOD_ROLE_STATUS_REASON TO rma_users
go
GRANT INSERT ON dbo.MOD_ROLE_STATUS_REASON TO eqa_user
go
GRANT DELETE ON dbo.MOD_ROLE_STATUS_REASON TO eqa_user
go
GRANT UPDATE ON dbo.MOD_ROLE_STATUS_REASON TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MOD_ROLE_STATUS_REASON TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MOD_ROLE_STATUS_REASON TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MOD_ROLE_STATUS_REASON TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MOD_ROLE_STATUS_REASON TO eqa_user
go
CREATE TABLE dbo.MOE_NUMBER
(
    moe_number_id             OBJECT_ID NOT NULL,
    moe_lower_limit           OBJECT_ID NOT NULL,
    moe_upper_limit           OBJECT_ID NOT NULL,
    next_available_moe_number OBJECT_ID NOT NULL,
    active_ind                yn_ind    NOT NULL,
    audit_tran_id             OBJECT_ID NOT NULL,
    CONSTRAINT PK_MOE_NUMBER
    PRIMARY KEY CLUSTERED (moe_number_id)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.MOE_NUMBER') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MOE_NUMBER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MOE_NUMBER >>>'
go
GRANT REFERENCES ON dbo.MOE_NUMBER TO eqa_user
go
GRANT SELECT ON dbo.MOE_NUMBER TO eqa_user
go
GRANT SELECT ON dbo.MOE_NUMBER TO read_only
go
GRANT SELECT ON dbo.MOE_NUMBER TO rma_users
go
GRANT INSERT ON dbo.MOE_NUMBER TO eqa_user
go
GRANT DELETE ON dbo.MOE_NUMBER TO eqa_user
go
GRANT UPDATE ON dbo.MOE_NUMBER TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MOE_NUMBER TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MOE_NUMBER TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MOE_NUMBER TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MOE_NUMBER TO eqa_user
go
CREATE TABLE dbo.MOE_YEAR_LEVEL_CODE
(
    moe_year_level_code number_2 NOT NULL,
    moe_year_level_desc descr    NOT NULL,
    active_ind          yn_ind   NOT NULL,
    CONSTRAINT PK_MOE_YEAR_LEVEL_CODE
    PRIMARY KEY CLUSTERED (moe_year_level_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.MOE_YEAR_LEVEL_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.MOE_YEAR_LEVEL_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.MOE_YEAR_LEVEL_CODE >>>'
go
ALTER TABLE dbo.LEARNER_ENROLMENT
    ADD CONSTRAINT FK_ENROLMENT_MOE_YEAR
    FOREIGN KEY (moe_year_level_code)
    REFERENCES dbo.MOE_YEAR_LEVEL_CODE (moe_year_level_code)
go
GRANT REFERENCES ON dbo.MOE_YEAR_LEVEL_CODE TO eqa_user
go
GRANT SELECT ON dbo.MOE_YEAR_LEVEL_CODE TO eqa_user
go
GRANT SELECT ON dbo.MOE_YEAR_LEVEL_CODE TO read_only
go
GRANT SELECT ON dbo.MOE_YEAR_LEVEL_CODE TO rma_users
go
GRANT INSERT ON dbo.MOE_YEAR_LEVEL_CODE TO eqa_user
go
GRANT DELETE ON dbo.MOE_YEAR_LEVEL_CODE TO eqa_user
go
GRANT UPDATE ON dbo.MOE_YEAR_LEVEL_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.MOE_YEAR_LEVEL_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.MOE_YEAR_LEVEL_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.MOE_YEAR_LEVEL_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.MOE_YEAR_LEVEL_CODE TO eqa_user
go
CREATE TABLE dbo.NAME
(
    name_id               OBJECT_ID    NOT NULL,
    perorg_id             OBJECT_ID    NOT NULL,
    name_type_code        code_2       NOT NULL,
    preferred_ind         yn           DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    surname               varchar(200) NULL,
    name1                 long_name    NULL,
    name2                 long_name    NULL,
    name3                 long_name    NULL,
    title                 char(2)      NULL,
    audit_tran_id         OBJECT_ID    NULL,
    ts                    timestamp    NOT NULL,
    merge_request_number  OBJECT_ID    NULL,
    original_reference_id OBJECT_ID    NULL,
    active_ind            yn           DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    CONSTRAINT PK_NAME
    PRIMARY KEY NONCLUSTERED (name_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NAME') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NAME >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NAME >>>'
go
ALTER TABLE dbo.NAME
    ADD CONSTRAINT FK_NAME_MERGE_REQUEST
    FOREIGN KEY (merge_request_number)
    REFERENCES dbo.MERGE_REQUEST (merge_request_number)
go
ALTER TABLE dbo.NAME
    ADD CONSTRAINT FK_TITLE_SALUTATION
    FOREIGN KEY (title)
    REFERENCES dbo.SALUTATION (salutation_code)
go
ALTER TABLE dbo.NAME
    ADD CONSTRAINT FK_NAME_ORIG_REF_ID
    FOREIGN KEY (original_reference_id)
    REFERENCES dbo.NAME (name_id)
go
GRANT REFERENCES ON dbo.NAME TO eqa_user
go
GRANT SELECT ON dbo.NAME TO eqa_user
go
GRANT SELECT ON dbo.NAME TO read_only
go
GRANT SELECT ON dbo.NAME TO rma_users
go
GRANT INSERT ON dbo.NAME TO eqa_user
go
GRANT DELETE ON dbo.NAME TO eqa_user
go
GRANT UPDATE ON dbo.NAME TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NAME TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NAME TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NAME TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NAME TO eqa_user
go
CREATE TABLE dbo.NAME_DOB_VER_CODE
(
    name_dob_verification_code code_2 NOT NULL,
    name_dob_ver_code_desc     descr  NULL,
    CONSTRAINT PK_NAME_DOB_VER_CODE
    PRIMARY KEY CLUSTERED (name_dob_verification_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NAME_DOB_VER_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NAME_DOB_VER_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NAME_DOB_VER_CODE >>>'
go
ALTER TABLE dbo.LEARNER
    ADD CONSTRAINT FK_LEARNER_FK_LEARNE_NAME_DOB
    FOREIGN KEY (name_dob_verification_code)
    REFERENCES dbo.NAME_DOB_VER_CODE (name_dob_verification_code)
go
ALTER TABLE dbo.LEARNER_INPUT_MATCH
    ADD CONSTRAINT FK_LEARNER_INP_MATCH_NAME_DOB
    FOREIGN KEY (name_dob_verification_code)
    REFERENCES dbo.NAME_DOB_VER_CODE (name_dob_verification_code)
go
GRANT REFERENCES ON dbo.NAME_DOB_VER_CODE TO eqa_user
go
GRANT SELECT ON dbo.NAME_DOB_VER_CODE TO eqa_user
go
GRANT SELECT ON dbo.NAME_DOB_VER_CODE TO read_only
go
GRANT SELECT ON dbo.NAME_DOB_VER_CODE TO rma_users
go
GRANT INSERT ON dbo.NAME_DOB_VER_CODE TO eqa_user
go
GRANT DELETE ON dbo.NAME_DOB_VER_CODE TO eqa_user
go
GRANT UPDATE ON dbo.NAME_DOB_VER_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NAME_DOB_VER_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NAME_DOB_VER_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NAME_DOB_VER_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NAME_DOB_VER_CODE TO eqa_user
go
CREATE TABLE dbo.NAME_TYPE
(
    name_type_code   code_2  NOT NULL,
    name_type_desc   descr   NULL,
    perorg_type_code char(1) NULL,
    CONSTRAINT PK_NAME_TYPE
    PRIMARY KEY CLUSTERED (name_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NAME_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NAME_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NAME_TYPE >>>'
go
ALTER TABLE dbo.NAME
    ADD CONSTRAINT FK_NAME_FK_NAME_F_NAME_TYP
    FOREIGN KEY (name_type_code)
    REFERENCES dbo.NAME_TYPE (name_type_code)
go
GRANT REFERENCES ON dbo.NAME_TYPE TO eqa_user
go
GRANT SELECT ON dbo.NAME_TYPE TO eqa_user
go
GRANT SELECT ON dbo.NAME_TYPE TO read_only
go
GRANT SELECT ON dbo.NAME_TYPE TO rma_users
go
GRANT INSERT ON dbo.NAME_TYPE TO eqa_user
go
GRANT DELETE ON dbo.NAME_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.NAME_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NAME_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NAME_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NAME_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NAME_TYPE TO eqa_user
go
CREATE TABLE dbo.NEXT_ID
(
    id_type name      NOT NULL,
    next_id OBJECT_ID DEFAULT 1 NOT NULL,
    CONSTRAINT PK_NEXT_ID
    PRIMARY KEY CLUSTERED (id_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NEXT_ID') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NEXT_ID >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NEXT_ID >>>'
go
GRANT REFERENCES ON dbo.NEXT_ID TO eqa_user
go
GRANT REFERENCES ON dbo.NEXT_ID TO zim_user
go
GRANT SELECT ON dbo.NEXT_ID TO eqa_user
go
GRANT SELECT ON dbo.NEXT_ID TO zim_user
go
GRANT SELECT ON dbo.NEXT_ID TO read_only
go
GRANT SELECT ON dbo.NEXT_ID TO rma_users
go
GRANT INSERT ON dbo.NEXT_ID TO eqa_user
go
GRANT INSERT ON dbo.NEXT_ID TO zim_user
go
GRANT INSERT ON dbo.NEXT_ID TO eqa_rpt_user
go
GRANT INSERT ON dbo.NEXT_ID TO eqa_vp_user
go
GRANT DELETE ON dbo.NEXT_ID TO eqa_user
go
GRANT DELETE ON dbo.NEXT_ID TO zim_user
go
GRANT DELETE ON dbo.NEXT_ID TO eqa_rpt_user
go
GRANT DELETE ON dbo.NEXT_ID TO eqa_vp_user
go
GRANT UPDATE ON dbo.NEXT_ID TO sqr_eqa_user
go
GRANT UPDATE ON dbo.NEXT_ID TO eqa_user
go
GRANT UPDATE ON dbo.NEXT_ID TO zim_user
go
GRANT UPDATE ON dbo.NEXT_ID TO eqa_rpt_user
go
GRANT UPDATE ON dbo.NEXT_ID TO eqa_vp_user
go
GRANT DELETE STATISTICS ON dbo.NEXT_ID TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NEXT_ID TO zim_user
go
GRANT TRUNCATE TABLE ON dbo.NEXT_ID TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NEXT_ID TO zim_user
go
GRANT UPDATE STATISTICS ON dbo.NEXT_ID TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NEXT_ID TO zim_user
go
GRANT TRANSFER TABLE ON dbo.NEXT_ID TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NEXT_ID TO zim_user
go
CREATE TABLE dbo.NOTE_COM_TYPE
(
    note_com_type_code code_2  NOT NULL,
    note_com_type_desc descr   NOT NULL,
    active_ind         yn_ind  NOT NULL,
    sortkey            sortkey NOT NULL,
    CONSTRAINT PK_NOTE_COM_TYPE
    PRIMARY KEY NONCLUSTERED (note_com_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NOTE_COM_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NOTE_COM_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NOTE_COM_TYPE >>>'
go
GRANT REFERENCES ON dbo.NOTE_COM_TYPE TO eqa_user
go
GRANT SELECT ON dbo.NOTE_COM_TYPE TO eqa_user
go
GRANT SELECT ON dbo.NOTE_COM_TYPE TO read_only
go
GRANT SELECT ON dbo.NOTE_COM_TYPE TO rma_users
go
GRANT INSERT ON dbo.NOTE_COM_TYPE TO eqa_user
go
GRANT DELETE ON dbo.NOTE_COM_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.NOTE_COM_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NOTE_COM_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NOTE_COM_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NOTE_COM_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NOTE_COM_TYPE TO eqa_user
go
CREATE TABLE dbo.NOTE_ISSUE_RESP_TYPE
(
    issue_resp_type_code code_2    NOT NULL,
    issue_resp_type_desc descr     NOT NULL,
    active_ind           yn_ind    NOT NULL,
    sortkey              sortkey   NOT NULL,
    audit_tran_id        OBJECT_ID NOT NULL,
    CONSTRAINT PK_NOTE_ISSUE_RESP_TYPE
    PRIMARY KEY CLUSTERED (issue_resp_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NOTE_ISSUE_RESP_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NOTE_ISSUE_RESP_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NOTE_ISSUE_RESP_TYPE >>>'
go
GRANT REFERENCES ON dbo.NOTE_ISSUE_RESP_TYPE TO eqa_user
go
GRANT SELECT ON dbo.NOTE_ISSUE_RESP_TYPE TO eqa_user
go
GRANT SELECT ON dbo.NOTE_ISSUE_RESP_TYPE TO read_only
go
GRANT SELECT ON dbo.NOTE_ISSUE_RESP_TYPE TO rma_users
go
GRANT INSERT ON dbo.NOTE_ISSUE_RESP_TYPE TO eqa_user
go
GRANT DELETE ON dbo.NOTE_ISSUE_RESP_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.NOTE_ISSUE_RESP_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NOTE_ISSUE_RESP_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NOTE_ISSUE_RESP_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NOTE_ISSUE_RESP_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NOTE_ISSUE_RESP_TYPE TO eqa_user
go
CREATE TABLE dbo.NOTE_ISSUE_SEVERITY_CODE
(
    issue_severity_code code_2    NOT NULL,
    issue_severity_desc descr     NOT NULL,
    active_ind          yn_ind    NOT NULL,
    sortkey             sortkey   NOT NULL,
    audit_tran_id       OBJECT_ID NOT NULL,
    CONSTRAINT PK_NOTE_ISSUE_SEVERITY_CODE
    PRIMARY KEY CLUSTERED (issue_severity_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NOTE_ISSUE_SEVERITY_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NOTE_ISSUE_SEVERITY_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NOTE_ISSUE_SEVERITY_CODE >>>'
go
GRANT REFERENCES ON dbo.NOTE_ISSUE_SEVERITY_CODE TO eqa_user
go
GRANT SELECT ON dbo.NOTE_ISSUE_SEVERITY_CODE TO eqa_user
go
GRANT SELECT ON dbo.NOTE_ISSUE_SEVERITY_CODE TO read_only
go
GRANT SELECT ON dbo.NOTE_ISSUE_SEVERITY_CODE TO rma_users
go
GRANT INSERT ON dbo.NOTE_ISSUE_SEVERITY_CODE TO eqa_user
go
GRANT DELETE ON dbo.NOTE_ISSUE_SEVERITY_CODE TO eqa_user
go
GRANT UPDATE ON dbo.NOTE_ISSUE_SEVERITY_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NOTE_ISSUE_SEVERITY_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NOTE_ISSUE_SEVERITY_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NOTE_ISSUE_SEVERITY_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NOTE_ISSUE_SEVERITY_CODE TO eqa_user
go
CREATE TABLE dbo.NOTE_ISSUE_STATUS
(
    issue_status_code code_2    NOT NULL,
    issue_status_desc descr     NOT NULL,
    active_ind        yn_ind    NOT NULL,
    sortkey           sortkey   NOT NULL,
    audit_tran_id     OBJECT_ID NOT NULL,
    CONSTRAINT PK_NOTE_ISSUE_STATUS
    PRIMARY KEY CLUSTERED (issue_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NOTE_ISSUE_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NOTE_ISSUE_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NOTE_ISSUE_STATUS >>>'
go
GRANT REFERENCES ON dbo.NOTE_ISSUE_STATUS TO eqa_user
go
GRANT SELECT ON dbo.NOTE_ISSUE_STATUS TO eqa_user
go
GRANT SELECT ON dbo.NOTE_ISSUE_STATUS TO read_only
go
GRANT SELECT ON dbo.NOTE_ISSUE_STATUS TO rma_users
go
GRANT INSERT ON dbo.NOTE_ISSUE_STATUS TO eqa_user
go
GRANT DELETE ON dbo.NOTE_ISSUE_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.NOTE_ISSUE_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NOTE_ISSUE_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NOTE_ISSUE_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NOTE_ISSUE_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NOTE_ISSUE_STATUS TO eqa_user
go
CREATE TABLE dbo.NOTE_ISSUE_STATUS_HIST
(
    issue_status_hist_id OBJECT_ID NOT NULL,
    note_issue_id        OBJECT_ID NOT NULL,
    issue_status_code    code_2    NOT NULL,
    updated_date         dt        NOT NULL,
    updated_by           usr       NOT NULL,
    audit_tran_id        OBJECT_ID NOT NULL,
    CONSTRAINT PK_NOTE_ISSUE_STATUS_HIST
    PRIMARY KEY CLUSTERED (issue_status_hist_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NOTE_ISSUE_STATUS_HIST') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NOTE_ISSUE_STATUS_HIST >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NOTE_ISSUE_STATUS_HIST >>>'
go
ALTER TABLE dbo.NOTE_ISSUE_STATUS_HIST
    ADD CONSTRAINT FK_NOTE_ISS_STA_HST_ISS_STA
    FOREIGN KEY (issue_status_code)
    REFERENCES dbo.NOTE_ISSUE_STATUS (issue_status_code)
go
GRANT REFERENCES ON dbo.NOTE_ISSUE_STATUS_HIST TO eqa_user
go
GRANT SELECT ON dbo.NOTE_ISSUE_STATUS_HIST TO eqa_user
go
GRANT SELECT ON dbo.NOTE_ISSUE_STATUS_HIST TO read_only
go
GRANT SELECT ON dbo.NOTE_ISSUE_STATUS_HIST TO rma_users
go
GRANT INSERT ON dbo.NOTE_ISSUE_STATUS_HIST TO eqa_user
go
GRANT DELETE ON dbo.NOTE_ISSUE_STATUS_HIST TO eqa_user
go
GRANT UPDATE ON dbo.NOTE_ISSUE_STATUS_HIST TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NOTE_ISSUE_STATUS_HIST TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NOTE_ISSUE_STATUS_HIST TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NOTE_ISSUE_STATUS_HIST TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NOTE_ISSUE_STATUS_HIST TO eqa_user
go
CREATE TABLE dbo.NOTE_ISSUE_SUB_TYPE
(
    issue_sub_type_code code_2    NOT NULL,
    issue_type_code     code_2    NOT NULL,
    issue_sub_type_desc descr     NOT NULL,
    active_ind          yn_ind    NOT NULL,
    sortkey             sortkey   NOT NULL,
    audit_tran_id       OBJECT_ID NOT NULL,
    CONSTRAINT PK_NOTE_ISSUE_SUB_TYPE
    PRIMARY KEY CLUSTERED (issue_sub_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NOTE_ISSUE_SUB_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NOTE_ISSUE_SUB_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NOTE_ISSUE_SUB_TYPE >>>'
go
GRANT REFERENCES ON dbo.NOTE_ISSUE_SUB_TYPE TO eqa_user
go
GRANT SELECT ON dbo.NOTE_ISSUE_SUB_TYPE TO eqa_user
go
GRANT SELECT ON dbo.NOTE_ISSUE_SUB_TYPE TO read_only
go
GRANT SELECT ON dbo.NOTE_ISSUE_SUB_TYPE TO rma_users
go
GRANT INSERT ON dbo.NOTE_ISSUE_SUB_TYPE TO eqa_user
go
GRANT DELETE ON dbo.NOTE_ISSUE_SUB_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.NOTE_ISSUE_SUB_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NOTE_ISSUE_SUB_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NOTE_ISSUE_SUB_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NOTE_ISSUE_SUB_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NOTE_ISSUE_SUB_TYPE TO eqa_user
go
CREATE TABLE dbo.NOTE_ISSUE_TYPE
(
    issue_type_code code_2    NOT NULL,
    issue_type_desc descr     NOT NULL,
    active_ind      yn_ind    NOT NULL,
    sortkey         sortkey   NOT NULL,
    audit_tran_id   OBJECT_ID NOT NULL,
    CONSTRAINT PK_NOTE_ISSUE_TYPE
    PRIMARY KEY CLUSTERED (issue_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NOTE_ISSUE_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NOTE_ISSUE_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NOTE_ISSUE_TYPE >>>'
go
ALTER TABLE dbo.NOTE_ISSUE_SUB_TYPE
    ADD CONSTRAINT FK_NOTE_ISSUE_SUB_TYPE
    FOREIGN KEY (issue_type_code)
    REFERENCES dbo.NOTE_ISSUE_TYPE (issue_type_code)
go
GRANT REFERENCES ON dbo.NOTE_ISSUE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.NOTE_ISSUE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.NOTE_ISSUE_TYPE TO read_only
go
GRANT SELECT ON dbo.NOTE_ISSUE_TYPE TO rma_users
go
GRANT INSERT ON dbo.NOTE_ISSUE_TYPE TO eqa_user
go
GRANT DELETE ON dbo.NOTE_ISSUE_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.NOTE_ISSUE_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NOTE_ISSUE_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NOTE_ISSUE_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NOTE_ISSUE_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NOTE_ISSUE_TYPE TO eqa_user
go
CREATE TABLE dbo.NOTE_SUBJECT_TYPE
(
    note_subject_type_code code_2  NOT NULL,
    note_type_code         code_2  NOT NULL,
    note_subject_type_desc descr   NOT NULL,
    active_ind             yn_ind  NOT NULL,
    sortkey                sortkey NOT NULL,
    CONSTRAINT PK_NOTE_SUBJECT_TYPE
    PRIMARY KEY NONCLUSTERED (note_subject_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NOTE_SUBJECT_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NOTE_SUBJECT_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NOTE_SUBJECT_TYPE >>>'
go
GRANT REFERENCES ON dbo.NOTE_SUBJECT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.NOTE_SUBJECT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.NOTE_SUBJECT_TYPE TO read_only
go
GRANT SELECT ON dbo.NOTE_SUBJECT_TYPE TO rma_users
go
GRANT INSERT ON dbo.NOTE_SUBJECT_TYPE TO eqa_user
go
GRANT DELETE ON dbo.NOTE_SUBJECT_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.NOTE_SUBJECT_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NOTE_SUBJECT_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NOTE_SUBJECT_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NOTE_SUBJECT_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NOTE_SUBJECT_TYPE TO eqa_user
go
CREATE TABLE dbo.NOTE_TYPE
(
    note_type_code code_2  NOT NULL,
    note_type_desc descr   NOT NULL,
    active_ind     yn_ind  NOT NULL,
    sortkey        sortkey NOT NULL,
    CONSTRAINT PK_NOTE_TYPE
    PRIMARY KEY NONCLUSTERED (note_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NOTE_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NOTE_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NOTE_TYPE >>>'
go
ALTER TABLE dbo.NOTE_SUBJECT_TYPE
    ADD CONSTRAINT FK_NOTE_SUB_TYPE_NOTE_TYPE
    FOREIGN KEY (note_type_code)
    REFERENCES dbo.NOTE_TYPE (note_type_code)
go
GRANT REFERENCES ON dbo.NOTE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.NOTE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.NOTE_TYPE TO read_only
go
GRANT SELECT ON dbo.NOTE_TYPE TO rma_users
go
GRANT INSERT ON dbo.NOTE_TYPE TO eqa_user
go
GRANT DELETE ON dbo.NOTE_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.NOTE_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NOTE_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NOTE_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NOTE_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NOTE_TYPE TO eqa_user
go
CREATE TABLE dbo.NO_QFN_REASON_CODE
(
    no_qfn_reason_code code_2    NOT NULL,
    no_qfn_reason_desc descr     NOT NULL,
    active_ind         yn_ind    NOT NULL,
    sortkey            sortkey   NOT NULL,
    audit_tran_id      OBJECT_ID NOT NULL,
    CONSTRAINT PK_NO_QFN_REASON_CODE
    PRIMARY KEY CLUSTERED (no_qfn_reason_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NO_QFN_REASON_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NO_QFN_REASON_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NO_QFN_REASON_CODE >>>'
go
GRANT REFERENCES ON dbo.NO_QFN_REASON_CODE TO eqa_user
go
GRANT SELECT ON dbo.NO_QFN_REASON_CODE TO eqa_user
go
GRANT SELECT ON dbo.NO_QFN_REASON_CODE TO read_only
go
GRANT SELECT ON dbo.NO_QFN_REASON_CODE TO rma_users
go
GRANT INSERT ON dbo.NO_QFN_REASON_CODE TO eqa_user
go
GRANT DELETE ON dbo.NO_QFN_REASON_CODE TO eqa_user
go
GRANT UPDATE ON dbo.NO_QFN_REASON_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NO_QFN_REASON_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NO_QFN_REASON_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NO_QFN_REASON_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NO_QFN_REASON_CODE TO eqa_user
go
CREATE TABLE dbo.NQAF_STG_APPLICATION
(
    nqaf_stg_application_id OBJECT_ID     NOT NULL,
    perorg_case_id          OBJECT_ID     NOT NULL,
    nqaf_stg_app_type_code  code_3        NOT NULL,
    teo_perorg_id           OBJECT_ID     NULL,
    description             descr         NULL,
    created_by              usr           NOT NULL,
    created_date            dt            NOT NULL,
    submitted_by            usr           NULL,
    submitted_date          dt            NULL,
    withdrawn_by            usr           NULL,
    withdrawn_date          dt            NULL,
    withdrawn_reason        varchar(1024) NULL,
    docs_phys_posted_ind    ny_ind        NOT NULL,
    comments                TEXT_STRING   NULL,
    audit_tran_id           OBJECT_ID     NOT NULL,
    CONSTRAINT PK_NQAF_STG_APPLICATION
    PRIMARY KEY CLUSTERED (nqaf_stg_application_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NQAF_STG_APPLICATION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NQAF_STG_APPLICATION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NQAF_STG_APPLICATION >>>'
go
GRANT REFERENCES ON dbo.NQAF_STG_APPLICATION TO eqa_user
go
GRANT SELECT ON dbo.NQAF_STG_APPLICATION TO eqa_user
go
GRANT SELECT ON dbo.NQAF_STG_APPLICATION TO read_only
go
GRANT SELECT ON dbo.NQAF_STG_APPLICATION TO rma_users
go
GRANT INSERT ON dbo.NQAF_STG_APPLICATION TO eqa_user
go
GRANT DELETE ON dbo.NQAF_STG_APPLICATION TO eqa_user
go
GRANT UPDATE ON dbo.NQAF_STG_APPLICATION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NQAF_STG_APPLICATION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NQAF_STG_APPLICATION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NQAF_STG_APPLICATION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NQAF_STG_APPLICATION TO eqa_user
go
CREATE TABLE dbo.NQAF_STG_APPLN_CONTACT
(
    nqaf_stg_appln_contact_id  OBJECT_ID   NOT NULL,
    nqaf_stg_application_id    OBJECT_ID   NOT NULL,
    nqaf_stg_contact_type_code code_3      NOT NULL,
    title                      code_2      NULL,
    first_name                 long_name   NULL,
    surname                    long_name   NOT NULL,
    phone_country_code         varchar(10) NULL,
    phone_area_code            varchar(10) NULL,
    phone_number               varchar(15) NULL,
    phone_extension            varchar(10) NULL,
    cell_country_code          varchar(10) NULL,
    cell_area_code             varchar(10) NULL,
    cell_number                varchar(15) NULL,
    fax_country_code           varchar(10) NULL,
    fax_area_code              varchar(10) NULL,
    fax_number                 varchar(15) NULL,
    fax_extension              varchar(10) NULL,
    email_address              emailaddr   NULL,
    designation                name        NULL,
    audit_tran_id              OBJECT_ID   NOT NULL,
    website_address            emailaddr   NULL,
    CONSTRAINT PK_NQAF_STG_APPLN_CONTACT
    PRIMARY KEY CLUSTERED (nqaf_stg_appln_contact_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NQAF_STG_APPLN_CONTACT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NQAF_STG_APPLN_CONTACT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NQAF_STG_APPLN_CONTACT >>>'
go
ALTER TABLE dbo.NQAF_STG_APPLN_CONTACT
    ADD CONSTRAINT FK_STG_APP_CONTACT_STG_APPLN
    FOREIGN KEY (nqaf_stg_application_id)
    REFERENCES dbo.NQAF_STG_APPLICATION (nqaf_stg_application_id)
go
GRANT REFERENCES ON dbo.NQAF_STG_APPLN_CONTACT TO eqa_user
go
GRANT SELECT ON dbo.NQAF_STG_APPLN_CONTACT TO eqa_user
go
GRANT SELECT ON dbo.NQAF_STG_APPLN_CONTACT TO read_only
go
GRANT SELECT ON dbo.NQAF_STG_APPLN_CONTACT TO rma_users
go
GRANT INSERT ON dbo.NQAF_STG_APPLN_CONTACT TO eqa_user
go
GRANT DELETE ON dbo.NQAF_STG_APPLN_CONTACT TO eqa_user
go
GRANT UPDATE ON dbo.NQAF_STG_APPLN_CONTACT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NQAF_STG_APPLN_CONTACT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NQAF_STG_APPLN_CONTACT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NQAF_STG_APPLN_CONTACT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NQAF_STG_APPLN_CONTACT TO eqa_user
go
CREATE TABLE dbo.NQAF_STG_APP_DOC_TYPE
(
    nqaf_stg_app_doc_type_code code_3        NOT NULL,
    nqaf_stg_app_type_code     code_3        NOT NULL,
    short_desc                 descr         NULL,
    long_desc                  varchar(512)  NULL,
    body_desc                  varchar(1024) NULL,
    doc_mgmt_type_desc         descr         NOT NULL,
    active_ind                 yn_ind        NOT NULL,
    sortkey                    sortkey       NOT NULL,
    CONSTRAINT PK_NQAF_STG_APP_DOC_TYPE
    PRIMARY KEY CLUSTERED (nqaf_stg_app_doc_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NQAF_STG_APP_DOC_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NQAF_STG_APP_DOC_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NQAF_STG_APP_DOC_TYPE >>>'
go
GRANT REFERENCES ON dbo.NQAF_STG_APP_DOC_TYPE TO eqa_user
go
GRANT SELECT ON dbo.NQAF_STG_APP_DOC_TYPE TO eqa_user
go
GRANT SELECT ON dbo.NQAF_STG_APP_DOC_TYPE TO read_only
go
GRANT SELECT ON dbo.NQAF_STG_APP_DOC_TYPE TO rma_users
go
GRANT INSERT ON dbo.NQAF_STG_APP_DOC_TYPE TO eqa_user
go
GRANT DELETE ON dbo.NQAF_STG_APP_DOC_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.NQAF_STG_APP_DOC_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NQAF_STG_APP_DOC_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NQAF_STG_APP_DOC_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NQAF_STG_APP_DOC_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NQAF_STG_APP_DOC_TYPE TO eqa_user
go
CREATE TABLE dbo.NQAF_STG_APP_TYPE
(
    nqaf_stg_app_type_code      code_3        NOT NULL,
    app_type_code               code_3        NOT NULL,
    app_instructions            varchar(1024) NULL,
    title_desc                  descr         NULL,
    body_desc                   varchar(1024) NULL,
    case_mgmt_app_type_desc     descr         NOT NULL,
    case_mgmt_app_sub_type_desc descr         NULL,
    active_ind                  yn_ind        NOT NULL,
    sortkey                     sortkey       NOT NULL,
    CONSTRAINT PK_NQAF_STG_APP_TYPE
    PRIMARY KEY CLUSTERED (nqaf_stg_app_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NQAF_STG_APP_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NQAF_STG_APP_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NQAF_STG_APP_TYPE >>>'
go
ALTER TABLE dbo.NQAF_STG_APPLICATION
    ADD CONSTRAINT FK_STG_APPLN_STG_APP_TYPE
    FOREIGN KEY (nqaf_stg_app_type_code)
    REFERENCES dbo.NQAF_STG_APP_TYPE (nqaf_stg_app_type_code)
go
ALTER TABLE dbo.NQAF_STG_APP_DOC_TYPE
    ADD CONSTRAINT FK_STG_APP_DOC_TYPE_STG_APP_TY
    FOREIGN KEY (nqaf_stg_app_type_code)
    REFERENCES dbo.NQAF_STG_APP_TYPE (nqaf_stg_app_type_code)
go
GRANT REFERENCES ON dbo.NQAF_STG_APP_TYPE TO eqa_user
go
GRANT SELECT ON dbo.NQAF_STG_APP_TYPE TO eqa_user
go
GRANT SELECT ON dbo.NQAF_STG_APP_TYPE TO read_only
go
GRANT SELECT ON dbo.NQAF_STG_APP_TYPE TO rma_users
go
GRANT INSERT ON dbo.NQAF_STG_APP_TYPE TO eqa_user
go
GRANT DELETE ON dbo.NQAF_STG_APP_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.NQAF_STG_APP_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NQAF_STG_APP_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NQAF_STG_APP_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NQAF_STG_APP_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NQAF_STG_APP_TYPE TO eqa_user
go
CREATE TABLE dbo.NQAF_STG_CAA_APP
(
    nqaf_stg_application_id     OBJECT_ID   NOT NULL,
    reason_for_change           TEXT_STRING NULL,
    course_dev_and_review       TEXT_STRING NULL,
    library_resources           TEXT_STRING NULL,
    staffing_resources          TEXT_STRING NULL,
    teaching_learning_resources TEXT_STRING NULL,
    organisation_qms            TEXT_STRING NULL,
    organisation_stability      TEXT_STRING NULL,
    external_support            TEXT_STRING NULL,
    internal_support            TEXT_STRING NULL,
    internal_approval           TEXT_STRING NULL,
    overseas_delivery           TEXT_STRING NULL,
    deliver_mode_exp            TEXT_STRING NULL,
    subject_area_exp            TEXT_STRING NULL,
    transition_arrangements     TEXT_STRING NULL,
    audit_tran_id               OBJECT_ID   NOT NULL,
    summary_of_change           TEXT_STRING NULL,
    CONSTRAINT PK_NQAF_STG_CAA_APP
    PRIMARY KEY CLUSTERED (nqaf_stg_application_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NQAF_STG_CAA_APP') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NQAF_STG_CAA_APP >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NQAF_STG_CAA_APP >>>'
go
ALTER TABLE dbo.NQAF_STG_CAA_APP
    ADD CONSTRAINT FK_STG_APPLN_STG_CAA_APP
    FOREIGN KEY (nqaf_stg_application_id)
    REFERENCES dbo.NQAF_STG_APPLICATION (nqaf_stg_application_id)
go
GRANT REFERENCES ON dbo.NQAF_STG_CAA_APP TO eqa_user
go
GRANT SELECT ON dbo.NQAF_STG_CAA_APP TO eqa_user
go
GRANT SELECT ON dbo.NQAF_STG_CAA_APP TO read_only
go
GRANT SELECT ON dbo.NQAF_STG_CAA_APP TO rma_users
go
GRANT INSERT ON dbo.NQAF_STG_CAA_APP TO eqa_user
go
GRANT DELETE ON dbo.NQAF_STG_CAA_APP TO eqa_user
go
GRANT UPDATE ON dbo.NQAF_STG_CAA_APP TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NQAF_STG_CAA_APP TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NQAF_STG_CAA_APP TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NQAF_STG_CAA_APP TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NQAF_STG_CAA_APP TO eqa_user
go
CREATE TABLE dbo.NQAF_STG_CONTACT_TYPE
(
    nqaf_stg_contact_type_code code_3  NOT NULL,
    nqaf_stg_contact_type_desc descr   NOT NULL,
    active_ind                 yn_ind  NOT NULL,
    sortkey                    sortkey NOT NULL,
    CONSTRAINT PK_NQAF_STG_CONTACT_TYPE
    PRIMARY KEY CLUSTERED (nqaf_stg_contact_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NQAF_STG_CONTACT_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NQAF_STG_CONTACT_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NQAF_STG_CONTACT_TYPE >>>'
go
ALTER TABLE dbo.NQAF_STG_APPLN_CONTACT
    ADD CONSTRAINT FK_STG_APPLN_CONT_STG_CONT_TYP
    FOREIGN KEY (nqaf_stg_contact_type_code)
    REFERENCES dbo.NQAF_STG_CONTACT_TYPE (nqaf_stg_contact_type_code)
go
GRANT REFERENCES ON dbo.NQAF_STG_CONTACT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.NQAF_STG_CONTACT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.NQAF_STG_CONTACT_TYPE TO read_only
go
GRANT SELECT ON dbo.NQAF_STG_CONTACT_TYPE TO rma_users
go
GRANT INSERT ON dbo.NQAF_STG_CONTACT_TYPE TO eqa_user
go
GRANT DELETE ON dbo.NQAF_STG_CONTACT_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.NQAF_STG_CONTACT_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NQAF_STG_CONTACT_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NQAF_STG_CONTACT_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NQAF_STG_CONTACT_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NQAF_STG_CONTACT_TYPE TO eqa_user
go
CREATE TABLE dbo.NQAF_STG_CRSE_QFN
(
    nqaf_stg_crse_qfn_id OBJECT_ID     NOT NULL,
    qfn_type_code        code_2        NOT NULL,
    course_version_id    OBJECT_ID     NOT NULL,
    cfn_catg_id          OBJECT_ID     NULL,
    title                varchar(1000) NOT NULL,
    title_umlauts        varchar(1000) NOT NULL,
    prerequisite         text          NOT NULL OFF ROW,
    content              text          NOT NULL OFF ROW,
    outcome              text          NOT NULL OFF ROW,
    credits_range_from   numeric(3,0)  NOT NULL,
    credits_range_to     numeric(3,0)  NOT NULL,
    level_range_from     code_2        NOT NULL,
    level_range_to       code_2        NOT NULL,
    active_ind           yn_ind        NOT NULL,
    audit_tran_id        numeric(12,0) NOT NULL,
    CONSTRAINT PK_NQAF_STG_CRSE_QFN
    PRIMARY KEY CLUSTERED (nqaf_stg_crse_qfn_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NQAF_STG_CRSE_QFN') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NQAF_STG_CRSE_QFN >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NQAF_STG_CRSE_QFN >>>'
go
ALTER TABLE dbo.NQAF_STG_CRSE_QFN
    ADD CONSTRAINT FK_STG_CRSE_QFN_LVL_TO
    FOREIGN KEY (level_range_to)
    REFERENCES dbo.LVL (level_code)
go
ALTER TABLE dbo.NQAF_STG_CRSE_QFN
    ADD CONSTRAINT FK_STG_CRSE_QFN_LVL_FROM
    FOREIGN KEY (level_range_from)
    REFERENCES dbo.LVL (level_code)
go
ALTER TABLE dbo.NQAF_STG_CRSE_QFN
    ADD CONSTRAINT FK_STG_CRSE_QFN_CFN_CATG
    FOREIGN KEY (cfn_catg_id)
    REFERENCES dbo.CFN_CATEGORY (cfn_catg_id)
go
ALTER TABLE dbo.NQAF_STG_CRSE_QFN
    ADD CONSTRAINT FK_STG_CRSE_QFN_QFN_TYPE
    FOREIGN KEY (qfn_type_code)
    REFERENCES dbo.QFN_TYPE (qfn_type_code)
go
ALTER TABLE dbo.NQAF_STG_CRSE_QFN
    ADD CONSTRAINT FK_STG_CRSE_QFN_COURSE_VER
    FOREIGN KEY (course_version_id)
    REFERENCES dbo.COURSE_VERSION (course_version_id)
go
GRANT REFERENCES ON dbo.NQAF_STG_CRSE_QFN TO eqa_user
go
GRANT SELECT ON dbo.NQAF_STG_CRSE_QFN TO eqa_user
go
GRANT SELECT ON dbo.NQAF_STG_CRSE_QFN TO read_only
go
GRANT SELECT ON dbo.NQAF_STG_CRSE_QFN TO rma_users
go
GRANT INSERT ON dbo.NQAF_STG_CRSE_QFN TO eqa_user
go
GRANT DELETE ON dbo.NQAF_STG_CRSE_QFN TO eqa_user
go
GRANT UPDATE ON dbo.NQAF_STG_CRSE_QFN TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NQAF_STG_CRSE_QFN TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NQAF_STG_CRSE_QFN TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NQAF_STG_CRSE_QFN TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NQAF_STG_CRSE_QFN TO eqa_user
go
CREATE TABLE dbo.NQAF_STG_REG_APP
(
    nqaf_stg_reg_app_id  OBJECT_ID   NOT NULL,
    organisation_name    name        NULL,
    trading_name         name        NULL,
    moe_provider_id      OBJECT_ID   NULL,
    street_addr_1        addr_line   NULL,
    street_addr_2        addr_line   NULL,
    street_addr_3        addr_line   NULL,
    street_addr_4        addr_line   NULL,
    street_post_code     postcode    NULL,
    street_country_code  code_2      NULL,
    postal_addr_1        addr_line   NULL,
    postal_addr_2        addr_line   NULL,
    postal_addr_3        addr_line   NULL,
    postal_addr_4        addr_line   NULL,
    postal_post_code     postcode    NULL,
    postal_country_code  code_2      NULL,
    sfp_exempt_ind       ny_ind      NOT NULL,
    subject_area_desc    descr       NULL,
    staff_count          COUNT_1     NULL,
    student_count        COUNT_1     NULL,
    gst_number           varchar(32) NULL,
    financial_year_end   varchar(32) NULL,
    gb_organisation_name name        NULL,
    gb_org_legal_status  code_2      NULL,
    gb_entity_number     varchar(16) NULL,
    justification        TEXT_STRING NULL,
    caa_app_pending_ind  ny_ind      NOT NULL,
    nqf_app_pending_ind  ny_ind      NOT NULL,
    audit_tran_id        OBJECT_ID   NOT NULL,
    CONSTRAINT PK_NQAF_STG_REG_APP
    PRIMARY KEY CLUSTERED (nqaf_stg_reg_app_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NQAF_STG_REG_APP') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NQAF_STG_REG_APP >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NQAF_STG_REG_APP >>>'
go
ALTER TABLE dbo.NQAF_STG_REG_APP
    ADD CONSTRAINT FK_STG_REG_APP_STG_APPLN
    FOREIGN KEY (nqaf_stg_reg_app_id)
    REFERENCES dbo.NQAF_STG_APPLICATION (nqaf_stg_application_id)
go
GRANT REFERENCES ON dbo.NQAF_STG_REG_APP TO eqa_user
go
GRANT SELECT ON dbo.NQAF_STG_REG_APP TO eqa_user
go
GRANT SELECT ON dbo.NQAF_STG_REG_APP TO read_only
go
GRANT SELECT ON dbo.NQAF_STG_REG_APP TO rma_users
go
GRANT INSERT ON dbo.NQAF_STG_REG_APP TO eqa_user
go
GRANT DELETE ON dbo.NQAF_STG_REG_APP TO eqa_user
go
GRANT UPDATE ON dbo.NQAF_STG_REG_APP TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NQAF_STG_REG_APP TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NQAF_STG_REG_APP TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NQAF_STG_REG_APP TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NQAF_STG_REG_APP TO eqa_user
go
CREATE TABLE dbo.NQAF_STG_REG_EXEMPTION
(
    prov_sfp_exemption_id   OBJECT_ID NOT NULL,
    nqaf_stg_reg_app_id     OBJECT_ID NOT NULL,
    sfp_exemption_type_code code_2    NOT NULL,
    audit_tran_id           OBJECT_ID NOT NULL,
    CONSTRAINT PK_NQAF_STG_REG_EXEMPTION
    PRIMARY KEY CLUSTERED (prov_sfp_exemption_id)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.NQAF_STG_REG_EXEMPTION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NQAF_STG_REG_EXEMPTION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NQAF_STG_REG_EXEMPTION >>>'
go
ALTER TABLE dbo.NQAF_STG_REG_EXEMPTION
    ADD CONSTRAINT FK_STG_REG_EXEMPT_STG_REG_APP
    FOREIGN KEY (nqaf_stg_reg_app_id)
    REFERENCES dbo.NQAF_STG_REG_APP (nqaf_stg_reg_app_id)
go
ALTER TABLE dbo.NQAF_STG_REG_EXEMPTION
    ADD CONSTRAINT FK_STG_REG_EXMPT_SFP_EXMPT_TYP
    FOREIGN KEY (sfp_exemption_type_code)
    REFERENCES dbo.SFP_EXEMPTION_TYPE (sfp_exemption_type_code)
go
GRANT REFERENCES ON dbo.NQAF_STG_REG_EXEMPTION TO eqa_user
go
GRANT SELECT ON dbo.NQAF_STG_REG_EXEMPTION TO eqa_user
go
GRANT SELECT ON dbo.NQAF_STG_REG_EXEMPTION TO read_only
go
GRANT SELECT ON dbo.NQAF_STG_REG_EXEMPTION TO rma_users
go
GRANT INSERT ON dbo.NQAF_STG_REG_EXEMPTION TO eqa_user
go
GRANT DELETE ON dbo.NQAF_STG_REG_EXEMPTION TO eqa_user
go
GRANT UPDATE ON dbo.NQAF_STG_REG_EXEMPTION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NQAF_STG_REG_EXEMPTION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NQAF_STG_REG_EXEMPTION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NQAF_STG_REG_EXEMPTION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NQAF_STG_REG_EXEMPTION TO eqa_user
go
CREATE TABLE dbo.NQAF_STG_REG_FOCUS
(
    nqaf_stg_reg_focus_id OBJECT_ID NOT NULL,
    nqaf_stg_reg_app_id   OBJECT_ID NOT NULL,
    provider_focus_code   code_2    NOT NULL,
    audit_tran_id         OBJECT_ID NOT NULL,
    CONSTRAINT PK_NQAF_STG_REG_FOCUS
    PRIMARY KEY NONCLUSTERED (nqaf_stg_reg_focus_id)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.NQAF_STG_REG_FOCUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NQAF_STG_REG_FOCUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NQAF_STG_REG_FOCUS >>>'
go
ALTER TABLE dbo.NQAF_STG_REG_FOCUS
    ADD CONSTRAINT FK_STG_REG_FOCUS_STG_REG_APP
    FOREIGN KEY (nqaf_stg_reg_app_id)
    REFERENCES dbo.NQAF_STG_REG_APP (nqaf_stg_reg_app_id)
go
GRANT REFERENCES ON dbo.NQAF_STG_REG_FOCUS TO eqa_user
go
GRANT SELECT ON dbo.NQAF_STG_REG_FOCUS TO eqa_user
go
GRANT SELECT ON dbo.NQAF_STG_REG_FOCUS TO read_only
go
GRANT SELECT ON dbo.NQAF_STG_REG_FOCUS TO rma_users
go
GRANT INSERT ON dbo.NQAF_STG_REG_FOCUS TO eqa_user
go
GRANT DELETE ON dbo.NQAF_STG_REG_FOCUS TO eqa_user
go
GRANT UPDATE ON dbo.NQAF_STG_REG_FOCUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NQAF_STG_REG_FOCUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NQAF_STG_REG_FOCUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NQAF_STG_REG_FOCUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NQAF_STG_REG_FOCUS TO eqa_user
go
CREATE TABLE dbo.NSI_INSTRUCTION_CODE
(
    nsi_instruction_code      code_2 NOT NULL,
    nsi_instruction_code_desc descr  NOT NULL,
    CONSTRAINT PK_NSI_INSTRUCTION_CODE
    PRIMARY KEY CLUSTERED (nsi_instruction_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NSI_INSTRUCTION_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NSI_INSTRUCTION_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NSI_INSTRUCTION_CODE >>>'
go
ALTER TABLE dbo.MERGE_REQUEST
    ADD CONSTRAINT FK_MERGE_REQUEST_NSI_INST_CODE
    FOREIGN KEY (nsi_instruction_code)
    REFERENCES dbo.NSI_INSTRUCTION_CODE (nsi_instruction_code)
go
GRANT REFERENCES ON dbo.NSI_INSTRUCTION_CODE TO eqa_user
go
GRANT SELECT ON dbo.NSI_INSTRUCTION_CODE TO eqa_user
go
GRANT SELECT ON dbo.NSI_INSTRUCTION_CODE TO read_only
go
GRANT SELECT ON dbo.NSI_INSTRUCTION_CODE TO rma_users
go
GRANT INSERT ON dbo.NSI_INSTRUCTION_CODE TO eqa_user
go
GRANT DELETE ON dbo.NSI_INSTRUCTION_CODE TO eqa_user
go
GRANT UPDATE ON dbo.NSI_INSTRUCTION_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NSI_INSTRUCTION_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NSI_INSTRUCTION_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NSI_INSTRUCTION_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NSI_INSTRUCTION_CODE TO eqa_user
go
CREATE TABLE dbo.NSI_STATUS_CODE
(
    nsi_status_code      code_1 NOT NULL,
    nsi_status_code_desc descr  NULL,
    active_ind           yn     DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    CONSTRAINT PK_NSI_STATUS_CODE
    PRIMARY KEY CLUSTERED (nsi_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NSI_STATUS_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NSI_STATUS_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NSI_STATUS_CODE >>>'
go
ALTER TABLE dbo.LEARNER
    ADD CONSTRAINT FK_LEARNER_NSI_STAT
    FOREIGN KEY (nsi_status_code)
    REFERENCES dbo.NSI_STATUS_CODE (nsi_status_code)
go
GRANT REFERENCES ON dbo.NSI_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.NSI_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.NSI_STATUS_CODE TO read_only
go
GRANT SELECT ON dbo.NSI_STATUS_CODE TO rma_users
go
GRANT INSERT ON dbo.NSI_STATUS_CODE TO eqa_user
go
GRANT DELETE ON dbo.NSI_STATUS_CODE TO eqa_user
go
GRANT UPDATE ON dbo.NSI_STATUS_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NSI_STATUS_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NSI_STATUS_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NSI_STATUS_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NSI_STATUS_CODE TO eqa_user
go
CREATE TABLE dbo.NZPOST_HUB
(
    hub_id               varchar(3) NOT NULL,
    hub_description      descr      NOT NULL,
    receives_buffer_pack yn         DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    CONSTRAINT PK_NZPOST_HUB
    PRIMARY KEY CLUSTERED (hub_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NZPOST_HUB') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NZPOST_HUB >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NZPOST_HUB >>>'
go
GRANT REFERENCES ON dbo.NZPOST_HUB TO eqa_user
go
GRANT SELECT ON dbo.NZPOST_HUB TO eqa_user
go
GRANT SELECT ON dbo.NZPOST_HUB TO read_only
go
GRANT SELECT ON dbo.NZPOST_HUB TO rma_users
go
GRANT INSERT ON dbo.NZPOST_HUB TO eqa_user
go
GRANT DELETE ON dbo.NZPOST_HUB TO eqa_user
go
GRANT UPDATE ON dbo.NZPOST_HUB TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NZPOST_HUB TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NZPOST_HUB TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NZPOST_HUB TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NZPOST_HUB TO eqa_user
go
CREATE TABLE dbo.NZQA_BUSINESS_UNIT
(
    unit_code        varchar(5)   NOT NULL,
    unit_desc        varchar(255) NOT NULL,
    parent_unit_code varchar(5)   NOT NULL,
    CONSTRAINT PK_NZQA_BUSINESS_UNIT
    PRIMARY KEY CLUSTERED (unit_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NZQA_BUSINESS_UNIT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NZQA_BUSINESS_UNIT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NZQA_BUSINESS_UNIT >>>'
go
ALTER TABLE dbo.NZQA_BUSINESS_UNIT
    ADD CONSTRAINT FK_NZQA_BUS_UNIT_NZQA_BUS_UNIT
    FOREIGN KEY (parent_unit_code)
    REFERENCES dbo.NZQA_BUSINESS_UNIT (unit_code)
go
GRANT REFERENCES ON dbo.NZQA_BUSINESS_UNIT TO eqa_user
go
GRANT SELECT ON dbo.NZQA_BUSINESS_UNIT TO eqa_user
go
GRANT SELECT ON dbo.NZQA_BUSINESS_UNIT TO read_only
go
GRANT SELECT ON dbo.NZQA_BUSINESS_UNIT TO rma_users
go
GRANT INSERT ON dbo.NZQA_BUSINESS_UNIT TO eqa_user
go
GRANT DELETE ON dbo.NZQA_BUSINESS_UNIT TO eqa_user
go
GRANT UPDATE ON dbo.NZQA_BUSINESS_UNIT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NZQA_BUSINESS_UNIT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NZQA_BUSINESS_UNIT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NZQA_BUSINESS_UNIT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NZQA_BUSINESS_UNIT TO eqa_user
go
CREATE TABLE dbo.NZQA_EMPLOYEE_INFO
(
    nzqa_employee_info_id OBJECT_ID    NOT NULL,
    nzqa_position_id      OBJECT_ID    NOT NULL,
    nzqa_floor_name       varchar(100) NULL,
    audit_tran_id         OBJECT_ID    NOT NULL,
    ts                    timestamp    NOT NULL,
    CONSTRAINT PK_NZQA_EMPLOYEE_INFO
    PRIMARY KEY CLUSTERED (nzqa_employee_info_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NZQA_EMPLOYEE_INFO') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NZQA_EMPLOYEE_INFO >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NZQA_EMPLOYEE_INFO >>>'
go
GRANT REFERENCES ON dbo.NZQA_EMPLOYEE_INFO TO eqa_user
go
GRANT SELECT ON dbo.NZQA_EMPLOYEE_INFO TO eqa_user
go
GRANT SELECT ON dbo.NZQA_EMPLOYEE_INFO TO read_only
go
GRANT SELECT ON dbo.NZQA_EMPLOYEE_INFO TO rma_users
go
GRANT INSERT ON dbo.NZQA_EMPLOYEE_INFO TO eqa_user
go
GRANT DELETE ON dbo.NZQA_EMPLOYEE_INFO TO eqa_user
go
GRANT UPDATE ON dbo.NZQA_EMPLOYEE_INFO TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NZQA_EMPLOYEE_INFO TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NZQA_EMPLOYEE_INFO TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NZQA_EMPLOYEE_INFO TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NZQA_EMPLOYEE_INFO TO eqa_user
go
CREATE TABLE dbo.NZQA_ORG_UNIT
(
    nzqa_org_unit_id OBJECT_ID    NOT NULL,
    unit_name        varchar(64)  NOT NULL,
    unit_desc        varchar(255) NULL,
    unit_type_code   char(2)      NOT NULL,
    parent_unit_id   OBJECT_ID    NULL,
    active_ind       yn_ind       NOT NULL,
    audit_tran_id    OBJECT_ID    NOT NULL,
    ts               timestamp    NOT NULL,
    CONSTRAINT PK_NZQA_ORG_UNIT
    PRIMARY KEY CLUSTERED (nzqa_org_unit_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NZQA_ORG_UNIT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NZQA_ORG_UNIT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NZQA_ORG_UNIT >>>'
go
ALTER TABLE dbo.NZQA_ORG_UNIT
    ADD CONSTRAINT FK_NZQA_O_UNIT_NZQA_O_UNIT
    FOREIGN KEY (parent_unit_id)
    REFERENCES dbo.NZQA_ORG_UNIT (nzqa_org_unit_id)
go
GRANT REFERENCES ON dbo.NZQA_ORG_UNIT TO eqa_user
go
GRANT SELECT ON dbo.NZQA_ORG_UNIT TO eqa_user
go
GRANT SELECT ON dbo.NZQA_ORG_UNIT TO read_only
go
GRANT SELECT ON dbo.NZQA_ORG_UNIT TO rma_users
go
GRANT INSERT ON dbo.NZQA_ORG_UNIT TO eqa_user
go
GRANT DELETE ON dbo.NZQA_ORG_UNIT TO eqa_user
go
GRANT UPDATE ON dbo.NZQA_ORG_UNIT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NZQA_ORG_UNIT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NZQA_ORG_UNIT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NZQA_ORG_UNIT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NZQA_ORG_UNIT TO eqa_user
go
CREATE TABLE dbo.NZQA_ORG_UNIT_TYPE
(
    unit_type_code  char(2)      NOT NULL,
    unit_type_name  varchar(50)  NOT NULL,
    unit_type_level numeric(2,0) DEFAULT 0 NOT NULL,
    CONSTRAINT PK_NZQA_ORG_UNIT_TYPE
    PRIMARY KEY CLUSTERED (unit_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NZQA_ORG_UNIT_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NZQA_ORG_UNIT_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NZQA_ORG_UNIT_TYPE >>>'
go
ALTER TABLE dbo.NZQA_ORG_UNIT
    ADD CONSTRAINT FK_NZQA_O_UNIT_NZQA_O_UNITTYPE
    FOREIGN KEY (unit_type_code)
    REFERENCES dbo.NZQA_ORG_UNIT_TYPE (unit_type_code)
go
GRANT REFERENCES ON dbo.NZQA_ORG_UNIT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.NZQA_ORG_UNIT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.NZQA_ORG_UNIT_TYPE TO read_only
go
GRANT SELECT ON dbo.NZQA_ORG_UNIT_TYPE TO rma_users
go
GRANT INSERT ON dbo.NZQA_ORG_UNIT_TYPE TO eqa_user
go
GRANT DELETE ON dbo.NZQA_ORG_UNIT_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.NZQA_ORG_UNIT_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NZQA_ORG_UNIT_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NZQA_ORG_UNIT_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NZQA_ORG_UNIT_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NZQA_ORG_UNIT_TYPE TO eqa_user
go
CREATE TABLE dbo.NZQA_POSITION
(
    nzqa_position_id OBJECT_ID    NOT NULL,
    position_code    char(3)      NOT NULL,
    nzqa_org_unit_id OBJECT_ID    NOT NULL,
    position_notes   varchar(255) NULL,
    active_ind       yn_ind       NOT NULL,
    audit_tran_id    OBJECT_ID    NOT NULL,
    ts               timestamp    NOT NULL,
    CONSTRAINT PK_NZQA_POSITION
    PRIMARY KEY CLUSTERED (nzqa_position_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NZQA_POSITION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NZQA_POSITION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NZQA_POSITION >>>'
go
ALTER TABLE dbo.NZQA_POSITION
    ADD CONSTRAINT FK_NZQA_POS_NZQA_ORG_UNIT
    FOREIGN KEY (nzqa_org_unit_id)
    REFERENCES dbo.NZQA_ORG_UNIT (nzqa_org_unit_id)
go
ALTER TABLE dbo.NZQA_POSITION
    ADD CONSTRAINT FK_NZQA_POS_NZQA_POS_TITLE
    FOREIGN KEY (position_code)
    REFERENCES dbo.NZQA_POSITION_TITLE (position_code)
go
ALTER TABLE dbo.NZQA_EMPLOYEE_INFO
    ADD CONSTRAINT FK_NZQA_EMP_INFO_NZQA_POS
    FOREIGN KEY (nzqa_position_id)
    REFERENCES dbo.NZQA_POSITION (nzqa_position_id)
go
GRANT REFERENCES ON dbo.NZQA_POSITION TO eqa_user
go
GRANT SELECT ON dbo.NZQA_POSITION TO eqa_user
go
GRANT SELECT ON dbo.NZQA_POSITION TO read_only
go
GRANT SELECT ON dbo.NZQA_POSITION TO rma_users
go
GRANT INSERT ON dbo.NZQA_POSITION TO eqa_user
go
GRANT DELETE ON dbo.NZQA_POSITION TO eqa_user
go
GRANT UPDATE ON dbo.NZQA_POSITION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NZQA_POSITION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NZQA_POSITION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NZQA_POSITION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NZQA_POSITION TO eqa_user
go
CREATE TABLE dbo.NZQA_POSITION_TITLE
(
    nzqa_position_title_id OBJECT_ID    NOT NULL,
    position_code          char(3)      NOT NULL,
    position_title         varchar(64)  NOT NULL,
    position_desc          varchar(255) NULL,
    active_ind             yn_ind       NOT NULL,
    audit_tran_id          OBJECT_ID    NOT NULL,
    ts                     timestamp    NOT NULL,
    CONSTRAINT PK_NZQA_POSITION_TITLE
    PRIMARY KEY CLUSTERED (nzqa_position_title_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.NZQA_POSITION_TITLE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.NZQA_POSITION_TITLE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.NZQA_POSITION_TITLE >>>'
go
GRANT REFERENCES ON dbo.NZQA_POSITION_TITLE TO eqa_user
go
GRANT SELECT ON dbo.NZQA_POSITION_TITLE TO eqa_user
go
GRANT SELECT ON dbo.NZQA_POSITION_TITLE TO read_only
go
GRANT SELECT ON dbo.NZQA_POSITION_TITLE TO rma_users
go
GRANT INSERT ON dbo.NZQA_POSITION_TITLE TO eqa_user
go
GRANT DELETE ON dbo.NZQA_POSITION_TITLE TO eqa_user
go
GRANT UPDATE ON dbo.NZQA_POSITION_TITLE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.NZQA_POSITION_TITLE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.NZQA_POSITION_TITLE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.NZQA_POSITION_TITLE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.NZQA_POSITION_TITLE TO eqa_user
go
CREATE TABLE dbo.ORDER_ITEM
(
    order_item_id            OBJECT_ID     NOT NULL,
    order_request_id         OBJECT_ID     NOT NULL,
    order_item_type_code     code_3        NOT NULL,
    order_item_status_code   code_2        NOT NULL,
    order_item_status_date   dt            NULL,
    qfn_achieved_id          numeric(12,0) NULL,
    item_sequence            int           NOT NULL,
    order_item_desc          UNI_DESCR     NOT NULL,
    quantity                 int           NOT NULL,
    total_amount             amt           NULL,
    amount_paid              amt           NULL,
    fully_paid_ind           ny_ind        NOT NULL,
    refund_requested_ind     ny_ind        NOT NULL,
    audit_tran_id            numeric(12,0) NOT NULL,
    order_item_category_code code_2        NOT NULL,
    entry_id                 OBJECT_ID     NULL,
    materials_received_ind   ny_ind        NULL,
    digital_ind              ny_ind        NOT NULL,
    CONSTRAINT PK_ORDER_ITEM
    PRIMARY KEY CLUSTERED (order_item_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ORDER_ITEM') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ORDER_ITEM >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ORDER_ITEM >>>'
go
ALTER TABLE dbo.ORDER_ITEM
    ADD CONSTRAINT FK_ORDR_ITM_ORDR_ITM_TYPE
    FOREIGN KEY (order_item_category_code,order_item_type_code)
    REFERENCES dbo.ORDER_ITEM_TYPE (order_item_category_code,order_item_type_code)
go
ALTER TABLE dbo.ORDER_ITEM
    ADD CONSTRAINT FK_ORDER_ITEM_ENTRY
    FOREIGN KEY (entry_id)
    REFERENCES dbo.ENTRY (entry_id)
go
GRANT REFERENCES ON dbo.ORDER_ITEM TO eqa_user
go
GRANT SELECT ON dbo.ORDER_ITEM TO eqa_user
go
GRANT SELECT ON dbo.ORDER_ITEM TO read_only
go
GRANT SELECT ON dbo.ORDER_ITEM TO rma_users
go
GRANT INSERT ON dbo.ORDER_ITEM TO eqa_user
go
GRANT DELETE ON dbo.ORDER_ITEM TO eqa_user
go
GRANT UPDATE ON dbo.ORDER_ITEM TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ORDER_ITEM TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ORDER_ITEM TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ORDER_ITEM TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ORDER_ITEM TO eqa_user
go
CREATE TABLE dbo.ORDER_ITEM_CATEGORY
(
    order_item_category_code code_2    NOT NULL,
    order_item_category_desc UNI_DESCR NOT NULL,
    active_ind               yn_ind    NOT NULL,
    CONSTRAINT PK_ORDER_ITEM_CATEGORY
    PRIMARY KEY CLUSTERED (order_item_category_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ORDER_ITEM_CATEGORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ORDER_ITEM_CATEGORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ORDER_ITEM_CATEGORY >>>'
go
GRANT REFERENCES ON dbo.ORDER_ITEM_CATEGORY TO eqa_user
go
GRANT SELECT ON dbo.ORDER_ITEM_CATEGORY TO eqa_user
go
GRANT SELECT ON dbo.ORDER_ITEM_CATEGORY TO read_only
go
GRANT SELECT ON dbo.ORDER_ITEM_CATEGORY TO rma_users
go
GRANT INSERT ON dbo.ORDER_ITEM_CATEGORY TO eqa_user
go
GRANT DELETE ON dbo.ORDER_ITEM_CATEGORY TO eqa_user
go
GRANT UPDATE ON dbo.ORDER_ITEM_CATEGORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ORDER_ITEM_CATEGORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ORDER_ITEM_CATEGORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ORDER_ITEM_CATEGORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ORDER_ITEM_CATEGORY TO eqa_user
go
CREATE TABLE dbo.ORDER_ITEM_CATEGORY_STATUS
(
    order_item_category_code code_2 NOT NULL,
    order_item_status_code   code_2 NOT NULL,
    active_ind               yn_ind NOT NULL,
    CONSTRAINT PK_ORDER_ITEM_CATEGORY_STATUS
    PRIMARY KEY CLUSTERED (order_item_category_code,order_item_status_code)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.ORDER_ITEM_CATEGORY_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ORDER_ITEM_CATEGORY_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ORDER_ITEM_CATEGORY_STATUS >>>'
go
ALTER TABLE dbo.ORDER_ITEM_CATEGORY_STATUS
    ADD CONSTRAINT FK_ORDR_ITEM_CAT_STS_ORDR_ITM_CAT
    FOREIGN KEY (order_item_category_code)
    REFERENCES dbo.ORDER_ITEM_CATEGORY (order_item_category_code)
go
ALTER TABLE dbo.ORDER_ITEM
    ADD CONSTRAINT FK_ORDR_ITM_ORDR_ITM_CAT_STATUS
    FOREIGN KEY (order_item_category_code,order_item_status_code)
    REFERENCES dbo.ORDER_ITEM_CATEGORY_STATUS (order_item_category_code,order_item_status_code)
go
GRANT REFERENCES ON dbo.ORDER_ITEM_CATEGORY_STATUS TO eqa_user
go
GRANT SELECT ON dbo.ORDER_ITEM_CATEGORY_STATUS TO eqa_user
go
GRANT SELECT ON dbo.ORDER_ITEM_CATEGORY_STATUS TO read_only
go
GRANT SELECT ON dbo.ORDER_ITEM_CATEGORY_STATUS TO rma_users
go
GRANT INSERT ON dbo.ORDER_ITEM_CATEGORY_STATUS TO eqa_user
go
GRANT DELETE ON dbo.ORDER_ITEM_CATEGORY_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.ORDER_ITEM_CATEGORY_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ORDER_ITEM_CATEGORY_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ORDER_ITEM_CATEGORY_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ORDER_ITEM_CATEGORY_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ORDER_ITEM_CATEGORY_STATUS TO eqa_user
go
CREATE TABLE dbo.ORDER_ITEM_STATUS
(
    order_item_status_code code_2    NOT NULL,
    order_item_status_desc UNI_DESCR NOT NULL,
    active_ind             yn_ind    NOT NULL,
    sortkey                sortkey   NOT NULL,
    CONSTRAINT PK_ORDER_ITEM_STATUS
    PRIMARY KEY CLUSTERED (order_item_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ORDER_ITEM_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ORDER_ITEM_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ORDER_ITEM_STATUS >>>'
go
ALTER TABLE dbo.ORDER_ITEM_CATEGORY_STATUS
    ADD CONSTRAINT FK_ORDR_ITEM_CAT_STS_ORDR_ITM_STS
    FOREIGN KEY (order_item_status_code)
    REFERENCES dbo.ORDER_ITEM_STATUS (order_item_status_code)
go
GRANT REFERENCES ON dbo.ORDER_ITEM_STATUS TO eqa_user
go
GRANT SELECT ON dbo.ORDER_ITEM_STATUS TO eqa_user
go
GRANT SELECT ON dbo.ORDER_ITEM_STATUS TO read_only
go
GRANT SELECT ON dbo.ORDER_ITEM_STATUS TO rma_users
go
GRANT INSERT ON dbo.ORDER_ITEM_STATUS TO eqa_user
go
GRANT DELETE ON dbo.ORDER_ITEM_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.ORDER_ITEM_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ORDER_ITEM_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ORDER_ITEM_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ORDER_ITEM_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ORDER_ITEM_STATUS TO eqa_user
go
CREATE TABLE dbo.ORDER_ITEM_STATUS_HIST
(
    order_item_status_hist_id OBJECT_ID     NOT NULL,
    order_item_id             OBJECT_ID     NOT NULL,
    order_item_status_code    code_2        NOT NULL,
    order_item_status_date    datetime      NOT NULL,
    updated_by                usr           NOT NULL,
    updated_date              dt            NULL,
    audit_tran_id             numeric(12,0) NOT NULL,
    CONSTRAINT PK_ORDER_ITEM_STATUS_HIST
    PRIMARY KEY NONCLUSTERED (order_item_status_hist_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ORDER_ITEM_STATUS_HIST') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ORDER_ITEM_STATUS_HIST >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ORDER_ITEM_STATUS_HIST >>>'
go
ALTER TABLE dbo.ORDER_ITEM_STATUS_HIST
    ADD CONSTRAINT FK_ORDR_ITM_STS_HST_ORDR_ITM
    FOREIGN KEY (order_item_id)
    REFERENCES dbo.ORDER_ITEM (order_item_id)
go
ALTER TABLE dbo.ORDER_ITEM_STATUS_HIST
    ADD CONSTRAINT FK_ORD_ITM_STS_HST_ORD_ITM_STS
    FOREIGN KEY (order_item_status_code)
    REFERENCES dbo.ORDER_ITEM_STATUS (order_item_status_code)
go
GRANT REFERENCES ON dbo.ORDER_ITEM_STATUS_HIST TO eqa_user
go
GRANT SELECT ON dbo.ORDER_ITEM_STATUS_HIST TO eqa_user
go
GRANT SELECT ON dbo.ORDER_ITEM_STATUS_HIST TO read_only
go
GRANT SELECT ON dbo.ORDER_ITEM_STATUS_HIST TO rma_users
go
GRANT INSERT ON dbo.ORDER_ITEM_STATUS_HIST TO eqa_user
go
GRANT DELETE ON dbo.ORDER_ITEM_STATUS_HIST TO eqa_user
go
GRANT UPDATE ON dbo.ORDER_ITEM_STATUS_HIST TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ORDER_ITEM_STATUS_HIST TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ORDER_ITEM_STATUS_HIST TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ORDER_ITEM_STATUS_HIST TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ORDER_ITEM_STATUS_HIST TO eqa_user
go
CREATE TABLE dbo.ORDER_ITEM_TYPE
(
    order_item_type_code     code_3    NOT NULL,
    order_item_type_desc     UNI_DESCR NOT NULL,
    active_ind               yn_ind    NOT NULL,
    sortkey                  sortkey   NOT NULL,
    order_item_category_code code_2    NOT NULL,
    CONSTRAINT PK_ORDER_ITEM_TYPE
    PRIMARY KEY CLUSTERED (order_item_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ORDER_ITEM_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ORDER_ITEM_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ORDER_ITEM_TYPE >>>'
go
GRANT REFERENCES ON dbo.ORDER_ITEM_TYPE TO eqa_user
go
GRANT SELECT ON dbo.ORDER_ITEM_TYPE TO eqa_user
go
GRANT SELECT ON dbo.ORDER_ITEM_TYPE TO read_only
go
GRANT SELECT ON dbo.ORDER_ITEM_TYPE TO rma_users
go
GRANT INSERT ON dbo.ORDER_ITEM_TYPE TO eqa_user
go
GRANT DELETE ON dbo.ORDER_ITEM_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.ORDER_ITEM_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ORDER_ITEM_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ORDER_ITEM_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ORDER_ITEM_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ORDER_ITEM_TYPE TO eqa_user
go
CREATE TABLE dbo.ORDER_ITEM_TYPE_RULE
(
    order_item_type_rule_id OBJECT_ID        NOT NULL,
    order_item_type_code    code_3           NOT NULL,
    charge_fee              amt              NOT NULL,
    effective_from_date     dt               NOT NULL,
    effective_to_date       dt               NULL,
    hidden_ind              ny_ind           NOT NULL,
    rule_note               univarchar(1000) NULL,
    separate_delivery_ind   ny_ind           NOT NULL,
    courier_possible_ind    yn_ind           NOT NULL,
    email_mandatory_ind     yn_ind           NOT NULL,
    delivery_timeframe_note univarchar(1000) NULL,
    order_item_prefix       univarchar(10)   NULL,
    created_date            dt               NOT NULL,
    created_by              UNI_USR          NOT NULL,
    active_ind              yn_ind           NOT NULL,
    audit_tran_id           numeric(12,0)    NOT NULL,
    CONSTRAINT PK_ORDER_ITEM_TYPE_RULE
    PRIMARY KEY CLUSTERED (order_item_type_rule_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ORDER_ITEM_TYPE_RULE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ORDER_ITEM_TYPE_RULE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ORDER_ITEM_TYPE_RULE >>>'
go
ALTER TABLE dbo.ORDER_ITEM_TYPE_RULE
    ADD CONSTRAINT FK_ORDR_ITM_TY_RLE_ORDR_ITM_TY
    FOREIGN KEY (order_item_type_code)
    REFERENCES dbo.ORDER_ITEM_TYPE (order_item_type_code)
go
GRANT REFERENCES ON dbo.ORDER_ITEM_TYPE_RULE TO eqa_user
go
GRANT SELECT ON dbo.ORDER_ITEM_TYPE_RULE TO eqa_user
go
GRANT SELECT ON dbo.ORDER_ITEM_TYPE_RULE TO read_only
go
GRANT SELECT ON dbo.ORDER_ITEM_TYPE_RULE TO rma_users
go
GRANT INSERT ON dbo.ORDER_ITEM_TYPE_RULE TO eqa_user
go
GRANT DELETE ON dbo.ORDER_ITEM_TYPE_RULE TO eqa_user
go
GRANT UPDATE ON dbo.ORDER_ITEM_TYPE_RULE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ORDER_ITEM_TYPE_RULE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ORDER_ITEM_TYPE_RULE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ORDER_ITEM_TYPE_RULE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ORDER_ITEM_TYPE_RULE TO eqa_user
go
CREATE TABLE dbo.ORDER_NOTE
(
    order_note_id    OBJECT_ID        NOT NULL,
    order_request_id OBJECT_ID        NOT NULL,
    note             univarchar(1000) NOT NULL,
    created_date     dt               NOT NULL,
    created_by       UNI_USR          NOT NULL,
    audit_tran_id    numeric(12,0)    NOT NULL,
    std_number       varchar(8)       NULL,
    subject          varchar(100)     NULL,
    CONSTRAINT PK_ORDER_NOTE
    PRIMARY KEY CLUSTERED (order_note_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ORDER_NOTE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ORDER_NOTE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ORDER_NOTE >>>'
go
ALTER TABLE dbo.ORDER_NOTE
    ADD CONSTRAINT FK_ORDER_NOTE_STD
    FOREIGN KEY (std_number)
    REFERENCES dbo.STD (std_number)
go
GRANT REFERENCES ON dbo.ORDER_NOTE TO eqa_user
go
GRANT SELECT ON dbo.ORDER_NOTE TO eqa_user
go
GRANT SELECT ON dbo.ORDER_NOTE TO read_only
go
GRANT SELECT ON dbo.ORDER_NOTE TO rma_users
go
GRANT INSERT ON dbo.ORDER_NOTE TO eqa_user
go
GRANT DELETE ON dbo.ORDER_NOTE TO eqa_user
go
GRANT UPDATE ON dbo.ORDER_NOTE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ORDER_NOTE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ORDER_NOTE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ORDER_NOTE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ORDER_NOTE TO eqa_user
go
CREATE TABLE dbo.ORDER_REQUEST
(
    order_request_id             OBJECT_ID      NOT NULL,
    delivery_type_code           code_3         NOT NULL,
    perorg_id                    OBJECT_ID      NOT NULL,
    payment_id                   OBJECT_ID      NULL,
    country_code                 char(3)        NOT NULL,
    order_reference              univarchar(10) NOT NULL,
    order_created_date           dt             NOT NULL,
    order_created_by             UNI_USR        NOT NULL,
    order_confirmed_date         dt             NULL,
    delivery_addr_1              UNI_ADDR_LINE  NULL,
    delivery_addr_2              UNI_ADDR_LINE  NULL,
    delivery_addr_3              UNI_ADDR_LINE  NULL,
    delivery_addr_4              UNI_ADDR_LINE  NULL,
    post_code                    varchar(7)     NULL,
    contact_email_addr           UNI_EADDR      NULL,
    phone_country_code           code_3         NULL,
    phone_area_code              varchar(10)    NULL,
    phone_number                 varchar(15)    NULL,
    phone_extension              varchar(10)    NULL,
    active_ind                   yn_ind         NOT NULL,
    audit_tran_id                numeric(12,0)  NOT NULL,
    received_mats_email_sent_ind ny_ind         NULL,
    CONSTRAINT PK_ORDER_REQUEST
    PRIMARY KEY CLUSTERED (order_request_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ORDER_REQUEST') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ORDER_REQUEST >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ORDER_REQUEST >>>'
go
ALTER TABLE dbo.ORDER_REQUEST
    ADD CONSTRAINT FK_ORDER_REQ_PHONE_CTRY_CODE
    FOREIGN KEY (phone_country_code)
    REFERENCES dbo.COUNTRY_CODE (country_code)
go
ALTER TABLE dbo.ORDER_REQUEST
    ADD CONSTRAINT FK_ORDER_REQ_DLVR_TYP
    FOREIGN KEY (delivery_type_code)
    REFERENCES dbo.DELIVERY_TYPE (delivery_type_code)
go
ALTER TABLE dbo.ORDER_REQUEST
    ADD CONSTRAINT FK_ORDER_REQ_CTRY_CODE
    FOREIGN KEY (country_code)
    REFERENCES dbo.COUNTRY_CODE (country_code)
go
ALTER TABLE dbo.ORDER_ITEM
    ADD CONSTRAINT FK_ORDER_ITEM_ORDER_REQ
    FOREIGN KEY (order_request_id)
    REFERENCES dbo.ORDER_REQUEST (order_request_id)
go
ALTER TABLE dbo.ORDER_NOTE
    ADD CONSTRAINT FK_ORDER_NOTE_ORDER_REQ
    FOREIGN KEY (order_request_id)
    REFERENCES dbo.ORDER_REQUEST (order_request_id)
go
GRANT REFERENCES ON dbo.ORDER_REQUEST TO eqa_user
go
GRANT SELECT ON dbo.ORDER_REQUEST TO eqa_user
go
GRANT SELECT ON dbo.ORDER_REQUEST TO read_only
go
GRANT SELECT ON dbo.ORDER_REQUEST TO rma_users
go
GRANT INSERT ON dbo.ORDER_REQUEST TO eqa_user
go
GRANT DELETE ON dbo.ORDER_REQUEST TO eqa_user
go
GRANT UPDATE ON dbo.ORDER_REQUEST TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ORDER_REQUEST TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ORDER_REQUEST TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ORDER_REQUEST TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ORDER_REQUEST TO eqa_user
go
CREATE TABLE dbo.ORGANISATION_LOGO
(
    organisation_logo_id OBJECT_ID    NOT NULL,
    perorg_id            OBJECT_ID    NOT NULL,
    logo_url             varchar(255) NOT NULL,
    audit_tran_id        OBJECT_ID    NOT NULL,
    active_ind           yn_ind       NOT NULL,
    CONSTRAINT PK_ORGANISATION_LOGO
    PRIMARY KEY CLUSTERED (organisation_logo_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ORGANISATION_LOGO') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ORGANISATION_LOGO >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ORGANISATION_LOGO >>>'
go
GRANT REFERENCES ON dbo.ORGANISATION_LOGO TO eqa_user
go
GRANT SELECT ON dbo.ORGANISATION_LOGO TO eqa_user
go
GRANT SELECT ON dbo.ORGANISATION_LOGO TO read_only
go
GRANT SELECT ON dbo.ORGANISATION_LOGO TO rma_users
go
GRANT INSERT ON dbo.ORGANISATION_LOGO TO eqa_user
go
GRANT DELETE ON dbo.ORGANISATION_LOGO TO eqa_user
go
GRANT UPDATE ON dbo.ORGANISATION_LOGO TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ORGANISATION_LOGO TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ORGANISATION_LOGO TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ORGANISATION_LOGO TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ORGANISATION_LOGO TO eqa_user
go
CREATE TABLE dbo.ORG_EVALUATION
(
    org_evaluation_id        OBJECT_ID   NOT NULL,
    perorg_role_id           OBJECT_ID   NOT NULL,
    org_evaluation_type_code code_2      NOT NULL,
    perorg_case_id           OBJECT_ID   NULL,
    evaluation_date          dt          NOT NULL,
    initiated_date           dt          NULL,
    actual_visit_date        dt          NULL,
    completion_date          dt          NULL,
    audit_tran_id            OBJECT_ID   NOT NULL,
    www_ext_qa_notes         TEXT_STRING NULL,
    self_assessment_code     code_2      NULL,
    edu_performance_code     code_2      NULL,
    org_evaluation_catg_code code_2      NULL,
    report_published_date    dt          NULL,
    CONSTRAINT PK_ORG_EVALUATION
    PRIMARY KEY CLUSTERED (org_evaluation_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ORG_EVALUATION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ORG_EVALUATION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ORG_EVALUATION >>>'
go
GRANT REFERENCES ON dbo.ORG_EVALUATION TO eqa_user
go
GRANT SELECT ON dbo.ORG_EVALUATION TO eqa_user
go
GRANT SELECT ON dbo.ORG_EVALUATION TO read_only
go
GRANT SELECT ON dbo.ORG_EVALUATION TO rma_users
go
GRANT INSERT ON dbo.ORG_EVALUATION TO eqa_user
go
GRANT DELETE ON dbo.ORG_EVALUATION TO eqa_user
go
GRANT UPDATE ON dbo.ORG_EVALUATION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ORG_EVALUATION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ORG_EVALUATION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ORG_EVALUATION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ORG_EVALUATION TO eqa_user
go
CREATE TABLE dbo.ORG_EVALUATION_CATG
(
    org_evaluation_catg_code code_2    NOT NULL,
    org_evaluation_catg_desc descr     NOT NULL,
    active_ind               yn_ind    NOT NULL,
    sortkey                  sortkey   NOT NULL,
    audit_tran_id            OBJECT_ID NOT NULL,
    CONSTRAINT PK_ORG_EVALUATION_CATG
    PRIMARY KEY CLUSTERED (org_evaluation_catg_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ORG_EVALUATION_CATG') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ORG_EVALUATION_CATG >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ORG_EVALUATION_CATG >>>'
go
ALTER TABLE dbo.ORG_EVALUATION
    ADD CONSTRAINT FK_ORG_EVAL_ORG_EVAL_CATG
    FOREIGN KEY (org_evaluation_catg_code)
    REFERENCES dbo.ORG_EVALUATION_CATG (org_evaluation_catg_code)
go
GRANT REFERENCES ON dbo.ORG_EVALUATION_CATG TO eqa_user
go
GRANT SELECT ON dbo.ORG_EVALUATION_CATG TO eqa_user
go
GRANT SELECT ON dbo.ORG_EVALUATION_CATG TO read_only
go
GRANT SELECT ON dbo.ORG_EVALUATION_CATG TO rma_users
go
GRANT INSERT ON dbo.ORG_EVALUATION_CATG TO eqa_user
go
GRANT DELETE ON dbo.ORG_EVALUATION_CATG TO eqa_user
go
GRANT UPDATE ON dbo.ORG_EVALUATION_CATG TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ORG_EVALUATION_CATG TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ORG_EVALUATION_CATG TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ORG_EVALUATION_CATG TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ORG_EVALUATION_CATG TO eqa_user
go
CREATE TABLE dbo.ORG_EVALUATION_COMBO
(
    self_assessment_code     code_2    NOT NULL,
    edu_performance_code     code_2    NOT NULL,
    org_evaluation_catg_code code_2    NOT NULL,
    active_ind               yn_ind    NOT NULL,
    audit_tran_id            OBJECT_ID NOT NULL,
    CONSTRAINT PK_ORG_EVALUATION_COMBO
    PRIMARY KEY CLUSTERED (org_evaluation_catg_code,self_assessment_code,edu_performance_code)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.ORG_EVALUATION_COMBO') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ORG_EVALUATION_COMBO >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ORG_EVALUATION_COMBO >>>'
go
ALTER TABLE dbo.ORG_EVALUATION_COMBO
    ADD CONSTRAINT FK_ORG_EVAL_COMB_ORG_EVAL_CATG
    FOREIGN KEY (org_evaluation_catg_code)
    REFERENCES dbo.ORG_EVALUATION_CATG (org_evaluation_catg_code)
go
GRANT REFERENCES ON dbo.ORG_EVALUATION_COMBO TO eqa_user
go
GRANT SELECT ON dbo.ORG_EVALUATION_COMBO TO eqa_user
go
GRANT SELECT ON dbo.ORG_EVALUATION_COMBO TO read_only
go
GRANT SELECT ON dbo.ORG_EVALUATION_COMBO TO rma_users
go
GRANT INSERT ON dbo.ORG_EVALUATION_COMBO TO eqa_user
go
GRANT DELETE ON dbo.ORG_EVALUATION_COMBO TO eqa_user
go
GRANT UPDATE ON dbo.ORG_EVALUATION_COMBO TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ORG_EVALUATION_COMBO TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ORG_EVALUATION_COMBO TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ORG_EVALUATION_COMBO TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ORG_EVALUATION_COMBO TO eqa_user
go
CREATE TABLE dbo.ORG_EVALUATION_HISTORY
(
    org_evaluation_history_id OBJECT_ID     NOT NULL,
    org_evaluation_id         OBJECT_ID     NOT NULL,
    evaluation_date           dt            NOT NULL,
    evaluation_reason_code    code_2        NOT NULL,
    comment                   varchar(3900) NULL,
    updated_by                usr           NOT NULL,
    updated_date              dt            NOT NULL,
    audit_tran_id             OBJECT_ID     NOT NULL,
    CONSTRAINT PK_ORG_EVALUATION_HISTORY
    PRIMARY KEY CLUSTERED (org_evaluation_history_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ORG_EVALUATION_HISTORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ORG_EVALUATION_HISTORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ORG_EVALUATION_HISTORY >>>'
go
ALTER TABLE dbo.ORG_EVALUATION_HISTORY
    ADD CONSTRAINT FK_ORG_EVAL_HIST_ORG_EVAL
    FOREIGN KEY (org_evaluation_id)
    REFERENCES dbo.ORG_EVALUATION (org_evaluation_id)
go
ALTER TABLE dbo.ORG_EVALUATION_HISTORY
    ADD CONSTRAINT FK_ORG_EVAL_HIST_EVAL_RSN_CODE
    FOREIGN KEY (evaluation_reason_code)
    REFERENCES dbo.EVALUATION_REASON_CODE (evaluation_reason_code)
go
GRANT REFERENCES ON dbo.ORG_EVALUATION_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.ORG_EVALUATION_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.ORG_EVALUATION_HISTORY TO read_only
go
GRANT SELECT ON dbo.ORG_EVALUATION_HISTORY TO rma_users
go
GRANT INSERT ON dbo.ORG_EVALUATION_HISTORY TO eqa_user
go
GRANT DELETE ON dbo.ORG_EVALUATION_HISTORY TO eqa_user
go
GRANT UPDATE ON dbo.ORG_EVALUATION_HISTORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ORG_EVALUATION_HISTORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ORG_EVALUATION_HISTORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ORG_EVALUATION_HISTORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ORG_EVALUATION_HISTORY TO eqa_user
go
CREATE TABLE dbo.ORG_EVALUATION_TYPE
(
    org_evaluation_type_code code_2    NOT NULL,
    org_evaluation_type_desc descr     NOT NULL,
    active_ind               yn_ind    NOT NULL,
    sortkey                  sortkey   NOT NULL,
    audit_tran_id            OBJECT_ID NOT NULL,
    CONSTRAINT PK_ORG_EVALUATION_TYPE
    PRIMARY KEY CLUSTERED (org_evaluation_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ORG_EVALUATION_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ORG_EVALUATION_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ORG_EVALUATION_TYPE >>>'
go
ALTER TABLE dbo.ORG_EVALUATION
    ADD CONSTRAINT FK_ORG_EVAL_ORG_EVAL_TYPE
    FOREIGN KEY (org_evaluation_type_code)
    REFERENCES dbo.ORG_EVALUATION_TYPE (org_evaluation_type_code)
go
GRANT REFERENCES ON dbo.ORG_EVALUATION_TYPE TO eqa_user
go
GRANT SELECT ON dbo.ORG_EVALUATION_TYPE TO eqa_user
go
GRANT SELECT ON dbo.ORG_EVALUATION_TYPE TO read_only
go
GRANT SELECT ON dbo.ORG_EVALUATION_TYPE TO rma_users
go
GRANT INSERT ON dbo.ORG_EVALUATION_TYPE TO eqa_user
go
GRANT DELETE ON dbo.ORG_EVALUATION_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.ORG_EVALUATION_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ORG_EVALUATION_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ORG_EVALUATION_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ORG_EVALUATION_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ORG_EVALUATION_TYPE TO eqa_user
go
CREATE TABLE dbo.ORG_LEGAL_STATUS
(
    org_legal_status      code_2  NOT NULL,
    org_legal_status_desc descr   NOT NULL,
    active_ind            yn_ind  NOT NULL,
    sortkey               sortkey NULL,
    CONSTRAINT PK_ORG_LEGAL_STATUS
    PRIMARY KEY CLUSTERED (org_legal_status)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ORG_LEGAL_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ORG_LEGAL_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ORG_LEGAL_STATUS >>>'
go
GRANT REFERENCES ON dbo.ORG_LEGAL_STATUS TO eqa_user
go
GRANT SELECT ON dbo.ORG_LEGAL_STATUS TO eqa_user
go
GRANT SELECT ON dbo.ORG_LEGAL_STATUS TO read_only
go
GRANT SELECT ON dbo.ORG_LEGAL_STATUS TO rma_users
go
GRANT INSERT ON dbo.ORG_LEGAL_STATUS TO eqa_user
go
GRANT DELETE ON dbo.ORG_LEGAL_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.ORG_LEGAL_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ORG_LEGAL_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ORG_LEGAL_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ORG_LEGAL_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ORG_LEGAL_STATUS TO eqa_user
go
CREATE TABLE dbo.ORG_PERFORMANCE_CODE
(
    org_performance_code code_2    NOT NULL,
    org_performance_desc descr     NOT NULL,
    active_ind           yn_ind    NOT NULL,
    sortkey              sortkey   NOT NULL,
    audit_tran_id        OBJECT_ID NOT NULL,
    CONSTRAINT PK_ORG_PERFORMANCE_CODE
    PRIMARY KEY CLUSTERED (org_performance_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ORG_PERFORMANCE_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ORG_PERFORMANCE_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ORG_PERFORMANCE_CODE >>>'
go
ALTER TABLE dbo.ORG_EVALUATION
    ADD CONSTRAINT FK_ORG_EVAL_EDUCATION_PERF
    FOREIGN KEY (edu_performance_code)
    REFERENCES dbo.ORG_PERFORMANCE_CODE (org_performance_code)
go
ALTER TABLE dbo.ORG_EVALUATION
    ADD CONSTRAINT FK_ORG_EVAL_SELF_ASSESSMENT
    FOREIGN KEY (self_assessment_code)
    REFERENCES dbo.ORG_PERFORMANCE_CODE (org_performance_code)
go
ALTER TABLE dbo.ORG_EVALUATION_COMBO
    ADD CONSTRAINT FK_ORG_EVAL_COMBO_ORG_ASS_PERF
    FOREIGN KEY (self_assessment_code)
    REFERENCES dbo.ORG_PERFORMANCE_CODE (org_performance_code)
go
ALTER TABLE dbo.ORG_EVALUATION_COMBO
    ADD CONSTRAINT FK_ORG_EVAL_COMBO_ORG_EDU_PERF
    FOREIGN KEY (edu_performance_code)
    REFERENCES dbo.ORG_PERFORMANCE_CODE (org_performance_code)
go
GRANT REFERENCES ON dbo.ORG_PERFORMANCE_CODE TO eqa_user
go
GRANT SELECT ON dbo.ORG_PERFORMANCE_CODE TO eqa_user
go
GRANT SELECT ON dbo.ORG_PERFORMANCE_CODE TO read_only
go
GRANT SELECT ON dbo.ORG_PERFORMANCE_CODE TO rma_users
go
GRANT INSERT ON dbo.ORG_PERFORMANCE_CODE TO eqa_user
go
GRANT DELETE ON dbo.ORG_PERFORMANCE_CODE TO eqa_user
go
GRANT UPDATE ON dbo.ORG_PERFORMANCE_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ORG_PERFORMANCE_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ORG_PERFORMANCE_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ORG_PERFORMANCE_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ORG_PERFORMANCE_CODE TO eqa_user
go
CREATE TABLE dbo.ORG_PROFILE_DOCUMENT
(
    org_profile_doc_code  code_4      NOT NULL,
    doc_mngt_sys_code     varchar(64) NOT NULL,
    description           descr       NOT NULL,
    user_selectable_ind   ny_ind      NOT NULL,
    perorg_role_type_code number_3    NULL,
    provider_type_code    char(3)     NULL,
    cycle                 descr_short NULL,
    submission_period     int         NULL,
    sortkey               sortkey     NOT NULL,
    active_ind            yn_ind      NOT NULL,
    audit_tran_id         OBJECT_ID   NOT NULL,
    CONSTRAINT PK_ORG_PROFILE_DOCUMENT
    PRIMARY KEY NONCLUSTERED (org_profile_doc_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ORG_PROFILE_DOCUMENT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ORG_PROFILE_DOCUMENT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ORG_PROFILE_DOCUMENT >>>'
go
GRANT REFERENCES ON dbo.ORG_PROFILE_DOCUMENT TO eqa_user
go
GRANT SELECT ON dbo.ORG_PROFILE_DOCUMENT TO eqa_user
go
GRANT SELECT ON dbo.ORG_PROFILE_DOCUMENT TO read_only
go
GRANT SELECT ON dbo.ORG_PROFILE_DOCUMENT TO rma_users
go
GRANT INSERT ON dbo.ORG_PROFILE_DOCUMENT TO eqa_user
go
GRANT DELETE ON dbo.ORG_PROFILE_DOCUMENT TO eqa_user
go
GRANT UPDATE ON dbo.ORG_PROFILE_DOCUMENT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ORG_PROFILE_DOCUMENT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ORG_PROFILE_DOCUMENT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ORG_PROFILE_DOCUMENT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ORG_PROFILE_DOCUMENT TO eqa_user
go
CREATE TABLE dbo.ORG_PROFILE_NOTE
(
    org_profile_note_id    OBJECT_ID     NOT NULL,
    note_com_type_code     code_2        NOT NULL,
    note_type_code         code_2        NOT NULL,
    note_subject_type_code code_2        NOT NULL,
    perorg_role_id         OBJECT_ID     NULL,
    prov_risk_issue_id     OBJECT_ID     NULL,
    updated_by             usr           NOT NULL,
    updated_date           dt            NOT NULL,
    comment                varchar(3900) NULL,
    audit_tran_id          OBJECT_ID     NOT NULL,
    active_ind             yn_ind        NOT NULL,
    prov_note_issue_id     OBJECT_ID     NULL,
    CONSTRAINT PK_ORG_PROFILE_NOTE
    PRIMARY KEY CLUSTERED (org_profile_note_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ORG_PROFILE_NOTE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ORG_PROFILE_NOTE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ORG_PROFILE_NOTE >>>'
go
ALTER TABLE dbo.ORG_PROFILE_NOTE
    ADD CONSTRAINT FK_ORG_PROFILE_NOTE_COM_TYPE
    FOREIGN KEY (note_com_type_code)
    REFERENCES dbo.NOTE_COM_TYPE (note_com_type_code)
go
ALTER TABLE dbo.ORG_PROFILE_NOTE
    ADD CONSTRAINT FK_ORG_PROF_NOTE_NOTE_SUB_TYPE
    FOREIGN KEY (note_subject_type_code)
    REFERENCES dbo.NOTE_SUBJECT_TYPE (note_subject_type_code)
go
ALTER TABLE dbo.ORG_PROFILE_NOTE
    ADD CONSTRAINT FK_ORG_PROFILE_NOTE_NOTE_TYPE
    FOREIGN KEY (note_type_code)
    REFERENCES dbo.NOTE_TYPE (note_type_code)
go
GRANT REFERENCES ON dbo.ORG_PROFILE_NOTE TO eqa_user
go
GRANT SELECT ON dbo.ORG_PROFILE_NOTE TO eqa_user
go
GRANT SELECT ON dbo.ORG_PROFILE_NOTE TO read_only
go
GRANT SELECT ON dbo.ORG_PROFILE_NOTE TO rma_users
go
GRANT INSERT ON dbo.ORG_PROFILE_NOTE TO eqa_user
go
GRANT DELETE ON dbo.ORG_PROFILE_NOTE TO eqa_user
go
GRANT UPDATE ON dbo.ORG_PROFILE_NOTE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ORG_PROFILE_NOTE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ORG_PROFILE_NOTE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ORG_PROFILE_NOTE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ORG_PROFILE_NOTE TO eqa_user
go
CREATE TABLE dbo.ORG_QA_ACTIVITY
(
    org_qa_activity_id     OBJECT_ID     NOT NULL,
    provider_id            OBJECT_ID     NOT NULL,
    qa_activity_type       code_2        NOT NULL,
    qa_outcome_code        code_2        NOT NULL,
    qa_activity_date       dt            NOT NULL,
    conducted_by_perorg_id OBJECT_ID     NULL,
    issue_severity_code    code_2        NOT NULL,
    reference1             varchar(20)   NULL,
    reference2             varchar(50)   NULL,
    comment                varchar(1024) NULL,
    qa_next_due_month      char(2)       NULL,
    qa_next_due_year       char(4)       NULL,
    created_date           dt            NOT NULL,
    created_by             usr           NOT NULL,
    updated_date           dt            NOT NULL,
    updated_by             usr           NOT NULL,
    active_ind             int           NOT NULL,
    audit_tran_id          OBJECT_ID     NOT NULL,
    CONSTRAINT PK_ORG_QA_ACTIVITY
    PRIMARY KEY CLUSTERED (org_qa_activity_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ORG_QA_ACTIVITY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ORG_QA_ACTIVITY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ORG_QA_ACTIVITY >>>'
go
ALTER TABLE dbo.ORG_QA_ACTIVITY
    ADD CONSTRAINT FK_ORG_QA_ACTIVITY_SUB_TYPE
    FOREIGN KEY (issue_severity_code)
    REFERENCES dbo.NOTE_ISSUE_SEVERITY_CODE (issue_severity_code)
go
GRANT REFERENCES ON dbo.ORG_QA_ACTIVITY TO eqa_user
go
GRANT SELECT ON dbo.ORG_QA_ACTIVITY TO eqa_user
go
GRANT SELECT ON dbo.ORG_QA_ACTIVITY TO read_only
go
GRANT SELECT ON dbo.ORG_QA_ACTIVITY TO rma_users
go
GRANT INSERT ON dbo.ORG_QA_ACTIVITY TO eqa_user
go
GRANT DELETE ON dbo.ORG_QA_ACTIVITY TO eqa_user
go
GRANT UPDATE ON dbo.ORG_QA_ACTIVITY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ORG_QA_ACTIVITY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ORG_QA_ACTIVITY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ORG_QA_ACTIVITY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ORG_QA_ACTIVITY TO eqa_user
go
CREATE TABLE dbo.OUTPUT_TYPE
(
    output_type char(3)      NOT NULL,
    output_desc varchar(255) NOT NULL,
    active_ind  yn_ind       NOT NULL,
    CONSTRAINT PK_OUTPUT_TYPE
    PRIMARY KEY CLUSTERED (output_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.OUTPUT_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.OUTPUT_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.OUTPUT_TYPE >>>'
go
GRANT REFERENCES ON dbo.OUTPUT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.OUTPUT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.OUTPUT_TYPE TO read_only
go
GRANT SELECT ON dbo.OUTPUT_TYPE TO rma_users
go
GRANT INSERT ON dbo.OUTPUT_TYPE TO eqa_user
go
GRANT DELETE ON dbo.OUTPUT_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.OUTPUT_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.OUTPUT_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.OUTPUT_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.OUTPUT_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.OUTPUT_TYPE TO eqa_user
go
CREATE TABLE dbo.OUTSTANDING_FEE_LODGEMENT
(
    outstanding_fee_lodgement_id OBJECT_ID      NOT NULL,
    perorg_id                    OBJECT_ID      NOT NULL,
    payment_id                   OBJECT_ID      NULL,
    lodgement_reference          univarchar(10) NOT NULL,
    contact_email_addr           UNI_EADDR      NOT NULL,
    phone_country_code           char(3)        NULL,
    phone_area_code              varchar(10)    NULL,
    phone_number                 varchar(15)    NULL,
    phone_extension              varchar(10)    NULL,
    created_date                 dt             NOT NULL,
    audit_tran_id                OBJECT_ID      NOT NULL,
    CONSTRAINT PK_OUTSTANDING_FEE_LODGEMENT
    PRIMARY KEY CLUSTERED (outstanding_fee_lodgement_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.OUTSTANDING_FEE_LODGEMENT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.OUTSTANDING_FEE_LODGEMENT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.OUTSTANDING_FEE_LODGEMENT >>>'
go
ALTER TABLE dbo.OUTSTANDING_FEE_LODGEMENT
    ADD CONSTRAINT FK_OUTSDNG_FEE_LDGM_CTRY_CODE
    FOREIGN KEY (phone_country_code)
    REFERENCES dbo.COUNTRY_CODE (country_code)
go
ALTER TABLE dbo.LODGEMENT_DETAIL
    ADD CONSTRAINT FK_OUTSDNG_FEE_LDGM_LDGM_DETL
    FOREIGN KEY (outstanding_fee_lodgement_id)
    REFERENCES dbo.OUTSTANDING_FEE_LODGEMENT (outstanding_fee_lodgement_id)
go
GRANT REFERENCES ON dbo.OUTSTANDING_FEE_LODGEMENT TO eqa_user
go
GRANT SELECT ON dbo.OUTSTANDING_FEE_LODGEMENT TO eqa_user
go
GRANT SELECT ON dbo.OUTSTANDING_FEE_LODGEMENT TO read_only
go
GRANT SELECT ON dbo.OUTSTANDING_FEE_LODGEMENT TO rma_users
go
GRANT INSERT ON dbo.OUTSTANDING_FEE_LODGEMENT TO eqa_user
go
GRANT DELETE ON dbo.OUTSTANDING_FEE_LODGEMENT TO eqa_user
go
GRANT UPDATE ON dbo.OUTSTANDING_FEE_LODGEMENT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.OUTSTANDING_FEE_LODGEMENT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.OUTSTANDING_FEE_LODGEMENT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.OUTSTANDING_FEE_LODGEMENT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.OUTSTANDING_FEE_LODGEMENT TO eqa_user
go
CREATE TABLE dbo.PAGE_DISPLAY_TYPE
(
    page_display_type_code code_2      NOT NULL,
    page_display_type_desc descr_short NOT NULL,
    sortkey                sortkey     NOT NULL,
    CONSTRAINT PK_PAGE_DISPLAY_TYPE
    PRIMARY KEY CLUSTERED (page_display_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PAGE_DISPLAY_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PAGE_DISPLAY_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PAGE_DISPLAY_TYPE >>>'
go
GRANT REFERENCES ON dbo.PAGE_DISPLAY_TYPE TO eqa_user
go
GRANT SELECT ON dbo.PAGE_DISPLAY_TYPE TO eqa_user
go
GRANT SELECT ON dbo.PAGE_DISPLAY_TYPE TO read_only
go
GRANT SELECT ON dbo.PAGE_DISPLAY_TYPE TO rma_users
go
GRANT INSERT ON dbo.PAGE_DISPLAY_TYPE TO eqa_user
go
GRANT DELETE ON dbo.PAGE_DISPLAY_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.PAGE_DISPLAY_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PAGE_DISPLAY_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PAGE_DISPLAY_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PAGE_DISPLAY_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PAGE_DISPLAY_TYPE TO eqa_user
go
CREATE TABLE dbo.PAGE_INPUT_STATUS
(
    page_input_status_code code_2      NOT NULL,
    page_input_status_desc descr_short NOT NULL,
    sortkey                sortkey     NOT NULL,
    CONSTRAINT PK_PAGE_INPUT_STATUS
    PRIMARY KEY CLUSTERED (page_input_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PAGE_INPUT_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PAGE_INPUT_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PAGE_INPUT_STATUS >>>'
go
GRANT REFERENCES ON dbo.PAGE_INPUT_STATUS TO eqa_user
go
GRANT SELECT ON dbo.PAGE_INPUT_STATUS TO eqa_user
go
GRANT SELECT ON dbo.PAGE_INPUT_STATUS TO read_only
go
GRANT SELECT ON dbo.PAGE_INPUT_STATUS TO rma_users
go
GRANT INSERT ON dbo.PAGE_INPUT_STATUS TO eqa_user
go
GRANT DELETE ON dbo.PAGE_INPUT_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.PAGE_INPUT_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PAGE_INPUT_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PAGE_INPUT_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PAGE_INPUT_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PAGE_INPUT_STATUS TO eqa_user
go
CREATE TABLE dbo.PAID_CODE
(
    paid_code      code_1 NOT NULL,
    paid_code_desc descr  NULL,
    CONSTRAINT PK_PAID_CODE
    PRIMARY KEY CLUSTERED (paid_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PAID_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PAID_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PAID_CODE >>>'
go
ALTER TABLE dbo.LEARNER_ENROLMENT
    ADD CONSTRAINT FK_LEARNER_ENROLMENT_PAID_CODE
    FOREIGN KEY (paid_code)
    REFERENCES dbo.PAID_CODE (paid_code)
go
GRANT REFERENCES ON dbo.PAID_CODE TO eqa_user
go
GRANT SELECT ON dbo.PAID_CODE TO eqa_user
go
GRANT SELECT ON dbo.PAID_CODE TO read_only
go
GRANT SELECT ON dbo.PAID_CODE TO rma_users
go
GRANT INSERT ON dbo.PAID_CODE TO eqa_user
go
GRANT DELETE ON dbo.PAID_CODE TO eqa_user
go
GRANT UPDATE ON dbo.PAID_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PAID_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PAID_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PAID_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PAID_CODE TO eqa_user
go
CREATE TABLE dbo.PANEL_AD_REGION
(
    panel_ad_region_id OBJECT_ID NOT NULL,
    panel_id           OBJECT_ID NOT NULL,
    region_code        code_2    NOT NULL,
    audit_tran_id      OBJECT_ID NOT NULL,
    ts                 timestamp NOT NULL,
    CONSTRAINT PK_PANEL_AD_REGION
    PRIMARY KEY NONCLUSTERED (panel_ad_region_id),
    CONSTRAINT AK_AK_PANEL_ADVERTISE_PANEL_AD
    UNIQUE NONCLUSTERED (panel_id,region_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PANEL_AD_REGION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PANEL_AD_REGION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PANEL_AD_REGION >>>'
go
ALTER TABLE dbo.PANEL_AD_REGION
    ADD CONSTRAINT FK_PANEL_AD_REGION_PANEL
    FOREIGN KEY (panel_id)
    REFERENCES dbo.MARKER_PANEL (panel_id)
go
ALTER TABLE dbo.PANEL_AD_REGION
    ADD CONSTRAINT FK_PANEL_AD_REGION_REGION
    FOREIGN KEY (region_code)
    REFERENCES dbo.REGION (region_code)
go
GRANT REFERENCES ON dbo.PANEL_AD_REGION TO eqa_user
go
GRANT SELECT ON dbo.PANEL_AD_REGION TO eqa_user
go
GRANT SELECT ON dbo.PANEL_AD_REGION TO read_only
go
GRANT SELECT ON dbo.PANEL_AD_REGION TO rma_users
go
GRANT INSERT ON dbo.PANEL_AD_REGION TO eqa_user
go
GRANT DELETE ON dbo.PANEL_AD_REGION TO eqa_user
go
GRANT UPDATE ON dbo.PANEL_AD_REGION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PANEL_AD_REGION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PANEL_AD_REGION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PANEL_AD_REGION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PANEL_AD_REGION TO eqa_user
go
CREATE TABLE dbo.PAYMENT
(
    payment_id                     OBJECT_ID       NOT NULL,
    perorg_id                      OBJECT_ID       NULL,
    payment_date                   datetime        NOT NULL,
    payment_amount                 amt             NULL,
    external_payment_reference     varchar(16)     NULL,
    nzqa_payment_reference         varchar(64)     NULL,
    payee_details                  descr_short     NULL,
    payment_notes                  descr_short     NULL,
    success_ind                    yn_ind          NULL,
    payment_settlement_date        datetime        NULL,
    audit_tran_id                  OBJECT_ID       NOT NULL,
    receipt_number                 varchar(30)     NULL,
    receipt_issued_date            datetime        NULL,
    payment_type_code              code_3          NULL,
    gst_amount                     amt             NOT NULL,
    payment_status_code            code_2          NULL,
    payment_status_date            dt              NULL,
    application_system_type_code   code_4          NOT NULL,
    bank_account_name              univarchar(255) NULL,
    bank_account_number            varchar(32)     NULL,
    payment_reference              varchar(30)     NULL,
    directp_qrs_stg_application_id OBJECT_ID       NULL,
    CONSTRAINT PK_PAYMENT
    PRIMARY KEY CLUSTERED (payment_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PAYMENT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PAYMENT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PAYMENT >>>'
go
ALTER TABLE dbo.PAYMENT
    ADD CONSTRAINT FK_PAYMENT_QRS_STG_APPLICATION
    FOREIGN KEY (directp_qrs_stg_application_id)
    REFERENCES dbo.QRS_STG_APPLICATION (qrs_stg_application_id)
go
ALTER TABLE dbo.PAYMENT
    ADD CONSTRAINT FK_PAYMENT_APPL_SYS_TYP
    FOREIGN KEY (application_system_type_code)
    REFERENCES dbo.APPLICATION_SYSTEM_TYPE (application_system_type_code)
go
ALTER TABLE dbo.ORDER_REQUEST
    ADD CONSTRAINT FK_ORDER_REQ_PAYMENT
    FOREIGN KEY (payment_id)
    REFERENCES dbo.PAYMENT (payment_id)
go
ALTER TABLE dbo.OUTSTANDING_FEE_LODGEMENT
    ADD CONSTRAINT FK_OUTSDNG_FEE_LDGM_PAYMENT
    FOREIGN KEY (payment_id)
    REFERENCES dbo.PAYMENT (payment_id)
go
GRANT REFERENCES ON dbo.PAYMENT TO eqa_user
go
GRANT SELECT ON dbo.PAYMENT TO eqa_user
go
GRANT SELECT ON dbo.PAYMENT TO read_only
go
GRANT SELECT ON dbo.PAYMENT TO rma_users
go
GRANT INSERT ON dbo.PAYMENT TO eqa_user
go
GRANT DELETE ON dbo.PAYMENT TO eqa_user
go
GRANT UPDATE ON dbo.PAYMENT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PAYMENT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PAYMENT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PAYMENT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PAYMENT TO eqa_user
go
CREATE TABLE dbo.PAYMENT_METHOD
(
    payment_method_code code_2       NOT NULL,
    payment_method_desc varchar(255) NOT NULL,
    CONSTRAINT PK_PAYMENT_METHOD
    PRIMARY KEY CLUSTERED (payment_method_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PAYMENT_METHOD') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PAYMENT_METHOD >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PAYMENT_METHOD >>>'
go
GRANT REFERENCES ON dbo.PAYMENT_METHOD TO eqa_user
go
GRANT SELECT ON dbo.PAYMENT_METHOD TO eqa_user
go
GRANT SELECT ON dbo.PAYMENT_METHOD TO read_only
go
GRANT SELECT ON dbo.PAYMENT_METHOD TO rma_users
go
GRANT INSERT ON dbo.PAYMENT_METHOD TO eqa_user
go
GRANT DELETE ON dbo.PAYMENT_METHOD TO eqa_user
go
GRANT UPDATE ON dbo.PAYMENT_METHOD TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PAYMENT_METHOD TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PAYMENT_METHOD TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PAYMENT_METHOD TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PAYMENT_METHOD TO eqa_user
go
CREATE TABLE dbo.PAYMENT_PRODUCT
(
    payment_product_id OBJECT_ID NOT NULL,
    payment_id         OBJECT_ID NOT NULL,
    product_type_code  code_3    NOT NULL,
    quantity           int       NULL,
    total_amount       amt       NOT NULL,
    active_ind         yn_ind    NOT NULL,
    audit_tran_id      OBJECT_ID NOT NULL,
    unit_price         amt       NULL,
    comment            UNI_DESCR NULL,
    CONSTRAINT PK_PAYMENT_PRODUCT
    PRIMARY KEY NONCLUSTERED (payment_product_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PAYMENT_PRODUCT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PAYMENT_PRODUCT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PAYMENT_PRODUCT >>>'
go
ALTER TABLE dbo.PAYMENT_PRODUCT
    ADD CONSTRAINT FK_PAYMENT_PROD_PAYMENT
    FOREIGN KEY (payment_id)
    REFERENCES dbo.PAYMENT (payment_id)
go
GRANT REFERENCES ON dbo.PAYMENT_PRODUCT TO eqa_user
go
GRANT SELECT ON dbo.PAYMENT_PRODUCT TO eqa_user
go
GRANT SELECT ON dbo.PAYMENT_PRODUCT TO read_only
go
GRANT SELECT ON dbo.PAYMENT_PRODUCT TO rma_users
go
GRANT INSERT ON dbo.PAYMENT_PRODUCT TO eqa_user
go
GRANT DELETE ON dbo.PAYMENT_PRODUCT TO eqa_user
go
GRANT UPDATE ON dbo.PAYMENT_PRODUCT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PAYMENT_PRODUCT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PAYMENT_PRODUCT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PAYMENT_PRODUCT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PAYMENT_PRODUCT TO eqa_user
go
CREATE TABLE dbo.PAYMENT_RECONCILIATION_RUN
(
    payment_reconciliation_run_id OBJECT_ID   NOT NULL,
    processed_date                datetime    NULL,
    settlement_date               datetime    NULL,
    number_of_entries             int         NULL,
    xml_submitted_ind             ny_ind      NOT NULL,
    audit_tran_id                 OBJECT_ID   NOT NULL,
    application_system_type_code  code_4      NOT NULL,
    payment_type_code             code_3      NULL,
    uploaded_by_user_id           varchar(64) NOT NULL,
    uploaded_by_user_name         name        NOT NULL,
    CONSTRAINT PK_PAYMENT_RECONCILIATION_RUN
    PRIMARY KEY CLUSTERED (payment_reconciliation_run_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PAYMENT_RECONCILIATION_RUN') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PAYMENT_RECONCILIATION_RUN >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PAYMENT_RECONCILIATION_RUN >>>'
go
ALTER TABLE dbo.PAYMENT_RECONCILIATION_RUN
    ADD CONSTRAINT FK_PAY_RECON_RUN_APPL_SYS_TYP
    FOREIGN KEY (application_system_type_code)
    REFERENCES dbo.APPLICATION_SYSTEM_TYPE (application_system_type_code)
go
GRANT REFERENCES ON dbo.PAYMENT_RECONCILIATION_RUN TO eqa_user
go
GRANT SELECT ON dbo.PAYMENT_RECONCILIATION_RUN TO eqa_user
go
GRANT SELECT ON dbo.PAYMENT_RECONCILIATION_RUN TO read_only
go
GRANT SELECT ON dbo.PAYMENT_RECONCILIATION_RUN TO rma_users
go
GRANT INSERT ON dbo.PAYMENT_RECONCILIATION_RUN TO eqa_user
go
GRANT DELETE ON dbo.PAYMENT_RECONCILIATION_RUN TO eqa_user
go
GRANT UPDATE ON dbo.PAYMENT_RECONCILIATION_RUN TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PAYMENT_RECONCILIATION_RUN TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PAYMENT_RECONCILIATION_RUN TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PAYMENT_RECONCILIATION_RUN TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PAYMENT_RECONCILIATION_RUN TO eqa_user
go
CREATE TABLE dbo.PAYMENT_REFUND
(
    payment_refund_id           OBJECT_ID        NOT NULL,
    payment_id                  OBJECT_ID        NOT NULL,
    refund_amount               amt              NOT NULL,
    refund_settlement_date      dt               NULL,
    audit_tran_id               OBJECT_ID        NOT NULL,
    refund_status_code          code_2           NULL,
    refund_note                 univarchar(1000) NULL,
    created_date                dt               NULL,
    created_by                  UNI_USR          NULL,
    source_order_reference      univarchar(10)   NULL,
    amount_transferred          amt              NULL,
    destination_order_reference univarchar(10)   NULL,
    CONSTRAINT PK_PAYMENT_REFUND
    PRIMARY KEY NONCLUSTERED (payment_refund_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PAYMENT_REFUND') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PAYMENT_REFUND >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PAYMENT_REFUND >>>'
go
ALTER TABLE dbo.PAYMENT_REFUND
    ADD CONSTRAINT FK_PAYMENT_REFUND_PAYMENT
    FOREIGN KEY (payment_id)
    REFERENCES dbo.PAYMENT (payment_id)
go
ALTER TABLE dbo.PAYMENT_REFUND
    ADD CONSTRAINT FK_PAYMENT_RFND_RFND_STS_CODE
    FOREIGN KEY (refund_status_code)
    REFERENCES dbo.REFUND_STATUS_CODE (refund_status_code)
go
GRANT REFERENCES ON dbo.PAYMENT_REFUND TO eqa_user
go
GRANT SELECT ON dbo.PAYMENT_REFUND TO eqa_user
go
GRANT SELECT ON dbo.PAYMENT_REFUND TO read_only
go
GRANT SELECT ON dbo.PAYMENT_REFUND TO rma_users
go
GRANT INSERT ON dbo.PAYMENT_REFUND TO eqa_user
go
GRANT DELETE ON dbo.PAYMENT_REFUND TO eqa_user
go
GRANT UPDATE ON dbo.PAYMENT_REFUND TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PAYMENT_REFUND TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PAYMENT_REFUND TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PAYMENT_REFUND TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PAYMENT_REFUND TO eqa_user
go
CREATE TABLE dbo.PAYMENT_STATUS
(
    payment_status_code        code_2    NOT NULL,
    nzqa_payment_status_desc   UNI_DESCR NOT NULL,
    public_payment_status_desc UNI_DESCR NOT NULL,
    active_ind                 yn_ind    NOT NULL,
    sortkey                    sortkey   NOT NULL,
    CONSTRAINT PK_PAYMENT_STATUS
    PRIMARY KEY CLUSTERED (payment_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PAYMENT_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PAYMENT_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PAYMENT_STATUS >>>'
go
ALTER TABLE dbo.PAYMENT
    ADD CONSTRAINT FK_PAYMENT_PAYMENT_STS
    FOREIGN KEY (payment_status_code)
    REFERENCES dbo.PAYMENT_STATUS (payment_status_code)
go
GRANT REFERENCES ON dbo.PAYMENT_STATUS TO eqa_user
go
GRANT SELECT ON dbo.PAYMENT_STATUS TO eqa_user
go
GRANT SELECT ON dbo.PAYMENT_STATUS TO read_only
go
GRANT SELECT ON dbo.PAYMENT_STATUS TO rma_users
go
GRANT INSERT ON dbo.PAYMENT_STATUS TO eqa_user
go
GRANT DELETE ON dbo.PAYMENT_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.PAYMENT_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PAYMENT_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PAYMENT_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PAYMENT_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PAYMENT_STATUS TO eqa_user
go
CREATE TABLE dbo.PAYMENT_STATUS_HIST
(
    payment_status_hist_id OBJECT_ID     NOT NULL,
    payment_id             OBJECT_ID     NOT NULL,
    payment_status_code    code_2        NOT NULL,
    payment_status_date    datetime      NOT NULL,
    updated_by             usr           NOT NULL,
    audit_tran_id          numeric(12,0) NOT NULL,
    CONSTRAINT PK_PAYMENT_STATUS_HIST
    PRIMARY KEY NONCLUSTERED (payment_status_hist_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PAYMENT_STATUS_HIST') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PAYMENT_STATUS_HIST >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PAYMENT_STATUS_HIST >>>'
go
ALTER TABLE dbo.PAYMENT_STATUS_HIST
    ADD CONSTRAINT FK_PAYMENT_PAYMENT_STS_HST
    FOREIGN KEY (payment_id)
    REFERENCES dbo.PAYMENT (payment_id)
go
ALTER TABLE dbo.PAYMENT_STATUS_HIST
    ADD CONSTRAINT FK_PAYMENT_STS_HST_PAYMENT_STS
    FOREIGN KEY (payment_status_code)
    REFERENCES dbo.PAYMENT_STATUS (payment_status_code)
go
GRANT REFERENCES ON dbo.PAYMENT_STATUS_HIST TO eqa_user
go
GRANT SELECT ON dbo.PAYMENT_STATUS_HIST TO eqa_user
go
GRANT SELECT ON dbo.PAYMENT_STATUS_HIST TO read_only
go
GRANT SELECT ON dbo.PAYMENT_STATUS_HIST TO rma_users
go
GRANT INSERT ON dbo.PAYMENT_STATUS_HIST TO eqa_user
go
GRANT DELETE ON dbo.PAYMENT_STATUS_HIST TO eqa_user
go
GRANT UPDATE ON dbo.PAYMENT_STATUS_HIST TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PAYMENT_STATUS_HIST TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PAYMENT_STATUS_HIST TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PAYMENT_STATUS_HIST TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PAYMENT_STATUS_HIST TO eqa_user
go
CREATE TABLE dbo.PAYMENT_TYPE
(
    payment_type_code code_3 NOT NULL,
    payment_type_desc descr  NULL,
    active_ind        yn_ind NOT NULL,
    CONSTRAINT PK_PAYMENT_TYPE
    PRIMARY KEY CLUSTERED (payment_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PAYMENT_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PAYMENT_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PAYMENT_TYPE >>>'
go
ALTER TABLE dbo.PAYMENT
    ADD CONSTRAINT FK_PAYMENT_PAYMENT_TYPE
    FOREIGN KEY (payment_type_code)
    REFERENCES dbo.PAYMENT_TYPE (payment_type_code)
go
ALTER TABLE dbo.PAYMENT_RECONCILIATION_RUN
    ADD CONSTRAINT FK_PAY_RECON_RUN_PAYMENT_TYPE
    FOREIGN KEY (payment_type_code)
    REFERENCES dbo.PAYMENT_TYPE (payment_type_code)
go
GRANT REFERENCES ON dbo.PAYMENT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.PAYMENT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.PAYMENT_TYPE TO read_only
go
GRANT SELECT ON dbo.PAYMENT_TYPE TO rma_users
go
GRANT INSERT ON dbo.PAYMENT_TYPE TO eqa_user
go
GRANT DELETE ON dbo.PAYMENT_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.PAYMENT_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PAYMENT_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PAYMENT_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PAYMENT_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PAYMENT_TYPE TO eqa_user
go
CREATE TABLE dbo.PERORG
(
    perorg_id             OBJECT_ID    NOT NULL,
    perorg_type_code      code_1       NOT NULL,
    gender_code           code_1       NULL,
    active_ind            yn           DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    dob                   dt           NULL,
    dod                   dt           NULL,
    ird_number            varchar(9)   NULL,
    audit_tran_id         OBJECT_ID    NOT NULL,
    ts                    timestamp    NOT NULL,
    merge_request_number  OBJECT_ID    NULL,
    is_learner            smallint     DEFAULT 1                                                         NOT NULL,
    logo_url              varchar(255) NULL,
    location_code         varchar(7)   NULL,
    location_country_code varchar(2)   NULL,
    perorg_status         code_2       DEFAULT 'AC'                                                      NOT NULL,
    user_id               varchar(64)  NULL,
    org_legal_status      code_2       NULL,
    CONSTRAINT PK_PERORG
    PRIMARY KEY CLUSTERED (perorg_id),
    CONSTRAINT CKT_PERORG
    CHECK (not (perorg_type_code = 'O' and is_learner = 1))
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PERORG') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PERORG >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PERORG >>>'
go
ALTER TABLE dbo.PERORG
    ADD CONSTRAINT FK_PERORG_MERGE_REQUEST
    FOREIGN KEY (merge_request_number)
    REFERENCES dbo.MERGE_REQUEST (merge_request_number)
go
ALTER TABLE dbo.PERORG
    ADD CONSTRAINT FK_PERORG_ORG_LEGAL_STATUS
    FOREIGN KEY (org_legal_status)
    REFERENCES dbo.ORG_LEGAL_STATUS (org_legal_status)
go
ALTER TABLE dbo.PERORG
    ADD CONSTRAINT FK_PERORG_FK_PERORG_GENDER_C
    FOREIGN KEY (gender_code)
    REFERENCES dbo.GENDER_CODE (gender_code)
go
ALTER TABLE dbo.PERORG
    ADD CONSTRAINT FK_PERORG_COUNTRY
    FOREIGN KEY (location_country_code)
    REFERENCES dbo.COUNTRY_CODE (country_short_code)
go
ALTER TABLE dbo.IR330
    ADD CONSTRAINT FK_IR330_PERORG
    FOREIGN KEY (perorg_id)
    REFERENCES dbo.PERORG (perorg_id)
go
ALTER TABLE dbo.IWI
    ADD CONSTRAINT FK_IWI_PERORG
    FOREIGN KEY (perorg_id)
    REFERENCES dbo.PERORG (perorg_id)
go
ALTER TABLE dbo.LEARNER
    ADD CONSTRAINT FK_LEARNER_FK_LEARNE_PERORG
    FOREIGN KEY (perorg_id)
    REFERENCES dbo.PERORG (perorg_id)
go
ALTER TABLE dbo.MODERATOR
    ADD CONSTRAINT FK_MODERATOR_PERORG
    FOREIGN KEY (perorg_id)
    REFERENCES dbo.PERORG (perorg_id)
go
ALTER TABLE dbo.MOD_REPORT_STATUS_HISTORY
    ADD CONSTRAINT FK_MOD_REP_STATUS_HIST_PERORG
    FOREIGN KEY (perorg_id)
    REFERENCES dbo.PERORG (perorg_id)
go
ALTER TABLE dbo.NAME
    ADD CONSTRAINT FK_NAME_FK_NAME_F_PERORG
    FOREIGN KEY (perorg_id)
    REFERENCES dbo.PERORG (perorg_id)
go
ALTER TABLE dbo.NQAF_STG_APPLICATION
    ADD CONSTRAINT FK_NQAF_STG_APPLN_PERORG
    FOREIGN KEY (teo_perorg_id)
    REFERENCES dbo.PERORG (perorg_id)
go
ALTER TABLE dbo.ORDER_REQUEST
    ADD CONSTRAINT FK_ORDER_REQ_PERORG
    FOREIGN KEY (perorg_id)
    REFERENCES dbo.PERORG (perorg_id)
go
ALTER TABLE dbo.ORGANISATION_LOGO
    ADD CONSTRAINT FK_ORGANISATION_LOGO_PERORG
    FOREIGN KEY (perorg_id)
    REFERENCES dbo.PERORG (perorg_id)
go
ALTER TABLE dbo.ORG_QA_ACTIVITY
    ADD CONSTRAINT FK_ORG_QA_ACTIVITY_PERORG
    FOREIGN KEY (conducted_by_perorg_id)
    REFERENCES dbo.PERORG (perorg_id)
go
ALTER TABLE dbo.OUTSTANDING_FEE_LODGEMENT
    ADD CONSTRAINT FK_OUTSDNG_FEE_LDGM_PERORG
    FOREIGN KEY (perorg_id)
    REFERENCES dbo.PERORG (perorg_id)
go
ALTER TABLE dbo.PAYMENT
    ADD CONSTRAINT FK_PAYMENT_PERORG
    FOREIGN KEY (perorg_id)
    REFERENCES dbo.PERORG (perorg_id)
go
GRANT REFERENCES ON dbo.PERORG TO eqa_user
go
GRANT SELECT ON dbo.PERORG TO eqa_user
go
GRANT SELECT ON dbo.PERORG TO read_only
go
GRANT SELECT ON dbo.PERORG TO rma_users
go
GRANT INSERT ON dbo.PERORG TO eqa_user
go
GRANT DELETE ON dbo.PERORG TO eqa_user
go
GRANT UPDATE ON dbo.PERORG TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PERORG TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PERORG TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PERORG TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PERORG TO eqa_user
go
CREATE TABLE dbo.PERORG_ALT_ID
(
    altid_id              OBJECT_ID   NOT NULL,
    perorg_id             OBJECT_ID   NOT NULL,
    altid_type_code       char(2)     NOT NULL,
    altid_value1          varchar(16) NOT NULL,
    altid_value2          varchar(16) NULL,
    altid_value3          varchar(16) NULL,
    active_ind            yn          DEFAULT '1' NOT NULL,
    original_reference_id OBJECT_ID   NULL,
    ts                    timestamp   NULL,
    audit_tran_id         OBJECT_ID   DEFAULT '0' NOT NULL,
    CONSTRAINT PK_PERORG_ALT_ID
    PRIMARY KEY NONCLUSTERED (altid_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PERORG_ALT_ID') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PERORG_ALT_ID >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PERORG_ALT_ID >>>'
go
ALTER TABLE dbo.PERORG_ALT_ID
    ADD CONSTRAINT FK_PERORG_ALT_ID_PERORG
    FOREIGN KEY (perorg_id)
    REFERENCES dbo.PERORG (perorg_id)
go
ALTER TABLE dbo.PERORG_ALT_ID
    ADD CONSTRAINT FK_ORIGINAL_REF_ID
    FOREIGN KEY (original_reference_id)
    REFERENCES dbo.PERORG_ALT_ID (altid_id)
go
GRANT REFERENCES ON dbo.PERORG_ALT_ID TO eqa_user
go
GRANT SELECT ON dbo.PERORG_ALT_ID TO eqa_user
go
GRANT SELECT ON dbo.PERORG_ALT_ID TO read_only
go
GRANT SELECT ON dbo.PERORG_ALT_ID TO rma_users
go
GRANT INSERT ON dbo.PERORG_ALT_ID TO eqa_user
go
GRANT DELETE ON dbo.PERORG_ALT_ID TO eqa_user
go
GRANT UPDATE ON dbo.PERORG_ALT_ID TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PERORG_ALT_ID TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PERORG_ALT_ID TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PERORG_ALT_ID TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PERORG_ALT_ID TO eqa_user
go
CREATE TABLE dbo.PERORG_ALT_ID_TYPE
(
    altid_type_code char(2)      NOT NULL,
    altid_type_desc varchar(255) NOT NULL,
    CONSTRAINT PK_PERORG_ALT_ID_TYPE
    PRIMARY KEY CLUSTERED (altid_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PERORG_ALT_ID_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PERORG_ALT_ID_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PERORG_ALT_ID_TYPE >>>'
go
ALTER TABLE dbo.PERORG_ALT_ID
    ADD CONSTRAINT FK_ALTID_TYPE_CODE
    FOREIGN KEY (altid_type_code)
    REFERENCES dbo.PERORG_ALT_ID_TYPE (altid_type_code)
go
GRANT REFERENCES ON dbo.PERORG_ALT_ID_TYPE TO eqa_user
go
GRANT SELECT ON dbo.PERORG_ALT_ID_TYPE TO eqa_user
go
GRANT SELECT ON dbo.PERORG_ALT_ID_TYPE TO read_only
go
GRANT SELECT ON dbo.PERORG_ALT_ID_TYPE TO rma_users
go
GRANT INSERT ON dbo.PERORG_ALT_ID_TYPE TO eqa_user
go
GRANT DELETE ON dbo.PERORG_ALT_ID_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.PERORG_ALT_ID_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PERORG_ALT_ID_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PERORG_ALT_ID_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PERORG_ALT_ID_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PERORG_ALT_ID_TYPE TO eqa_user
go
CREATE TABLE dbo.PERORG_CASE
(
    perorg_case_id         OBJECT_ID   NOT NULL,
    perorg_id              OBJECT_ID   NOT NULL,
    related_perorg_role_id OBJECT_ID   NULL,
    case_type              code_2      NOT NULL,
    case_status            code_2      NOT NULL,
    case_start_date        datetime    NULL,
    case_end_date          datetime    NULL,
    external_case_id       varchar(20) NULL,
    active_ind             yn_ind      NOT NULL,
    audit_tran_id          OBJECT_ID   NOT NULL,
    ts                     timestamp   NOT NULL,
    CONSTRAINT PK_PERORG_CASE
    PRIMARY KEY CLUSTERED (perorg_case_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PERORG_CASE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PERORG_CASE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PERORG_CASE >>>'
go
ALTER TABLE dbo.PERORG_CASE
    ADD CONSTRAINT FK_PERORG_CASE_PERORG
    FOREIGN KEY (perorg_id)
    REFERENCES dbo.PERORG (perorg_id)
go
ALTER TABLE dbo.PERORG_CASE
    ADD CONSTRAINT FK_PERORG_CASE_CASE_TYP_ST_COM
    FOREIGN KEY (case_type,case_status)
    REFERENCES dbo.CASE_TYPE_STATUS_COMBO (case_type,case_status)
go
ALTER TABLE dbo.NQAF_STG_APPLICATION
    ADD CONSTRAINT FK_STG_APPLN_PERORG_CASE
    FOREIGN KEY (perorg_case_id)
    REFERENCES dbo.PERORG_CASE (perorg_case_id)
go
ALTER TABLE dbo.ORG_EVALUATION
    ADD CONSTRAINT FK_ORG_EVALUATION_PERORG_CASE
    FOREIGN KEY (perorg_case_id)
    REFERENCES dbo.PERORG_CASE (perorg_case_id)
go
GRANT REFERENCES ON dbo.PERORG_CASE TO eqa_user
go
GRANT SELECT ON dbo.PERORG_CASE TO eqa_user
go
GRANT SELECT ON dbo.PERORG_CASE TO read_only
go
GRANT SELECT ON dbo.PERORG_CASE TO rma_users
go
GRANT INSERT ON dbo.PERORG_CASE TO eqa_user
go
GRANT DELETE ON dbo.PERORG_CASE TO eqa_user
go
GRANT UPDATE ON dbo.PERORG_CASE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PERORG_CASE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PERORG_CASE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PERORG_CASE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PERORG_CASE TO eqa_user
go
CREATE TABLE dbo.PERORG_ROLE
(
    perorg_role_id          OBJECT_ID     NOT NULL,
    perorg_id               OBJECT_ID     NOT NULL,
    perorg_role_type_code   number_3      NOT NULL,
    audit_tran_id           OBJECT_ID     NULL,
    ts                      timestamp     NOT NULL,
    active_ind              yn            DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    related_perorg_role_id  numeric(12,0) NULL,
    start_date              datetime      NULL,
    end_date                datetime      NULL,
    perorg_role_status_code char(2)       NULL,
    primary_contact_id      OBJECT_ID     NULL,
    ssb_type_code           char(3)       NULL,
    context_code            varchar(64)   NULL,
    context_cycle           char(4)       NULL,
    claim_contract_id       OBJECT_ID     NULL,
    status_reason_code      code_2        NULL,
    CONSTRAINT PK_PERORG_ROLE
    PRIMARY KEY NONCLUSTERED (perorg_role_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PERORG_ROLE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PERORG_ROLE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PERORG_ROLE >>>'
go
ALTER TABLE dbo.PERORG_ROLE
    ADD CONSTRAINT FK_PRIMARY_CONTACT
    FOREIGN KEY (primary_contact_id)
    REFERENCES dbo.PERORG (perorg_id)
go
ALTER TABLE dbo.PERORG_ROLE
    ADD CONSTRAINT FK_PERORG_ROLE_PERORG
    FOREIGN KEY (perorg_id)
    REFERENCES dbo.PERORG (perorg_id)
go
ALTER TABLE dbo.PERORG_ROLE
    ADD CONSTRAINT FK_CONTEXT_CYCLE
    FOREIGN KEY (context_cycle)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.PERORG_ROLE
    ADD CONSTRAINT FK_SSB_TYPE_CODE
    FOREIGN KEY (ssb_type_code)
    REFERENCES dbo.SSB_TYPE (ssb_type_code)
go
ALTER TABLE dbo.PERORG_ROLE
    ADD CONSTRAINT FK_PERORG_ROLE_STATUS_REASON
    FOREIGN KEY (status_reason_code,perorg_role_type_code,perorg_role_status_code)
    REFERENCES dbo.STATUS_REASON_CODE (status_reason_code,perorg_role_type_code,perorg_role_status_code)
go
ALTER TABLE dbo.PERORG_ROLE
    ADD CONSTRAINT FK_PERORG_ROLE_CLAIM_CONTRACT
    FOREIGN KEY (claim_contract_id)
    REFERENCES dbo.CLAIM_CONTRACT (claim_contract_id)
go
ALTER TABLE dbo.LEARNER
    ADD CONSTRAINT FK_LEARNER_FK_LEARNE_PERORG_R
    FOREIGN KEY (learner_id)
    REFERENCES dbo.PERORG_ROLE (perorg_role_id)
go
ALTER TABLE dbo.MARKER
    ADD CONSTRAINT FK_MARKER_PERORG_ROLE
    FOREIGN KEY (perorg_role_id)
    REFERENCES dbo.PERORG_ROLE (perorg_role_id)
go
ALTER TABLE dbo.NZQA_EMPLOYEE_INFO
    ADD CONSTRAINT FK_NZQA_EMP_INFO_PERORG_ROLE
    FOREIGN KEY (nzqa_employee_info_id)
    REFERENCES dbo.PERORG_ROLE (perorg_role_id)
go
ALTER TABLE dbo.ORG_EVALUATION
    ADD CONSTRAINT FK_ORG_EVALUATION_PERORG_ROLE
    FOREIGN KEY (perorg_role_id)
    REFERENCES dbo.PERORG_ROLE (perorg_role_id)
go
ALTER TABLE dbo.ORG_PROFILE_NOTE
    ADD CONSTRAINT FK_ORG_PROF_NOTE_PERORG_ROLE
    FOREIGN KEY (perorg_role_id)
    REFERENCES dbo.PERORG_ROLE (perorg_role_id)
go
ALTER TABLE dbo.PERORG_CASE
    ADD CONSTRAINT FK_PERORG_CASE_REL_ROLE
    FOREIGN KEY (related_perorg_role_id)
    REFERENCES dbo.PERORG_ROLE (perorg_role_id)
go
ALTER TABLE dbo.PERORG_ROLE
    ADD CONSTRAINT FK_PERORG_ROLE_RELATED_ROLE
    FOREIGN KEY (related_perorg_role_id)
    REFERENCES dbo.PERORG_ROLE (perorg_role_id)
go
GRANT REFERENCES ON dbo.PERORG_ROLE TO eqa_user
go
GRANT SELECT ON dbo.PERORG_ROLE TO eqa_user
go
GRANT SELECT ON dbo.PERORG_ROLE TO read_only
go
GRANT SELECT ON dbo.PERORG_ROLE TO rma_users
go
GRANT INSERT ON dbo.PERORG_ROLE TO sqr_eqa_user
go
GRANT INSERT ON dbo.PERORG_ROLE TO eve_user
go
GRANT INSERT ON dbo.PERORG_ROLE TO eqa_user
go
GRANT DELETE ON dbo.PERORG_ROLE TO sqr_eqa_user
go
GRANT DELETE ON dbo.PERORG_ROLE TO eve_user
go
GRANT DELETE ON dbo.PERORG_ROLE TO eqa_user
go
GRANT UPDATE ON dbo.PERORG_ROLE TO sqr_eqa_user
go
GRANT UPDATE ON dbo.PERORG_ROLE TO eve_user
go
GRANT UPDATE ON dbo.PERORG_ROLE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PERORG_ROLE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PERORG_ROLE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PERORG_ROLE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PERORG_ROLE TO eqa_user
go
CREATE TABLE dbo.PERORG_ROLE_AVLBL_REGION
(
    perorg_role_ablvl_region_id OBJECT_ID NOT NULL,
    perorg_role_id              OBJECT_ID NOT NULL,
    region_code                 code_2    NOT NULL,
    audit_tran_id               OBJECT_ID NOT NULL,
    CONSTRAINT PK_PERORG_ROLE_AVLBL_REGION
    PRIMARY KEY CLUSTERED (perorg_role_ablvl_region_id)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.PERORG_ROLE_AVLBL_REGION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PERORG_ROLE_AVLBL_REGION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PERORG_ROLE_AVLBL_REGION >>>'
go
ALTER TABLE dbo.PERORG_ROLE_AVLBL_REGION
    ADD CONSTRAINT FK_POR_AVLBL_RGN_PERORG_ROLE
    FOREIGN KEY (perorg_role_id)
    REFERENCES dbo.PERORG_ROLE (perorg_role_id)
go
ALTER TABLE dbo.PERORG_ROLE_AVLBL_REGION
    ADD CONSTRAINT FK_POR_AVLBL_RGN_REGION
    FOREIGN KEY (region_code)
    REFERENCES dbo.REGION (region_code)
go
GRANT REFERENCES ON dbo.PERORG_ROLE_AVLBL_REGION TO eqa_user
go
GRANT SELECT ON dbo.PERORG_ROLE_AVLBL_REGION TO eqa_user
go
GRANT SELECT ON dbo.PERORG_ROLE_AVLBL_REGION TO read_only
go
GRANT SELECT ON dbo.PERORG_ROLE_AVLBL_REGION TO rma_users
go
GRANT INSERT ON dbo.PERORG_ROLE_AVLBL_REGION TO eqa_user
go
GRANT DELETE ON dbo.PERORG_ROLE_AVLBL_REGION TO eqa_user
go
GRANT UPDATE ON dbo.PERORG_ROLE_AVLBL_REGION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PERORG_ROLE_AVLBL_REGION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PERORG_ROLE_AVLBL_REGION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PERORG_ROLE_AVLBL_REGION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PERORG_ROLE_AVLBL_REGION TO eqa_user
go
CREATE TABLE dbo.PERORG_ROLE_COMBO
(
    from_perorg_role_type_code number_3 NOT NULL,
    to_perorg_role_type_code   number_3 NOT NULL,
    peer_relationship          yn       DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    CONSTRAINT PK_PERORG_ROLE_COMBO
    PRIMARY KEY CLUSTERED (from_perorg_role_type_code,to_perorg_role_type_code)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.PERORG_ROLE_COMBO') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PERORG_ROLE_COMBO >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PERORG_ROLE_COMBO >>>'
go
GRANT REFERENCES ON dbo.PERORG_ROLE_COMBO TO eqa_user
go
GRANT SELECT ON dbo.PERORG_ROLE_COMBO TO eqa_user
go
GRANT SELECT ON dbo.PERORG_ROLE_COMBO TO read_only
go
GRANT SELECT ON dbo.PERORG_ROLE_COMBO TO rma_users
go
GRANT INSERT ON dbo.PERORG_ROLE_COMBO TO eqa_user
go
GRANT DELETE ON dbo.PERORG_ROLE_COMBO TO eqa_user
go
GRANT UPDATE ON dbo.PERORG_ROLE_COMBO TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PERORG_ROLE_COMBO TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PERORG_ROLE_COMBO TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PERORG_ROLE_COMBO TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PERORG_ROLE_COMBO TO eqa_user
go
CREATE TABLE dbo.PERORG_ROLE_HISTORY
(
    record_id               OBJECT_ID   NOT NULL,
    perorg_role_id          OBJECT_ID   NOT NULL,
    perorg_id               OBJECT_ID   NOT NULL,
    perorg_role_type_code   number_3    NOT NULL,
    audit_tran_id           OBJECT_ID   NOT NULL,
    ts                      timestamp   NULL,
    active_ind              ny_ind      NULL,
    related_perorg_role_id  OBJECT_ID   NULL,
    start_date              datetime    NULL,
    end_date                datetime    NULL,
    perorg_role_status_code char(2)     NULL,
    primary_contact_id      OBJECT_ID   NOT NULL,
    ssb_type_code           char(3)     NULL,
    context_code            varchar(64) NULL,
    context_cycle           char(4)     NULL,
    CONSTRAINT PK_PERORG_ROLE_HISTORY
    PRIMARY KEY CLUSTERED (record_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PERORG_ROLE_HISTORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PERORG_ROLE_HISTORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PERORG_ROLE_HISTORY >>>'
go
ALTER TABLE dbo.PERORG_ROLE_HISTORY
    ADD CONSTRAINT FK_PERORG_ROLE_HIST_PERORG
    FOREIGN KEY (perorg_id)
    REFERENCES dbo.PERORG (perorg_id)
go
ALTER TABLE dbo.PERORG_ROLE_HISTORY
    ADD CONSTRAINT FK_PERORG_ROLE_HIST_SSB_TYPE
    FOREIGN KEY (ssb_type_code)
    REFERENCES dbo.SSB_TYPE (ssb_type_code)
go
GRANT REFERENCES ON dbo.PERORG_ROLE_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.PERORG_ROLE_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.PERORG_ROLE_HISTORY TO read_only
go
GRANT SELECT ON dbo.PERORG_ROLE_HISTORY TO rma_users
go
GRANT INSERT ON dbo.PERORG_ROLE_HISTORY TO eqa_user
go
GRANT DELETE ON dbo.PERORG_ROLE_HISTORY TO eqa_user
go
GRANT UPDATE ON dbo.PERORG_ROLE_HISTORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PERORG_ROLE_HISTORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PERORG_ROLE_HISTORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PERORG_ROLE_HISTORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PERORG_ROLE_HISTORY TO eqa_user
go
CREATE TABLE dbo.PERORG_ROLE_PANEL_MMBR
(
    perorg_role_panel_mmbr_id OBJECT_ID NOT NULL,
    perorg_role_id            OBJECT_ID NOT NULL,
    panel_id                  OBJECT_ID NOT NULL,
    unassigned_date           dt        NULL,
    audit_tran_id             OBJECT_ID NOT NULL,
    CONSTRAINT PK_PERORG_ROLE_PANEL_MMBR
    PRIMARY KEY CLUSTERED (perorg_role_panel_mmbr_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PERORG_ROLE_PANEL_MMBR') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PERORG_ROLE_PANEL_MMBR >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PERORG_ROLE_PANEL_MMBR >>>'
go
ALTER TABLE dbo.PERORG_ROLE_PANEL_MMBR
    ADD CONSTRAINT FK_POR_PNL_MMBR_MRKR_PNL
    FOREIGN KEY (panel_id)
    REFERENCES dbo.MARKER_PANEL (panel_id)
go
ALTER TABLE dbo.PERORG_ROLE_PANEL_MMBR
    ADD CONSTRAINT FK_POR_PANEL_MMBR_PERORG_ROLE
    FOREIGN KEY (perorg_role_id)
    REFERENCES dbo.PERORG_ROLE (perorg_role_id)
go
GRANT REFERENCES ON dbo.PERORG_ROLE_PANEL_MMBR TO eqa_user
go
GRANT SELECT ON dbo.PERORG_ROLE_PANEL_MMBR TO eqa_user
go
GRANT SELECT ON dbo.PERORG_ROLE_PANEL_MMBR TO read_only
go
GRANT SELECT ON dbo.PERORG_ROLE_PANEL_MMBR TO rma_users
go
GRANT INSERT ON dbo.PERORG_ROLE_PANEL_MMBR TO eqa_user
go
GRANT DELETE ON dbo.PERORG_ROLE_PANEL_MMBR TO eqa_user
go
GRANT UPDATE ON dbo.PERORG_ROLE_PANEL_MMBR TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PERORG_ROLE_PANEL_MMBR TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PERORG_ROLE_PANEL_MMBR TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PERORG_ROLE_PANEL_MMBR TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PERORG_ROLE_PANEL_MMBR TO eqa_user
go
CREATE TABLE dbo.PERORG_ROLE_STATUS
(
    perorg_role_type_code   number_3 NOT NULL,
    perorg_role_status_code code_2   NOT NULL,
    perorg_role_status_desc descr    NOT NULL,
    CONSTRAINT PK_PERORG_ROLE_STATUS
    PRIMARY KEY CLUSTERED (perorg_role_type_code,perorg_role_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PERORG_ROLE_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PERORG_ROLE_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PERORG_ROLE_STATUS >>>'
go
ALTER TABLE dbo.PERORG_ROLE
    ADD CONSTRAINT FK_PERORG_ROLE_STATUS
    FOREIGN KEY (perorg_role_type_code,perorg_role_status_code)
    REFERENCES dbo.PERORG_ROLE_STATUS (perorg_role_type_code,perorg_role_status_code)
go
ALTER TABLE dbo.PERORG_ROLE_HISTORY
    ADD CONSTRAINT FK_PERORG_ROLE_HIST_ROLE_STA
    FOREIGN KEY (perorg_role_type_code,perorg_role_status_code)
    REFERENCES dbo.PERORG_ROLE_STATUS (perorg_role_type_code,perorg_role_status_code)
go
GRANT REFERENCES ON dbo.PERORG_ROLE_STATUS TO eqa_user
go
GRANT SELECT ON dbo.PERORG_ROLE_STATUS TO eqa_user
go
GRANT SELECT ON dbo.PERORG_ROLE_STATUS TO read_only
go
GRANT SELECT ON dbo.PERORG_ROLE_STATUS TO rma_users
go
GRANT INSERT ON dbo.PERORG_ROLE_STATUS TO eqa_user
go
GRANT DELETE ON dbo.PERORG_ROLE_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.PERORG_ROLE_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PERORG_ROLE_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PERORG_ROLE_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PERORG_ROLE_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PERORG_ROLE_STATUS TO eqa_user
go
CREATE TABLE dbo.PERORG_ROLE_TYPE
(
    perorg_role_type_code   number_3    NOT NULL,
    perorg_role_type_desc   descr       NULL,
    perorg_type_code        char(1)     DEFAULT 'O'                                                       NOT NULL,
    role_has_key            yn          DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    role_key_table          varchar(28) NULL,
    role_key_column1        varchar(28) NULL,
    role_key_column2        varchar(28) NULL,
    role_key_col1_data_type varchar(28) NULL,
    role_key_col2_data_type varchar(28) NULL,
    role_key_name           varchar(28) NULL,
    user_selectable         yn          DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    has_context             yn          DEFAULT 0                                                         NOT NULL,
    CONSTRAINT PK_PERORG_ROLE_TYPE
    PRIMARY KEY CLUSTERED (perorg_role_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PERORG_ROLE_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PERORG_ROLE_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PERORG_ROLE_TYPE >>>'
go
ALTER TABLE dbo.ORG_PROFILE_DOCUMENT
    ADD CONSTRAINT FK_ORG_PROF_DOC_PERORG_ROLE_TY
    FOREIGN KEY (perorg_role_type_code)
    REFERENCES dbo.PERORG_ROLE_TYPE (perorg_role_type_code)
go
ALTER TABLE dbo.PERORG_ROLE
    ADD CONSTRAINT FK_PERORG_R_FK_PERORG_PERORG_R
    FOREIGN KEY (perorg_role_type_code)
    REFERENCES dbo.PERORG_ROLE_TYPE (perorg_role_type_code)
go
ALTER TABLE dbo.PERORG_ROLE_COMBO
    ADD CONSTRAINT FK_PERORG_ROLE__TO
    FOREIGN KEY (to_perorg_role_type_code)
    REFERENCES dbo.PERORG_ROLE_TYPE (perorg_role_type_code)
go
ALTER TABLE dbo.PERORG_ROLE_COMBO
    ADD CONSTRAINT FK_PERORG_ROLE__FROM
    FOREIGN KEY (from_perorg_role_type_code)
    REFERENCES dbo.PERORG_ROLE_TYPE (perorg_role_type_code)
go
ALTER TABLE dbo.PERORG_ROLE_STATUS
    ADD CONSTRAINT FK_PERORG_ROLE_STATUS_TYPE
    FOREIGN KEY (perorg_role_type_code)
    REFERENCES dbo.PERORG_ROLE_TYPE (perorg_role_type_code)
go
GRANT REFERENCES ON dbo.PERORG_ROLE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.PERORG_ROLE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.PERORG_ROLE_TYPE TO read_only
go
GRANT SELECT ON dbo.PERORG_ROLE_TYPE TO rma_users
go
GRANT INSERT ON dbo.PERORG_ROLE_TYPE TO eqa_user
go
GRANT DELETE ON dbo.PERORG_ROLE_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.PERORG_ROLE_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PERORG_ROLE_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PERORG_ROLE_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PERORG_ROLE_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PERORG_ROLE_TYPE TO eqa_user
go
CREATE TABLE dbo.PERORG_STATUS
(
    perorg_status_code char(2)      NOT NULL,
    perorg_status_desc varchar(255) NOT NULL,
    CONSTRAINT PK_PERORG_STATUS
    PRIMARY KEY CLUSTERED (perorg_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PERORG_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PERORG_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PERORG_STATUS >>>'
go
ALTER TABLE dbo.PERORG
    ADD CONSTRAINT FK_PERORG_PERORG_STATUS
    FOREIGN KEY (perorg_status)
    REFERENCES dbo.PERORG_STATUS (perorg_status_code)
go
GRANT REFERENCES ON dbo.PERORG_STATUS TO eqa_user
go
GRANT SELECT ON dbo.PERORG_STATUS TO eqa_user
go
GRANT SELECT ON dbo.PERORG_STATUS TO read_only
go
GRANT SELECT ON dbo.PERORG_STATUS TO rma_users
go
GRANT INSERT ON dbo.PERORG_STATUS TO eqa_user
go
GRANT DELETE ON dbo.PERORG_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.PERORG_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PERORG_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PERORG_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PERORG_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PERORG_STATUS TO eqa_user
go
CREATE TABLE dbo.PERORG_TYPE
(
    perorg_type_code code_1 NOT NULL,
    perorg_type_desc descr  NULL,
    CONSTRAINT PK_PERORG_TYPE
    PRIMARY KEY CLUSTERED (perorg_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PERORG_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PERORG_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PERORG_TYPE >>>'
go
ALTER TABLE dbo.NAME_TYPE
    ADD CONSTRAINT FK_PERORG_CODE
    FOREIGN KEY (perorg_type_code)
    REFERENCES dbo.PERORG_TYPE (perorg_type_code)
go
ALTER TABLE dbo.PERORG
    ADD CONSTRAINT FK_PERORG_PERORG_TYPE
    FOREIGN KEY (perorg_type_code)
    REFERENCES dbo.PERORG_TYPE (perorg_type_code)
go
ALTER TABLE dbo.PERORG_ROLE_TYPE
    ADD CONSTRAINT FK_PERORG_R_FK_PERORG_TYPE
    FOREIGN KEY (perorg_type_code)
    REFERENCES dbo.PERORG_TYPE (perorg_type_code)
go
GRANT REFERENCES ON dbo.PERORG_TYPE TO eqa_user
go
GRANT SELECT ON dbo.PERORG_TYPE TO eqa_user
go
GRANT SELECT ON dbo.PERORG_TYPE TO read_only
go
GRANT SELECT ON dbo.PERORG_TYPE TO rma_users
go
GRANT INSERT ON dbo.PERORG_TYPE TO eqa_user
go
GRANT DELETE ON dbo.PERORG_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.PERORG_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PERORG_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PERORG_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PERORG_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PERORG_TYPE TO eqa_user
go
CREATE TABLE dbo.PERSONALISATION_EXCEPTION
(
    personalisation_exception_id OBJECT_ID    NOT NULL,
    academic_year                char(4)      NULL,
    provider_id                  OBJECT_ID    NULL,
    audit_tran_id                OBJECT_ID    NOT NULL,
    ts                           timestamp    NOT NULL,
    std_number                   varchar(8)   NULL,
    std_version_number           numeric(8,0) NULL,
    deactivation_date            datetime     NULL,
    active_ind                   yn           DEFAULT 1 NULL,
    CONSTRAINT PK_PERSONALISATION_EXCEPTION
    PRIMARY KEY NONCLUSTERED (personalisation_exception_id),
    CONSTRAINT CKT_PERSONALISATION_EXCEPTION
    CHECK ((provider_id is null and std_number is not null) or
     (provider_id is not null and std_number is null))
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PERSONALISATION_EXCEPTION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PERSONALISATION_EXCEPTION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PERSONALISATION_EXCEPTION >>>'
go
ALTER TABLE dbo.PERSONALISATION_EXCEPTION
    ADD CONSTRAINT FK_PERSONALISATION_EXCEPT_YR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.PERSONALISATION_EXCEPTION
    ADD CONSTRAINT FK_PER_EXCEPTION_STD_VER
    FOREIGN KEY (std_number,std_version_number)
    REFERENCES dbo.STD_VERSION (std_number,std_version_number)
go
GRANT REFERENCES ON dbo.PERSONALISATION_EXCEPTION TO eqa_user
go
GRANT SELECT ON dbo.PERSONALISATION_EXCEPTION TO eqa_user
go
GRANT SELECT ON dbo.PERSONALISATION_EXCEPTION TO read_only
go
GRANT SELECT ON dbo.PERSONALISATION_EXCEPTION TO rma_users
go
GRANT INSERT ON dbo.PERSONALISATION_EXCEPTION TO eqa_user
go
GRANT DELETE ON dbo.PERSONALISATION_EXCEPTION TO eqa_user
go
GRANT UPDATE ON dbo.PERSONALISATION_EXCEPTION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PERSONALISATION_EXCEPTION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PERSONALISATION_EXCEPTION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PERSONALISATION_EXCEPTION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PERSONALISATION_EXCEPTION TO eqa_user
go
CREATE TABLE dbo.PERSONALISATION_RUN
(
    personalisation_run_id     OBJECT_ID NOT NULL,
    academic_year              char(4)   NOT NULL,
    personalisation_run_type   code_2    NOT NULL,
    sequence_number            smallint  NOT NULL,
    is_deleted                 yn        DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    new_entry_count            int       DEFAULT 0                                                         NOT NULL,
    changed_entry_count        int       DEFAULT 0                                                         NOT NULL,
    withdrawn_entry_count      int       DEFAULT 0                                                         NOT NULL,
    ts                         timestamp NOT NULL,
    audit_tran_id              OBJECT_ID NOT NULL,
    date_created               datetime  DEFAULT getDate()                                                 NOT NULL,
    personalisation_run_status char(2)   DEFAULT 'CO'                                                      NOT NULL,
    CONSTRAINT PK_PERSONALISATION_RUN
    PRIMARY KEY CLUSTERED (personalisation_run_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PERSONALISATION_RUN') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PERSONALISATION_RUN >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PERSONALISATION_RUN >>>'
go
ALTER TABLE dbo.PERSONALISATION_RUN
    ADD CONSTRAINT FK_PERSONALISATION_RUN_YEAR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
GRANT REFERENCES ON dbo.PERSONALISATION_RUN TO eqa_user
go
GRANT SELECT ON dbo.PERSONALISATION_RUN TO eqa_user
go
GRANT SELECT ON dbo.PERSONALISATION_RUN TO read_only
go
GRANT SELECT ON dbo.PERSONALISATION_RUN TO rma_users
go
GRANT INSERT ON dbo.PERSONALISATION_RUN TO eqa_user
go
GRANT DELETE ON dbo.PERSONALISATION_RUN TO eqa_user
go
GRANT UPDATE ON dbo.PERSONALISATION_RUN TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PERSONALISATION_RUN TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PERSONALISATION_RUN TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PERSONALISATION_RUN TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PERSONALISATION_RUN TO eqa_user
go
CREATE TABLE dbo.PERSONALISATION_RUN_STATUS
(
    personalisation_run_status code_2 NOT NULL,
    pers_run_status_desc       descr  NOT NULL,
    CONSTRAINT PK_PERSONALISATION_RUN_STATUS
    PRIMARY KEY NONCLUSTERED (personalisation_run_status)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PERSONALISATION_RUN_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PERSONALISATION_RUN_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PERSONALISATION_RUN_STATUS >>>'
go
ALTER TABLE dbo.PERSONALISATION_RUN
    ADD CONSTRAINT FK_PER_RUN_PER_RUN_STATUS
    FOREIGN KEY (personalisation_run_status)
    REFERENCES dbo.PERSONALISATION_RUN_STATUS (personalisation_run_status)
go
GRANT REFERENCES ON dbo.PERSONALISATION_RUN_STATUS TO eqa_user
go
GRANT SELECT ON dbo.PERSONALISATION_RUN_STATUS TO eqa_user
go
GRANT SELECT ON dbo.PERSONALISATION_RUN_STATUS TO read_only
go
GRANT SELECT ON dbo.PERSONALISATION_RUN_STATUS TO rma_users
go
GRANT INSERT ON dbo.PERSONALISATION_RUN_STATUS TO eqa_user
go
GRANT DELETE ON dbo.PERSONALISATION_RUN_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.PERSONALISATION_RUN_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PERSONALISATION_RUN_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PERSONALISATION_RUN_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PERSONALISATION_RUN_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PERSONALISATION_RUN_STATUS TO eqa_user
go
CREATE TABLE dbo.PERSONALISATION_RUN_TYPE
(
    personalisation_run_type code_2 NOT NULL,
    description              descr  NOT NULL,
    is_initial               yn     DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    is_repeatable            yn     DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    run_after_type           code_2 NULL,
    active_ind               yn     DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    CONSTRAINT PK_PERSONALISATION_RUN_TYPE
    PRIMARY KEY CLUSTERED (personalisation_run_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PERSONALISATION_RUN_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PERSONALISATION_RUN_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PERSONALISATION_RUN_TYPE >>>'
go
ALTER TABLE dbo.PERSONALISATION_RUN_TYPE
    ADD CONSTRAINT FK_PERSONAL_RUN_TYPE_AFT_TYPE
    FOREIGN KEY (run_after_type)
    REFERENCES dbo.RUN_AFTER_TYPE (run_after_type)
go
ALTER TABLE dbo.PERSONALISATION_RUN
    ADD CONSTRAINT FK_PERSONAL_RUN_TYPE
    FOREIGN KEY (personalisation_run_type)
    REFERENCES dbo.PERSONALISATION_RUN_TYPE (personalisation_run_type)
go
GRANT REFERENCES ON dbo.PERSONALISATION_RUN_TYPE TO eqa_user
go
GRANT SELECT ON dbo.PERSONALISATION_RUN_TYPE TO eqa_user
go
GRANT SELECT ON dbo.PERSONALISATION_RUN_TYPE TO read_only
go
GRANT SELECT ON dbo.PERSONALISATION_RUN_TYPE TO rma_users
go
GRANT INSERT ON dbo.PERSONALISATION_RUN_TYPE TO eqa_user
go
GRANT DELETE ON dbo.PERSONALISATION_RUN_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.PERSONALISATION_RUN_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PERSONALISATION_RUN_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PERSONALISATION_RUN_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PERSONALISATION_RUN_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PERSONALISATION_RUN_TYPE TO eqa_user
go
CREATE TABLE dbo.PERSONALISATION_TYPE
(
    personalisation_type      code_2 NOT NULL,
    personalisation_type_desc descr  NULL,
    CONSTRAINT PK_PERSONALISATION_TYPE
    PRIMARY KEY CLUSTERED (personalisation_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PERSONALISATION_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PERSONALISATION_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PERSONALISATION_TYPE >>>'
go
GRANT REFERENCES ON dbo.PERSONALISATION_TYPE TO eqa_user
go
GRANT SELECT ON dbo.PERSONALISATION_TYPE TO eqa_user
go
GRANT SELECT ON dbo.PERSONALISATION_TYPE TO read_only
go
GRANT SELECT ON dbo.PERSONALISATION_TYPE TO rma_users
go
GRANT INSERT ON dbo.PERSONALISATION_TYPE TO eqa_user
go
GRANT DELETE ON dbo.PERSONALISATION_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.PERSONALISATION_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PERSONALISATION_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PERSONALISATION_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PERSONALISATION_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PERSONALISATION_TYPE TO eqa_user
go
CREATE TABLE dbo.PERSON_CLAIM
(
    person_claim_id      OBJECT_ID    NOT NULL,
    claim_contract_id    OBJECT_ID    NOT NULL,
    academic_cycle       char(4)      NOT NULL,
    claim_status         code_2       NOT NULL,
    perorg_id            OBJECT_ID    NOT NULL,
    perorg_role_id       OBJECT_ID    NOT NULL,
    submitted_by_user_id varchar(64)  NULL,
    submitted_date       datetime     NULL,
    financial_detail_id  OBJECT_ID    NULL,
    approved_by_user_id  varchar(64)  NULL,
    approved_date        datetime     NULL,
    export_date          datetime     NULL,
    invoice_ind          ny_ind       NOT NULL,
    active_ind           yn_ind       NOT NULL,
    audit_tran_id        OBJECT_ID    NOT NULL,
    ts                   timestamp    NOT NULL,
    notes                varchar(255) NULL,
    draft_ind            yn_ind       NULL,
    CONSTRAINT PK_PERSON_CLAIM
    PRIMARY KEY CLUSTERED (person_claim_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PERSON_CLAIM') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PERSON_CLAIM >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PERSON_CLAIM >>>'
go
ALTER TABLE dbo.PERSON_CLAIM
    ADD CONSTRAINT FK_PERSON_CLAIM_CONSTRACT
    FOREIGN KEY (claim_contract_id)
    REFERENCES dbo.CLAIM_CONTRACT (claim_contract_id)
go
ALTER TABLE dbo.PERSON_CLAIM
    ADD CONSTRAINT FK_PERSON_CLAIM_FIN_DETAIL
    FOREIGN KEY (financial_detail_id,perorg_id)
    REFERENCES dbo.FINANCIAL_DETAIL (financial_detail_id,perorg_id)
go
ALTER TABLE dbo.PERSON_CLAIM
    ADD CONSTRAINT FK_PERSON_CLAIM_ROLE
    FOREIGN KEY (perorg_role_id,perorg_id)
    REFERENCES dbo.PERORG_ROLE (perorg_role_id,perorg_id)
go
ALTER TABLE dbo.PERSON_CLAIM
    ADD CONSTRAINT FK_PERSON_CLAIM_STATUS
    FOREIGN KEY (claim_status)
    REFERENCES dbo.CLAIM_STATUS (claim_status)
go
ALTER TABLE dbo.PERSON_CLAIM
    ADD CONSTRAINT FK_PERSON_CLAIM_YEAR
    FOREIGN KEY (academic_cycle)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
GRANT REFERENCES ON dbo.PERSON_CLAIM TO eqa_user
go
GRANT SELECT ON dbo.PERSON_CLAIM TO eqa_user
go
GRANT SELECT ON dbo.PERSON_CLAIM TO read_only
go
GRANT SELECT ON dbo.PERSON_CLAIM TO rma_users
go
GRANT INSERT ON dbo.PERSON_CLAIM TO eqa_user
go
GRANT DELETE ON dbo.PERSON_CLAIM TO eqa_user
go
GRANT UPDATE ON dbo.PERSON_CLAIM TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PERSON_CLAIM TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PERSON_CLAIM TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PERSON_CLAIM TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PERSON_CLAIM TO eqa_user
go
CREATE TABLE dbo.PERS_VOL_COUNT
(
    pers_vol_id             OBJECT_ID NOT NULL,
    exam_material_cmpt_id   OBJECT_ID NOT NULL,
    exam_centre_id          OBJECT_ID NOT NULL,
    exam_centre_location    number_2  NOT NULL,
    personalised_count      COUNT_1   NULL,
    buffer_count            COUNT_1   NULL,
    non_buffer_count        COUNT_1   NULL,
    spl_assisst_count       COUNT_1   NULL,
    ext_entries_count       COUNT_1   NULL,
    non_alloc_entries_count COUNT_1   NULL,
    audit_tran_id           OBJECT_ID NOT NULL,
    CONSTRAINT PK_PERS_VOL_COUNT
    PRIMARY KEY CLUSTERED (pers_vol_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PERS_VOL_COUNT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PERS_VOL_COUNT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PERS_VOL_COUNT >>>'
go
ALTER TABLE dbo.PERS_VOL_COUNT
    ADD CONSTRAINT FK_PERS_VOL_COUNT_EXM_MTL_CMPT
    FOREIGN KEY (exam_material_cmpt_id)
    REFERENCES dbo.EXAM_MATERIAL_CMPT (exam_material_cmpt_id)
go
GRANT REFERENCES ON dbo.PERS_VOL_COUNT TO eqa_user
go
GRANT SELECT ON dbo.PERS_VOL_COUNT TO eqa_user
go
GRANT SELECT ON dbo.PERS_VOL_COUNT TO read_only
go
GRANT SELECT ON dbo.PERS_VOL_COUNT TO rma_users
go
GRANT INSERT ON dbo.PERS_VOL_COUNT TO eqa_user
go
GRANT DELETE ON dbo.PERS_VOL_COUNT TO eqa_user
go
GRANT UPDATE ON dbo.PERS_VOL_COUNT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PERS_VOL_COUNT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PERS_VOL_COUNT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PERS_VOL_COUNT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PERS_VOL_COUNT TO eqa_user
go
CREATE TABLE dbo.PICKUP_TYPE
(
    pickup_type      code_2 NOT NULL,
    pickup_type_desc descr  NOT NULL,
    CONSTRAINT PK_PICKUP_TYPE
    PRIMARY KEY CLUSTERED (pickup_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PICKUP_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PICKUP_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PICKUP_TYPE >>>'
go
GRANT REFERENCES ON dbo.PICKUP_TYPE TO eqa_user
go
GRANT SELECT ON dbo.PICKUP_TYPE TO eqa_user
go
GRANT SELECT ON dbo.PICKUP_TYPE TO read_only
go
GRANT SELECT ON dbo.PICKUP_TYPE TO rma_users
go
GRANT INSERT ON dbo.PICKUP_TYPE TO eqa_user
go
GRANT DELETE ON dbo.PICKUP_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.PICKUP_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PICKUP_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PICKUP_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PICKUP_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PICKUP_TYPE TO eqa_user
go
CREATE TABLE dbo.PREREQUISITE_STRAND_NAME
(
    prerequisite_strand_name_id OBJECT_ID NOT NULL,
    strand_name_with_umlauts    name      NOT NULL,
    prerequisite_id             OBJECT_ID NOT NULL,
    section_type_code           code_2    NOT NULL,
    audit_tran_id               OBJECT_ID NOT NULL,
    ts                          timestamp NOT NULL,
    CONSTRAINT PK_PREREQ_STRAND_NAME
    PRIMARY KEY CLUSTERED (prerequisite_strand_name_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PREREQUISITE_STRAND_NAME') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PREREQUISITE_STRAND_NAME >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PREREQUISITE_STRAND_NAME >>>'
go
ALTER TABLE dbo.PREREQUISITE_STRAND_NAME
    ADD CONSTRAINT FK_PREREQ_STRAND_QFN_PREREQ
    FOREIGN KEY (prerequisite_id)
    REFERENCES dbo.QFN_PREREQUISITE (prerequisite_id)
go
ALTER TABLE dbo.PREREQUISITE_STRAND_NAME
    ADD CONSTRAINT FK_PREREQ_STRAND_NAME_SECTION
    FOREIGN KEY (section_type_code)
    REFERENCES dbo.QFN_SECTION_TYPE (section_type_code)
go
GRANT REFERENCES ON dbo.PREREQUISITE_STRAND_NAME TO eqa_user
go
GRANT SELECT ON dbo.PREREQUISITE_STRAND_NAME TO eqa_user
go
GRANT SELECT ON dbo.PREREQUISITE_STRAND_NAME TO read_only
go
GRANT SELECT ON dbo.PREREQUISITE_STRAND_NAME TO rma_users
go
GRANT INSERT ON dbo.PREREQUISITE_STRAND_NAME TO eqa_user
go
GRANT DELETE ON dbo.PREREQUISITE_STRAND_NAME TO eqa_user
go
GRANT UPDATE ON dbo.PREREQUISITE_STRAND_NAME TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PREREQUISITE_STRAND_NAME TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PREREQUISITE_STRAND_NAME TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PREREQUISITE_STRAND_NAME TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PREREQUISITE_STRAND_NAME TO eqa_user
go
CREATE TABLE dbo.PROCESS_TYPE_CODE
(
    process_type_code         code_2      NOT NULL,
    process_type_code_desc    descr       NOT NULL,
    process_type_short_desc   descr_short NOT NULL,
    sortkey                   sortkey     NOT NULL,
    process_type_used_by_code code_2      NOT NULL,
    CONSTRAINT PK_PROCESS_TYPE_CODE
    PRIMARY KEY CLUSTERED (process_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PROCESS_TYPE_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PROCESS_TYPE_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PROCESS_TYPE_CODE >>>'
go
GRANT REFERENCES ON dbo.PROCESS_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.PROCESS_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.PROCESS_TYPE_CODE TO read_only
go
GRANT SELECT ON dbo.PROCESS_TYPE_CODE TO rma_users
go
GRANT INSERT ON dbo.PROCESS_TYPE_CODE TO eqa_user
go
GRANT DELETE ON dbo.PROCESS_TYPE_CODE TO eqa_user
go
GRANT UPDATE ON dbo.PROCESS_TYPE_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PROCESS_TYPE_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PROCESS_TYPE_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PROCESS_TYPE_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PROCESS_TYPE_CODE TO eqa_user
go
CREATE TABLE dbo.PROCESS_TYPE_USED_BY_CODE
(
    process_type_used_by_code code_2  NOT NULL,
    process_type_used_by_desc descr   NOT NULL,
    active_ind                yn_ind  NOT NULL,
    sortkey                   sortkey NOT NULL,
    CONSTRAINT PK_PROCESS_TYPE_USED_BY_CODE
    PRIMARY KEY CLUSTERED (process_type_used_by_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PROCESS_TYPE_USED_BY_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PROCESS_TYPE_USED_BY_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PROCESS_TYPE_USED_BY_CODE >>>'
go
ALTER TABLE dbo.PROCESS_TYPE_CODE
    ADD CONSTRAINT FK_PROC_CODE_USED_BY_CODE
    FOREIGN KEY (process_type_used_by_code)
    REFERENCES dbo.PROCESS_TYPE_USED_BY_CODE (process_type_used_by_code)
go
GRANT REFERENCES ON dbo.PROCESS_TYPE_USED_BY_CODE TO eqa_user
go
GRANT SELECT ON dbo.PROCESS_TYPE_USED_BY_CODE TO eqa_user
go
GRANT SELECT ON dbo.PROCESS_TYPE_USED_BY_CODE TO read_only
go
GRANT SELECT ON dbo.PROCESS_TYPE_USED_BY_CODE TO rma_users
go
GRANT INSERT ON dbo.PROCESS_TYPE_USED_BY_CODE TO eqa_user
go
GRANT DELETE ON dbo.PROCESS_TYPE_USED_BY_CODE TO eqa_user
go
GRANT UPDATE ON dbo.PROCESS_TYPE_USED_BY_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PROCESS_TYPE_USED_BY_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PROCESS_TYPE_USED_BY_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PROCESS_TYPE_USED_BY_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PROCESS_TYPE_USED_BY_CODE TO eqa_user
go
CREATE TABLE dbo.PRODUCT_TYPE
(
    product_type_code            code_3 NOT NULL,
    finance_product_code         int    NULL,
    product_type_desc            descr  NOT NULL,
    unit_price                   amt    NOT NULL,
    application_system_type_code code_4 NOT NULL,
    CONSTRAINT PK_PRODUCT_TYPE
    PRIMARY KEY NONCLUSTERED (product_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PRODUCT_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PRODUCT_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PRODUCT_TYPE >>>'
go
ALTER TABLE dbo.PRODUCT_TYPE
    ADD CONSTRAINT FK_PAYMENT_TYP_APPL_SYS_TYP
    FOREIGN KEY (application_system_type_code)
    REFERENCES dbo.APPLICATION_SYSTEM_TYPE (application_system_type_code)
go
ALTER TABLE dbo.PAYMENT_PRODUCT
    ADD CONSTRAINT FK_PAYMENT_PRODUCT_TYPE
    FOREIGN KEY (product_type_code)
    REFERENCES dbo.PRODUCT_TYPE (product_type_code)
go
GRANT REFERENCES ON dbo.PRODUCT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.PRODUCT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.PRODUCT_TYPE TO read_only
go
GRANT SELECT ON dbo.PRODUCT_TYPE TO rma_users
go
GRANT INSERT ON dbo.PRODUCT_TYPE TO eqa_user
go
GRANT DELETE ON dbo.PRODUCT_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.PRODUCT_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PRODUCT_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PRODUCT_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PRODUCT_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PRODUCT_TYPE TO eqa_user
go
CREATE TABLE dbo.PROVIDER
(
    provider_id                 OBJECT_ID    NOT NULL,
    moe_provider_id             OBJECT_ID    NOT NULL,
    location                    number_2     NOT NULL,
    location_name               varchar(255) NULL,
    ts                          timestamp    NOT NULL,
    audit_tran_id               OBJECT_ID    NOT NULL,
    excluded_marker_allocation  ny_ind       NOT NULL,
    allow_teg_files             yn_ind       NOT NULL,
    allow_seg_files             yn_ind       NOT NULL,
    provider_type_code          char(3)      NOT NULL,
    verification_allowed_ind    ny_ind       NOT NULL,
    delivery_site_ind           yn_ind       NOT NULL,
    delivery_site_status        code_2       NULL,
    provider_head_office_id     OBJECT_ID    NULL,
    region_code                 code_2       NULL,
    active_ind                  yn_ind       NOT NULL,
    created_perorg_case_id      OBJECT_ID    NULL,
    last_updated_perorg_case_id OBJECT_ID    NULL,
    provider_locality_code      code_2       NULL,
    latitude                    float        NULL,
    longitude                   float        NULL,
    CONSTRAINT PK_PROVIDER
    PRIMARY KEY CLUSTERED (provider_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PROVIDER') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PROVIDER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PROVIDER >>>'
go
ALTER TABLE dbo.PROVIDER
    ADD CONSTRAINT FK_PROVIDER_LAST_PERORG_CASE
    FOREIGN KEY (last_updated_perorg_case_id)
    REFERENCES dbo.PERORG_CASE (perorg_case_id)
go
ALTER TABLE dbo.PROVIDER
    ADD CONSTRAINT FK_PROVIDER_CREATE_PERORG_CASE
    FOREIGN KEY (created_perorg_case_id)
    REFERENCES dbo.PERORG_CASE (perorg_case_id)
go
ALTER TABLE dbo.PROVIDER
    ADD CONSTRAINT FK_PROVIDER_PERORG_ROLE
    FOREIGN KEY (provider_id)
    REFERENCES dbo.PERORG_ROLE (perorg_role_id)
go
ALTER TABLE dbo.PROVIDER
    ADD CONSTRAINT FK_PROVIDER_REGION
    FOREIGN KEY (region_code)
    REFERENCES dbo.REGION (region_code)
go
ALTER TABLE dbo.PROVIDER
    ADD CONSTRAINT FK_PROVIDER_DELIVERY_SITE_STA
    FOREIGN KEY (delivery_site_status)
    REFERENCES dbo.DELIVERY_SITE_STATUS (delivery_site_status)
go
GRANT REFERENCES ON dbo.PROVIDER TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER TO read_only
go
GRANT SELECT ON dbo.PROVIDER TO rma_users
go
GRANT INSERT ON dbo.PROVIDER TO eqa_user
go
GRANT DELETE ON dbo.PROVIDER TO eqa_user
go
GRANT UPDATE ON dbo.PROVIDER TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PROVIDER TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PROVIDER TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PROVIDER TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PROVIDER TO eqa_user
go
CREATE TABLE dbo.PROVIDER_CONDITION
(
    provider_condition_id OBJECT_ID     NOT NULL,
    condition_type_code   code_2        NOT NULL,
    condition_status_code code_2        NOT NULL,
    provider_id           OBJECT_ID     NOT NULL,
    perorg_case_id        OBJECT_ID     NULL,
    condition_desc        varchar(500)  NULL,
    comment               varchar(3000) NULL,
    start_date            dt            NOT NULL,
    review_due_date       dt            NULL,
    end_date              dt            NULL,
    workflow_created_ind  ny_ind        NOT NULL,
    active_ind            yn_ind        NOT NULL,
    audit_tran_id         OBJECT_ID     NOT NULL,
    CONSTRAINT PK_REGISTRATION_CONDITION
    PRIMARY KEY NONCLUSTERED (provider_condition_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PROVIDER_CONDITION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PROVIDER_CONDITION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PROVIDER_CONDITION >>>'
go
ALTER TABLE dbo.PROVIDER_CONDITION
    ADD CONSTRAINT FK_PROV_COND_PERORG_CASE
    FOREIGN KEY (perorg_case_id)
    REFERENCES dbo.PERORG_CASE (perorg_case_id)
go
ALTER TABLE dbo.PROVIDER_CONDITION
    ADD CONSTRAINT FK_PROV_COND_COND_STATUS
    FOREIGN KEY (condition_status_code)
    REFERENCES dbo.CONDITION_STATUS (condition_status_code)
go
ALTER TABLE dbo.PROVIDER_CONDITION
    ADD CONSTRAINT FK_PROV_COND_COND_TYPE
    FOREIGN KEY (condition_type_code)
    REFERENCES dbo.CONDITION_TYPE (condition_type_code)
go
GRANT REFERENCES ON dbo.PROVIDER_CONDITION TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER_CONDITION TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER_CONDITION TO read_only
go
GRANT SELECT ON dbo.PROVIDER_CONDITION TO rma_users
go
GRANT INSERT ON dbo.PROVIDER_CONDITION TO eqa_user
go
GRANT DELETE ON dbo.PROVIDER_CONDITION TO eqa_user
go
GRANT UPDATE ON dbo.PROVIDER_CONDITION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PROVIDER_CONDITION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PROVIDER_CONDITION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PROVIDER_CONDITION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PROVIDER_CONDITION TO eqa_user
go
CREATE TABLE dbo.PROVIDER_COP_ACCOM_ARRANGED_BY
(
    provider_id             OBJECT_ID NOT NULL,
    cop_accom_arranged_code code_2    NOT NULL,
    active_ind              yn_ind    NOT NULL,
    audit_tran_id           OBJECT_ID NOT NULL,
    CONSTRAINT PK_PROV_COP_ACCOM_ARRANGED_BY
    PRIMARY KEY CLUSTERED (provider_id,cop_accom_arranged_code)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.PROVIDER_COP_ACCOM_ARRANGED_BY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PROVIDER_COP_ACCOM_ARRANGED_BY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PROVIDER_COP_ACCOM_ARRANGED_BY >>>'
go
ALTER TABLE dbo.PROVIDER_COP_ACCOM_ARRANGED_BY
    ADD CONSTRAINT FK_PROV_COP_ACCOM_ARR_TYPE
    FOREIGN KEY (cop_accom_arranged_code)
    REFERENCES dbo.COP_ACCOM_ARRANGED_TYPE (cop_accom_arranged_code)
go
GRANT REFERENCES ON dbo.PROVIDER_COP_ACCOM_ARRANGED_BY TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER_COP_ACCOM_ARRANGED_BY TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER_COP_ACCOM_ARRANGED_BY TO read_only
go
GRANT SELECT ON dbo.PROVIDER_COP_ACCOM_ARRANGED_BY TO rma_users
go
GRANT INSERT ON dbo.PROVIDER_COP_ACCOM_ARRANGED_BY TO eqa_user
go
GRANT DELETE ON dbo.PROVIDER_COP_ACCOM_ARRANGED_BY TO eqa_user
go
GRANT UPDATE ON dbo.PROVIDER_COP_ACCOM_ARRANGED_BY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PROVIDER_COP_ACCOM_ARRANGED_BY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PROVIDER_COP_ACCOM_ARRANGED_BY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PROVIDER_COP_ACCOM_ARRANGED_BY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PROVIDER_COP_ACCOM_ARRANGED_BY TO eqa_user
go
CREATE TABLE dbo.PROVIDER_COP_ACCOM_OPTION
(
    provider_id           OBJECT_ID NOT NULL,
    cop_accom_option_code code_2    NOT NULL,
    active_ind            yn_ind    NOT NULL,
    audit_tran_id         OBJECT_ID NOT NULL,
    CONSTRAINT PK_PROV_COP_ACCOM_OPTION
    PRIMARY KEY CLUSTERED (provider_id,cop_accom_option_code)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.PROVIDER_COP_ACCOM_OPTION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PROVIDER_COP_ACCOM_OPTION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PROVIDER_COP_ACCOM_OPTION >>>'
go
ALTER TABLE dbo.PROVIDER_COP_ACCOM_OPTION
    ADD CONSTRAINT FK_PROV_COP_ACCOM_OPT_TYPE
    FOREIGN KEY (cop_accom_option_code)
    REFERENCES dbo.COP_ACCOM_OPTION_TYPE (cop_accom_option_code)
go
GRANT REFERENCES ON dbo.PROVIDER_COP_ACCOM_OPTION TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER_COP_ACCOM_OPTION TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER_COP_ACCOM_OPTION TO read_only
go
GRANT SELECT ON dbo.PROVIDER_COP_ACCOM_OPTION TO rma_users
go
GRANT INSERT ON dbo.PROVIDER_COP_ACCOM_OPTION TO eqa_user
go
GRANT DELETE ON dbo.PROVIDER_COP_ACCOM_OPTION TO eqa_user
go
GRANT UPDATE ON dbo.PROVIDER_COP_ACCOM_OPTION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PROVIDER_COP_ACCOM_OPTION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PROVIDER_COP_ACCOM_OPTION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PROVIDER_COP_ACCOM_OPTION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PROVIDER_COP_ACCOM_OPTION TO eqa_user
go
CREATE TABLE dbo.PROVIDER_COP_APPRVL
(
    provider_cop_apprvl_id    OBJECT_ID   NOT NULL,
    cop_apprvl_type_code      code_2      NOT NULL,
    provider_id               OBJECT_ID   NOT NULL,
    cop_signatory_status_code code_2      NOT NULL,
    cop_status_date           dt          NULL,
    cop_updated_date          dt          NULL,
    updated_by                usr         NULL,
    cop_external_case_id      varchar(20) NULL,
    active_ind                yn_ind      NOT NULL,
    audit_tran_id             OBJECT_ID   NOT NULL,
    CONSTRAINT PK_PROVIDER_COP_APPRVL
    PRIMARY KEY CLUSTERED (provider_cop_apprvl_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PROVIDER_COP_APPRVL') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PROVIDER_COP_APPRVL >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PROVIDER_COP_APPRVL >>>'
go
ALTER TABLE dbo.PROVIDER_COP_APPRVL
    ADD CONSTRAINT FK_PROV_COP_APP_COP_APP_TYPE
    FOREIGN KEY (cop_apprvl_type_code)
    REFERENCES dbo.COP_APPRVL_TYPE (cop_apprvl_type_code)
go
ALTER TABLE dbo.PROVIDER_COP_APPRVL
    ADD CONSTRAINT FK_PROV_COP_APPRVL_SIGNATORY_STATUS
    FOREIGN KEY (cop_signatory_status_code)
    REFERENCES dbo.COP_SIGNATORY_STATUS_TYPE (cop_signatory_status_code)
go
GRANT REFERENCES ON dbo.PROVIDER_COP_APPRVL TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER_COP_APPRVL TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER_COP_APPRVL TO read_only
go
GRANT SELECT ON dbo.PROVIDER_COP_APPRVL TO rma_users
go
GRANT INSERT ON dbo.PROVIDER_COP_APPRVL TO eqa_user
go
GRANT DELETE ON dbo.PROVIDER_COP_APPRVL TO eqa_user
go
GRANT UPDATE ON dbo.PROVIDER_COP_APPRVL TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PROVIDER_COP_APPRVL TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PROVIDER_COP_APPRVL TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PROVIDER_COP_APPRVL TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PROVIDER_COP_APPRVL TO eqa_user
go
CREATE TABLE dbo.PROVIDER_COP_APPRVL_HIST
(
    cop_approval_hist_id      OBJECT_ID   NOT NULL,
    provider_cop_apprvl_id    OBJECT_ID   NOT NULL,
    cop_signatory_status_code code_2      NOT NULL,
    cop_status_date           dt          NOT NULL,
    updated_date              dt          NOT NULL,
    updated_by                usr         NOT NULL,
    cop_external_case_id      varchar(20) NULL,
    audit_tran_id             OBJECT_ID   NOT NULL,
    CONSTRAINT PK_PROVIDER_COP_APPRVL_HIST
    PRIMARY KEY CLUSTERED (cop_approval_hist_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PROVIDER_COP_APPRVL_HIST') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PROVIDER_COP_APPRVL_HIST >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PROVIDER_COP_APPRVL_HIST >>>'
go
ALTER TABLE dbo.PROVIDER_COP_APPRVL_HIST
    ADD CONSTRAINT FK_PROV_COP_APPRVL_HIST_SIGNATORY_STATUS
    FOREIGN KEY (cop_signatory_status_code)
    REFERENCES dbo.COP_SIGNATORY_STATUS_TYPE (cop_signatory_status_code)
go
GRANT REFERENCES ON dbo.PROVIDER_COP_APPRVL_HIST TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER_COP_APPRVL_HIST TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER_COP_APPRVL_HIST TO read_only
go
GRANT SELECT ON dbo.PROVIDER_COP_APPRVL_HIST TO rma_users
go
GRANT INSERT ON dbo.PROVIDER_COP_APPRVL_HIST TO eqa_user
go
GRANT DELETE ON dbo.PROVIDER_COP_APPRVL_HIST TO eqa_user
go
GRANT UPDATE ON dbo.PROVIDER_COP_APPRVL_HIST TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PROVIDER_COP_APPRVL_HIST TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PROVIDER_COP_APPRVL_HIST TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PROVIDER_COP_APPRVL_HIST TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PROVIDER_COP_APPRVL_HIST TO eqa_user
go
CREATE TABLE dbo.PROVIDER_DEREG_REASON_CODE
(
    provider_dereg_reason_code code_2  NOT NULL,
    provider_dereg_reason_desc descr   NOT NULL,
    active_ind                 yn_ind  NOT NULL,
    sortkey                    sortkey NULL,
    CONSTRAINT PK_PROVIDER_DEREG_REASON_CODE
    PRIMARY KEY CLUSTERED (provider_dereg_reason_code)
)
LOCK ALLPAGES
go
IF OBJECT_ID('dbo.PROVIDER_DEREG_REASON_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PROVIDER_DEREG_REASON_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PROVIDER_DEREG_REASON_CODE >>>'
go
GRANT REFERENCES ON dbo.PROVIDER_DEREG_REASON_CODE TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER_DEREG_REASON_CODE TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER_DEREG_REASON_CODE TO read_only
go
GRANT SELECT ON dbo.PROVIDER_DEREG_REASON_CODE TO rma_users
go
GRANT INSERT ON dbo.PROVIDER_DEREG_REASON_CODE TO eqa_user
go
GRANT DELETE ON dbo.PROVIDER_DEREG_REASON_CODE TO eqa_user
go
GRANT UPDATE ON dbo.PROVIDER_DEREG_REASON_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PROVIDER_DEREG_REASON_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PROVIDER_DEREG_REASON_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PROVIDER_DEREG_REASON_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PROVIDER_DEREG_REASON_CODE TO eqa_user
go
CREATE TABLE dbo.PROVIDER_FOCUS
(
    provider_focus_id   OBJECT_ID NOT NULL,
    provider_id         OBJECT_ID NOT NULL,
    provider_focus_code code_2    NOT NULL,
    active_ind          yn_ind    NOT NULL,
    audit_tran_id       OBJECT_ID NOT NULL,
    CONSTRAINT PK_PROVIDER_FOCUS
    PRIMARY KEY NONCLUSTERED (provider_focus_id)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.PROVIDER_FOCUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PROVIDER_FOCUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PROVIDER_FOCUS >>>'
go
GRANT REFERENCES ON dbo.PROVIDER_FOCUS TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER_FOCUS TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER_FOCUS TO read_only
go
GRANT SELECT ON dbo.PROVIDER_FOCUS TO rma_users
go
GRANT INSERT ON dbo.PROVIDER_FOCUS TO eqa_user
go
GRANT DELETE ON dbo.PROVIDER_FOCUS TO eqa_user
go
GRANT UPDATE ON dbo.PROVIDER_FOCUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PROVIDER_FOCUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PROVIDER_FOCUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PROVIDER_FOCUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PROVIDER_FOCUS TO eqa_user
go
CREATE TABLE dbo.PROVIDER_FOCUS_CODE
(
    provider_focus_code code_2    NOT NULL,
    provider_focus_desc descr     NOT NULL,
    active_ind          yn_ind    NOT NULL,
    sortkey             sortkey   NOT NULL,
    audit_tran_id       OBJECT_ID NOT NULL,
    CONSTRAINT PK_PROVIDER_FOCUS_CODE
    PRIMARY KEY NONCLUSTERED (provider_focus_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PROVIDER_FOCUS_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PROVIDER_FOCUS_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PROVIDER_FOCUS_CODE >>>'
go
ALTER TABLE dbo.NQAF_STG_REG_FOCUS
    ADD CONSTRAINT FK_STG_REG_FOCUS_FOCUS_CODE
    FOREIGN KEY (provider_focus_code)
    REFERENCES dbo.PROVIDER_FOCUS_CODE (provider_focus_code)
go
ALTER TABLE dbo.PROVIDER_FOCUS
    ADD CONSTRAINT FK_PROV_FOCUS_PROV_FOCUS_CODE
    FOREIGN KEY (provider_focus_code)
    REFERENCES dbo.PROVIDER_FOCUS_CODE (provider_focus_code)
go
GRANT REFERENCES ON dbo.PROVIDER_FOCUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER_FOCUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER_FOCUS_CODE TO read_only
go
GRANT SELECT ON dbo.PROVIDER_FOCUS_CODE TO rma_users
go
GRANT INSERT ON dbo.PROVIDER_FOCUS_CODE TO eqa_user
go
GRANT DELETE ON dbo.PROVIDER_FOCUS_CODE TO eqa_user
go
GRANT UPDATE ON dbo.PROVIDER_FOCUS_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PROVIDER_FOCUS_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PROVIDER_FOCUS_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PROVIDER_FOCUS_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PROVIDER_FOCUS_CODE TO eqa_user
go
CREATE TABLE dbo.PROVIDER_HEAD_OFFICE
(
    provider_id                  OBJECT_ID     NOT NULL,
    provider_status              code_2        NOT NULL,
    registration_date            dt            NULL,
    deregistration_date          datetime      NULL,
    provider_dereg_reason_code   code_2        NULL,
    recognition_body_code        code_3        NULL,
    active_ind                   yn_ind        NOT NULL,
    audit_tran_id                OBJECT_ID     NOT NULL,
    ts                           timestamp     NOT NULL,
    created_perorg_case_id       OBJECT_ID     NULL,
    last_updated_perorg_case_id  OBJECT_ID     NULL,
    collaborative_arrgmt_ind     ny_ind        NOT NULL,
    collaborative_arragmt        TEXT_STRING   NULL,
    financial_year_end           varchar(32)   NULL,
    pbrf_engaged_ind             ny_ind        NOT NULL,
    size_category_code           code_2        NULL,
    cop_status_ind               ny_ind        NOT NULL,
    tec_invest_plan_ind          ny_ind        NOT NULL,
    non_funded_student_ind       ny_ind        NOT NULL,
    tot_tec_eft_count            COUNT_1       NULL,
    tot_non_funded_eft_count     COUNT_1       NULL,
    sfp_exempt_comment           varchar(1024) NULL,
    risk_status_code             code_2        NULL,
    risk_status_date             dt            NULL,
    risk_status_comment          varchar(255)  NULL,
    sfp_exempt_org_ind           ny_ind        NOT NULL,
    sfp_exempt_course_ind        ny_ind        NOT NULL,
    public_contact               varchar(255)  NULL,
    sch_authority_code           code_2        NULL,
    sch_decile_code              code_2        NULL,
    sch_type_code                code_2        NULL,
    sch_sub_type_code            code_2        NULL,
    sch_gender_type_code         code_2        NULL,
    cop_approval_date            dt            NULL,
    vetted_ind                   ny_ind        NULL,
    vetted_date                  dt            NULL,
    can_be_moderation_exempt_ind ny_ind        NOT NULL,
    CONSTRAINT PK_PROVIDER_HEAD_OFFICE
    PRIMARY KEY CLUSTERED (provider_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PROVIDER_HEAD_OFFICE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PROVIDER_HEAD_OFFICE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PROVIDER_HEAD_OFFICE >>>'
go
ALTER TABLE dbo.PROVIDER_HEAD_OFFICE
    ADD CONSTRAINT FK_PROV_HO_CREATE_PERORG_CASE
    FOREIGN KEY (created_perorg_case_id)
    REFERENCES dbo.PERORG_CASE (perorg_case_id)
go
ALTER TABLE dbo.PROVIDER_HEAD_OFFICE
    ADD CONSTRAINT FK_PROV_HO_UPDATE_PERORG_CASE
    FOREIGN KEY (last_updated_perorg_case_id)
    REFERENCES dbo.PERORG_CASE (perorg_case_id)
go
ALTER TABLE dbo.PROVIDER_HEAD_OFFICE
    ADD CONSTRAINT FK_PROVIDER_HO_PROVIDER
    FOREIGN KEY (provider_id)
    REFERENCES dbo.PROVIDER (provider_id)
go
ALTER TABLE dbo.PROVIDER_HEAD_OFFICE
    ADD CONSTRAINT FK_PROV_HO_PROV_DEREG_REASON
    FOREIGN KEY (provider_dereg_reason_code)
    REFERENCES dbo.PROVIDER_DEREG_REASON_CODE (provider_dereg_reason_code)
go
ALTER TABLE dbo.PROVIDER_HEAD_OFFICE
    ADD CONSTRAINT FK_PROV_HO_RECOG_BODY_CODE
    FOREIGN KEY (recognition_body_code)
    REFERENCES dbo.RECOGNITION_BODY_CODE (recognition_body_code)
go
ALTER TABLE dbo.PROVIDER_HEAD_OFFICE
    ADD CONSTRAINT FK_PROV_HO_SIZE_CATEGORY
    FOREIGN KEY (size_category_code)
    REFERENCES dbo.SIZE_CATEGORY (size_category_code)
go
ALTER TABLE dbo.PROVIDER_HEAD_OFFICE
    ADD CONSTRAINT FK_PROV_HO_RISK_STATUS
    FOREIGN KEY (risk_status_code)
    REFERENCES dbo.RISK_STATUS (risk_status_code)
go
ALTER TABLE dbo.PROVIDER_HEAD_OFFICE
    ADD CONSTRAINT FK_PROVIDER_HO_SCH_AUTHORITY_CODE
    FOREIGN KEY (sch_authority_code)
    REFERENCES dbo.SCH_AUTHORITY_CODE (sch_authority_code)
go
ALTER TABLE dbo.PROVIDER_HEAD_OFFICE
    ADD CONSTRAINT FK_PROVIDER_HO_SCH_DECILE_CODE
    FOREIGN KEY (sch_decile_code)
    REFERENCES dbo.SCH_DECILE_CODE (sch_decile_code)
go
ALTER TABLE dbo.PROVIDER_HEAD_OFFICE
    ADD CONSTRAINT FK_PROVIDER_HO_SCH_TYPE
    FOREIGN KEY (sch_type_code)
    REFERENCES dbo.SCH_TYPE (sch_type_code)
go
ALTER TABLE dbo.PROVIDER_HEAD_OFFICE
    ADD CONSTRAINT FK_PROVIDER_HO_SCH_SUB_TYPE
    FOREIGN KEY (sch_sub_type_code)
    REFERENCES dbo.SCH_SUB_TYPE (sch_sub_type_code)
go
ALTER TABLE dbo.PROVIDER_HEAD_OFFICE
    ADD CONSTRAINT FK_PROVIDER_HO_SCH_GENDER_TYPE
    FOREIGN KEY (sch_gender_type_code)
    REFERENCES dbo.SCH_GENDER_TYPE (sch_gender_code)
go
ALTER TABLE dbo.ORG_QA_ACTIVITY
    ADD CONSTRAINT FK_ORG_QA_ACTIVITY_PROV_HO
    FOREIGN KEY (provider_id)
    REFERENCES dbo.PROVIDER_HEAD_OFFICE (provider_id)
go
ALTER TABLE dbo.PROVIDER
    ADD CONSTRAINT FK_PROVIDER_PROVIDER_HO
    FOREIGN KEY (provider_head_office_id)
    REFERENCES dbo.PROVIDER_HEAD_OFFICE (provider_id)
go
ALTER TABLE dbo.PROVIDER_CONDITION
    ADD CONSTRAINT FK_PROV_COND_PROV_HO
    FOREIGN KEY (provider_id)
    REFERENCES dbo.PROVIDER_HEAD_OFFICE (provider_id)
go
ALTER TABLE dbo.PROVIDER_COP_ACCOM_ARRANGED_BY
    ADD CONSTRAINT FK_PROV_COP_ACCOM_ARR_HO
    FOREIGN KEY (provider_id)
    REFERENCES dbo.PROVIDER_HEAD_OFFICE (provider_id)
go
ALTER TABLE dbo.PROVIDER_COP_ACCOM_OPTION
    ADD CONSTRAINT FK_PROV_COP_ACCOM_OPTION_HO
    FOREIGN KEY (provider_id)
    REFERENCES dbo.PROVIDER_HEAD_OFFICE (provider_id)
go
ALTER TABLE dbo.PROVIDER_COP_APPRVL
    ADD CONSTRAINT FK_PROV_COP_APRVL_PROV_HO
    FOREIGN KEY (provider_id)
    REFERENCES dbo.PROVIDER_HEAD_OFFICE (provider_id)
go
ALTER TABLE dbo.PROVIDER_FOCUS
    ADD CONSTRAINT FK_PROV_ETHN_FOCUS_PROV_HO
    FOREIGN KEY (provider_id)
    REFERENCES dbo.PROVIDER_HEAD_OFFICE (provider_id)
go
GRANT REFERENCES ON dbo.PROVIDER_HEAD_OFFICE TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER_HEAD_OFFICE TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER_HEAD_OFFICE TO read_only
go
GRANT SELECT ON dbo.PROVIDER_HEAD_OFFICE TO rma_users
go
GRANT INSERT ON dbo.PROVIDER_HEAD_OFFICE TO eqa_user
go
GRANT DELETE ON dbo.PROVIDER_HEAD_OFFICE TO eqa_user
go
GRANT UPDATE ON dbo.PROVIDER_HEAD_OFFICE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PROVIDER_HEAD_OFFICE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PROVIDER_HEAD_OFFICE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PROVIDER_HEAD_OFFICE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PROVIDER_HEAD_OFFICE TO eqa_user
go
CREATE TABLE dbo.PROVIDER_IA_RESULT
(
    provider_ia_result_id       numeric(12,0) NOT NULL,
    provider_id                 numeric(12,0) NOT NULL,
    location                    numeric(2,0)  NOT NULL,
    academic_year               char(4)       NOT NULL,
    internal_assmt_verified_ind smallint      NOT NULL,
    audit_tran_id               numeric(12,0) NOT NULL,
    created_date                datetime      NOT NULL,
    ts                          timestamp     NULL,
    CONSTRAINT PK_PROVIDER_IA_RESULT
    PRIMARY KEY CLUSTERED (provider_ia_result_id),
    CONSTRAINT IDX_PROVIDER_IA_RESULTS_01
    UNIQUE NONCLUSTERED (provider_id,location,academic_year)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PROVIDER_IA_RESULT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PROVIDER_IA_RESULT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PROVIDER_IA_RESULT >>>'
go
ALTER TABLE dbo.PROVIDER_IA_RESULT
    ADD CONSTRAINT FK_PROV_IA_RESULTS_AUDIT
    FOREIGN KEY (audit_tran_id)
    REFERENCES dbo.AUDIT_TRANSACTION (audit_tran_oid)
go
ALTER TABLE dbo.PROVIDER_IA_RESULT
    ADD CONSTRAINT FK_PROVIDER_IA_RESULT_ACADEMIC
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.PROVIDER_IA_RESULT
    ADD CONSTRAINT FK_PROVIDER_IA_RESULT_PROVIDER
    FOREIGN KEY (provider_id,location)
    REFERENCES dbo.PROVIDER (moe_provider_id,location)
go
GRANT REFERENCES ON dbo.PROVIDER_IA_RESULT TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER_IA_RESULT TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER_IA_RESULT TO read_only
go
GRANT SELECT ON dbo.PROVIDER_IA_RESULT TO rma_users
go
GRANT INSERT ON dbo.PROVIDER_IA_RESULT TO eqa_user
go
GRANT DELETE ON dbo.PROVIDER_IA_RESULT TO eqa_user
go
GRANT UPDATE ON dbo.PROVIDER_IA_RESULT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PROVIDER_IA_RESULT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PROVIDER_IA_RESULT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PROVIDER_IA_RESULT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PROVIDER_IA_RESULT TO eqa_user
go
CREATE TABLE dbo.PROVIDER_KVP
(
    provider_kvp_id OBJECT_ID NOT NULL,
    moe_provider_id OBJECT_ID NOT NULL,
    location        number_2  NOT NULL,
    academic_year   char(4)   NOT NULL,
    property_key    descr     NULL,
    property_value  descr     NULL,
    audit_tran_id   OBJECT_ID NOT NULL,
    CONSTRAINT PK_PROVIDER_KVP
    PRIMARY KEY CLUSTERED (provider_kvp_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PROVIDER_KVP') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PROVIDER_KVP >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PROVIDER_KVP >>>'
go
GRANT REFERENCES ON dbo.PROVIDER_KVP TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER_KVP TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER_KVP TO read_only
go
GRANT SELECT ON dbo.PROVIDER_KVP TO rma_users
go
GRANT INSERT ON dbo.PROVIDER_KVP TO eqa_user
go
GRANT DELETE ON dbo.PROVIDER_KVP TO eqa_user
go
GRANT UPDATE ON dbo.PROVIDER_KVP TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PROVIDER_KVP TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PROVIDER_KVP TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PROVIDER_KVP TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PROVIDER_KVP TO eqa_user
go
CREATE TABLE dbo.PROVIDER_LOCALITY_CODE
(
    provider_locality_code code_2    NOT NULL,
    provider_locality_desc descr     NOT NULL,
    active_ind             yn_ind    NOT NULL,
    sortkey                sortkey   NOT NULL,
    audit_tran_id          OBJECT_ID NOT NULL,
    CONSTRAINT PK_PROVIDER_LOCALITY_CODE
    PRIMARY KEY CLUSTERED (provider_locality_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PROVIDER_LOCALITY_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PROVIDER_LOCALITY_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PROVIDER_LOCALITY_CODE >>>'
go
ALTER TABLE dbo.PROVIDER
    ADD CONSTRAINT FK_PROVIDER_LOCALITY_CODE
    FOREIGN KEY (provider_locality_code)
    REFERENCES dbo.PROVIDER_LOCALITY_CODE (provider_locality_code)
go
GRANT REFERENCES ON dbo.PROVIDER_LOCALITY_CODE TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER_LOCALITY_CODE TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER_LOCALITY_CODE TO read_only
go
GRANT SELECT ON dbo.PROVIDER_LOCALITY_CODE TO rma_users
go
GRANT INSERT ON dbo.PROVIDER_LOCALITY_CODE TO eqa_user
go
GRANT DELETE ON dbo.PROVIDER_LOCALITY_CODE TO eqa_user
go
GRANT UPDATE ON dbo.PROVIDER_LOCALITY_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PROVIDER_LOCALITY_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PROVIDER_LOCALITY_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PROVIDER_LOCALITY_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PROVIDER_LOCALITY_CODE TO eqa_user
go
CREATE TABLE dbo.PROVIDER_STATUS
(
    provider_status      code_2  NOT NULL,
    provider_status_desc descr   NOT NULL,
    active_ind           yn_ind  NOT NULL,
    sortkey              sortkey NULL,
    CONSTRAINT PK_PROVIDER_STATUS
    PRIMARY KEY CLUSTERED (provider_status)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PROVIDER_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PROVIDER_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PROVIDER_STATUS >>>'
go
ALTER TABLE dbo.PROVIDER_HEAD_OFFICE
    ADD CONSTRAINT FK_PROVIDER_HO_PROV_STATUS
    FOREIGN KEY (provider_status)
    REFERENCES dbo.PROVIDER_STATUS (provider_status)
go
GRANT REFERENCES ON dbo.PROVIDER_STATUS TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER_STATUS TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER_STATUS TO read_only
go
GRANT SELECT ON dbo.PROVIDER_STATUS TO rma_users
go
GRANT INSERT ON dbo.PROVIDER_STATUS TO eqa_user
go
GRANT DELETE ON dbo.PROVIDER_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.PROVIDER_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PROVIDER_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PROVIDER_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PROVIDER_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PROVIDER_STATUS TO eqa_user
go
CREATE TABLE dbo.PROVIDER_TYPE
(
    provider_type_code char(3)      NOT NULL,
    provider_type_desc varchar(255) NOT NULL,
    CONSTRAINT PK_PROVIDER_TYPE
    PRIMARY KEY CLUSTERED (provider_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PROVIDER_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PROVIDER_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PROVIDER_TYPE >>>'
go
ALTER TABLE dbo.ORG_PROFILE_DOCUMENT
    ADD CONSTRAINT FK_ORG_PROF_DOC_PROV_TYPE
    FOREIGN KEY (provider_type_code)
    REFERENCES dbo.PROVIDER_TYPE (provider_type_code)
go
ALTER TABLE dbo.PROVIDER
    ADD CONSTRAINT FK_PROVIDER_PROVIDER_TYPE
    FOREIGN KEY (provider_type_code)
    REFERENCES dbo.PROVIDER_TYPE (provider_type_code)
go
GRANT REFERENCES ON dbo.PROVIDER_TYPE TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER_TYPE TO eqa_user
go
GRANT SELECT ON dbo.PROVIDER_TYPE TO read_only
go
GRANT SELECT ON dbo.PROVIDER_TYPE TO rma_users
go
GRANT INSERT ON dbo.PROVIDER_TYPE TO eqa_user
go
GRANT DELETE ON dbo.PROVIDER_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.PROVIDER_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PROVIDER_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PROVIDER_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PROVIDER_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PROVIDER_TYPE TO eqa_user
go
CREATE TABLE dbo.PROVISIONAL_QUALCHECK_RUN
(
    qualcheck_run_id             OBJECT_ID NOT NULL,
    learner_id                   OBJECT_ID NOT NULL,
    academic_year                char(4)   NOT NULL,
    qualcheck_run_status_code    code_2    NOT NULL,
    level_1_current_year_credits int       NOT NULL,
    level_2_current_year_credits int       NOT NULL,
    level_3_current_year_credits int       NOT NULL,
    level_4_current_year_credits int       NOT NULL,
    liter_current_year_credits   int       NOT NULL,
    numer_current_year_credits   int       NOT NULL,
    level_1_prior_year_credits   int       NOT NULL,
    level_2_prior_year_credits   int       NOT NULL,
    level_3_prior_year_credits   int       NOT NULL,
    level_4_prior_year_credits   int       NOT NULL,
    liter_prior_year_credits     int       NOT NULL,
    numer_prior_year_credits     int       NOT NULL,
    level_1_transition_count     int       NOT NULL,
    level_1_transition_credits   int       NOT NULL,
    level_2_transition_count     int       NOT NULL,
    level_2_transition_credits   int       NOT NULL,
    level_3_transition_count     int       NOT NULL,
    level_3_transition_credits   int       NOT NULL,
    level_1_exclusion_credits    int       NOT NULL,
    level_2_exclusion_credits    int       NOT NULL,
    level_3_exclusion_credits    int       NOT NULL,
    liter_exclusion_credits      int       NOT NULL,
    numer_exclusion_credits      int       NOT NULL,
    scholarship_count            int       NOT NULL,
    run_date                     datetime  DEFAULT '2004/09/29'                                              NOT NULL,
    level1_status                char(2)   NULL,
    level2_status                char(2)   NULL,
    level3_status                char(2)   NULL,
    schol_status                 char(2)   NULL,
    ue_status                    char(2)   NULL,
    attainment_code              code_2    NULL,
    ncea_l1_numeracy_met         yn        DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    ncea_l1_literacy_met         yn        DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    ue_numeracy_met              yn        DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    ue_literacy_met              yn        DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    ncea_l1_total_met            yn        DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    ncea_l2_total_met            yn        DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    ncea_l3_total_met            yn        DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    ncea_l2_credits_met          yn        DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    ncea_l3_credits_met          yn        DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    cur_yr_level_1_plus_credits  int       NULL,
    cur_yr_level_2_plus_credits  int       NULL,
    cur_yr_level_3_plus_credits  int       NULL,
    cur_yr_level_4_plus_credits  int       NULL,
    prv_yr_level_1_plus_credits  int       NULL,
    prv_yr_level_2_plus_credits  int       NULL,
    prv_yr_level_3_plus_credits  int       NULL,
    prv_yr_level_4_plus_credits  int       NULL,
    level_1_merit_endr           char(1)   NULL,
    level_1_merit_endr_date      datetime  NULL,
    level_1_excellence_endr      char(1)   NULL,
    level_1_excellence_endr_date datetime  NULL,
    level_2_merit_endr           char(1)   NULL,
    level_2_merit_endr_date      datetime  NULL,
    level_2_excellence_endr      char(1)   NULL,
    level_2_excellence_endr_date datetime  NULL,
    level_3_merit_endr           char(1)   NULL,
    level_3_merit_endr_date      datetime  NULL,
    level_3_excellence_endr      char(1)   NULL,
    level_3_excellence_endr_date datetime  NULL,
    level_1_qfn_achieved_date    datetime  NULL,
    level_2_qfn_achieved_date    datetime  NULL,
    level_3_qfn_achieved_date    datetime  NULL,
    ue_qfn_achieved_date         datetime  NULL,
    CONSTRAINT PK_PROVISIONAL_QUALCHECK_RUN
    PRIMARY KEY CLUSTERED (qualcheck_run_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PROVISIONAL_QUALCHECK_RUN') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PROVISIONAL_QUALCHECK_RUN >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PROVISIONAL_QUALCHECK_RUN >>>'
go
ALTER TABLE dbo.PROVISIONAL_QUALCHECK_RUN
    ADD CONSTRAINT FK_LEARNER
    FOREIGN KEY (learner_id)
    REFERENCES dbo.LEARNER (learner_id)
go
ALTER TABLE dbo.PROVISIONAL_QUALCHECK_RUN
    ADD CONSTRAINT FK_QUALCHECK_RUN_STATUS
    FOREIGN KEY (qualcheck_run_status_code)
    REFERENCES dbo.QUALCHECK_RUN_STATUS (qualcheck_run_status_code)
go
ALTER TABLE dbo.PROVISIONAL_QUALCHECK_RUN
    ADD CONSTRAINT FK_ACADEMIC_YEAR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.PROVISIONAL_QUALCHECK_RUN
    ADD CONSTRAINT FK_ATTAINMENT_CODE
    FOREIGN KEY (attainment_code)
    REFERENCES dbo.ATTAINMENT_CODE (attainment_code)
go
GRANT REFERENCES ON dbo.PROVISIONAL_QUALCHECK_RUN TO eqa_user
go
GRANT SELECT ON dbo.PROVISIONAL_QUALCHECK_RUN TO eqa_user
go
GRANT SELECT ON dbo.PROVISIONAL_QUALCHECK_RUN TO read_only
go
GRANT SELECT ON dbo.PROVISIONAL_QUALCHECK_RUN TO rma_users
go
GRANT INSERT ON dbo.PROVISIONAL_QUALCHECK_RUN TO eqa_user
go
GRANT DELETE ON dbo.PROVISIONAL_QUALCHECK_RUN TO eqa_user
go
GRANT UPDATE ON dbo.PROVISIONAL_QUALCHECK_RUN TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PROVISIONAL_QUALCHECK_RUN TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PROVISIONAL_QUALCHECK_RUN TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PROVISIONAL_QUALCHECK_RUN TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PROVISIONAL_QUALCHECK_RUN TO eqa_user
go
CREATE TABLE dbo.PROV_LRNR_CATEGORY
(
    prov_lrnr_category_id OBJECT_ID NOT NULL,
    provider_id           OBJECT_ID NOT NULL,
    learner_category_code code_2    NOT NULL,
    active_ind            yn_ind    NOT NULL,
    audit_tran_id         OBJECT_ID NOT NULL,
    CONSTRAINT PK_PROV_LRNR_CATEGORY
    PRIMARY KEY NONCLUSTERED (prov_lrnr_category_id)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.PROV_LRNR_CATEGORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PROV_LRNR_CATEGORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PROV_LRNR_CATEGORY >>>'
go
ALTER TABLE dbo.PROV_LRNR_CATEGORY
    ADD CONSTRAINT FK_PROV_LRNR_CAT_LRNR_CAT
    FOREIGN KEY (learner_category_code)
    REFERENCES dbo.LEARNER_CATEGORY (learner_category_code)
go
ALTER TABLE dbo.PROV_LRNR_CATEGORY
    ADD CONSTRAINT FK_PROV_HO_PROV_LRNR_CAT
    FOREIGN KEY (provider_id)
    REFERENCES dbo.PROVIDER_HEAD_OFFICE (provider_id)
go
GRANT REFERENCES ON dbo.PROV_LRNR_CATEGORY TO eqa_user
go
GRANT SELECT ON dbo.PROV_LRNR_CATEGORY TO eqa_user
go
GRANT SELECT ON dbo.PROV_LRNR_CATEGORY TO read_only
go
GRANT SELECT ON dbo.PROV_LRNR_CATEGORY TO rma_users
go
GRANT INSERT ON dbo.PROV_LRNR_CATEGORY TO eqa_user
go
GRANT DELETE ON dbo.PROV_LRNR_CATEGORY TO eqa_user
go
GRANT UPDATE ON dbo.PROV_LRNR_CATEGORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PROV_LRNR_CATEGORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PROV_LRNR_CATEGORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PROV_LRNR_CATEGORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PROV_LRNR_CATEGORY TO eqa_user
go
CREATE TABLE dbo.PROV_NOTE_ISSUE
(
    note_issue_id         OBJECT_ID     NOT NULL,
    provider_id           OBJECT_ID     NOT NULL,
    issue_type_code       code_2        NOT NULL,
    issue_sub_type        code_2        NULL,
    issue_severity_code   code_2        NOT NULL,
    issue_resp_type_code  code_2        NULL,
    issue_status_code     code_2        NOT NULL,
    issue_status_date     dt            NULL,
    assigned_to_perorg_id OBJECT_ID     NULL,
    created_date          dt            NOT NULL,
    issue_summary         varchar(1024) NULL,
    audit_tran_id         OBJECT_ID     NOT NULL,
    CONSTRAINT PK_PROV_NOTE_ISSUE
    PRIMARY KEY CLUSTERED (note_issue_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PROV_NOTE_ISSUE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PROV_NOTE_ISSUE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PROV_NOTE_ISSUE >>>'
go
ALTER TABLE dbo.PROV_NOTE_ISSUE
    ADD CONSTRAINT FK_PROV_NOTE_ISSUE_RESP_TYPE
    FOREIGN KEY (issue_resp_type_code)
    REFERENCES dbo.NOTE_ISSUE_RESP_TYPE (issue_resp_type_code)
go
ALTER TABLE dbo.PROV_NOTE_ISSUE
    ADD CONSTRAINT FK_PROV_NOTE_ISSUE_SEVERITY
    FOREIGN KEY (issue_severity_code)
    REFERENCES dbo.NOTE_ISSUE_SEVERITY_CODE (issue_severity_code)
go
ALTER TABLE dbo.PROV_NOTE_ISSUE
    ADD CONSTRAINT FK_PROV_NOTE_ISSUE_STATUS
    FOREIGN KEY (issue_status_code)
    REFERENCES dbo.NOTE_ISSUE_STATUS (issue_status_code)
go
ALTER TABLE dbo.PROV_NOTE_ISSUE
    ADD CONSTRAINT FK_PROV_NOTE_ISSUE_SUB_TYPE
    FOREIGN KEY (issue_sub_type)
    REFERENCES dbo.NOTE_ISSUE_SUB_TYPE (issue_sub_type_code)
go
ALTER TABLE dbo.PROV_NOTE_ISSUE
    ADD CONSTRAINT FK_PROV_NOTE_ISSUE_TYPE
    FOREIGN KEY (issue_type_code)
    REFERENCES dbo.NOTE_ISSUE_TYPE (issue_type_code)
go
ALTER TABLE dbo.PROV_NOTE_ISSUE
    ADD CONSTRAINT FK_PROV_NOTE_ISSUE_PERORG
    FOREIGN KEY (assigned_to_perorg_id)
    REFERENCES dbo.PERORG (perorg_id)
go
ALTER TABLE dbo.PROV_NOTE_ISSUE
    ADD CONSTRAINT FK_PROV_NOTE_ISS_PROV_HO
    FOREIGN KEY (provider_id)
    REFERENCES dbo.PROVIDER_HEAD_OFFICE (provider_id)
go
ALTER TABLE dbo.NOTE_ISSUE_STATUS_HIST
    ADD CONSTRAINT FK_NOTE_ISS_STA_HST_ISS_ID
    FOREIGN KEY (note_issue_id)
    REFERENCES dbo.PROV_NOTE_ISSUE (note_issue_id)
go
ALTER TABLE dbo.ORG_PROFILE_NOTE
    ADD CONSTRAINT FK_ORG_PROF_PROV_NOTE_ISS
    FOREIGN KEY (prov_note_issue_id)
    REFERENCES dbo.PROV_NOTE_ISSUE (note_issue_id)
go
GRANT REFERENCES ON dbo.PROV_NOTE_ISSUE TO eqa_user
go
GRANT SELECT ON dbo.PROV_NOTE_ISSUE TO eqa_user
go
GRANT SELECT ON dbo.PROV_NOTE_ISSUE TO read_only
go
GRANT SELECT ON dbo.PROV_NOTE_ISSUE TO rma_users
go
GRANT INSERT ON dbo.PROV_NOTE_ISSUE TO eqa_user
go
GRANT DELETE ON dbo.PROV_NOTE_ISSUE TO eqa_user
go
GRANT UPDATE ON dbo.PROV_NOTE_ISSUE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PROV_NOTE_ISSUE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PROV_NOTE_ISSUE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PROV_NOTE_ISSUE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PROV_NOTE_ISSUE TO eqa_user
go
CREATE TABLE dbo.PROV_QUALCHECK_RESULT
(
    prov_qualcheck_result_id   OBJECT_ID    NOT NULL,
    qualcheck_run_id           OBJECT_ID    NOT NULL,
    qfn_number                 varchar(8)   NOT NULL,
    qfn_version_number         numeric(8,0) NOT NULL,
    prov_qc_result_status_code code_2       NOT NULL,
    date_created               datetime     NOT NULL,
    processed_by_qual          yn           DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    CONSTRAINT PK_PROV_QUALCHECK_RESULT
    PRIMARY KEY CLUSTERED (prov_qualcheck_result_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PROV_QUALCHECK_RESULT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PROV_QUALCHECK_RESULT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PROV_QUALCHECK_RESULT >>>'
go
ALTER TABLE dbo.PROV_QUALCHECK_RESULT
    ADD CONSTRAINT FK_QUALCHECK_RUN
    FOREIGN KEY (qualcheck_run_id)
    REFERENCES dbo.PROVISIONAL_QUALCHECK_RUN (qualcheck_run_id)
go
GRANT REFERENCES ON dbo.PROV_QUALCHECK_RESULT TO eqa_user
go
GRANT SELECT ON dbo.PROV_QUALCHECK_RESULT TO eqa_user
go
GRANT SELECT ON dbo.PROV_QUALCHECK_RESULT TO read_only
go
GRANT SELECT ON dbo.PROV_QUALCHECK_RESULT TO rma_users
go
GRANT INSERT ON dbo.PROV_QUALCHECK_RESULT TO eqa_user
go
GRANT DELETE ON dbo.PROV_QUALCHECK_RESULT TO eqa_user
go
GRANT UPDATE ON dbo.PROV_QUALCHECK_RESULT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PROV_QUALCHECK_RESULT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PROV_QUALCHECK_RESULT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PROV_QUALCHECK_RESULT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PROV_QUALCHECK_RESULT TO eqa_user
go
CREATE TABLE dbo.PROV_QUALCHECK_RESULT_STATUS
(
    prov_qc_result_status_code code_2       NOT NULL,
    prov_qc_result_status_desc varchar(255) NOT NULL,
    CONSTRAINT PK_PROV_QUALCHECK_RESULT_STA
    PRIMARY KEY CLUSTERED (prov_qc_result_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PROV_QUALCHECK_RESULT_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PROV_QUALCHECK_RESULT_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PROV_QUALCHECK_RESULT_STATUS >>>'
go
ALTER TABLE dbo.PROVISIONAL_QUALCHECK_RUN
    ADD CONSTRAINT FK_L1_STATUS
    FOREIGN KEY (level1_status)
    REFERENCES dbo.PROV_QUALCHECK_RESULT_STATUS (prov_qc_result_status_code)
go
ALTER TABLE dbo.PROVISIONAL_QUALCHECK_RUN
    ADD CONSTRAINT FK_L2_STATUS
    FOREIGN KEY (level2_status)
    REFERENCES dbo.PROV_QUALCHECK_RESULT_STATUS (prov_qc_result_status_code)
go
ALTER TABLE dbo.PROVISIONAL_QUALCHECK_RUN
    ADD CONSTRAINT FK_L3_STATUS
    FOREIGN KEY (level3_status)
    REFERENCES dbo.PROV_QUALCHECK_RESULT_STATUS (prov_qc_result_status_code)
go
ALTER TABLE dbo.PROVISIONAL_QUALCHECK_RUN
    ADD CONSTRAINT FK_SCHL_STATUS
    FOREIGN KEY (schol_status)
    REFERENCES dbo.PROV_QUALCHECK_RESULT_STATUS (prov_qc_result_status_code)
go
ALTER TABLE dbo.PROVISIONAL_QUALCHECK_RUN
    ADD CONSTRAINT FK_UE_STATUS
    FOREIGN KEY (ue_status)
    REFERENCES dbo.PROV_QUALCHECK_RESULT_STATUS (prov_qc_result_status_code)
go
ALTER TABLE dbo.PROV_QUALCHECK_RESULT
    ADD CONSTRAINT FK_PROV_QUALCHECK_STATUS
    FOREIGN KEY (prov_qc_result_status_code)
    REFERENCES dbo.PROV_QUALCHECK_RESULT_STATUS (prov_qc_result_status_code)
go
GRANT REFERENCES ON dbo.PROV_QUALCHECK_RESULT_STATUS TO eqa_user
go
GRANT SELECT ON dbo.PROV_QUALCHECK_RESULT_STATUS TO eqa_user
go
GRANT SELECT ON dbo.PROV_QUALCHECK_RESULT_STATUS TO read_only
go
GRANT SELECT ON dbo.PROV_QUALCHECK_RESULT_STATUS TO rma_users
go
GRANT INSERT ON dbo.PROV_QUALCHECK_RESULT_STATUS TO eqa_user
go
GRANT DELETE ON dbo.PROV_QUALCHECK_RESULT_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.PROV_QUALCHECK_RESULT_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PROV_QUALCHECK_RESULT_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PROV_QUALCHECK_RESULT_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PROV_QUALCHECK_RESULT_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PROV_QUALCHECK_RESULT_STATUS TO eqa_user
go
CREATE TABLE dbo.PROV_RISK_ISSUE
(
    prov_risk_issue_id     OBJECT_ID     NOT NULL,
    provider_id            OBJECT_ID     NOT NULL,
    risk_iss_ind_type_code code_2        NOT NULL,
    risk_issue_status_code code_2        NOT NULL,
    perorg_case_id         OBJECT_ID     NULL,
    assigned_to_perorg_id  OBJECT_ID     NULL,
    created_date           dt            NOT NULL,
    risk_issue_index       numeric(2,0)  NOT NULL,
    risk_issue_status_date dt            NOT NULL,
    primary_risk_ind       ny_ind        NOT NULL,
    risk_issue_summary     varchar(1024) NULL,
    audit_tran_id          OBJECT_ID     NOT NULL,
    CONSTRAINT PK_PROV_RISK_ISSUE
    PRIMARY KEY CLUSTERED (prov_risk_issue_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PROV_RISK_ISSUE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PROV_RISK_ISSUE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PROV_RISK_ISSUE >>>'
go
ALTER TABLE dbo.PROV_RISK_ISSUE
    ADD CONSTRAINT FK_PROV_RISK_ISSUE_PERORG
    FOREIGN KEY (assigned_to_perorg_id)
    REFERENCES dbo.PERORG (perorg_id)
go
ALTER TABLE dbo.PROV_RISK_ISSUE
    ADD CONSTRAINT FK_PROV_RISK_ISS_PERORG_CASE
    FOREIGN KEY (perorg_case_id)
    REFERENCES dbo.PERORG_CASE (perorg_case_id)
go
ALTER TABLE dbo.PROV_RISK_ISSUE
    ADD CONSTRAINT FK_PROV_RISK_ISS_PROV_HO
    FOREIGN KEY (provider_id)
    REFERENCES dbo.PROVIDER_HEAD_OFFICE (provider_id)
go
ALTER TABLE dbo.PROV_RISK_ISSUE
    ADD CONSTRAINT FK_PROV_RISK_ISS_RISK_ISS_STA
    FOREIGN KEY (risk_issue_status_code)
    REFERENCES dbo.RISK_ISSUE_STATUS (risk_issue_status_code)
go
ALTER TABLE dbo.PROV_RISK_ISSUE
    ADD CONSTRAINT FK_PROV_RISK_ISS_RISK_IND_TYPE
    FOREIGN KEY (risk_iss_ind_type_code)
    REFERENCES dbo.RISK_ISS_IND_TYPE (risk_iss_ind_type_code)
go
ALTER TABLE dbo.ORG_PROFILE_NOTE
    ADD CONSTRAINT FK_ORG_PROF_NOTE_PRO_RISK_ISS
    FOREIGN KEY (prov_risk_issue_id)
    REFERENCES dbo.PROV_RISK_ISSUE (prov_risk_issue_id)
go
GRANT REFERENCES ON dbo.PROV_RISK_ISSUE TO eqa_user
go
GRANT SELECT ON dbo.PROV_RISK_ISSUE TO eqa_user
go
GRANT SELECT ON dbo.PROV_RISK_ISSUE TO read_only
go
GRANT SELECT ON dbo.PROV_RISK_ISSUE TO rma_users
go
GRANT INSERT ON dbo.PROV_RISK_ISSUE TO eqa_user
go
GRANT DELETE ON dbo.PROV_RISK_ISSUE TO eqa_user
go
GRANT UPDATE ON dbo.PROV_RISK_ISSUE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PROV_RISK_ISSUE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PROV_RISK_ISSUE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PROV_RISK_ISSUE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PROV_RISK_ISSUE TO eqa_user
go
CREATE TABLE dbo.PROV_SFP_ARGMT
(
    prov_sfp_argmt_id       OBJECT_ID     NOT NULL,
    provider_id             OBJECT_ID     NOT NULL,
    sfp_argmt_type_code     code_2        NOT NULL,
    sfp_argmt_sub_type_code code_2        NOT NULL,
    trust_holder_perorg_id  OBJECT_ID     NULL,
    effective_date          dt            NULL,
    argmt_value_amt         amt           NULL,
    expiry_date             dt            NULL,
    end_date                dt            NULL,
    comment                 varchar(1024) NULL,
    active_ind              yn_ind        NOT NULL,
    audit_tran_id           OBJECT_ID     NOT NULL,
    CONSTRAINT PK_PROV_SFP_ARGMT
    PRIMARY KEY CLUSTERED (prov_sfp_argmt_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PROV_SFP_ARGMT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PROV_SFP_ARGMT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PROV_SFP_ARGMT >>>'
go
ALTER TABLE dbo.PROV_SFP_ARGMT
    ADD CONSTRAINT FK_PROV_SFP_ARGMT_PERORG
    FOREIGN KEY (trust_holder_perorg_id)
    REFERENCES dbo.PERORG (perorg_id)
go
ALTER TABLE dbo.PROV_SFP_ARGMT
    ADD CONSTRAINT FK_PROV_SFP_ARGMT_PROV_HO
    FOREIGN KEY (provider_id)
    REFERENCES dbo.PROVIDER_HEAD_OFFICE (provider_id)
go
ALTER TABLE dbo.PROV_SFP_ARGMT
    ADD CONSTRAINT FK_PROV_SFP_ARGMT_SFP_ARGMT_TY
    FOREIGN KEY (sfp_argmt_type_code)
    REFERENCES dbo.SFP_ARGMT_TYPE (sfp_argmt_type_code)
go
ALTER TABLE dbo.PROV_SFP_ARGMT
    ADD CONSTRAINT FK_PROV_SFP_ARGMT_SFP_SUB_TYPE
    FOREIGN KEY (sfp_argmt_sub_type_code)
    REFERENCES dbo.SFP_ARGMT_SUB_TYPE (sfp_argmt_sub_type_code)
go
GRANT REFERENCES ON dbo.PROV_SFP_ARGMT TO eqa_user
go
GRANT SELECT ON dbo.PROV_SFP_ARGMT TO eqa_user
go
GRANT SELECT ON dbo.PROV_SFP_ARGMT TO read_only
go
GRANT SELECT ON dbo.PROV_SFP_ARGMT TO rma_users
go
GRANT INSERT ON dbo.PROV_SFP_ARGMT TO eqa_user
go
GRANT DELETE ON dbo.PROV_SFP_ARGMT TO eqa_user
go
GRANT UPDATE ON dbo.PROV_SFP_ARGMT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PROV_SFP_ARGMT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PROV_SFP_ARGMT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PROV_SFP_ARGMT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PROV_SFP_ARGMT TO eqa_user
go
CREATE TABLE dbo.PROV_SFP_EXEMPTION
(
    prov_sfp_exemption_id   OBJECT_ID NOT NULL,
    sfp_exemption_type_code code_2    NOT NULL,
    provider_id             OBJECT_ID NOT NULL,
    active_ind              yn_ind    NOT NULL,
    audit_tran_id           OBJECT_ID NOT NULL,
    CONSTRAINT PK_PROV_SFP_EXEMPTION
    PRIMARY KEY CLUSTERED (prov_sfp_exemption_id)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.PROV_SFP_EXEMPTION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PROV_SFP_EXEMPTION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PROV_SFP_EXEMPTION >>>'
go
ALTER TABLE dbo.PROV_SFP_EXEMPTION
    ADD CONSTRAINT FK_PROV_SFP_EXMT_PROV_HO
    FOREIGN KEY (provider_id)
    REFERENCES dbo.PROVIDER_HEAD_OFFICE (provider_id)
go
ALTER TABLE dbo.PROV_SFP_EXEMPTION
    ADD CONSTRAINT FK_PROV_SFP_EXMT_SFP_EXMT
    FOREIGN KEY (sfp_exemption_type_code)
    REFERENCES dbo.SFP_EXEMPTION_TYPE (sfp_exemption_type_code)
go
GRANT REFERENCES ON dbo.PROV_SFP_EXEMPTION TO eqa_user
go
GRANT SELECT ON dbo.PROV_SFP_EXEMPTION TO eqa_user
go
GRANT SELECT ON dbo.PROV_SFP_EXEMPTION TO read_only
go
GRANT SELECT ON dbo.PROV_SFP_EXEMPTION TO rma_users
go
GRANT INSERT ON dbo.PROV_SFP_EXEMPTION TO eqa_user
go
GRANT DELETE ON dbo.PROV_SFP_EXEMPTION TO eqa_user
go
GRANT UPDATE ON dbo.PROV_SFP_EXEMPTION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PROV_SFP_EXEMPTION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PROV_SFP_EXEMPTION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PROV_SFP_EXEMPTION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PROV_SFP_EXEMPTION TO eqa_user
go
CREATE TABLE dbo.PROXIMITY_CODE
(
    proximity_code      char(1)      NOT NULL,
    proximity_code_desc varchar(255) NOT NULL,
    CONSTRAINT PK_PROXIMITY_CODE
    PRIMARY KEY CLUSTERED (proximity_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PROXIMITY_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PROXIMITY_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PROXIMITY_CODE >>>'
go
GRANT REFERENCES ON dbo.PROXIMITY_CODE TO eqa_user
go
GRANT SELECT ON dbo.PROXIMITY_CODE TO eqa_user
go
GRANT SELECT ON dbo.PROXIMITY_CODE TO read_only
go
GRANT SELECT ON dbo.PROXIMITY_CODE TO rma_users
go
GRANT INSERT ON dbo.PROXIMITY_CODE TO eqa_user
go
GRANT DELETE ON dbo.PROXIMITY_CODE TO eqa_user
go
GRANT UPDATE ON dbo.PROXIMITY_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PROXIMITY_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PROXIMITY_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PROXIMITY_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PROXIMITY_CODE TO eqa_user
go
CREATE TABLE dbo.PSE_ACTIVITY_CODE
(
    pse_activity_code code_2 NOT NULL,
    pse_activity_desc descr  NOT NULL,
    active_ind        yn_ind NOT NULL,
    CONSTRAINT PK_PSE_ACTIVITY_CODE
    PRIMARY KEY CLUSTERED (pse_activity_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PSE_ACTIVITY_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PSE_ACTIVITY_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PSE_ACTIVITY_CODE >>>'
go
GRANT REFERENCES ON dbo.PSE_ACTIVITY_CODE TO eqa_user
go
GRANT SELECT ON dbo.PSE_ACTIVITY_CODE TO eqa_user
go
GRANT SELECT ON dbo.PSE_ACTIVITY_CODE TO read_only
go
GRANT SELECT ON dbo.PSE_ACTIVITY_CODE TO rma_users
go
GRANT INSERT ON dbo.PSE_ACTIVITY_CODE TO eqa_user
go
GRANT DELETE ON dbo.PSE_ACTIVITY_CODE TO eqa_user
go
GRANT UPDATE ON dbo.PSE_ACTIVITY_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PSE_ACTIVITY_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PSE_ACTIVITY_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PSE_ACTIVITY_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PSE_ACTIVITY_CODE TO eqa_user
go
CREATE TABLE dbo.PSE_COST_CENTRE_CODE
(
    pse_cost_centre_code code_3 NOT NULL,
    pse_cost_centre_desc descr  NOT NULL,
    active_ind           yn_ind NOT NULL,
    CONSTRAINT PK_PSE_COST_CENTRE_CODE
    PRIMARY KEY CLUSTERED (pse_cost_centre_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PSE_COST_CENTRE_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PSE_COST_CENTRE_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PSE_COST_CENTRE_CODE >>>'
go
GRANT REFERENCES ON dbo.PSE_COST_CENTRE_CODE TO eqa_user
go
GRANT SELECT ON dbo.PSE_COST_CENTRE_CODE TO eqa_user
go
GRANT SELECT ON dbo.PSE_COST_CENTRE_CODE TO read_only
go
GRANT SELECT ON dbo.PSE_COST_CENTRE_CODE TO rma_users
go
GRANT INSERT ON dbo.PSE_COST_CENTRE_CODE TO eqa_user
go
GRANT DELETE ON dbo.PSE_COST_CENTRE_CODE TO eqa_user
go
GRANT UPDATE ON dbo.PSE_COST_CENTRE_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PSE_COST_CENTRE_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PSE_COST_CENTRE_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PSE_COST_CENTRE_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PSE_COST_CENTRE_CODE TO eqa_user
go
CREATE TABLE dbo.PSE_ELEMENT_CODE
(
    pse_element_code varchar(10) NOT NULL,
    pse_element_desc descr       NOT NULL,
    active_ind       yn_ind      NOT NULL,
    CONSTRAINT PK_PSE_ELEMENT_CODE
    PRIMARY KEY CLUSTERED (pse_element_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PSE_ELEMENT_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PSE_ELEMENT_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PSE_ELEMENT_CODE >>>'
go
GRANT REFERENCES ON dbo.PSE_ELEMENT_CODE TO eqa_user
go
GRANT SELECT ON dbo.PSE_ELEMENT_CODE TO eqa_user
go
GRANT SELECT ON dbo.PSE_ELEMENT_CODE TO read_only
go
GRANT SELECT ON dbo.PSE_ELEMENT_CODE TO rma_users
go
GRANT INSERT ON dbo.PSE_ELEMENT_CODE TO eqa_user
go
GRANT DELETE ON dbo.PSE_ELEMENT_CODE TO eqa_user
go
GRANT UPDATE ON dbo.PSE_ELEMENT_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PSE_ELEMENT_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PSE_ELEMENT_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PSE_ELEMENT_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PSE_ELEMENT_CODE TO eqa_user
go
CREATE TABLE dbo.PSE_GL_CODE
(
    pse_gl_code char(4) NOT NULL,
    pse_gl_desc descr   NOT NULL,
    active_ind  yn_ind  NOT NULL,
    CONSTRAINT PK_PSE_GL_CODE
    PRIMARY KEY CLUSTERED (pse_gl_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PSE_GL_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PSE_GL_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PSE_GL_CODE >>>'
go
GRANT REFERENCES ON dbo.PSE_GL_CODE TO eqa_user
go
GRANT SELECT ON dbo.PSE_GL_CODE TO eqa_user
go
GRANT SELECT ON dbo.PSE_GL_CODE TO read_only
go
GRANT SELECT ON dbo.PSE_GL_CODE TO rma_users
go
GRANT INSERT ON dbo.PSE_GL_CODE TO eqa_user
go
GRANT DELETE ON dbo.PSE_GL_CODE TO eqa_user
go
GRANT UPDATE ON dbo.PSE_GL_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PSE_GL_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PSE_GL_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PSE_GL_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PSE_GL_CODE TO eqa_user
go
CREATE TABLE dbo.PSE_RESOURCE_GROUP_CODE
(
    pse_resource_group_code code_2 NOT NULL,
    pse_resource_group_desc descr  NOT NULL,
    active_ind              yn_ind NOT NULL,
    CONSTRAINT PK_PSE_RESOURCE_GROUP_CODE
    PRIMARY KEY CLUSTERED (pse_resource_group_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.PSE_RESOURCE_GROUP_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.PSE_RESOURCE_GROUP_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.PSE_RESOURCE_GROUP_CODE >>>'
go
GRANT REFERENCES ON dbo.PSE_RESOURCE_GROUP_CODE TO eqa_user
go
GRANT SELECT ON dbo.PSE_RESOURCE_GROUP_CODE TO eqa_user
go
GRANT SELECT ON dbo.PSE_RESOURCE_GROUP_CODE TO read_only
go
GRANT SELECT ON dbo.PSE_RESOURCE_GROUP_CODE TO rma_users
go
GRANT INSERT ON dbo.PSE_RESOURCE_GROUP_CODE TO eqa_user
go
GRANT DELETE ON dbo.PSE_RESOURCE_GROUP_CODE TO eqa_user
go
GRANT UPDATE ON dbo.PSE_RESOURCE_GROUP_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.PSE_RESOURCE_GROUP_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.PSE_RESOURCE_GROUP_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.PSE_RESOURCE_GROUP_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.PSE_RESOURCE_GROUP_CODE TO eqa_user
go
CREATE TABLE dbo.QA_ACTIVITY_TYPE
(
    qa_activity_type_code code_2    NOT NULL,
    qa_activity_type_desc descr     NOT NULL,
    active_ind            yn_ind    NOT NULL,
    sortkey               sortkey   NOT NULL,
    audit_tran_id         OBJECT_ID NOT NULL,
    CONSTRAINT PK_QA_ACTIVITY_TYPE
    PRIMARY KEY CLUSTERED (qa_activity_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QA_ACTIVITY_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QA_ACTIVITY_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QA_ACTIVITY_TYPE >>>'
go
ALTER TABLE dbo.ORG_QA_ACTIVITY
    ADD CONSTRAINT FK_ORG_QA_ACTIVITY_TYPE
    FOREIGN KEY (qa_activity_type)
    REFERENCES dbo.QA_ACTIVITY_TYPE (qa_activity_type_code)
go
GRANT REFERENCES ON dbo.QA_ACTIVITY_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QA_ACTIVITY_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QA_ACTIVITY_TYPE TO read_only
go
GRANT SELECT ON dbo.QA_ACTIVITY_TYPE TO rma_users
go
GRANT INSERT ON dbo.QA_ACTIVITY_TYPE TO eqa_user
go
GRANT DELETE ON dbo.QA_ACTIVITY_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.QA_ACTIVITY_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QA_ACTIVITY_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QA_ACTIVITY_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QA_ACTIVITY_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QA_ACTIVITY_TYPE TO eqa_user
go
CREATE TABLE dbo.QA_APRV_RATING_CODE
(
    qa_aprv_rating_code code_2    NOT NULL,
    qa_aprv_rating_desc UNI_DESCR NOT NULL,
    active_ind          yn_ind    NOT NULL,
    sortkey             sortkey   NOT NULL,
    CONSTRAINT PK_QA_APRV_RATING_CODE
    PRIMARY KEY NONCLUSTERED (qa_aprv_rating_code)
)
LOCK ALLPAGES
go
IF OBJECT_ID('dbo.QA_APRV_RATING_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QA_APRV_RATING_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QA_APRV_RATING_CODE >>>'
go
GRANT REFERENCES ON dbo.QA_APRV_RATING_CODE TO eqa_user
go
GRANT SELECT ON dbo.QA_APRV_RATING_CODE TO eqa_user
go
GRANT SELECT ON dbo.QA_APRV_RATING_CODE TO read_only
go
GRANT SELECT ON dbo.QA_APRV_RATING_CODE TO rma_users
go
GRANT INSERT ON dbo.QA_APRV_RATING_CODE TO eqa_user
go
GRANT DELETE ON dbo.QA_APRV_RATING_CODE TO eqa_user
go
GRANT UPDATE ON dbo.QA_APRV_RATING_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QA_APRV_RATING_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QA_APRV_RATING_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QA_APRV_RATING_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QA_APRV_RATING_CODE TO eqa_user
go
CREATE TABLE dbo.QA_EVENT_CODE
(
    qa_event_code       code_2      NOT NULL,
    qa_event_code_desc  descr       NOT NULL,
    qa_event_short_desc descr_short NOT NULL,
    can_add_event_ind   yn_ind      NOT NULL,
    sortkey             sortkey     NOT NULL,
    CONSTRAINT PK_QA_EVENT_CODE
    PRIMARY KEY CLUSTERED (qa_event_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QA_EVENT_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QA_EVENT_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QA_EVENT_CODE >>>'
go
GRANT REFERENCES ON dbo.QA_EVENT_CODE TO eqa_user
go
GRANT SELECT ON dbo.QA_EVENT_CODE TO eqa_user
go
GRANT SELECT ON dbo.QA_EVENT_CODE TO read_only
go
GRANT SELECT ON dbo.QA_EVENT_CODE TO rma_users
go
GRANT INSERT ON dbo.QA_EVENT_CODE TO eqa_user
go
GRANT DELETE ON dbo.QA_EVENT_CODE TO eqa_user
go
GRANT UPDATE ON dbo.QA_EVENT_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QA_EVENT_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QA_EVENT_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QA_EVENT_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QA_EVENT_CODE TO eqa_user
go
CREATE TABLE dbo.QA_OUTCOME_TYPE
(
    qa_outcome_type_code  code_2    NOT NULL,
    qa_activity_type_code code_2    NOT NULL,
    qa_outcome_type_desc  descr     NOT NULL,
    active_ind            yn_ind    NOT NULL,
    sortkey               sortkey   NOT NULL,
    audit_tran_id         OBJECT_ID NOT NULL,
    CONSTRAINT PK_QA_OUTCOME_TYPE
    PRIMARY KEY CLUSTERED (qa_outcome_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QA_OUTCOME_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QA_OUTCOME_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QA_OUTCOME_TYPE >>>'
go
ALTER TABLE dbo.QA_OUTCOME_TYPE
    ADD CONSTRAINT FK_QA_OUTCOME_TYPE
    FOREIGN KEY (qa_activity_type_code)
    REFERENCES dbo.QA_ACTIVITY_TYPE (qa_activity_type_code)
go
ALTER TABLE dbo.ORG_QA_ACTIVITY
    ADD CONSTRAINT FK_ORG_QA_OUTCOME_TYPE
    FOREIGN KEY (qa_outcome_code)
    REFERENCES dbo.QA_OUTCOME_TYPE (qa_outcome_type_code)
go
GRANT REFERENCES ON dbo.QA_OUTCOME_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QA_OUTCOME_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QA_OUTCOME_TYPE TO read_only
go
GRANT SELECT ON dbo.QA_OUTCOME_TYPE TO rma_users
go
GRANT INSERT ON dbo.QA_OUTCOME_TYPE TO eqa_user
go
GRANT DELETE ON dbo.QA_OUTCOME_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.QA_OUTCOME_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QA_OUTCOME_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QA_OUTCOME_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QA_OUTCOME_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QA_OUTCOME_TYPE TO eqa_user
go
CREATE TABLE dbo.QES_INSTITUTE
(
    qes_institute_id            OBJECT_ID     NOT NULL,
    perorg_role_id              OBJECT_ID     NOT NULL,
    qes_institute_type_code     code_2        NOT NULL,
    qes_section_code            code_2        NOT NULL,
    form_required               yn            DEFAULT '0' NOT NULL,
    fee_required                yn            DEFAULT '0' NOT NULL,
    local_currency_amount       numeric(12,2) NULL,
    local_currency_code         varchar(3)    NULL,
    local_currency_pay_method   code_2        NULL,
    intl_currency_amount        numeric(12,2) NULL,
    intl_currency_code          varchar(3)    NULL,
    intl_currency_pay_method    code_2        NULL,
    payee_name                  varchar(255)  NULL,
    applicant_authorisation_req yn            DEFAULT '0' NOT NULL,
    audit_tran_id               OBJECT_ID     NOT NULL,
    ts                          timestamp     NOT NULL,
    CONSTRAINT PK_QES_INSTITUTE
    PRIMARY KEY CLUSTERED (qes_institute_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QES_INSTITUTE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QES_INSTITUTE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QES_INSTITUTE >>>'
go
ALTER TABLE dbo.QES_INSTITUTE
    ADD CONSTRAINT FK_PAYMENT_METHOD1
    FOREIGN KEY (local_currency_pay_method)
    REFERENCES dbo.PAYMENT_METHOD (payment_method_code)
go
ALTER TABLE dbo.QES_INSTITUTE
    ADD CONSTRAINT FK_PAYMENT_METHOD2
    FOREIGN KEY (intl_currency_pay_method)
    REFERENCES dbo.PAYMENT_METHOD (payment_method_code)
go
ALTER TABLE dbo.QES_INSTITUTE
    ADD CONSTRAINT FK_PERORG_ROLE
    FOREIGN KEY (perorg_role_id)
    REFERENCES dbo.PERORG_ROLE (perorg_role_id)
go
ALTER TABLE dbo.QES_INSTITUTE
    ADD CONSTRAINT FK_CURRENCY1
    FOREIGN KEY (local_currency_code)
    REFERENCES dbo.CURRENCY (currency_code)
go
ALTER TABLE dbo.QES_INSTITUTE
    ADD CONSTRAINT FK_CURRENCY2
    FOREIGN KEY (intl_currency_code)
    REFERENCES dbo.CURRENCY (currency_code)
go
GRANT REFERENCES ON dbo.QES_INSTITUTE TO eqa_user
go
GRANT SELECT ON dbo.QES_INSTITUTE TO eqa_user
go
GRANT SELECT ON dbo.QES_INSTITUTE TO read_only
go
GRANT SELECT ON dbo.QES_INSTITUTE TO rma_users
go
GRANT INSERT ON dbo.QES_INSTITUTE TO eqa_user
go
GRANT DELETE ON dbo.QES_INSTITUTE TO eqa_user
go
GRANT UPDATE ON dbo.QES_INSTITUTE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QES_INSTITUTE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QES_INSTITUTE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QES_INSTITUTE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QES_INSTITUTE TO eqa_user
go
CREATE TABLE dbo.QES_INSTITUTE_SECTION
(
    qes_section_code code_2       NOT NULL,
    qes_section_desc varchar(255) NOT NULL,
    CONSTRAINT PK_QES_INSTITUTE_SECTION
    PRIMARY KEY CLUSTERED (qes_section_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QES_INSTITUTE_SECTION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QES_INSTITUTE_SECTION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QES_INSTITUTE_SECTION >>>'
go
ALTER TABLE dbo.QES_INSTITUTE
    ADD CONSTRAINT FK_QES_INSTITUTE_SECTION
    FOREIGN KEY (qes_section_code)
    REFERENCES dbo.QES_INSTITUTE_SECTION (qes_section_code)
go
GRANT REFERENCES ON dbo.QES_INSTITUTE_SECTION TO eqa_user
go
GRANT SELECT ON dbo.QES_INSTITUTE_SECTION TO eqa_user
go
GRANT SELECT ON dbo.QES_INSTITUTE_SECTION TO read_only
go
GRANT SELECT ON dbo.QES_INSTITUTE_SECTION TO rma_users
go
GRANT INSERT ON dbo.QES_INSTITUTE_SECTION TO eqa_user
go
GRANT DELETE ON dbo.QES_INSTITUTE_SECTION TO eqa_user
go
GRANT UPDATE ON dbo.QES_INSTITUTE_SECTION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QES_INSTITUTE_SECTION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QES_INSTITUTE_SECTION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QES_INSTITUTE_SECTION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QES_INSTITUTE_SECTION TO eqa_user
go
CREATE TABLE dbo.QES_INSTITUTE_TYPE
(
    qes_institute_type_code code_2       NOT NULL,
    qes_institute_type_desc varchar(255) NOT NULL,
    CONSTRAINT PK_QES_INSTITUTE_TYPE
    PRIMARY KEY CLUSTERED (qes_institute_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QES_INSTITUTE_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QES_INSTITUTE_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QES_INSTITUTE_TYPE >>>'
go
ALTER TABLE dbo.QES_INSTITUTE
    ADD CONSTRAINT FK_QES_INSTITUTE_TYPE
    FOREIGN KEY (qes_institute_type_code)
    REFERENCES dbo.QES_INSTITUTE_TYPE (qes_institute_type_code)
go
GRANT REFERENCES ON dbo.QES_INSTITUTE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QES_INSTITUTE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QES_INSTITUTE_TYPE TO read_only
go
GRANT SELECT ON dbo.QES_INSTITUTE_TYPE TO rma_users
go
GRANT INSERT ON dbo.QES_INSTITUTE_TYPE TO eqa_user
go
GRANT DELETE ON dbo.QES_INSTITUTE_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.QES_INSTITUTE_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QES_INSTITUTE_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QES_INSTITUTE_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QES_INSTITUTE_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QES_INSTITUTE_TYPE TO eqa_user
go
CREATE TABLE dbo.QFN
(
    qfn_id                    OBJECT_ID  NOT NULL,
    qfn_status_code           code_2     NOT NULL,
    qfn_status_date           datetime   NOT NULL,
    latest_qfn_version_id     OBJECT_ID  NULL,
    qfn_number                varchar(8) NOT NULL,
    external_qfn_number       varchar(8) NULL,
    qfn_type_code             code_2     NOT NULL,
    latest_reg_qfn_version_id OBJECT_ID  NULL,
    audit_tran_id             OBJECT_ID  NOT NULL,
    ts                        timestamp  NOT NULL,
    certificate_type_code     char(3)    NULL,
    last_certification_date   datetime   NULL,
    can_create_version_ind    yn_ind     NOT NULL,
    creation_date             datetime   NOT NULL,
    web_qfn_version_id        OBJECT_ID  NULL,
    qfn_last_entry_date       datetime   NULL,
    CONSTRAINT PK_QFN
    PRIMARY KEY CLUSTERED (qfn_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN >>>'
go
ALTER TABLE dbo.QFN
    ADD CONSTRAINT FK_QFN_QFN_STATUS_CODE
    FOREIGN KEY (qfn_status_code)
    REFERENCES dbo.QFN_STATUS_CODE (qfn_status_code)
go
ALTER TABLE dbo.QFN
    ADD CONSTRAINT FK_QFN_CERTIFICATE_TYPE
    FOREIGN KEY (certificate_type_code)
    REFERENCES dbo.CERTIFICATE_TYPE (certificate_type_code)
go
ALTER TABLE dbo.QFN
    ADD CONSTRAINT FK_QFN_QFN_TYPE
    FOREIGN KEY (qfn_type_code)
    REFERENCES dbo.QFN_TYPE (qfn_type_code)
go
ALTER TABLE dbo.QFN
    ADD CONSTRAINT FK_QFN_LATEST_QFN_VERSION
    FOREIGN KEY (latest_reg_qfn_version_id)
    REFERENCES dbo.QFN_VERSION (qfn_version_id)
go
ALTER TABLE dbo.QFN
    ADD CONSTRAINT FK_QFN_WEB_QFN_VERSION
    FOREIGN KEY (web_qfn_version_id)
    REFERENCES dbo.QFN_VERSION (qfn_version_id)
go
ALTER TABLE dbo.QFN
    ADD CONSTRAINT FK_QFN_QFN_VERSION
    FOREIGN KEY (latest_qfn_version_id)
    REFERENCES dbo.QFN_VERSION (qfn_version_id)
go
GRANT REFERENCES ON dbo.QFN TO eqa_user
go
GRANT SELECT ON dbo.QFN TO eqa_user
go
GRANT SELECT ON dbo.QFN TO read_only
go
GRANT SELECT ON dbo.QFN TO rma_users
go
GRANT SELECT ON dbo.QFN TO AyaO
go
GRANT INSERT ON dbo.QFN TO eve_user
go
GRANT INSERT ON dbo.QFN TO sqr_eqa_user
go
GRANT INSERT ON dbo.QFN TO eqa_user
go
GRANT INSERT ON dbo.QFN TO sqr_eqa_sync_user
go
GRANT DELETE ON dbo.QFN TO eve_user
go
GRANT DELETE ON dbo.QFN TO sqr_eqa_user
go
GRANT DELETE ON dbo.QFN TO eqa_user
go
GRANT UPDATE ON dbo.QFN TO sqr_eqa_user
go
GRANT UPDATE ON dbo.QFN TO eve_user
go
GRANT UPDATE ON dbo.QFN TO eqa_user
go
GRANT UPDATE ON dbo.QFN TO sqr_eqa_sync_user
go
GRANT DELETE STATISTICS ON dbo.QFN TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN TO eqa_user
go
CREATE TABLE dbo.QFN_ACHIEVED
(
    qfn_achieved_id               OBJECT_ID    NOT NULL,
    learner_id                    OBJECT_ID    NOT NULL,
    qfn_number                    varchar(8)   NOT NULL,
    qfn_version_number            numeric(8,0) NOT NULL,
    strand_number                 OBJECT_ID    NOT NULL,
    achieved_date                 datetime     NULL,
    achieved_status_code          code_2       NOT NULL,
    achieved_status_date          dt           NOT NULL,
    submitting_provider_id        OBJECT_ID    NULL,
    submitting_provider_location  numeric(2,0) NULL,
    issued_date                   datetime     NULL,
    awarding_provider_id          OBJECT_ID    NULL,
    awarding_provider_location    numeric(2,0) NULL,
    issued_by_nzqa                ny_ind       NOT NULL,
    last_action_date              datetime     NULL,
    forced                        ny_ind       NOT NULL,
    force_comment                 varchar(255) NULL,
    withdrawn                     ny_ind       NOT NULL,
    audit_tran_id                 OBJECT_ID    NOT NULL,
    ts                            timestamp    NULL,
    created_by                    varchar(100) NOT NULL,
    withdraw_comment              varchar(255) NULL,
    withdrawn_by                  usr          NULL,
    withdrawn_date                datetime     NULL,
    created_batch_input_id        OBJECT_ID    NULL,
    merge_request_number          OBJECT_ID    NULL,
    certificate_print_status_code code_2       NULL,
    CONSTRAINT PK_QFN_ACHIEVED
    PRIMARY KEY CLUSTERED (qfn_achieved_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_ACHIEVED') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_ACHIEVED >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_ACHIEVED >>>'
go
ALTER TABLE dbo.QFN_ACHIEVED
    ADD CONSTRAINT FK_QFN_ACHIEVED_LEARNER
    FOREIGN KEY (learner_id)
    REFERENCES dbo.LEARNER (learner_id)
go
ALTER TABLE dbo.QFN_ACHIEVED
    ADD CONSTRAINT FK_QFN_ACHIEVED_MERGE
    FOREIGN KEY (merge_request_number)
    REFERENCES dbo.MERGE_REQUEST (merge_request_number)
go
ALTER TABLE dbo.QFN_ACHIEVED
    ADD CONSTRAINT FK_QFN_ACHIEVED_QFN_VERSION
    FOREIGN KEY (qfn_number,qfn_version_number)
    REFERENCES dbo.QFN_VERSION (qfn_number,qfn_version_number)
go
ALTER TABLE dbo.QFN_ACHIEVED
    ADD CONSTRAINT FK_QFN_ACHIEVED_AWARD_PROVIDER
    FOREIGN KEY (awarding_provider_id,awarding_provider_location)
    REFERENCES dbo.PROVIDER (moe_provider_id,location)
go
ALTER TABLE dbo.QFN_ACHIEVED
    ADD CONSTRAINT FK_QFN_ACHIEVED_SUBMIT_PROV
    FOREIGN KEY (submitting_provider_id,submitting_provider_location)
    REFERENCES dbo.PROVIDER (moe_provider_id,location)
go
ALTER TABLE dbo.QFN_ACHIEVED
    ADD CONSTRAINT FK_QFN_ACHIEVED_STAUS_CODE
    FOREIGN KEY (achieved_status_code)
    REFERENCES dbo.ACHIEVED_STATUS_CODE (achieved_status_code)
go
ALTER TABLE dbo.QFN_ACHIEVED
    ADD CONSTRAINT FK_QFN_ACHVD_BATCH
    FOREIGN KEY (created_batch_input_id)
    REFERENCES dbo.BATCH_INPUT (batch_input_id)
go
ALTER TABLE dbo.QFN_ACHIEVED
    ADD CONSTRAINT FK_QFN_ACHIEVED_CERT_PRINT_STATUS
    FOREIGN KEY (certificate_print_status_code)
    REFERENCES dbo.CERTIFICATE_PRINT_STATUS_CODE (certificate_print_status_code)
go
ALTER TABLE dbo.LEARNER_INPUT
    ADD CONSTRAINT FK_LEARNER_INPUT_QFN_ACHIEVED
    FOREIGN KEY (qfn_achieved_id)
    REFERENCES dbo.QFN_ACHIEVED (qfn_achieved_id)
go
ALTER TABLE dbo.ORDER_ITEM
    ADD CONSTRAINT FK_ORDER_ITEM_QFN_ACHVD
    FOREIGN KEY (qfn_achieved_id)
    REFERENCES dbo.QFN_ACHIEVED (qfn_achieved_id)
go
GRANT REFERENCES ON dbo.QFN_ACHIEVED TO eqa_user
go
GRANT SELECT ON dbo.QFN_ACHIEVED TO eqa_user
go
GRANT SELECT ON dbo.QFN_ACHIEVED TO read_only
go
GRANT SELECT ON dbo.QFN_ACHIEVED TO rma_users
go
GRANT INSERT ON dbo.QFN_ACHIEVED TO eqa_user
go
GRANT DELETE ON dbo.QFN_ACHIEVED TO eqa_user
go
GRANT UPDATE ON dbo.QFN_ACHIEVED TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_ACHIEVED TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_ACHIEVED TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_ACHIEVED TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_ACHIEVED TO eqa_user
go
CREATE TABLE dbo.QFN_ACHIEVED_ENDORSEMENT
(
    qfn_achieved_endorsement_id OBJECT_ID    NOT NULL,
    qfn_achieved_id             OBJECT_ID    NOT NULL,
    qfn_ver_endorsement_ver_id  OBJECT_ID    NOT NULL,
    endorsement_id              OBJECT_ID    NOT NULL,
    achieved_date               datetime     NOT NULL,
    achieved_status_code        code_2       NOT NULL,
    achieved_status_date        dt           NOT NULL,
    issued_date                 datetime     NULL,
    withdrawn_date              datetime     NULL,
    withdrawn_by                varchar(100) NULL,
    withdrawn_comments          varchar(255) NULL,
    created_by                  varchar(100) NOT NULL,
    audit_tran_id               OBJECT_ID    NOT NULL,
    CONSTRAINT PK_QFN_ACHIEVED_ENDORSEMENT
    PRIMARY KEY CLUSTERED (qfn_achieved_endorsement_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_ACHIEVED_ENDORSEMENT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_ACHIEVED_ENDORSEMENT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_ACHIEVED_ENDORSEMENT >>>'
go
ALTER TABLE dbo.QFN_ACHIEVED_ENDORSEMENT
    ADD CONSTRAINT FK_QFN_ACHIEVED_ENDOR_QFN_ACH
    FOREIGN KEY (qfn_achieved_id)
    REFERENCES dbo.QFN_ACHIEVED (qfn_achieved_id)
go
ALTER TABLE dbo.QFN_ACHIEVED_ENDORSEMENT
    ADD CONSTRAINT FK_QFN_ACHI_END_QFN_VER_END_V
    FOREIGN KEY (qfn_ver_endorsement_ver_id)
    REFERENCES dbo.QFN_VER_ENDORSEMENT_VER (qfn_ver_endorsement_ver_id)
go
ALTER TABLE dbo.QFN_ACHIEVED_ENDORSEMENT
    ADD CONSTRAINT FK_QFN_ACHI_ENDORSEMENT_ENDOR
    FOREIGN KEY (endorsement_id)
    REFERENCES dbo.ENDORSEMENT (endorsement_id)
go
ALTER TABLE dbo.QFN_ACHIEVED_ENDORSEMENT
    ADD CONSTRAINT FK_QFN_ACHVD_ENDR_ACH_STA_CODE
    FOREIGN KEY (achieved_status_code)
    REFERENCES dbo.ACHIEVED_STATUS_CODE (achieved_status_code)
go
GRANT REFERENCES ON dbo.QFN_ACHIEVED_ENDORSEMENT TO eqa_user
go
GRANT SELECT ON dbo.QFN_ACHIEVED_ENDORSEMENT TO eqa_user
go
GRANT SELECT ON dbo.QFN_ACHIEVED_ENDORSEMENT TO read_only
go
GRANT SELECT ON dbo.QFN_ACHIEVED_ENDORSEMENT TO rma_users
go
GRANT INSERT ON dbo.QFN_ACHIEVED_ENDORSEMENT TO eqa_user
go
GRANT DELETE ON dbo.QFN_ACHIEVED_ENDORSEMENT TO eqa_user
go
GRANT UPDATE ON dbo.QFN_ACHIEVED_ENDORSEMENT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_ACHIEVED_ENDORSEMENT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_ACHIEVED_ENDORSEMENT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_ACHIEVED_ENDORSEMENT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_ACHIEVED_ENDORSEMENT TO eqa_user
go
CREATE TABLE dbo.QFN_ACHIEVED_ENDR_STATUS_HIST
(
    qfn_achvd_endr_status_hist_id OBJECT_ID NOT NULL,
    qfn_achieved_endorsement_id   OBJECT_ID NOT NULL,
    achieved_status_code          code_2    NOT NULL,
    achieved_status_date          dt        NOT NULL,
    update_date                   dt        NOT NULL,
    audit_tran_id                 OBJECT_ID NOT NULL,
    CONSTRAINT PK_QFN_ACHIEVED_ENDR_STATUS_HI
    PRIMARY KEY CLUSTERED (qfn_achvd_endr_status_hist_id)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.QFN_ACHIEVED_ENDR_STATUS_HIST') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_ACHIEVED_ENDR_STATUS_HIST >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_ACHIEVED_ENDR_STATUS_HIST >>>'
go
ALTER TABLE dbo.QFN_ACHIEVED_ENDR_STATUS_HIST
    ADD CONSTRAINT FK_QFN_ACHVD_ENDR_STA_HIST_END
    FOREIGN KEY (qfn_achieved_endorsement_id)
    REFERENCES dbo.QFN_ACHIEVED_ENDORSEMENT (qfn_achieved_endorsement_id)
go
ALTER TABLE dbo.QFN_ACHIEVED_ENDR_STATUS_HIST
    ADD CONSTRAINT FK_QFN_ACHVD_EDNR_STA_HIST_STA
    FOREIGN KEY (achieved_status_code)
    REFERENCES dbo.ACHIEVED_STATUS_CODE (achieved_status_code)
go
GRANT REFERENCES ON dbo.QFN_ACHIEVED_ENDR_STATUS_HIST TO eqa_user
go
GRANT SELECT ON dbo.QFN_ACHIEVED_ENDR_STATUS_HIST TO eqa_user
go
GRANT SELECT ON dbo.QFN_ACHIEVED_ENDR_STATUS_HIST TO read_only
go
GRANT SELECT ON dbo.QFN_ACHIEVED_ENDR_STATUS_HIST TO rma_users
go
GRANT INSERT ON dbo.QFN_ACHIEVED_ENDR_STATUS_HIST TO eqa_user
go
GRANT DELETE ON dbo.QFN_ACHIEVED_ENDR_STATUS_HIST TO eqa_user
go
GRANT UPDATE ON dbo.QFN_ACHIEVED_ENDR_STATUS_HIST TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_ACHIEVED_ENDR_STATUS_HIST TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_ACHIEVED_ENDR_STATUS_HIST TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_ACHIEVED_ENDR_STATUS_HIST TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_ACHIEVED_ENDR_STATUS_HIST TO eqa_user
go
CREATE TABLE dbo.QFN_ACHIEVED_STATUS_HIST
(
    qfn_achieved_status_hist_id OBJECT_ID NOT NULL,
    qfn_achieved_id             OBJECT_ID NOT NULL,
    achieved_status_code        code_2    NOT NULL,
    achieved_status_date        dt        NOT NULL,
    update_date                 dt        NOT NULL,
    audit_tran_id               OBJECT_ID NOT NULL,
    CONSTRAINT PK_QFN_ACHIEVED_STATUS_HIST
    PRIMARY KEY CLUSTERED (qfn_achieved_status_hist_id)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.QFN_ACHIEVED_STATUS_HIST') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_ACHIEVED_STATUS_HIST >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_ACHIEVED_STATUS_HIST >>>'
go
ALTER TABLE dbo.QFN_ACHIEVED_STATUS_HIST
    ADD CONSTRAINT FK_QFN_ACHVD_STATUS_HIST_QFN_A
    FOREIGN KEY (qfn_achieved_id)
    REFERENCES dbo.QFN_ACHIEVED (qfn_achieved_id)
go
ALTER TABLE dbo.QFN_ACHIEVED_STATUS_HIST
    ADD CONSTRAINT FK_QFN_ACHVD_STATUS_HIST_STAUS
    FOREIGN KEY (achieved_status_code)
    REFERENCES dbo.ACHIEVED_STATUS_CODE (achieved_status_code)
go
GRANT REFERENCES ON dbo.QFN_ACHIEVED_STATUS_HIST TO eqa_user
go
GRANT SELECT ON dbo.QFN_ACHIEVED_STATUS_HIST TO eqa_user
go
GRANT SELECT ON dbo.QFN_ACHIEVED_STATUS_HIST TO read_only
go
GRANT SELECT ON dbo.QFN_ACHIEVED_STATUS_HIST TO rma_users
go
GRANT INSERT ON dbo.QFN_ACHIEVED_STATUS_HIST TO eqa_user
go
GRANT DELETE ON dbo.QFN_ACHIEVED_STATUS_HIST TO eqa_user
go
GRANT UPDATE ON dbo.QFN_ACHIEVED_STATUS_HIST TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_ACHIEVED_STATUS_HIST TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_ACHIEVED_STATUS_HIST TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_ACHIEVED_STATUS_HIST TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_ACHIEVED_STATUS_HIST TO eqa_user
go
CREATE TABLE dbo.QFN_ACHVD_COMP_PROGRESS
(
    qfn_achvd_comp_progress_id   OBJECT_ID NOT NULL,
    qfn_achvd_comp_type_code     code_2    NOT NULL,
    qfn_achieved_id              OBJECT_ID NOT NULL,
    achieved_status_code         code_2    NOT NULL,
    achieved_status_date         dt        NOT NULL,
    achieved_credit_paid_count   int       NULL,
    achieved_credit_unpaid_count int       NULL,
    transition_count             int       NULL,
    transition_credit_count      int       NULL,
    exclusion_credit_count       int       NULL,
    audit_tran_id                OBJECT_ID NOT NULL,
    CONSTRAINT PK_QFN_ACHVD_COMP_PROGRESS
    PRIMARY KEY CLUSTERED (qfn_achvd_comp_progress_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_ACHVD_COMP_PROGRESS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_ACHVD_COMP_PROGRESS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_ACHVD_COMP_PROGRESS >>>'
go
ALTER TABLE dbo.QFN_ACHVD_COMP_PROGRESS
    ADD CONSTRAINT FK_QFN_ACHVD_COMP_PROG_QFN_ACH
    FOREIGN KEY (qfn_achieved_id)
    REFERENCES dbo.QFN_ACHIEVED (qfn_achieved_id)
go
ALTER TABLE dbo.QFN_ACHVD_COMP_PROGRESS
    ADD CONSTRAINT FK_QFN_ACHVD_COMP_PROG_STA_COD
    FOREIGN KEY (achieved_status_code)
    REFERENCES dbo.ACHIEVED_STATUS_CODE (achieved_status_code)
go
GRANT REFERENCES ON dbo.QFN_ACHVD_COMP_PROGRESS TO eqa_user
go
GRANT SELECT ON dbo.QFN_ACHVD_COMP_PROGRESS TO eqa_user
go
GRANT SELECT ON dbo.QFN_ACHVD_COMP_PROGRESS TO read_only
go
GRANT SELECT ON dbo.QFN_ACHVD_COMP_PROGRESS TO rma_users
go
GRANT INSERT ON dbo.QFN_ACHVD_COMP_PROGRESS TO eqa_user
go
GRANT DELETE ON dbo.QFN_ACHVD_COMP_PROGRESS TO eqa_user
go
GRANT UPDATE ON dbo.QFN_ACHVD_COMP_PROGRESS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_ACHVD_COMP_PROGRESS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_ACHVD_COMP_PROGRESS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_ACHVD_COMP_PROGRESS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_ACHVD_COMP_PROGRESS TO eqa_user
go
CREATE TABLE dbo.QFN_ACHVD_COMP_PROG_HIST
(
    qfn_achvd_comp_prog_hist_id  OBJECT_ID NOT NULL,
    qfn_achvd_comp_progress_id   OBJECT_ID NOT NULL,
    achieved_status_code         code_2    NOT NULL,
    achieved_status_date         dt        NOT NULL,
    update_date                  dt        NOT NULL,
    achieved_credit_paid_count   int       NULL,
    achieved_credit_unpaid_count int       NULL,
    transition_count             int       NULL,
    transition_credit_count      int       NULL,
    exclusion_credit_count       int       NULL,
    audit_tran_id                OBJECT_ID NOT NULL,
    CONSTRAINT PK_QFN_ACHVD_COMP_PROG_HIST
    PRIMARY KEY CLUSTERED (qfn_achvd_comp_prog_hist_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_ACHVD_COMP_PROG_HIST') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_ACHVD_COMP_PROG_HIST >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_ACHVD_COMP_PROG_HIST >>>'
go
ALTER TABLE dbo.QFN_ACHVD_COMP_PROG_HIST
    ADD CONSTRAINT FK_QFN_ACH_COM_PRO_HIS_COMP_PR
    FOREIGN KEY (qfn_achvd_comp_progress_id)
    REFERENCES dbo.QFN_ACHVD_COMP_PROGRESS (qfn_achvd_comp_progress_id)
go
ALTER TABLE dbo.QFN_ACHVD_COMP_PROG_HIST
    ADD CONSTRAINT FK_QFN_ACH_COM_PRO_HIS_STA_COD
    FOREIGN KEY (achieved_status_code)
    REFERENCES dbo.ACHIEVED_STATUS_CODE (achieved_status_code)
go
GRANT REFERENCES ON dbo.QFN_ACHVD_COMP_PROG_HIST TO eqa_user
go
GRANT SELECT ON dbo.QFN_ACHVD_COMP_PROG_HIST TO eqa_user
go
GRANT SELECT ON dbo.QFN_ACHVD_COMP_PROG_HIST TO read_only
go
GRANT SELECT ON dbo.QFN_ACHVD_COMP_PROG_HIST TO rma_users
go
GRANT INSERT ON dbo.QFN_ACHVD_COMP_PROG_HIST TO eqa_user
go
GRANT DELETE ON dbo.QFN_ACHVD_COMP_PROG_HIST TO eqa_user
go
GRANT UPDATE ON dbo.QFN_ACHVD_COMP_PROG_HIST TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_ACHVD_COMP_PROG_HIST TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_ACHVD_COMP_PROG_HIST TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_ACHVD_COMP_PROG_HIST TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_ACHVD_COMP_PROG_HIST TO eqa_user
go
CREATE TABLE dbo.QFN_ACHVD_COMP_TYPE
(
    qfn_achvd_comp_type_code      code_2      NOT NULL,
    qfn_achvd_comp_type_code_desc descr_short NOT NULL,
    active_ind                    yn_ind      NOT NULL,
    external_code                 code_3      NULL,
    CONSTRAINT PK_QFN_ACHVD_COMP_TYPE
    PRIMARY KEY CLUSTERED (qfn_achvd_comp_type_code)
)
LOCK ALLPAGES
go
IF OBJECT_ID('dbo.QFN_ACHVD_COMP_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_ACHVD_COMP_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_ACHVD_COMP_TYPE >>>'
go
ALTER TABLE dbo.QFN_ACHVD_COMP_PROGRESS
    ADD CONSTRAINT FK_QFN_ACHVD_COMP_PROG_COMP_TY
    FOREIGN KEY (qfn_achvd_comp_type_code)
    REFERENCES dbo.QFN_ACHVD_COMP_TYPE (qfn_achvd_comp_type_code)
go
GRANT REFERENCES ON dbo.QFN_ACHVD_COMP_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QFN_ACHVD_COMP_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QFN_ACHVD_COMP_TYPE TO read_only
go
GRANT SELECT ON dbo.QFN_ACHVD_COMP_TYPE TO rma_users
go
GRANT INSERT ON dbo.QFN_ACHVD_COMP_TYPE TO eqa_user
go
GRANT DELETE ON dbo.QFN_ACHVD_COMP_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.QFN_ACHVD_COMP_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_ACHVD_COMP_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_ACHVD_COMP_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_ACHVD_COMP_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_ACHVD_COMP_TYPE TO eqa_user
go
CREATE TABLE dbo.QFN_CERT
(
    qfn_cert_id                 numeric(12,0) NOT NULL,
    qfn_achieved_id             numeric(12,0) NOT NULL,
    print_date                  datetime      NULL,
    name_printed                varchar(255)  NULL,
    audit_tran_id               numeric(12,0) NOT NULL,
    ts                          timestamp     NULL,
    address_printed_1           addr_line     DEFAULT '' NOT NULL,
    address_printed_2           addr_line     NULL,
    address_printed_3           addr_line     NULL,
    address_printed_4           addr_line     NULL,
    address_printed_post_code   postcode      NULL,
    address_printed_country     name          NULL,
    address_sheet               yn            DEFAULT 0  NOT NULL,
    qfn_achieved_endorsement_id OBJECT_ID     NULL,
    CONSTRAINT PK_QFN_CERT
    PRIMARY KEY CLUSTERED (qfn_cert_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_CERT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_CERT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_CERT >>>'
go
ALTER TABLE dbo.QFN_CERT
    ADD CONSTRAINT FK_QFN_CERT_QFN_ACHIEVED
    FOREIGN KEY (qfn_achieved_id)
    REFERENCES dbo.QFN_ACHIEVED (qfn_achieved_id)
go
ALTER TABLE dbo.QFN_CERT
    ADD CONSTRAINT FK_QFN_CERT_QFN_ACHI_ENDOR
    FOREIGN KEY (qfn_achieved_endorsement_id)
    REFERENCES dbo.QFN_ACHIEVED_ENDORSEMENT (qfn_achieved_endorsement_id)
go
GRANT REFERENCES ON dbo.QFN_CERT TO eqa_user
go
GRANT SELECT ON dbo.QFN_CERT TO eqa_user
go
GRANT SELECT ON dbo.QFN_CERT TO read_only
go
GRANT SELECT ON dbo.QFN_CERT TO rma_users
go
GRANT INSERT ON dbo.QFN_CERT TO eqa_user
go
GRANT DELETE ON dbo.QFN_CERT TO eqa_user
go
GRANT UPDATE ON dbo.QFN_CERT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_CERT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_CERT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_CERT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_CERT TO eqa_user
go
CREATE TABLE dbo.QFN_CHECK_RESULT_TYPE
(
    qfn_check_result_type      code_2  NOT NULL,
    qfn_check_result_type_desc descr   NOT NULL,
    sortkey                    sortkey NULL,
    CONSTRAINT PK_QFN_CHECK_RESULT_TYPE
    PRIMARY KEY CLUSTERED (qfn_check_result_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_CHECK_RESULT_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_CHECK_RESULT_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_CHECK_RESULT_TYPE >>>'
go
GRANT REFERENCES ON dbo.QFN_CHECK_RESULT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QFN_CHECK_RESULT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QFN_CHECK_RESULT_TYPE TO read_only
go
GRANT SELECT ON dbo.QFN_CHECK_RESULT_TYPE TO rma_users
go
GRANT INSERT ON dbo.QFN_CHECK_RESULT_TYPE TO eqa_user
go
GRANT DELETE ON dbo.QFN_CHECK_RESULT_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.QFN_CHECK_RESULT_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_CHECK_RESULT_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_CHECK_RESULT_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_CHECK_RESULT_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_CHECK_RESULT_TYPE TO eqa_user
go
CREATE TABLE dbo.QFN_CLASS_CODE
(
    qfn_class_code code_2  NOT NULL,
    qfn_class_desc descr   NOT NULL,
    active_ind     yn_ind  NOT NULL,
    sortkey        sortkey NOT NULL,
    CONSTRAINT PK_QFN_CLASS_CODE
    PRIMARY KEY CLUSTERED (qfn_class_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_CLASS_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_CLASS_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_CLASS_CODE >>>'
go
GRANT REFERENCES ON dbo.QFN_CLASS_CODE TO eqa_user
go
GRANT SELECT ON dbo.QFN_CLASS_CODE TO eqa_user
go
GRANT SELECT ON dbo.QFN_CLASS_CODE TO read_only
go
GRANT SELECT ON dbo.QFN_CLASS_CODE TO rma_users
go
GRANT INSERT ON dbo.QFN_CLASS_CODE TO eqa_user
go
GRANT DELETE ON dbo.QFN_CLASS_CODE TO eqa_user
go
GRANT UPDATE ON dbo.QFN_CLASS_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_CLASS_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_CLASS_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_CLASS_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_CLASS_CODE TO eqa_user
go
CREATE TABLE dbo.QFN_CONDITION
(
    qfn_condition_id  OBJECT_ID NOT NULL,
    max_level         int       NULL,
    min_level         int       NULL,
    per_category_type code_2    NULL,
    category_type     code_2    NULL,
    comparison_limit  int       NOT NULL,
    qfn_cond_op_code  code_2    NULL,
    countable_code    code_2    NOT NULL,
    rules_group_id    OBJECT_ID NULL,
    qfn_rule_id       OBJECT_ID NULL,
    audit_tran_id     OBJECT_ID NOT NULL,
    ts                timestamp NOT NULL,
    CONSTRAINT PK_QFN_CONDITION
    PRIMARY KEY CLUSTERED (qfn_condition_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_CONDITION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_CONDITION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_CONDITION >>>'
go
ALTER TABLE dbo.QFN_CONDITION
    ADD CONSTRAINT FK_QFN_CONDITION_QFN_RULE
    FOREIGN KEY (qfn_rule_id)
    REFERENCES dbo.QFN_RULE (qfn_rule_id)
go
ALTER TABLE dbo.QFN_CONDITION
    ADD CONSTRAINT FK_QFN_COND_CFN_DEPTH_TYPE
    FOREIGN KEY (category_type)
    REFERENCES dbo.CFN_DEPTH_TYPE (cfn_depth_code)
go
ALTER TABLE dbo.QFN_CONDITION
    ADD CONSTRAINT FK_QFN_COND_CFN_DEPTH_TYPE2
    FOREIGN KEY (per_category_type)
    REFERENCES dbo.CFN_DEPTH_TYPE (cfn_depth_code)
go
ALTER TABLE dbo.QFN_CONDITION
    ADD CONSTRAINT FK_QFN_COND_RULES_GROUP
    FOREIGN KEY (rules_group_id)
    REFERENCES dbo.RULES_GROUP (rules_group_id)
go
GRANT REFERENCES ON dbo.QFN_CONDITION TO eqa_user
go
GRANT SELECT ON dbo.QFN_CONDITION TO eqa_user
go
GRANT SELECT ON dbo.QFN_CONDITION TO read_only
go
GRANT SELECT ON dbo.QFN_CONDITION TO rma_users
go
GRANT INSERT ON dbo.QFN_CONDITION TO eqa_user
go
GRANT DELETE ON dbo.QFN_CONDITION TO eqa_user
go
GRANT UPDATE ON dbo.QFN_CONDITION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_CONDITION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_CONDITION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_CONDITION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_CONDITION TO eqa_user
go
CREATE TABLE dbo.QFN_COND_OPERATOR
(
    qfn_cond_op_code      code_2  NOT NULL,
    qfn_cond_op_code_desc descr   NULL,
    sortkey               sortkey NULL,
    CONSTRAINT PK_QFN_COND_OPERATOR
    PRIMARY KEY CLUSTERED (qfn_cond_op_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_COND_OPERATOR') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_COND_OPERATOR >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_COND_OPERATOR >>>'
go
ALTER TABLE dbo.QFN_CONDITION
    ADD CONSTRAINT FK_QFN_COND_QFN_COND
    FOREIGN KEY (qfn_cond_op_code)
    REFERENCES dbo.QFN_COND_OPERATOR (qfn_cond_op_code)
go
GRANT REFERENCES ON dbo.QFN_COND_OPERATOR TO eqa_user
go
GRANT SELECT ON dbo.QFN_COND_OPERATOR TO eqa_user
go
GRANT SELECT ON dbo.QFN_COND_OPERATOR TO read_only
go
GRANT SELECT ON dbo.QFN_COND_OPERATOR TO rma_users
go
GRANT INSERT ON dbo.QFN_COND_OPERATOR TO eqa_user
go
GRANT DELETE ON dbo.QFN_COND_OPERATOR TO eqa_user
go
GRANT UPDATE ON dbo.QFN_COND_OPERATOR TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_COND_OPERATOR TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_COND_OPERATOR TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_COND_OPERATOR TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_COND_OPERATOR TO eqa_user
go
CREATE TABLE dbo.QFN_EXCLUSION
(
    qfn_exclusion_id    OBJECT_ID NOT NULL,
    lhs_std_id          OBJECT_ID NOT NULL,
    rhs_std_id          OBJECT_ID NOT NULL,
    audit_tran_id       OBJECT_ID NOT NULL,
    ts                  timestamp NOT NULL,
    effective_from_date datetime  NOT NULL,
    effective_to_date   datetime  NULL,
    CONSTRAINT PK_QFN_EXCLUSION
    PRIMARY KEY CLUSTERED (qfn_exclusion_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_EXCLUSION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_EXCLUSION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_EXCLUSION >>>'
go
ALTER TABLE dbo.QFN_EXCLUSION
    ADD CONSTRAINT FK_QFN_EXCLUSION_LHS_STD
    FOREIGN KEY (lhs_std_id)
    REFERENCES dbo.STD (std_id)
go
ALTER TABLE dbo.QFN_EXCLUSION
    ADD CONSTRAINT FK_QFN_EXCLUSION_RHS_STD
    FOREIGN KEY (rhs_std_id)
    REFERENCES dbo.STD (std_id)
go
GRANT REFERENCES ON dbo.QFN_EXCLUSION TO eqa_user
go
GRANT SELECT ON dbo.QFN_EXCLUSION TO eqa_user
go
GRANT SELECT ON dbo.QFN_EXCLUSION TO read_only
go
GRANT SELECT ON dbo.QFN_EXCLUSION TO rma_users
go
GRANT INSERT ON dbo.QFN_EXCLUSION TO eqa_user
go
GRANT DELETE ON dbo.QFN_EXCLUSION TO eqa_user
go
GRANT UPDATE ON dbo.QFN_EXCLUSION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_EXCLUSION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_EXCLUSION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_EXCLUSION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_EXCLUSION TO eqa_user
go
CREATE TABLE dbo.QFN_EXEMPTION_ITEM
(
    qfn_exmptn_item_id        OBJECT_ID NOT NULL,
    qfn_exmptn_item_type_code code_2    NOT NULL,
    qfn_exmptn_row_id         OBJECT_ID NOT NULL,
    qfn_version_id            OBJECT_ID NULL,
    std_version_id            OBJECT_ID NULL,
    cfn_catg_id               OBJECT_ID NULL,
    qfn_rule_id               OBJECT_ID NULL,
    exempted_credits          int       NULL,
    exempted_level_code       code_2    NULL,
    excluded_exemption_id     OBJECT_ID NULL,
    audit_tran_id             OBJECT_ID NOT NULL,
    ts                        timestamp NOT NULL,
    CONSTRAINT PK_QFN_EXEMPTION_ITEM
    PRIMARY KEY CLUSTERED (qfn_exmptn_item_id),
    CONSTRAINT CHK_QFN_EXMPTION_ITEM_LVLCRD
    CHECK ((cfn_catg_id is null and qfn_rule_id is null and exempted_credits is null and exempted_level_code is null) 
    or ((cfn_catg_id is not null or qfn_rule_id is not null) and exempted_credits is not null and exempted_level_code is not null)),
    CONSTRAINT CHK_QFN_EXMPTION_ITEM_REF
    CHECK ((qfn_version_id is null and std_version_id is null and cfn_catg_id is null and qfn_rule_id is null and excluded_exemption_id is null) or
       (qfn_version_id is not null and std_version_id is null and cfn_catg_id is null and qfn_rule_id is null and excluded_exemption_id is null) or
       (qfn_version_id is null and std_version_id is not null and cfn_catg_id is null and qfn_rule_id is null and excluded_exemption_id is null) or
       (qfn_version_id is null and std_version_id is null and cfn_catg_id is not null and qfn_rule_id is null and excluded_exemption_id is null) or
       (qfn_version_id is null and std_version_id is null and cfn_catg_id is null and qfn_rule_id is not null and excluded_exemption_id isnull) or
       (qfn_version_id is null and std_version_id is null and cfn_catg_id is null and qfn_rule_id is null and excluded_exemption_id is not null)),
    CONSTRAINT CHK_QFN_EXMPTION_ITEM_TYPE
    CHECK ((qfn_version_id is not null and qfn_exmptn_item_type_code = "01") or
       (std_version_id is not null) or
       ((cfn_catg_id is not null or qfn_rule_id is not null) and qfn_exmptn_item_type_code = "02") or(excluded_exemption_id is not null and qfn_exmptn_item_type_code = "03"))
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_EXEMPTION_ITEM') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_EXEMPTION_ITEM >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_EXEMPTION_ITEM >>>'
go
ALTER TABLE dbo.QFN_EXEMPTION_ITEM
    ADD CONSTRAINT FK_QFN_EXMPTN_ITEM_LVL
    FOREIGN KEY (exempted_level_code)
    REFERENCES dbo.LVL (level_code)
go
ALTER TABLE dbo.QFN_EXEMPTION_ITEM
    ADD CONSTRAINT FK_QFN_EXMPTN_ITEM_EXMPTD_RULE
    FOREIGN KEY (qfn_rule_id)
    REFERENCES dbo.QFN_RULE (qfn_rule_id)
go
ALTER TABLE dbo.QFN_EXEMPTION_ITEM
    ADD CONSTRAINT FK_QFN_EXMPTN_ITEM_CFN_CATG
    FOREIGN KEY (cfn_catg_id)
    REFERENCES dbo.CFN_CATEGORY (cfn_catg_id)
go
ALTER TABLE dbo.QFN_EXEMPTION_ITEM
    ADD CONSTRAINT FK_QFN_EXMPTN_ITEM_QFN_VER
    FOREIGN KEY (qfn_version_id)
    REFERENCES dbo.QFN_VERSION (qfn_version_id)
go
ALTER TABLE dbo.QFN_EXEMPTION_ITEM
    ADD CONSTRAINT FK_QFN_EXMPTN_ITEM_STD_VER
    FOREIGN KEY (std_version_id)
    REFERENCES dbo.STD_VERSION (std_version_id)
go
GRANT REFERENCES ON dbo.QFN_EXEMPTION_ITEM TO eqa_user
go
GRANT SELECT ON dbo.QFN_EXEMPTION_ITEM TO eqa_user
go
GRANT SELECT ON dbo.QFN_EXEMPTION_ITEM TO read_only
go
GRANT SELECT ON dbo.QFN_EXEMPTION_ITEM TO rma_users
go
GRANT INSERT ON dbo.QFN_EXEMPTION_ITEM TO eqa_user
go
GRANT DELETE ON dbo.QFN_EXEMPTION_ITEM TO eqa_user
go
GRANT UPDATE ON dbo.QFN_EXEMPTION_ITEM TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_EXEMPTION_ITEM TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_EXEMPTION_ITEM TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_EXEMPTION_ITEM TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_EXEMPTION_ITEM TO eqa_user
go
CREATE TABLE dbo.QFN_EXEMPTION_ITEM_TYPE
(
    qfn_exmptn_item_type_code code_2  NOT NULL,
    qfn_exmptn_item_type_desc descr   NOT NULL,
    sortkey                   sortkey NOT NULL,
    CONSTRAINT PK_QFN_EXEMPTION_ITEM_TYPE
    PRIMARY KEY CLUSTERED (qfn_exmptn_item_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_EXEMPTION_ITEM_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_EXEMPTION_ITEM_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_EXEMPTION_ITEM_TYPE >>>'
go
ALTER TABLE dbo.QFN_EXEMPTION_ITEM
    ADD CONSTRAINT FK_QFN_EXMPTN_ITEM_TYPE_CODE
    FOREIGN KEY (qfn_exmptn_item_type_code)
    REFERENCES dbo.QFN_EXEMPTION_ITEM_TYPE (qfn_exmptn_item_type_code)
go
GRANT REFERENCES ON dbo.QFN_EXEMPTION_ITEM_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QFN_EXEMPTION_ITEM_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QFN_EXEMPTION_ITEM_TYPE TO read_only
go
GRANT SELECT ON dbo.QFN_EXEMPTION_ITEM_TYPE TO rma_users
go
GRANT INSERT ON dbo.QFN_EXEMPTION_ITEM_TYPE TO eqa_user
go
GRANT DELETE ON dbo.QFN_EXEMPTION_ITEM_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.QFN_EXEMPTION_ITEM_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_EXEMPTION_ITEM_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_EXEMPTION_ITEM_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_EXEMPTION_ITEM_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_EXEMPTION_ITEM_TYPE TO eqa_user
go
CREATE TABLE dbo.QFN_EXEMPTION_ROW
(
    qfn_exmptn_row_id     OBJECT_ID NOT NULL,
    qfn_exmptn_table_id   OBJECT_ID NOT NULL,
    qfn_exmptn_row_number int       NOT NULL,
    audit_tran_id         OBJECT_ID NOT NULL,
    ts                    timestamp NOT NULL,
    CONSTRAINT PK_QFN_EXEMPTION_ROW
    PRIMARY KEY CLUSTERED (qfn_exmptn_row_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_EXEMPTION_ROW') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_EXEMPTION_ROW >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_EXEMPTION_ROW >>>'
go
ALTER TABLE dbo.QFN_EXEMPTION_ITEM
    ADD CONSTRAINT FK_QFN_EXMPTN_ITEM_EXMPT_ROW
    FOREIGN KEY (qfn_exmptn_row_id)
    REFERENCES dbo.QFN_EXEMPTION_ROW (qfn_exmptn_row_id)
go
ALTER TABLE dbo.QFN_EXEMPTION_ITEM
    ADD CONSTRAINT FK_QFN_EXMPTN_ITEM_EXMPTN_ROW
    FOREIGN KEY (excluded_exemption_id)
    REFERENCES dbo.QFN_EXEMPTION_ROW (qfn_exmptn_row_id)
go
GRANT REFERENCES ON dbo.QFN_EXEMPTION_ROW TO eqa_user
go
GRANT SELECT ON dbo.QFN_EXEMPTION_ROW TO eqa_user
go
GRANT SELECT ON dbo.QFN_EXEMPTION_ROW TO read_only
go
GRANT SELECT ON dbo.QFN_EXEMPTION_ROW TO rma_users
go
GRANT INSERT ON dbo.QFN_EXEMPTION_ROW TO eqa_user
go
GRANT DELETE ON dbo.QFN_EXEMPTION_ROW TO eqa_user
go
GRANT UPDATE ON dbo.QFN_EXEMPTION_ROW TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_EXEMPTION_ROW TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_EXEMPTION_ROW TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_EXEMPTION_ROW TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_EXEMPTION_ROW TO eqa_user
go
CREATE TABLE dbo.QFN_EXEMPTION_TABLE
(
    qfn_exmptn_table_id        OBJECT_ID    NOT NULL,
    rules_group_id             OBJECT_ID    NULL,
    qfn_exmptn_tbl_type_code   code_2       NOT NULL,
    qfn_exmptn_tbl_title       varchar(256) NOT NULL,
    qfn_exmptn_tbl_short_title varchar(6)   NULL,
    qfn_exmptn_tbl_credit_cap  numeric(3,0) NULL,
    qfn_exmptn_tbl_apply_date  datetime     NULL,
    qfn_exmptn_tbl_expiry_date datetime     NULL,
    audit_tran_id              OBJECT_ID    NOT NULL,
    ts                         timestamp    NOT NULL,
    CONSTRAINT PK_QFN_EXEMPTION_TABLE
    PRIMARY KEY CLUSTERED (qfn_exmptn_table_id),
    CONSTRAINT IDX_QFN_EXEMPTION_TABLE_01
    UNIQUE NONCLUSTERED (rules_group_id,qfn_exmptn_tbl_title)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_EXEMPTION_TABLE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_EXEMPTION_TABLE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_EXEMPTION_TABLE >>>'
go
ALTER TABLE dbo.QFN_EXEMPTION_TABLE
    ADD CONSTRAINT FK_EXMPTN_TAB_RULES_GRP
    FOREIGN KEY (rules_group_id)
    REFERENCES dbo.RULES_GROUP (rules_group_id)
go
ALTER TABLE dbo.QFN_EXEMPTION_ROW
    ADD CONSTRAINT FK_EXMPTN_ROW_EXMPTN_TAB
    FOREIGN KEY (qfn_exmptn_table_id)
    REFERENCES dbo.QFN_EXEMPTION_TABLE (qfn_exmptn_table_id)
go
GRANT REFERENCES ON dbo.QFN_EXEMPTION_TABLE TO eqa_user
go
GRANT SELECT ON dbo.QFN_EXEMPTION_TABLE TO eqa_user
go
GRANT SELECT ON dbo.QFN_EXEMPTION_TABLE TO read_only
go
GRANT SELECT ON dbo.QFN_EXEMPTION_TABLE TO rma_users
go
GRANT INSERT ON dbo.QFN_EXEMPTION_TABLE TO eqa_user
go
GRANT DELETE ON dbo.QFN_EXEMPTION_TABLE TO eqa_user
go
GRANT UPDATE ON dbo.QFN_EXEMPTION_TABLE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_EXEMPTION_TABLE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_EXEMPTION_TABLE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_EXEMPTION_TABLE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_EXEMPTION_TABLE TO eqa_user
go
CREATE TABLE dbo.QFN_EXEMPTION_TABLE_SUB_TYPE
(
    qfn_exmptn_tbl_subtype_code code_2  NOT NULL,
    qfn_exmptn_tbl_subtype_desc descr   NOT NULL,
    sortkey                     sortkey NOT NULL,
    CONSTRAINT PK_QFN_EXEMPTION_TABLE_SUB_TYP
    PRIMARY KEY CLUSTERED (qfn_exmptn_tbl_subtype_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_EXEMPTION_TABLE_SUB_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_EXEMPTION_TABLE_SUB_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_EXEMPTION_TABLE_SUB_TYPE >>>'
go
GRANT REFERENCES ON dbo.QFN_EXEMPTION_TABLE_SUB_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QFN_EXEMPTION_TABLE_SUB_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QFN_EXEMPTION_TABLE_SUB_TYPE TO read_only
go
GRANT SELECT ON dbo.QFN_EXEMPTION_TABLE_SUB_TYPE TO rma_users
go
GRANT INSERT ON dbo.QFN_EXEMPTION_TABLE_SUB_TYPE TO eqa_user
go
GRANT DELETE ON dbo.QFN_EXEMPTION_TABLE_SUB_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.QFN_EXEMPTION_TABLE_SUB_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_EXEMPTION_TABLE_SUB_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_EXEMPTION_TABLE_SUB_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_EXEMPTION_TABLE_SUB_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_EXEMPTION_TABLE_SUB_TYPE TO eqa_user
go
CREATE TABLE dbo.QFN_EXEMPTION_TABLE_TYPE
(
    qfn_exmptn_table_type_code  code_2  NOT NULL,
    qfn_exmptn_tbl_subtype_code code_2  NOT NULL,
    qfn_exmptn_table_type_desc  descr   NOT NULL,
    sortkey                     sortkey NOT NULL,
    CONSTRAINT PK_QFN_EXEMPTION_TABLE_TYPE
    PRIMARY KEY CLUSTERED (qfn_exmptn_table_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_EXEMPTION_TABLE_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_EXEMPTION_TABLE_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_EXEMPTION_TABLE_TYPE >>>'
go
ALTER TABLE dbo.QFN_EXEMPTION_TABLE_TYPE
    ADD CONSTRAINT FK_QFN_EXMPTN_TBL_TYPE_SUBTYPE
    FOREIGN KEY (qfn_exmptn_tbl_subtype_code)
    REFERENCES dbo.QFN_EXEMPTION_TABLE_SUB_TYPE (qfn_exmptn_tbl_subtype_code)
go
ALTER TABLE dbo.QFN_EXEMPTION_TABLE
    ADD CONSTRAINT FK_EXMPTN_TAB_EXMPTN_TYPE
    FOREIGN KEY (qfn_exmptn_tbl_type_code)
    REFERENCES dbo.QFN_EXEMPTION_TABLE_TYPE (qfn_exmptn_table_type_code)
go
GRANT REFERENCES ON dbo.QFN_EXEMPTION_TABLE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QFN_EXEMPTION_TABLE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QFN_EXEMPTION_TABLE_TYPE TO read_only
go
GRANT SELECT ON dbo.QFN_EXEMPTION_TABLE_TYPE TO rma_users
go
GRANT INSERT ON dbo.QFN_EXEMPTION_TABLE_TYPE TO eqa_user
go
GRANT DELETE ON dbo.QFN_EXEMPTION_TABLE_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.QFN_EXEMPTION_TABLE_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_EXEMPTION_TABLE_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_EXEMPTION_TABLE_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_EXEMPTION_TABLE_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_EXEMPTION_TABLE_TYPE TO eqa_user
go
CREATE TABLE dbo.QFN_GRADING_TYPE
(
    qfn_grading_type_code    code_2 NOT NULL,
    grading_system_code_desc descr  NULL,
    active_ind               yn     DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    CONSTRAINT PK_QFN_GRADING_TYPE
    PRIMARY KEY CLUSTERED (qfn_grading_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_GRADING_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_GRADING_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_GRADING_TYPE >>>'
go
GRANT REFERENCES ON dbo.QFN_GRADING_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QFN_GRADING_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QFN_GRADING_TYPE TO read_only
go
GRANT SELECT ON dbo.QFN_GRADING_TYPE TO rma_users
go
GRANT INSERT ON dbo.QFN_GRADING_TYPE TO eqa_user
go
GRANT DELETE ON dbo.QFN_GRADING_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.QFN_GRADING_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_GRADING_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_GRADING_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_GRADING_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_GRADING_TYPE TO eqa_user
go
CREATE TABLE dbo.QFN_ITEMS_CFN_MAP
(
    qfn_items_list_id OBJECT_ID NOT NULL,
    cfn_catg_id       OBJECT_ID NOT NULL,
    audit_tran_id     OBJECT_ID NOT NULL,
    ts                timestamp NOT NULL,
    CONSTRAINT PK_QFN_ITEMS_CFN_MAP
    PRIMARY KEY CLUSTERED (qfn_items_list_id,cfn_catg_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_ITEMS_CFN_MAP') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_ITEMS_CFN_MAP >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_ITEMS_CFN_MAP >>>'
go
ALTER TABLE dbo.QFN_ITEMS_CFN_MAP
    ADD CONSTRAINT FK_QFN_ITEMS_CFN_MAP_CFN_CATG
    FOREIGN KEY (cfn_catg_id)
    REFERENCES dbo.CFN_CATEGORY (cfn_catg_id)
go
GRANT REFERENCES ON dbo.QFN_ITEMS_CFN_MAP TO eqa_user
go
GRANT SELECT ON dbo.QFN_ITEMS_CFN_MAP TO eqa_user
go
GRANT SELECT ON dbo.QFN_ITEMS_CFN_MAP TO read_only
go
GRANT SELECT ON dbo.QFN_ITEMS_CFN_MAP TO rma_users
go
GRANT INSERT ON dbo.QFN_ITEMS_CFN_MAP TO eqa_user
go
GRANT DELETE ON dbo.QFN_ITEMS_CFN_MAP TO eqa_user
go
GRANT UPDATE ON dbo.QFN_ITEMS_CFN_MAP TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_ITEMS_CFN_MAP TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_ITEMS_CFN_MAP TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_ITEMS_CFN_MAP TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_ITEMS_CFN_MAP TO eqa_user
go
CREATE TABLE dbo.QFN_ITEMS_LIST
(
    qfn_items_list_id         OBJECT_ID    NOT NULL,
    qfn_items_list_name       varchar(255) NOT NULL,
    qfn_items_list_short_name varchar(6)   NOT NULL,
    audit_tran_id             OBJECT_ID    NOT NULL,
    rules_group_id            OBJECT_ID    NOT NULL,
    ts                        timestamp    NOT NULL,
    CONSTRAINT PK_QFN_ITEMS_LIST
    PRIMARY KEY CLUSTERED (qfn_items_list_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_ITEMS_LIST') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_ITEMS_LIST >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_ITEMS_LIST >>>'
go
ALTER TABLE dbo.QFN_ITEMS_LIST
    ADD CONSTRAINT FK_QFN_ITEMS_LIST_RULES_GROUP
    FOREIGN KEY (rules_group_id)
    REFERENCES dbo.RULES_GROUP (rules_group_id)
go
ALTER TABLE dbo.QFN_ITEMS_CFN_MAP
    ADD CONSTRAINT FK_QFN_ITEMS_CFN_MAP_QFN_ITEMS
    FOREIGN KEY (qfn_items_list_id)
    REFERENCES dbo.QFN_ITEMS_LIST (qfn_items_list_id)
go
GRANT REFERENCES ON dbo.QFN_ITEMS_LIST TO eqa_user
go
GRANT SELECT ON dbo.QFN_ITEMS_LIST TO eqa_user
go
GRANT SELECT ON dbo.QFN_ITEMS_LIST TO read_only
go
GRANT SELECT ON dbo.QFN_ITEMS_LIST TO rma_users
go
GRANT INSERT ON dbo.QFN_ITEMS_LIST TO eqa_user
go
GRANT DELETE ON dbo.QFN_ITEMS_LIST TO eqa_user
go
GRANT UPDATE ON dbo.QFN_ITEMS_LIST TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_ITEMS_LIST TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_ITEMS_LIST TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_ITEMS_LIST TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_ITEMS_LIST TO eqa_user
go
CREATE TABLE dbo.QFN_ITEMS_STD_VERSION_MAP
(
    qfn_items_list_id OBJECT_ID NOT NULL,
    std_version_id    OBJECT_ID NOT NULL,
    audit_tran_id     OBJECT_ID NOT NULL,
    ts                timestamp NOT NULL,
    CONSTRAINT PK_QFN_ITEMS_STD_VERSION_MAP
    PRIMARY KEY CLUSTERED (qfn_items_list_id,std_version_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_ITEMS_STD_VERSION_MAP') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_ITEMS_STD_VERSION_MAP >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_ITEMS_STD_VERSION_MAP >>>'
go
ALTER TABLE dbo.QFN_ITEMS_STD_VERSION_MAP
    ADD CONSTRAINT FK_QFN_ITEMS_STD_MAP_QFN_ITEMS
    FOREIGN KEY (qfn_items_list_id)
    REFERENCES dbo.QFN_ITEMS_LIST (qfn_items_list_id)
go
ALTER TABLE dbo.QFN_ITEMS_STD_VERSION_MAP
    ADD CONSTRAINT FK_QFN_ITEMS_STD_MAP_STD_VER
    FOREIGN KEY (std_version_id)
    REFERENCES dbo.STD_VERSION (std_version_id)
go
GRANT REFERENCES ON dbo.QFN_ITEMS_STD_VERSION_MAP TO eqa_user
go
GRANT SELECT ON dbo.QFN_ITEMS_STD_VERSION_MAP TO eqa_user
go
GRANT SELECT ON dbo.QFN_ITEMS_STD_VERSION_MAP TO read_only
go
GRANT SELECT ON dbo.QFN_ITEMS_STD_VERSION_MAP TO rma_users
go
GRANT INSERT ON dbo.QFN_ITEMS_STD_VERSION_MAP TO eqa_user
go
GRANT DELETE ON dbo.QFN_ITEMS_STD_VERSION_MAP TO eqa_user
go
GRANT UPDATE ON dbo.QFN_ITEMS_STD_VERSION_MAP TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_ITEMS_STD_VERSION_MAP TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_ITEMS_STD_VERSION_MAP TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_ITEMS_STD_VERSION_MAP TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_ITEMS_STD_VERSION_MAP TO eqa_user
go
CREATE TABLE dbo.QFN_MINOR_VERSION
(
    qfn_minor_version_id      OBJECT_ID     NOT NULL,
    qfn_version_id            numeric(12,0) NOT NULL,
    primary_language_code     varchar(20)   NOT NULL,
    qfn_grading_type_code     char(2)       NULL,
    join_word_code            char(2)       NULL,
    short_title               varchar(255)  NULL,
    short_title_umlauts       descr         NULL,
    title                     varchar(1000) NULL,
    title_umlauts             varchar(1000) NULL,
    purpose                   text          NULL     OFF ROW,
    prerequisite              text          NULL     OFF ROW,
    adopt_exclusions          smallint      NULL,
    content                   text          NULL     OFF ROW,
    outcome                   text          NULL     OFF ROW,
    legacy_doc_ref            varchar(255)  NULL,
    eval_checklist_complete   smallint      NULL,
    compliance_check_complete smallint      NULL,
    credits_range_from        numeric(3,0)  NULL,
    credits_range_to          numeric(3,0)  NULL,
    endorsed_date             datetime      NULL,
    title_cfn_alternative     varchar(100)  NULL,
    title_cfn_alt_umlauts     descr_short   NULL,
    title_descriptor          descr_short   NULL,
    title_descriptor_umlauts  descr_short   NULL,
    title_show_level          smallint      NOT NULL,
    qual_check_enabled        smallint      NOT NULL,
    print_ssb_logo            yn_ind        NOT NULL,
    print_provider_logo       yn_ind        NOT NULL,
    alternate_logo_filename   varchar(255)  NULL,
    audit_tran_id             numeric(12,0) NOT NULL,
    ts                        timestamp     NOT NULL,
    level_range_from          numeric(2,0)  NULL,
    level_range_to            numeric(2,0)  NULL,
    content_type_code         code_2        NOT NULL,
    current_rules_group_id    OBJECT_ID     NULL,
    special_notes             text          NULL     OFF ROW,
    logo_notes                varchar(500)  NULL,
    education_pathway         TEXT_STRING   NULL,
    employment_pathway        TEXT_STRING   NULL,
    title_macron              UNI_DESCR     NULL,
    mmeqa_approved_ind        ny_ind        NOT NULL,
    CONSTRAINT PK_QFN_MINOR_VERSION
    PRIMARY KEY CLUSTERED (qfn_minor_version_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_MINOR_VERSION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_MINOR_VERSION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_MINOR_VERSION >>>'
go
ALTER TABLE dbo.QFN_MINOR_VERSION
    ADD CONSTRAINT FK_QFN_MIN_VER_JOIN_WORDS
    FOREIGN KEY (join_word_code)
    REFERENCES dbo.JOINING_WORDS (join_word_code)
go
ALTER TABLE dbo.QFN_MINOR_VERSION
    ADD CONSTRAINT FK_QFN_MIN_VER_PRI_LAN_CODE
    FOREIGN KEY (primary_language_code)
    REFERENCES dbo.LANGUAGE (language_code)
go
ALTER TABLE dbo.QFN_MINOR_VERSION
    ADD CONSTRAINT FK_QFN_MIN_VER_QFN_GRAD
    FOREIGN KEY (qfn_grading_type_code)
    REFERENCES dbo.QFN_GRADING_TYPE (qfn_grading_type_code)
go
ALTER TABLE dbo.QFN_MINOR_VERSION
    ADD CONSTRAINT FK_QFN_MINOR_VER_RULES_GROUP
    FOREIGN KEY (current_rules_group_id)
    REFERENCES dbo.RULES_GROUP (rules_group_id)
go
ALTER TABLE dbo.QFN_MINOR_VERSION
    ADD CONSTRAINT FK_QFN_MINO_QFN_VERS
    FOREIGN KEY (qfn_version_id)
    REFERENCES dbo.QFN_VERSION (qfn_version_id)
go
ALTER TABLE dbo.QFN_MINOR_VERSION
    ADD CONSTRAINT FK_QFN_MIN_VER_CONTENT_TYPE
    FOREIGN KEY (content_type_code)
    REFERENCES dbo.CONTENT_TYPE_CODE (content_type_code)
go
GRANT REFERENCES ON dbo.QFN_MINOR_VERSION TO eqa_user
go
GRANT SELECT ON dbo.QFN_MINOR_VERSION TO eqa_user
go
GRANT SELECT ON dbo.QFN_MINOR_VERSION TO read_only
go
GRANT SELECT ON dbo.QFN_MINOR_VERSION TO rma_users
go
GRANT INSERT ON dbo.QFN_MINOR_VERSION TO sqr_eqa_user
go
GRANT INSERT ON dbo.QFN_MINOR_VERSION TO eve_user
go
GRANT INSERT ON dbo.QFN_MINOR_VERSION TO eqa_user
go
GRANT INSERT ON dbo.QFN_MINOR_VERSION TO sqr_eqa_sync_user
go
GRANT DELETE ON dbo.QFN_MINOR_VERSION TO eve_user
go
GRANT DELETE ON dbo.QFN_MINOR_VERSION TO sqr_eqa_user
go
GRANT DELETE ON dbo.QFN_MINOR_VERSION TO eqa_user
go
GRANT UPDATE ON dbo.QFN_MINOR_VERSION TO eve_user
go
GRANT UPDATE ON dbo.QFN_MINOR_VERSION TO sqr_eqa_user
go
GRANT UPDATE ON dbo.QFN_MINOR_VERSION TO eqa_user
go
GRANT UPDATE ON dbo.QFN_MINOR_VERSION TO sqr_eqa_sync_user
go
GRANT DELETE STATISTICS ON dbo.QFN_MINOR_VERSION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_MINOR_VERSION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_MINOR_VERSION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_MINOR_VERSION TO eqa_user
go
CREATE TABLE dbo.QFN_ORG_ROLE_TYPE
(
    qfn_org_role_type      char(3) NOT NULL,
    qfn_org_role_type_desc descr   NOT NULL,
    active_ind             yn      DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    CONSTRAINT PK_QFN_ORG_ROLE_TYPE
    PRIMARY KEY CLUSTERED (qfn_org_role_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_ORG_ROLE_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_ORG_ROLE_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_ORG_ROLE_TYPE >>>'
go
GRANT REFERENCES ON dbo.QFN_ORG_ROLE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QFN_ORG_ROLE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QFN_ORG_ROLE_TYPE TO read_only
go
GRANT SELECT ON dbo.QFN_ORG_ROLE_TYPE TO rma_users
go
GRANT INSERT ON dbo.QFN_ORG_ROLE_TYPE TO eqa_user
go
GRANT DELETE ON dbo.QFN_ORG_ROLE_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.QFN_ORG_ROLE_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_ORG_ROLE_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_ORG_ROLE_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_ORG_ROLE_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_ORG_ROLE_TYPE TO eqa_user
go
CREATE TABLE dbo.latency_test
(
    latency_id            numeric(18,0) IDENTITY,
    latency_data          varchar(255)  NOT NULL,
    primary_update_date   datetime      NOT NULL,
    replicate_update_date datetime      NULL,
    trip_latency          int           NULL,
    CONSTRAINT pky_latency_test
    PRIMARY KEY CLUSTERED (latency_id)
)
LOCK DATAROWS
WITH IDENTITY_GAP=10
go
IF OBJECT_ID('dbo.latency_test') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.latency_test >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.latency_test >>>'
go
GRANT REFERENCES ON dbo.latency_test TO eqa_user
go
GRANT SELECT ON dbo.latency_test TO eqa_user
go
GRANT SELECT ON dbo.latency_test TO read_only
go
GRANT SELECT ON dbo.latency_test TO rma_users
go
GRANT INSERT ON dbo.latency_test TO eqa_user
go
GRANT DELETE ON dbo.latency_test TO eqa_user
go
GRANT UPDATE ON dbo.latency_test TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.latency_test TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.latency_test TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.latency_test TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.latency_test TO eqa_user
go
CREATE TABLE dbo.QFN_ORGANISATION_ROLE
(
    qfn_organisation_role_id OBJECT_ID    NOT NULL,
    qfn_id                   OBJECT_ID    NOT NULL,
    perorg_role_id           OBJECT_ID    NOT NULL,
    qfn_org_role_type        char(3)      NOT NULL,
    course_url               varchar(255) NULL,
    withdrawn_date           datetime     NULL,
    distance_ind             ny_ind       NOT NULL,
    active_ind               yn_ind       NOT NULL,
    awarded_by_ind           ny_ind       NOT NULL,
    audit_tran_id            OBJECT_ID    NOT NULL,
    ts                       timestamp    NOT NULL,
    CONSTRAINT PK_QFN_ORGANISATION_ROLE
    PRIMARY KEY CLUSTERED (qfn_organisation_role_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_ORGANISATION_ROLE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_ORGANISATION_ROLE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_ORGANISATION_ROLE >>>'
go
ALTER TABLE dbo.QFN_ORGANISATION_ROLE
    ADD CONSTRAINT FK_QFN_ORG_ROLE_PER_ROLE
    FOREIGN KEY (perorg_role_id)
    REFERENCES dbo.PERORG_ROLE (perorg_role_id)
go
ALTER TABLE dbo.QFN_ORGANISATION_ROLE
    ADD CONSTRAINT FK_QFN_ORG_ROLE_QFN
    FOREIGN KEY (qfn_id)
    REFERENCES dbo.QFN (qfn_id)
go
ALTER TABLE dbo.QFN_ORGANISATION_ROLE
    ADD CONSTRAINT FK_QFN_ORG_ROLE_ROLE_TYPE
    FOREIGN KEY (qfn_org_role_type)
    REFERENCES dbo.QFN_ORG_ROLE_TYPE (qfn_org_role_type)
go
GRANT REFERENCES ON dbo.QFN_ORGANISATION_ROLE TO eqa_user
go
GRANT SELECT ON dbo.QFN_ORGANISATION_ROLE TO eqa_user
go
GRANT SELECT ON dbo.QFN_ORGANISATION_ROLE TO read_only
go
GRANT SELECT ON dbo.QFN_ORGANISATION_ROLE TO rma_users
go
GRANT INSERT ON dbo.QFN_ORGANISATION_ROLE TO sqr_eqa_user
go
GRANT INSERT ON dbo.QFN_ORGANISATION_ROLE TO eve_user
go
GRANT INSERT ON dbo.QFN_ORGANISATION_ROLE TO eqa_user
go
GRANT INSERT ON dbo.QFN_ORGANISATION_ROLE TO sqr_eqa_sync_user
go
GRANT DELETE ON dbo.QFN_ORGANISATION_ROLE TO sqr_eqa_user
go
GRANT DELETE ON dbo.QFN_ORGANISATION_ROLE TO eve_user
go
GRANT DELETE ON dbo.QFN_ORGANISATION_ROLE TO eqa_user
go
GRANT UPDATE ON dbo.QFN_ORGANISATION_ROLE TO sqr_eqa_user
go
GRANT UPDATE ON dbo.QFN_ORGANISATION_ROLE TO eve_user
go
GRANT UPDATE ON dbo.QFN_ORGANISATION_ROLE TO eqa_user
go
GRANT UPDATE ON dbo.QFN_ORGANISATION_ROLE TO sqr_eqa_sync_user
go
GRANT DELETE STATISTICS ON dbo.QFN_ORGANISATION_ROLE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_ORGANISATION_ROLE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_ORGANISATION_ROLE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_ORGANISATION_ROLE TO eqa_user
go
CREATE TABLE dbo.QFN_PLUGIN_RULE_TYPE
(
    qfn_plugin_rule_type_code code_2 NOT NULL,
    qfn_plugin_rule_type_desc descr  NOT NULL,
    class_name                name   NOT NULL,
    is_plugin_only            yn     DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    CONSTRAINT PK_QFN_PLUGIN_RULE_TYPE
    PRIMARY KEY CLUSTERED (qfn_plugin_rule_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_PLUGIN_RULE_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_PLUGIN_RULE_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_PLUGIN_RULE_TYPE >>>'
go
GRANT REFERENCES ON dbo.QFN_PLUGIN_RULE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QFN_PLUGIN_RULE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QFN_PLUGIN_RULE_TYPE TO read_only
go
GRANT SELECT ON dbo.QFN_PLUGIN_RULE_TYPE TO rma_users
go
GRANT INSERT ON dbo.QFN_PLUGIN_RULE_TYPE TO eqa_user
go
GRANT DELETE ON dbo.QFN_PLUGIN_RULE_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.QFN_PLUGIN_RULE_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_PLUGIN_RULE_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_PLUGIN_RULE_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_PLUGIN_RULE_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_PLUGIN_RULE_TYPE TO eqa_user
go
CREATE TABLE dbo.QFN_PREQ_EXEMPTION_STRAND
(
    qfn_preq_exemption_strand_id OBJECT_ID NOT NULL,
    qfn_exmptn_item_id           OBJECT_ID NOT NULL,
    section_type_code            code_2    NOT NULL,
    strand_name_with_umlauts     name      NOT NULL,
    audit_tran_id                OBJECT_ID NOT NULL,
    CONSTRAINT PK_QFN_PREQ_EXEMPTION_STRAND
    PRIMARY KEY CLUSTERED (qfn_preq_exemption_strand_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_PREQ_EXEMPTION_STRAND') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_PREQ_EXEMPTION_STRAND >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_PREQ_EXEMPTION_STRAND >>>'
go
ALTER TABLE dbo.QFN_PREQ_EXEMPTION_STRAND
    ADD CONSTRAINT FK_PREQ_EXMT_STRAND_EXMT_ITEM
    FOREIGN KEY (qfn_exmptn_item_id)
    REFERENCES dbo.QFN_EXEMPTION_ITEM (qfn_exmptn_item_id)
go
GRANT REFERENCES ON dbo.QFN_PREQ_EXEMPTION_STRAND TO eqa_user
go
GRANT SELECT ON dbo.QFN_PREQ_EXEMPTION_STRAND TO eqa_user
go
GRANT SELECT ON dbo.QFN_PREQ_EXEMPTION_STRAND TO read_only
go
GRANT SELECT ON dbo.QFN_PREQ_EXEMPTION_STRAND TO rma_users
go
GRANT INSERT ON dbo.QFN_PREQ_EXEMPTION_STRAND TO eqa_user
go
GRANT DELETE ON dbo.QFN_PREQ_EXEMPTION_STRAND TO eqa_user
go
GRANT UPDATE ON dbo.QFN_PREQ_EXEMPTION_STRAND TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_PREQ_EXEMPTION_STRAND TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_PREQ_EXEMPTION_STRAND TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_PREQ_EXEMPTION_STRAND TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_PREQ_EXEMPTION_STRAND TO eqa_user
go
CREATE TABLE dbo.QFN_PREREQUISITE
(
    prerequisite_id OBJECT_ID NOT NULL,
    qfn_section_id  OBJECT_ID NOT NULL,
    qfn_version_id  OBJECT_ID NOT NULL,
    audit_tran_id   OBJECT_ID NOT NULL,
    ts              timestamp NOT NULL,
    CONSTRAINT PK_QFN_PREREQUISITE
    PRIMARY KEY CLUSTERED (prerequisite_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_PREREQUISITE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_PREREQUISITE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_PREREQUISITE >>>'
go
GRANT REFERENCES ON dbo.QFN_PREREQUISITE TO eqa_user
go
GRANT SELECT ON dbo.QFN_PREREQUISITE TO eqa_user
go
GRANT SELECT ON dbo.QFN_PREREQUISITE TO read_only
go
GRANT SELECT ON dbo.QFN_PREREQUISITE TO rma_users
go
GRANT INSERT ON dbo.QFN_PREREQUISITE TO eqa_user
go
GRANT DELETE ON dbo.QFN_PREREQUISITE TO eqa_user
go
GRANT UPDATE ON dbo.QFN_PREREQUISITE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_PREREQUISITE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_PREREQUISITE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_PREREQUISITE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_PREREQUISITE TO eqa_user
go
CREATE TABLE dbo.QFN_RULE
(
    qfn_rule_id            OBJECT_ID  NOT NULL,
    from_elsewhere         yn         DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    with_partials          yn         DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    seq_number             int        NOT NULL,
    min_sub_rules          int        NULL,
    qfn_rule_type          code_2     NOT NULL,
    qfn_rule_name          descr      NULL,
    anything_allowed       yn         DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    qfn_qfn_rule_id        OBJECT_ID  NULL,
    audit_tran_id          OBJECT_ID  NOT NULL,
    ts                     timestamp  NOT NULL,
    balance_rule           yn         DEFAULT 0                                                         NOT NULL,
    non_std_params         text       NULL     OFF ROW,
    qfn_rule_short_name    varchar(6) NULL,
    qfn_items_list_id      OBJECT_ID  NULL,
    endorsement_version_id OBJECT_ID  NULL,
    CONSTRAINT PK_QFN_RULE
    PRIMARY KEY CLUSTERED (qfn_rule_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_RULE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_RULE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_RULE >>>'
go
ALTER TABLE dbo.QFN_RULE
    ADD CONSTRAINT FK_QFN_RULE_QFN_ITEM_LIST
    FOREIGN KEY (qfn_items_list_id)
    REFERENCES dbo.QFN_ITEMS_LIST (qfn_items_list_id)
go
ALTER TABLE dbo.QFN_RULE
    ADD CONSTRAINT FK_QFN_RULE_ENDORSEMNT_VERSION
    FOREIGN KEY (endorsement_version_id)
    REFERENCES dbo.ENDORSEMENT_VERSION (endorsement_version_id)
go
ALTER TABLE dbo.QFN_RULE
    ADD CONSTRAINT FK_QFN_RULE_QFN_RULE
    FOREIGN KEY (qfn_qfn_rule_id)
    REFERENCES dbo.QFN_RULE (qfn_rule_id)
go
GRANT REFERENCES ON dbo.QFN_RULE TO eqa_user
go
GRANT SELECT ON dbo.QFN_RULE TO eqa_user
go
GRANT SELECT ON dbo.QFN_RULE TO read_only
go
GRANT SELECT ON dbo.QFN_RULE TO rma_users
go
GRANT INSERT ON dbo.QFN_RULE TO eqa_user
go
GRANT DELETE ON dbo.QFN_RULE TO eqa_user
go
GRANT UPDATE ON dbo.QFN_RULE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_RULE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_RULE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_RULE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_RULE TO eqa_user
go
CREATE TABLE dbo.QFN_RULE_CATEGORY
(
    qfn_rule_id   OBJECT_ID NOT NULL,
    cfn_catg_id   OBJECT_ID NOT NULL,
    audit_tran_id OBJECT_ID NOT NULL,
    ts            timestamp NULL,
    CONSTRAINT PK_QFN_RULE_CATEGORY
    PRIMARY KEY CLUSTERED (qfn_rule_id,cfn_catg_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_RULE_CATEGORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_RULE_CATEGORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_RULE_CATEGORY >>>'
go
ALTER TABLE dbo.QFN_RULE_CATEGORY
    ADD CONSTRAINT FK_QFN_RULE_CTG_QFN_RULE
    FOREIGN KEY (qfn_rule_id)
    REFERENCES dbo.QFN_RULE (qfn_rule_id)
go
ALTER TABLE dbo.QFN_RULE_CATEGORY
    ADD CONSTRAINT FK_QFN_RULE_CTG_CFN_CTG
    FOREIGN KEY (cfn_catg_id)
    REFERENCES dbo.CFN_CATEGORY (cfn_catg_id)
go
GRANT REFERENCES ON dbo.QFN_RULE_CATEGORY TO eqa_user
go
GRANT SELECT ON dbo.QFN_RULE_CATEGORY TO eqa_user
go
GRANT SELECT ON dbo.QFN_RULE_CATEGORY TO read_only
go
GRANT SELECT ON dbo.QFN_RULE_CATEGORY TO rma_users
go
GRANT INSERT ON dbo.QFN_RULE_CATEGORY TO eqa_user
go
GRANT DELETE ON dbo.QFN_RULE_CATEGORY TO eqa_user
go
GRANT UPDATE ON dbo.QFN_RULE_CATEGORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_RULE_CATEGORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_RULE_CATEGORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_RULE_CATEGORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_RULE_CATEGORY TO eqa_user
go
CREATE TABLE dbo.QFN_RULE_STD_VER
(
    qfn_rule_id    OBJECT_ID NOT NULL,
    std_version_id OBJECT_ID NOT NULL,
    audit_tran_id  OBJECT_ID NOT NULL,
    ts             timestamp NULL,
    CONSTRAINT PK_QFN_RULE_STD_VER
    PRIMARY KEY CLUSTERED (qfn_rule_id,std_version_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_RULE_STD_VER') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_RULE_STD_VER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_RULE_STD_VER >>>'
go
ALTER TABLE dbo.QFN_RULE_STD_VER
    ADD CONSTRAINT FK_RULE_STD_VER_REF_RULE
    FOREIGN KEY (qfn_rule_id)
    REFERENCES dbo.QFN_RULE (qfn_rule_id)
go
GRANT REFERENCES ON dbo.QFN_RULE_STD_VER TO eqa_user
go
GRANT SELECT ON dbo.QFN_RULE_STD_VER TO eqa_user
go
GRANT SELECT ON dbo.QFN_RULE_STD_VER TO read_only
go
GRANT SELECT ON dbo.QFN_RULE_STD_VER TO rma_users
go
GRANT INSERT ON dbo.QFN_RULE_STD_VER TO eqa_user
go
GRANT DELETE ON dbo.QFN_RULE_STD_VER TO eqa_user
go
GRANT UPDATE ON dbo.QFN_RULE_STD_VER TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_RULE_STD_VER TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_RULE_STD_VER TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_RULE_STD_VER TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_RULE_STD_VER TO eqa_user
go
CREATE TABLE dbo.QFN_RULE_TYPE
(
    qfn_rule_type       code_2 NOT NULL,
    qfn_rule_type_descr descr  NULL,
    CONSTRAINT PK_QFN_RULE_TYPE
    PRIMARY KEY CLUSTERED (qfn_rule_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_RULE_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_RULE_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_RULE_TYPE >>>'
go
ALTER TABLE dbo.QFN_RULE
    ADD CONSTRAINT FK_QFN_RULE_QFN_RULE_TYPE
    FOREIGN KEY (qfn_rule_type)
    REFERENCES dbo.QFN_RULE_TYPE (qfn_rule_type)
go
GRANT REFERENCES ON dbo.QFN_RULE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QFN_RULE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QFN_RULE_TYPE TO read_only
go
GRANT SELECT ON dbo.QFN_RULE_TYPE TO rma_users
go
GRANT INSERT ON dbo.QFN_RULE_TYPE TO eqa_user
go
GRANT DELETE ON dbo.QFN_RULE_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.QFN_RULE_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_RULE_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_RULE_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_RULE_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_RULE_TYPE TO eqa_user
go
CREATE TABLE dbo.QFN_SCENARIO
(
    ts                    timestamp    NOT NULL,
    audit_tran_id         OBJECT_ID    NOT NULL,
    qfn_scenario_id       OBJECT_ID    NOT NULL,
    qfn_version_id        OBJECT_ID    NULL,
    qfn_scenario_number   numeric(8,0) NOT NULL,
    qfn_scenario_name     varchar(30)  NOT NULL,
    num_elective_std      numeric(2,0) NULL,
    num_optional_std      numeric(2,0) NULL,
    objective             varchar(255) NOT NULL,
    qfn_check_result_type code_2       NOT NULL,
    CONSTRAINT PK_QFN_SCENARIO
    PRIMARY KEY CLUSTERED (qfn_scenario_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_SCENARIO') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_SCENARIO >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_SCENARIO >>>'
go
ALTER TABLE dbo.QFN_SCENARIO
    ADD CONSTRAINT FK_QFN_CHECK_RESULT
    FOREIGN KEY (qfn_check_result_type)
    REFERENCES dbo.QFN_CHECK_RESULT_TYPE (qfn_check_result_type)
go
GRANT REFERENCES ON dbo.QFN_SCENARIO TO eqa_user
go
GRANT SELECT ON dbo.QFN_SCENARIO TO eqa_user
go
GRANT SELECT ON dbo.QFN_SCENARIO TO read_only
go
GRANT SELECT ON dbo.QFN_SCENARIO TO rma_users
go
GRANT INSERT ON dbo.QFN_SCENARIO TO eqa_user
go
GRANT DELETE ON dbo.QFN_SCENARIO TO eqa_user
go
GRANT UPDATE ON dbo.QFN_SCENARIO TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_SCENARIO TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_SCENARIO TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_SCENARIO TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_SCENARIO TO eqa_user
go
CREATE TABLE dbo.QFN_SCENARIO_COMP_STRAND
(
    qfn_scenario_comp_strand_id OBJECT_ID NOT NULL,
    qfn_scenario_qfn_comp_id    OBJECT_ID NOT NULL,
    qfn_section_id              OBJECT_ID NOT NULL,
    audit_tran_id               OBJECT_ID NOT NULL,
    ts                          timestamp NOT NULL,
    CONSTRAINT PK_QFN_SCENARIO_COMP_STRAND
    PRIMARY KEY CLUSTERED (qfn_scenario_comp_strand_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_SCENARIO_COMP_STRAND') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_SCENARIO_COMP_STRAND >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_SCENARIO_COMP_STRAND >>>'
go
GRANT REFERENCES ON dbo.QFN_SCENARIO_COMP_STRAND TO eqa_user
go
GRANT SELECT ON dbo.QFN_SCENARIO_COMP_STRAND TO eqa_user
go
GRANT SELECT ON dbo.QFN_SCENARIO_COMP_STRAND TO read_only
go
GRANT SELECT ON dbo.QFN_SCENARIO_COMP_STRAND TO rma_users
go
GRANT INSERT ON dbo.QFN_SCENARIO_COMP_STRAND TO eqa_user
go
GRANT DELETE ON dbo.QFN_SCENARIO_COMP_STRAND TO eqa_user
go
GRANT UPDATE ON dbo.QFN_SCENARIO_COMP_STRAND TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_SCENARIO_COMP_STRAND TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_SCENARIO_COMP_STRAND TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_SCENARIO_COMP_STRAND TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_SCENARIO_COMP_STRAND TO eqa_user
go
CREATE TABLE dbo.QFN_SCENARIO_QFN_COMPONENT
(
    qfn_scenario_qfn_comp_id OBJECT_ID NOT NULL,
    audit_tran_id            OBJECT_ID NOT NULL,
    qfn_scenario_id          OBJECT_ID NOT NULL,
    qfn_version_id           OBJECT_ID NOT NULL,
    seq_number               int       NOT NULL,
    qfn_awarded_date         datetime  NULL,
    ts                       timestamp NOT NULL,
    CONSTRAINT PK_QFN_SCENARIO_QFN_COMPONENT
    PRIMARY KEY CLUSTERED (qfn_scenario_qfn_comp_id),
    CONSTRAINT QFN_SCENARIO_QFN_UNIQ_SEQ
    UNIQUE NONCLUSTERED (qfn_scenario_id,seq_number)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_SCENARIO_QFN_COMPONENT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_SCENARIO_QFN_COMPONENT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_SCENARIO_QFN_COMPONENT >>>'
go
ALTER TABLE dbo.QFN_SCENARIO_QFN_COMPONENT
    ADD CONSTRAINT FK_QFN_SCEN_COMP_QFN_SCEN
    FOREIGN KEY (qfn_scenario_id)
    REFERENCES dbo.QFN_SCENARIO (qfn_scenario_id)
go
ALTER TABLE dbo.QFN_SCENARIO_COMP_STRAND
    ADD CONSTRAINT FK_QFN_SCN_CMP_STR_QFN_SCN_CMP
    FOREIGN KEY (qfn_scenario_qfn_comp_id)
    REFERENCES dbo.QFN_SCENARIO_QFN_COMPONENT (qfn_scenario_qfn_comp_id)
go
GRANT REFERENCES ON dbo.QFN_SCENARIO_QFN_COMPONENT TO eqa_user
go
GRANT SELECT ON dbo.QFN_SCENARIO_QFN_COMPONENT TO eqa_user
go
GRANT SELECT ON dbo.QFN_SCENARIO_QFN_COMPONENT TO read_only
go
GRANT SELECT ON dbo.QFN_SCENARIO_QFN_COMPONENT TO rma_users
go
GRANT INSERT ON dbo.QFN_SCENARIO_QFN_COMPONENT TO eqa_user
go
GRANT DELETE ON dbo.QFN_SCENARIO_QFN_COMPONENT TO eqa_user
go
GRANT UPDATE ON dbo.QFN_SCENARIO_QFN_COMPONENT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_SCENARIO_QFN_COMPONENT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_SCENARIO_QFN_COMPONENT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_SCENARIO_QFN_COMPONENT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_SCENARIO_QFN_COMPONENT TO eqa_user
go
CREATE TABLE dbo.QFN_SCENARIO_STD_COMPONENT
(
    qfn_scenario_std_comp_id OBJECT_ID  NOT NULL,
    qfn_scenario_id          OBJECT_ID  NOT NULL,
    std_version_id           OBJECT_ID  NOT NULL,
    seq_number               int        NOT NULL,
    audit_tran_id            OBJECT_ID  NOT NULL,
    std_awarded_date         datetime   NULL,
    context_code             char(3)    NULL,
    result_code              varchar(5) NULL,
    ts                       timestamp  NOT NULL,
    CONSTRAINT PK_QFN_SCENARIO_STD_COMPONENT
    PRIMARY KEY CLUSTERED (qfn_scenario_std_comp_id),
    CONSTRAINT QFN_SCENARIO_STD_UNIQ_SEQ
    UNIQUE NONCLUSTERED (qfn_scenario_id,seq_number)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_SCENARIO_STD_COMPONENT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_SCENARIO_STD_COMPONENT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_SCENARIO_STD_COMPONENT >>>'
go
ALTER TABLE dbo.QFN_SCENARIO_STD_COMPONENT
    ADD CONSTRAINT FK_QFN_SCEN_COMP_STD_SCEN
    FOREIGN KEY (qfn_scenario_id)
    REFERENCES dbo.QFN_SCENARIO (qfn_scenario_id)
go
ALTER TABLE dbo.QFN_SCENARIO_STD_COMPONENT
    ADD CONSTRAINT FK_COMPONENT_CONTEXT_CODE
    FOREIGN KEY (context_code)
    REFERENCES dbo.CONTEXT_CODE (context_code)
go
GRANT REFERENCES ON dbo.QFN_SCENARIO_STD_COMPONENT TO eqa_user
go
GRANT SELECT ON dbo.QFN_SCENARIO_STD_COMPONENT TO eqa_user
go
GRANT SELECT ON dbo.QFN_SCENARIO_STD_COMPONENT TO read_only
go
GRANT SELECT ON dbo.QFN_SCENARIO_STD_COMPONENT TO rma_users
go
GRANT INSERT ON dbo.QFN_SCENARIO_STD_COMPONENT TO eqa_user
go
GRANT DELETE ON dbo.QFN_SCENARIO_STD_COMPONENT TO eqa_user
go
GRANT UPDATE ON dbo.QFN_SCENARIO_STD_COMPONENT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_SCENARIO_STD_COMPONENT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_SCENARIO_STD_COMPONENT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_SCENARIO_STD_COMPONENT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_SCENARIO_STD_COMPONENT TO eqa_user
go
CREATE TABLE dbo.QFN_SCENARIO_STRAND
(
    ts                     timestamp NOT NULL,
    audit_tran_id          OBJECT_ID NOT NULL,
    qfn_scenario_strand_id OBJECT_ID NOT NULL,
    qfn_scenario_id        OBJECT_ID NOT NULL,
    qfn_section_id         OBJECT_ID NOT NULL,
    CONSTRAINT PK_QFN_SCENARIO_STRAND
    PRIMARY KEY CLUSTERED (qfn_scenario_strand_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_SCENARIO_STRAND') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_SCENARIO_STRAND >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_SCENARIO_STRAND >>>'
go
ALTER TABLE dbo.QFN_SCENARIO_STRAND
    ADD CONSTRAINT FK_QFN_SCENARIO_STRAND_ID
    FOREIGN KEY (qfn_scenario_id)
    REFERENCES dbo.QFN_SCENARIO (qfn_scenario_id)
go
GRANT REFERENCES ON dbo.QFN_SCENARIO_STRAND TO eqa_user
go
GRANT SELECT ON dbo.QFN_SCENARIO_STRAND TO eqa_user
go
GRANT SELECT ON dbo.QFN_SCENARIO_STRAND TO read_only
go
GRANT SELECT ON dbo.QFN_SCENARIO_STRAND TO rma_users
go
GRANT INSERT ON dbo.QFN_SCENARIO_STRAND TO eqa_user
go
GRANT DELETE ON dbo.QFN_SCENARIO_STRAND TO eqa_user
go
GRANT UPDATE ON dbo.QFN_SCENARIO_STRAND TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_SCENARIO_STRAND TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_SCENARIO_STRAND TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_SCENARIO_STRAND TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_SCENARIO_STRAND TO eqa_user
go
CREATE TABLE dbo.QFN_SECTION
(
    qfn_section_id         OBJECT_ID  NOT NULL,
    rules_group_id         OBJECT_ID  NOT NULL,
    qfn_section_type_code  code_2     NOT NULL,
    section_title          name       NULL,
    section_title_umlauts  name       NULL,
    section_short_title    varchar(6) NULL,
    strand_number          OBJECT_ID  NOT NULL,
    external_strand_number OBJECT_ID  NULL,
    credit_range_from      number_3   NULL,
    credit_range_to        number_3   NULL,
    qfn_rule_id            OBJECT_ID  NULL,
    level_code             code_2     NULL,
    audit_tran_id          OBJECT_ID  NOT NULL,
    ts                     timestamp  NOT NULL,
    CONSTRAINT PK_QFN_SECTION
    PRIMARY KEY CLUSTERED (qfn_section_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_SECTION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_SECTION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_SECTION >>>'
go
ALTER TABLE dbo.QFN_SECTION
    ADD CONSTRAINT FK_QFN_SECT_ROOT_RULE
    FOREIGN KEY (qfn_rule_id)
    REFERENCES dbo.QFN_RULE (qfn_rule_id)
go
ALTER TABLE dbo.QFN_SECTION
    ADD CONSTRAINT FK_QFN_SECT_LEVEL
    FOREIGN KEY (level_code)
    REFERENCES dbo.LVL (level_code)
go
ALTER TABLE dbo.QFN_PREREQUISITE
    ADD CONSTRAINT FK_PREREQUISITE_SECTION
    FOREIGN KEY (qfn_section_id)
    REFERENCES dbo.QFN_SECTION (qfn_section_id)
go
ALTER TABLE dbo.QFN_SCENARIO_COMP_STRAND
    ADD CONSTRAINT FK_QFN_SCN_CMP_STR_QFN_SECT
    FOREIGN KEY (qfn_section_id)
    REFERENCES dbo.QFN_SECTION (qfn_section_id)
go
ALTER TABLE dbo.QFN_SCENARIO_STRAND
    ADD CONSTRAINT FK_QFN_SECTION_ID
    FOREIGN KEY (qfn_section_id)
    REFERENCES dbo.QFN_SECTION (qfn_section_id)
go
GRANT REFERENCES ON dbo.QFN_SECTION TO eqa_user
go
GRANT SELECT ON dbo.QFN_SECTION TO eqa_user
go
GRANT SELECT ON dbo.QFN_SECTION TO read_only
go
GRANT SELECT ON dbo.QFN_SECTION TO rma_users
go
GRANT INSERT ON dbo.QFN_SECTION TO eqa_user
go
GRANT DELETE ON dbo.QFN_SECTION TO eqa_user
go
GRANT UPDATE ON dbo.QFN_SECTION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_SECTION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_SECTION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_SECTION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_SECTION TO eqa_user
go
CREATE TABLE dbo.QFN_SECTION_ACHIEVED
(
    qfn_section_achieved_id       numeric(12,0) NOT NULL,
    qfn_achieved_id               numeric(12,0) NOT NULL,
    optional_strand_number        numeric(12,0) NOT NULL,
    ts                            timestamp     NULL,
    audit_tran_id                 OBJECT_ID     DEFAULT -1 NOT NULL,
    achieved_status_code          code_2        NULL,
    achieved_status_date          dt            NULL,
    certificate_print_status_code code_2        NULL,
    CONSTRAINT PK_QFN_SECTION_ACHIEVED
    PRIMARY KEY CLUSTERED (qfn_section_achieved_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_SECTION_ACHIEVED') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_SECTION_ACHIEVED >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_SECTION_ACHIEVED >>>'
go
ALTER TABLE dbo.QFN_SECTION_ACHIEVED
    ADD CONSTRAINT FK_QFN_SECTION_QFN_ACHIEVED
    FOREIGN KEY (qfn_achieved_id)
    REFERENCES dbo.QFN_ACHIEVED (qfn_achieved_id)
go
ALTER TABLE dbo.QFN_SECTION_ACHIEVED
    ADD CONSTRAINT FK_QFN_SECT_ACHIEVED_CERT_PRINT_STATUS
    FOREIGN KEY (certificate_print_status_code)
    REFERENCES dbo.CERTIFICATE_PRINT_STATUS_CODE (certificate_print_status_code)
go
ALTER TABLE dbo.QFN_SECTION_ACHIEVED
    ADD CONSTRAINT FK_QFN_SECT_ACHIEVED_ACHIEVED_STATUS
    FOREIGN KEY (achieved_status_code)
    REFERENCES dbo.ACHIEVED_STATUS_CODE (achieved_status_code)
go
GRANT REFERENCES ON dbo.QFN_SECTION_ACHIEVED TO eqa_user
go
GRANT SELECT ON dbo.QFN_SECTION_ACHIEVED TO eqa_user
go
GRANT SELECT ON dbo.QFN_SECTION_ACHIEVED TO read_only
go
GRANT SELECT ON dbo.QFN_SECTION_ACHIEVED TO rma_users
go
GRANT INSERT ON dbo.QFN_SECTION_ACHIEVED TO eqa_user
go
GRANT DELETE ON dbo.QFN_SECTION_ACHIEVED TO eqa_user
go
GRANT UPDATE ON dbo.QFN_SECTION_ACHIEVED TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_SECTION_ACHIEVED TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_SECTION_ACHIEVED TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_SECTION_ACHIEVED TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_SECTION_ACHIEVED TO eqa_user
go
CREATE TABLE dbo.QFN_SECTION_TYPE
(
    section_type_code       code_2     NOT NULL,
    section_type_desc       descr      NOT NULL,
    is_strand               yn         DEFAULT 0     NOT NULL,
    section_type_short_desc varchar(3) DEFAULT 'XXX' NOT NULL,
    is_optional             yn         DEFAULT 0     NOT NULL,
    CONSTRAINT PK_QFN_SECTION_TYPE
    PRIMARY KEY CLUSTERED (section_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_SECTION_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_SECTION_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_SECTION_TYPE >>>'
go
ALTER TABLE dbo.QFN_PREQ_EXEMPTION_STRAND
    ADD CONSTRAINT FK_PREQ_EXMT_STRAD_QFN_SCTN_TY
    FOREIGN KEY (section_type_code)
    REFERENCES dbo.QFN_SECTION_TYPE (section_type_code)
go
ALTER TABLE dbo.QFN_SECTION
    ADD CONSTRAINT FK_QFN_SECTION_QFN_SECT_TYPE
    FOREIGN KEY (qfn_section_type_code)
    REFERENCES dbo.QFN_SECTION_TYPE (section_type_code)
go
GRANT REFERENCES ON dbo.QFN_SECTION_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QFN_SECTION_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QFN_SECTION_TYPE TO read_only
go
GRANT SELECT ON dbo.QFN_SECTION_TYPE TO rma_users
go
GRANT INSERT ON dbo.QFN_SECTION_TYPE TO eqa_user
go
GRANT DELETE ON dbo.QFN_SECTION_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.QFN_SECTION_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_SECTION_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_SECTION_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_SECTION_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_SECTION_TYPE TO eqa_user
go
CREATE TABLE dbo.QFN_SEC_ACHIEVED_STATUS_HIST
(
    qfn_sec_achieved_status_hist_id OBJECT_ID NOT NULL,
    qfn_section_achieved_id         OBJECT_ID NOT NULL,
    achieved_status_code            code_2    NULL,
    achieved_status_date            dt        NULL,
    update_date                     dt        NOT NULL,
    audit_tran_id                   OBJECT_ID NOT NULL,
    CONSTRAINT PK_QFN_SEC_ACHIEVED_STATUS_HIST
    PRIMARY KEY CLUSTERED (qfn_sec_achieved_status_hist_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_SEC_ACHIEVED_STATUS_HIST') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_SEC_ACHIEVED_STATUS_HIST >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_SEC_ACHIEVED_STATUS_HIST >>>'
go
ALTER TABLE dbo.QFN_SEC_ACHIEVED_STATUS_HIST
    ADD CONSTRAINT FK_QFN_SEC_ACH_STATUS_HIST_QFN_SECT_ACH
    FOREIGN KEY (qfn_section_achieved_id)
    REFERENCES dbo.QFN_SECTION_ACHIEVED (qfn_section_achieved_id)
go
GRANT REFERENCES ON dbo.QFN_SEC_ACHIEVED_STATUS_HIST TO eqa_user
go
GRANT SELECT ON dbo.QFN_SEC_ACHIEVED_STATUS_HIST TO eqa_user
go
GRANT SELECT ON dbo.QFN_SEC_ACHIEVED_STATUS_HIST TO read_only
go
GRANT SELECT ON dbo.QFN_SEC_ACHIEVED_STATUS_HIST TO rma_users
go
GRANT INSERT ON dbo.QFN_SEC_ACHIEVED_STATUS_HIST TO eqa_user
go
GRANT DELETE ON dbo.QFN_SEC_ACHIEVED_STATUS_HIST TO eqa_user
go
GRANT UPDATE ON dbo.QFN_SEC_ACHIEVED_STATUS_HIST TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_SEC_ACHIEVED_STATUS_HIST TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_SEC_ACHIEVED_STATUS_HIST TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_SEC_ACHIEVED_STATUS_HIST TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_SEC_ACHIEVED_STATUS_HIST TO eqa_user
go
CREATE TABLE dbo.QFN_STATUS_CODE
(
    qfn_status_code       code_2  NOT NULL,
    qs_code               code_2  NOT NULL,
    qfn_status_code_desc  descr   NOT NULL,
    qfn_status_short_desc descr   NOT NULL,
    sortkey               sortkey NOT NULL,
    CONSTRAINT PK_QFN_STATUS_CODE
    PRIMARY KEY CLUSTERED (qfn_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_STATUS_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_STATUS_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_STATUS_CODE >>>'
go
GRANT REFERENCES ON dbo.QFN_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.QFN_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.QFN_STATUS_CODE TO read_only
go
GRANT SELECT ON dbo.QFN_STATUS_CODE TO rma_users
go
GRANT INSERT ON dbo.QFN_STATUS_CODE TO eqa_user
go
GRANT DELETE ON dbo.QFN_STATUS_CODE TO eqa_user
go
GRANT UPDATE ON dbo.QFN_STATUS_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_STATUS_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_STATUS_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_STATUS_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_STATUS_CODE TO eqa_user
go
CREATE TABLE dbo.QFN_STATUS_HISTORY
(
    qfn_status_history_id OBJECT_ID NOT NULL,
    qfn_id                OBJECT_ID NOT NULL,
    qfn_status_code       code_2    NOT NULL,
    qfn_status_date       dt        NOT NULL,
    updated_by            usr       NOT NULL,
    update_date           datetime  NOT NULL,
    audit_tran_id         OBJECT_ID NOT NULL,
    ts                    timestamp NOT NULL,
    CONSTRAINT PK_QFN_STATUS_HISTORY
    PRIMARY KEY CLUSTERED (qfn_status_history_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_STATUS_HISTORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_STATUS_HISTORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_STATUS_HISTORY >>>'
go
ALTER TABLE dbo.QFN_STATUS_HISTORY
    ADD CONSTRAINT FK_QFN_STAT_FK_QFN_ST_QFN_STAT
    FOREIGN KEY (qfn_status_code)
    REFERENCES dbo.QFN_STATUS_CODE (qfn_status_code)
go
ALTER TABLE dbo.QFN_STATUS_HISTORY
    ADD CONSTRAINT FK_QFN_STAT_HIST_QFN
    FOREIGN KEY (qfn_id)
    REFERENCES dbo.QFN (qfn_id)
go
GRANT REFERENCES ON dbo.QFN_STATUS_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.QFN_STATUS_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.QFN_STATUS_HISTORY TO read_only
go
GRANT SELECT ON dbo.QFN_STATUS_HISTORY TO rma_users
go
GRANT INSERT ON dbo.QFN_STATUS_HISTORY TO eqa_user
go
GRANT INSERT ON dbo.QFN_STATUS_HISTORY TO sqr_eqa_sync_user
go
GRANT INSERT ON dbo.QFN_STATUS_HISTORY TO eve_user
go
GRANT INSERT ON dbo.QFN_STATUS_HISTORY TO sqr_eqa_user
go
GRANT DELETE ON dbo.QFN_STATUS_HISTORY TO eqa_user
go
GRANT DELETE ON dbo.QFN_STATUS_HISTORY TO eve_user
go
GRANT DELETE ON dbo.QFN_STATUS_HISTORY TO sqr_eqa_user
go
GRANT UPDATE ON dbo.QFN_STATUS_HISTORY TO eqa_user
go
GRANT UPDATE ON dbo.QFN_STATUS_HISTORY TO sqr_eqa_sync_user
go
GRANT UPDATE ON dbo.QFN_STATUS_HISTORY TO eve_user
go
GRANT UPDATE ON dbo.QFN_STATUS_HISTORY TO sqr_eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_STATUS_HISTORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_STATUS_HISTORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_STATUS_HISTORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_STATUS_HISTORY TO eqa_user
go
CREATE TABLE dbo.QFN_TYPE
(
    qfn_type_code            code_2  NOT NULL,
    qs_code                  code_2  NOT NULL,
    qfn_class_code           code_2  NOT NULL,
    qfn_type_code_desc       descr   NOT NULL,
    qfn_type_code_short_desc descr   NOT NULL,
    default_certificate_type char(3) NULL,
    active_ind               yn_ind  NOT NULL,
    sortkey                  sortkey NOT NULL,
    CONSTRAINT PK_QFN_TYPE
    PRIMARY KEY CLUSTERED (qfn_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_TYPE >>>'
go
ALTER TABLE dbo.QFN_TYPE
    ADD CONSTRAINT FK_QFN_TYPE_CERT_TYPE
    FOREIGN KEY (default_certificate_type)
    REFERENCES dbo.CERTIFICATE_TYPE (certificate_type_code)
go
ALTER TABLE dbo.QFN_TYPE
    ADD CONSTRAINT FK_QFN_TYPE_FK_QFN_CLASS
    FOREIGN KEY (qfn_class_code)
    REFERENCES dbo.QFN_CLASS_CODE (qfn_class_code)
go
GRANT REFERENCES ON dbo.QFN_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QFN_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QFN_TYPE TO read_only
go
GRANT SELECT ON dbo.QFN_TYPE TO rma_users
go
GRANT INSERT ON dbo.QFN_TYPE TO eqa_user
go
GRANT DELETE ON dbo.QFN_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.QFN_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_TYPE TO eqa_user
go
CREATE TABLE dbo.QFN_VERSION
(
    qfn_version_id              OBJECT_ID     NOT NULL,
    qfn_id                      OBJECT_ID     NOT NULL,
    qual_application_id         OBJECT_ID     NULL,
    qfn_number                  varchar(8)    NOT NULL,
    qfn_version_number          numeric(8,0)  NOT NULL,
    latest_qfn_minor_version_id OBJECT_ID     NULL,
    master_copy                 ny_ind        NULL,
    qfn_version_status_code     code_2        NOT NULL,
    qfn_version_status_date     datetime      NOT NULL,
    creation_date               datetime      NOT NULL,
    complete_by_date            dt            NULL,
    review_by_date              dt            NULL,
    qfn_expiry_date             datetime      NULL,
    audit_tran_id               OBJECT_ID     NOT NULL,
    ts                          timestamp     NOT NULL,
    register_compliant_date     datetime      NULL,
    register_compliant_code     code_2        NOT NULL,
    ssb_perorg_role_id          OBJECT_ID     NULL,
    ssb_ref                     varchar(40)   NULL,
    latest_pub_qfn_minor_ver_id OBJECT_ID     NULL,
    first_publication_date      datetime      NULL,
    last_publication_date       datetime      NULL,
    notes                       varchar(1000) NULL,
    process_type_code           code_2        NULL,
    proposed_qfn_status_code    code_2        NULL,
    qa_event_code               code_2        NOT NULL,
    qa_event_date               datetime      NOT NULL,
    approval_est_start_date     dt            NULL,
    external_case_id            varchar(20)   NULL,
    qa_aprv_rating_code         code_2        NULL,
    CONSTRAINT PK_QFN_VERSION
    PRIMARY KEY CLUSTERED (qfn_version_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_VERSION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_VERSION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_VERSION >>>'
go
ALTER TABLE dbo.QFN_VERSION
    ADD CONSTRAINT FK_QFN_VERS_QFN_STATUS
    FOREIGN KEY (proposed_qfn_status_code)
    REFERENCES dbo.QFN_STATUS_CODE (qfn_status_code)
go
ALTER TABLE dbo.QFN_VERSION
    ADD CONSTRAINT FK_QFN_VERS_PERORG_ROLE
    FOREIGN KEY (ssb_perorg_role_id)
    REFERENCES dbo.PERORG_ROLE (perorg_role_id)
go
ALTER TABLE dbo.QFN_VERSION
    ADD CONSTRAINT FK_QFN_VERS_QA_EVENT
    FOREIGN KEY (qa_event_code)
    REFERENCES dbo.QA_EVENT_CODE (qa_event_code)
go
ALTER TABLE dbo.QFN_VERSION
    ADD CONSTRAINT FK_QFN_VERS_PROCESS_TYPE
    FOREIGN KEY (process_type_code)
    REFERENCES dbo.PROCESS_TYPE_CODE (process_type_code)
go
ALTER TABLE dbo.QFN_VERSION
    ADD CONSTRAINT FK_QFN_VERS_QFN
    FOREIGN KEY (qfn_id)
    REFERENCES dbo.QFN (qfn_id)
go
ALTER TABLE dbo.QFN_VERSION
    ADD CONSTRAINT FK_QFN_VER_LATEST_QFN_MIN_VER
    FOREIGN KEY (latest_qfn_minor_version_id)
    REFERENCES dbo.QFN_MINOR_VERSION (qfn_minor_version_id)
go
ALTER TABLE dbo.QFN_VERSION
    ADD CONSTRAINT FK_QFN_VER_QFN_MIN_VER1
    FOREIGN KEY (latest_pub_qfn_minor_ver_id)
    REFERENCES dbo.QFN_MINOR_VERSION (qfn_minor_version_id)
go
ALTER TABLE dbo.QFN_VERSION
    ADD CONSTRAINT FK_QFN_VER_QA_APRV_RTNG_CODE
    FOREIGN KEY (qa_aprv_rating_code)
    REFERENCES dbo.QA_APRV_RATING_CODE (qa_aprv_rating_code)
go
ALTER TABLE dbo.QFN_PREREQUISITE
    ADD CONSTRAINT FK_PREREQUISITE_QFN_VERSION
    FOREIGN KEY (qfn_version_id)
    REFERENCES dbo.QFN_VERSION (qfn_version_id)
go
ALTER TABLE dbo.QFN_SCENARIO
    ADD CONSTRAINT FK_QFN_SCENARIO_QFN_VER
    FOREIGN KEY (qfn_version_id)
    REFERENCES dbo.QFN_VERSION (qfn_version_id)
go
ALTER TABLE dbo.QFN_SCENARIO_QFN_COMPONENT
    ADD CONSTRAINT FK_QFN_SCEN_COMP_QFN_VER_ID
    FOREIGN KEY (qfn_version_id)
    REFERENCES dbo.QFN_VERSION (qfn_version_id)
go
GRANT REFERENCES ON dbo.QFN_VERSION TO eqa_user
go
GRANT SELECT ON dbo.QFN_VERSION TO AyaO
go
GRANT SELECT ON dbo.QFN_VERSION TO eqa_user
go
GRANT SELECT ON dbo.QFN_VERSION TO read_only
go
GRANT SELECT ON dbo.QFN_VERSION TO rma_users
go
GRANT INSERT ON dbo.QFN_VERSION TO eqa_user
go
GRANT INSERT ON dbo.QFN_VERSION TO sqr_eqa_sync_user
go
GRANT INSERT ON dbo.QFN_VERSION TO sqr_eqa_user
go
GRANT INSERT ON dbo.QFN_VERSION TO eve_user
go
GRANT DELETE ON dbo.QFN_VERSION TO eqa_user
go
GRANT DELETE ON dbo.QFN_VERSION TO sqr_eqa_user
go
GRANT DELETE ON dbo.QFN_VERSION TO eve_user
go
GRANT UPDATE ON dbo.QFN_VERSION TO eqa_user
go
GRANT UPDATE ON dbo.QFN_VERSION TO sqr_eqa_sync_user
go
GRANT UPDATE ON dbo.QFN_VERSION TO sqr_eqa_user
go
GRANT UPDATE ON dbo.QFN_VERSION TO eve_user
go
GRANT DELETE STATISTICS ON dbo.QFN_VERSION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_VERSION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_VERSION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_VERSION TO eqa_user
go
CREATE TABLE dbo.QFN_VERSION_CLASSIFICATION
(
    cfn_catg_id    numeric(12,0) NOT NULL,
    qfn_version_id numeric(12,0) NOT NULL,
    ts             timestamp     NOT NULL,
    CONSTRAINT PK_QFN_VERSION_CLASSIFICATION
    PRIMARY KEY CLUSTERED (cfn_catg_id,qfn_version_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_VERSION_CLASSIFICATION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_VERSION_CLASSIFICATION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_VERSION_CLASSIFICATION >>>'
go
ALTER TABLE dbo.QFN_VERSION_CLASSIFICATION
    ADD CONSTRAINT FK_QFN_VER_CLASS_QFN_VER
    FOREIGN KEY (qfn_version_id)
    REFERENCES dbo.QFN_VERSION (qfn_version_id)
go
ALTER TABLE dbo.QFN_VERSION_CLASSIFICATION
    ADD CONSTRAINT FK_QFN_VERS_QFN_VE_CFN_CATE
    FOREIGN KEY (cfn_catg_id)
    REFERENCES dbo.CFN_CATEGORY (cfn_catg_id)
go
GRANT REFERENCES ON dbo.QFN_VERSION_CLASSIFICATION TO eqa_user
go
GRANT SELECT ON dbo.QFN_VERSION_CLASSIFICATION TO eqa_user
go
GRANT SELECT ON dbo.QFN_VERSION_CLASSIFICATION TO read_only
go
GRANT SELECT ON dbo.QFN_VERSION_CLASSIFICATION TO rma_users
go
GRANT INSERT ON dbo.QFN_VERSION_CLASSIFICATION TO eqa_user
go
GRANT INSERT ON dbo.QFN_VERSION_CLASSIFICATION TO sqr_eqa_sync_user
go
GRANT INSERT ON dbo.QFN_VERSION_CLASSIFICATION TO eve_user
go
GRANT INSERT ON dbo.QFN_VERSION_CLASSIFICATION TO sqr_eqa_user
go
GRANT DELETE ON dbo.QFN_VERSION_CLASSIFICATION TO eqa_user
go
GRANT DELETE ON dbo.QFN_VERSION_CLASSIFICATION TO eve_user
go
GRANT DELETE ON dbo.QFN_VERSION_CLASSIFICATION TO sqr_eqa_user
go
GRANT UPDATE ON dbo.QFN_VERSION_CLASSIFICATION TO eqa_user
go
GRANT UPDATE ON dbo.QFN_VERSION_CLASSIFICATION TO sqr_eqa_sync_user
go
GRANT UPDATE ON dbo.QFN_VERSION_CLASSIFICATION TO eve_user
go
GRANT UPDATE ON dbo.QFN_VERSION_CLASSIFICATION TO sqr_eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_VERSION_CLASSIFICATION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_VERSION_CLASSIFICATION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_VERSION_CLASSIFICATION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_VERSION_CLASSIFICATION TO eqa_user
go
CREATE TABLE dbo.QFN_VERSION_PUB_HISTORY
(
    qfn_ver_pub_history_id OBJECT_ID     NOT NULL,
    qfn_version_id         OBJECT_ID     NOT NULL,
    qual_publication_code  code_2        NOT NULL,
    publication_date       datetime      NOT NULL,
    updated_by             usr           NOT NULL,
    update_date            datetime      NOT NULL,
    doc_published_ind      yn_ind        NOT NULL,
    comment                varchar(1000) NOT NULL,
    audit_tran_id          OBJECT_ID     NOT NULL,
    ts                     timestamp     NOT NULL,
    CONSTRAINT PK_QFN_VERSION_PUB_HISTORY
    PRIMARY KEY CLUSTERED (qfn_ver_pub_history_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_VERSION_PUB_HISTORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_VERSION_PUB_HISTORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_VERSION_PUB_HISTORY >>>'
go
ALTER TABLE dbo.QFN_VERSION_PUB_HISTORY
    ADD CONSTRAINT FK_QFN_PUB_HIST_QFN_VER
    FOREIGN KEY (qfn_version_id)
    REFERENCES dbo.QFN_VERSION (qfn_version_id)
go
GRANT REFERENCES ON dbo.QFN_VERSION_PUB_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.QFN_VERSION_PUB_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.QFN_VERSION_PUB_HISTORY TO read_only
go
GRANT SELECT ON dbo.QFN_VERSION_PUB_HISTORY TO rma_users
go
GRANT INSERT ON dbo.QFN_VERSION_PUB_HISTORY TO eqa_user
go
GRANT DELETE ON dbo.QFN_VERSION_PUB_HISTORY TO eqa_user
go
GRANT UPDATE ON dbo.QFN_VERSION_PUB_HISTORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_VERSION_PUB_HISTORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_VERSION_PUB_HISTORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_VERSION_PUB_HISTORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_VERSION_PUB_HISTORY TO eqa_user
go
CREATE TABLE dbo.QFN_VERSION_STATUS_CODE
(
    qfn_version_status_code       code_2  NOT NULL,
    qs_code                       code_2  NOT NULL,
    qfn_version_status_code_desc  descr   NOT NULL,
    qfn_version_status_short_desc descr   NOT NULL,
    sortkey                       sortkey NOT NULL,
    CONSTRAINT PK_QFN_VERSION_STATUS_CODE
    PRIMARY KEY CLUSTERED (qfn_version_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_VERSION_STATUS_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_VERSION_STATUS_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_VERSION_STATUS_CODE >>>'
go
ALTER TABLE dbo.QFN_VERSION
    ADD CONSTRAINT FK_QFN_VERS_QFN_VER_STATUS
    FOREIGN KEY (qfn_version_status_code)
    REFERENCES dbo.QFN_VERSION_STATUS_CODE (qfn_version_status_code)
go
GRANT REFERENCES ON dbo.QFN_VERSION_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.QFN_VERSION_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.QFN_VERSION_STATUS_CODE TO read_only
go
GRANT SELECT ON dbo.QFN_VERSION_STATUS_CODE TO rma_users
go
GRANT INSERT ON dbo.QFN_VERSION_STATUS_CODE TO eqa_user
go
GRANT DELETE ON dbo.QFN_VERSION_STATUS_CODE TO eqa_user
go
GRANT UPDATE ON dbo.QFN_VERSION_STATUS_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_VERSION_STATUS_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_VERSION_STATUS_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_VERSION_STATUS_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_VERSION_STATUS_CODE TO eqa_user
go
CREATE TABLE dbo.QFN_VERSION_STATUS_HISTORY
(
    qfn_version_status_hist_id OBJECT_ID NOT NULL,
    qfn_version_id             OBJECT_ID NOT NULL,
    qfn_version_status_code    code_2    NOT NULL,
    qfn_version_status_date    dt        NOT NULL,
    updated_by                 usr       NOT NULL,
    update_date                datetime  NOT NULL,
    audit_tran_id              OBJECT_ID NOT NULL,
    ts                         timestamp NOT NULL,
    CONSTRAINT PK_QFN_VERSION_STATUS_HISTORY
    PRIMARY KEY CLUSTERED (qfn_version_status_hist_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_VERSION_STATUS_HISTORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_VERSION_STATUS_HISTORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_VERSION_STATUS_HISTORY >>>'
go
ALTER TABLE dbo.QFN_VERSION_STATUS_HISTORY
    ADD CONSTRAINT FK_QFN_VER_STAT_HIS_QFN_VERS
    FOREIGN KEY (qfn_version_id)
    REFERENCES dbo.QFN_VERSION (qfn_version_id)
go
ALTER TABLE dbo.QFN_VERSION_STATUS_HISTORY
    ADD CONSTRAINT FK_QFN_VER_STAT_HIS_QFN_VR_CD
    FOREIGN KEY (qfn_version_status_code)
    REFERENCES dbo.QFN_VERSION_STATUS_CODE (qfn_version_status_code)
go
GRANT REFERENCES ON dbo.QFN_VERSION_STATUS_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.QFN_VERSION_STATUS_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.QFN_VERSION_STATUS_HISTORY TO read_only
go
GRANT SELECT ON dbo.QFN_VERSION_STATUS_HISTORY TO rma_users
go
GRANT INSERT ON dbo.QFN_VERSION_STATUS_HISTORY TO eve_user
go
GRANT INSERT ON dbo.QFN_VERSION_STATUS_HISTORY TO eqa_user
go
GRANT INSERT ON dbo.QFN_VERSION_STATUS_HISTORY TO sqr_eqa_sync_user
go
GRANT INSERT ON dbo.QFN_VERSION_STATUS_HISTORY TO sqr_eqa_user
go
GRANT DELETE ON dbo.QFN_VERSION_STATUS_HISTORY TO eve_user
go
GRANT DELETE ON dbo.QFN_VERSION_STATUS_HISTORY TO eqa_user
go
GRANT DELETE ON dbo.QFN_VERSION_STATUS_HISTORY TO sqr_eqa_user
go
GRANT UPDATE ON dbo.QFN_VERSION_STATUS_HISTORY TO eve_user
go
GRANT UPDATE ON dbo.QFN_VERSION_STATUS_HISTORY TO eqa_user
go
GRANT UPDATE ON dbo.QFN_VERSION_STATUS_HISTORY TO sqr_eqa_sync_user
go
GRANT UPDATE ON dbo.QFN_VERSION_STATUS_HISTORY TO sqr_eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_VERSION_STATUS_HISTORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_VERSION_STATUS_HISTORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_VERSION_STATUS_HISTORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_VERSION_STATUS_HISTORY TO eqa_user
go
CREATE TABLE dbo.QFN_VER_ENDORSEMENT_VER
(
    qfn_ver_endorsement_ver_id OBJECT_ID NOT NULL,
    qfn_version_id             OBJECT_ID NOT NULL,
    endorsement_version_id     OBJECT_ID NOT NULL,
    audit_tran_id              OBJECT_ID NOT NULL,
    CONSTRAINT PK_QFN_VER_ENDORSEMENT_VER
    PRIMARY KEY CLUSTERED (qfn_ver_endorsement_ver_id),
    CONSTRAINT AK_QFN_VER_ENDORSEMENT_VER
    UNIQUE NONCLUSTERED (qfn_version_id,endorsement_version_id)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.QFN_VER_ENDORSEMENT_VER') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_VER_ENDORSEMENT_VER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_VER_ENDORSEMENT_VER >>>'
go
ALTER TABLE dbo.QFN_VER_ENDORSEMENT_VER
    ADD CONSTRAINT FK_QFN_VERS_ENDORS_QFN_VERS
    FOREIGN KEY (qfn_version_id)
    REFERENCES dbo.QFN_VERSION (qfn_version_id)
go
ALTER TABLE dbo.QFN_VER_ENDORSEMENT_VER
    ADD CONSTRAINT FK_QFN_VER_ENDOR_VER_ENDOR_VER
    FOREIGN KEY (endorsement_version_id)
    REFERENCES dbo.ENDORSEMENT_VERSION (endorsement_version_id)
go
GRANT REFERENCES ON dbo.QFN_VER_ENDORSEMENT_VER TO eqa_user
go
GRANT SELECT ON dbo.QFN_VER_ENDORSEMENT_VER TO eqa_user
go
GRANT SELECT ON dbo.QFN_VER_ENDORSEMENT_VER TO read_only
go
GRANT SELECT ON dbo.QFN_VER_ENDORSEMENT_VER TO rma_users
go
GRANT INSERT ON dbo.QFN_VER_ENDORSEMENT_VER TO eqa_user
go
GRANT DELETE ON dbo.QFN_VER_ENDORSEMENT_VER TO eqa_user
go
GRANT UPDATE ON dbo.QFN_VER_ENDORSEMENT_VER TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_VER_ENDORSEMENT_VER TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_VER_ENDORSEMENT_VER TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_VER_ENDORSEMENT_VER TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_VER_ENDORSEMENT_VER TO eqa_user
go
CREATE TABLE dbo.QFN_VER_QA_EVENT_HISTORY
(
    qa_event_history_id OBJECT_ID NOT NULL,
    qfn_version_id      OBJECT_ID NOT NULL,
    qa_event_code       code_2    NOT NULL,
    qa_event_date       datetime  NOT NULL,
    updated_by          usr       NOT NULL,
    update_date         datetime  NOT NULL,
    audit_tran_id       OBJECT_ID NOT NULL,
    sortkey             sortkey   NOT NULL,
    ts                  timestamp NOT NULL,
    CONSTRAINT PK_QFN_VER_QA_EVENT_HISTORY
    PRIMARY KEY CLUSTERED (qa_event_history_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QFN_VER_QA_EVENT_HISTORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QFN_VER_QA_EVENT_HISTORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QFN_VER_QA_EVENT_HISTORY >>>'
go
ALTER TABLE dbo.QFN_VER_QA_EVENT_HISTORY
    ADD CONSTRAINT FK_QFN_VERS_QA_EVENT_HIST
    FOREIGN KEY (qfn_version_id)
    REFERENCES dbo.QFN_VERSION (qfn_version_id)
go
ALTER TABLE dbo.QFN_VER_QA_EVENT_HISTORY
    ADD CONSTRAINT FK_QFN_VER_EVENT_HIST_QA_EVENT
    FOREIGN KEY (qa_event_code)
    REFERENCES dbo.QA_EVENT_CODE (qa_event_code)
go
GRANT REFERENCES ON dbo.QFN_VER_QA_EVENT_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.QFN_VER_QA_EVENT_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.QFN_VER_QA_EVENT_HISTORY TO read_only
go
GRANT SELECT ON dbo.QFN_VER_QA_EVENT_HISTORY TO rma_users
go
GRANT INSERT ON dbo.QFN_VER_QA_EVENT_HISTORY TO eqa_user
go
GRANT DELETE ON dbo.QFN_VER_QA_EVENT_HISTORY TO eqa_user
go
GRANT UPDATE ON dbo.QFN_VER_QA_EVENT_HISTORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QFN_VER_QA_EVENT_HISTORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QFN_VER_QA_EVENT_HISTORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QFN_VER_QA_EVENT_HISTORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QFN_VER_QA_EVENT_HISTORY TO eqa_user
go
CREATE TABLE dbo.QRS_APPLICANT
(
    qrs_applicant_id          OBJECT_ID   NOT NULL,
    applicant_number          int         NOT NULL,
    web_user_id               descr_short NULL,
    first_name                name        NOT NULL,
    middle_names              name        NULL,
    surname                   name        NULL,
    dob                       dt          NOT NULL,
    email_address             addr_line   NULL,
    phone_number              addr_line   NULL,
    postal_address1           addr_line   NULL,
    postal_address2           addr_line   NULL,
    postal_address3           addr_line   NULL,
    postal_address4           addr_line   NULL,
    country_code              code_3      NOT NULL,
    physical_address1         addr_line   NULL,
    physical_address2         addr_line   NULL,
    physical_address3         addr_line   NULL,
    physical_address4         addr_line   NULL,
    gender_code               code_1      NOT NULL,
    previous_name             name        NULL,
    latest_application_number int         NULL,
    active_ind                yn_ind      NOT NULL,
    audit_tran_id             OBJECT_ID   NOT NULL,
    CONSTRAINT PK_QRS_APPLICANT
    PRIMARY KEY CLUSTERED (qrs_applicant_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QRS_APPLICANT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QRS_APPLICANT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QRS_APPLICANT >>>'
go
ALTER TABLE dbo.QRS_APPLICANT
    ADD CONSTRAINT FK_QRS_APPLICANT_GENDER_CODE
    FOREIGN KEY (gender_code)
    REFERENCES dbo.GENDER_CODE (gender_code)
go
ALTER TABLE dbo.QRS_APPLICANT
    ADD CONSTRAINT FK_QRS_APPLICANT_COUNTRY_CODE
    FOREIGN KEY (country_code)
    REFERENCES dbo.COUNTRY_CODE (country_code)
go
GRANT REFERENCES ON dbo.QRS_APPLICANT TO eqa_user
go
GRANT SELECT ON dbo.QRS_APPLICANT TO eqa_user
go
GRANT SELECT ON dbo.QRS_APPLICANT TO read_only
go
GRANT SELECT ON dbo.QRS_APPLICANT TO rma_users
go
GRANT INSERT ON dbo.QRS_APPLICANT TO eqa_user
go
GRANT DELETE ON dbo.QRS_APPLICANT TO eqa_user
go
GRANT UPDATE ON dbo.QRS_APPLICANT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QRS_APPLICANT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QRS_APPLICANT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QRS_APPLICANT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QRS_APPLICANT TO eqa_user
go
CREATE TABLE dbo.QRS_INSTITUTION
(
    qrs_institution_id           OBJECT_ID     NOT NULL,
    country_code                 code_3        NULL,
    display_to_applicant_ind     yn_ind        NOT NULL,
    notes                        varchar(2048) NULL,
    awarding_body_only_ind       ny_ind        NOT NULL,
    active_ind                   yn_ind        NOT NULL,
    audit_tran_id                OBJECT_ID     NOT NULL,
    currency_code                code_3        NULL,
    verification_fee             money         NULL,
    verifn_fee_last_updated_date datetime      NULL,
    CONSTRAINT PK_QRS_INSTITUTION
    PRIMARY KEY CLUSTERED (qrs_institution_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QRS_INSTITUTION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QRS_INSTITUTION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QRS_INSTITUTION >>>'
go
ALTER TABLE dbo.QRS_INSTITUTION
    ADD CONSTRAINT FK_QRS_INSTITUTION_PERORG_ROLE
    FOREIGN KEY (qrs_institution_id)
    REFERENCES dbo.PERORG_ROLE (perorg_role_id)
go
ALTER TABLE dbo.QRS_INSTITUTION
    ADD CONSTRAINT FK_QRS_INST_CURRENCY_CODE
    FOREIGN KEY (currency_code)
    REFERENCES dbo.CURRENCY (currency_code)
go
ALTER TABLE dbo.QRS_INSTITUTION
    ADD CONSTRAINT FK_QRS_INST_COUNTRY_CODE
    FOREIGN KEY (country_code)
    REFERENCES dbo.COUNTRY_CODE (country_code)
go
GRANT REFERENCES ON dbo.QRS_INSTITUTION TO eqa_user
go
GRANT SELECT ON dbo.QRS_INSTITUTION TO eqa_user
go
GRANT SELECT ON dbo.QRS_INSTITUTION TO read_only
go
GRANT SELECT ON dbo.QRS_INSTITUTION TO rma_users
go
GRANT INSERT ON dbo.QRS_INSTITUTION TO eqa_user
go
GRANT DELETE ON dbo.QRS_INSTITUTION TO eqa_user
go
GRANT UPDATE ON dbo.QRS_INSTITUTION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QRS_INSTITUTION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QRS_INSTITUTION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QRS_INSTITUTION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QRS_INSTITUTION TO eqa_user
go
CREATE TABLE dbo.QRS_INSTITUTION_QFN
(
    qrs_institution_qfn_id   OBJECT_ID     NOT NULL,
    qrs_institution_id       OBJECT_ID     NOT NULL,
    qualification_name       varchar(200)  NOT NULL,
    english_translation      varchar(200)  NULL,
    display_to_applicant_ind yn_ind        NOT NULL,
    notes                    varchar(2048) NULL,
    active_ind               yn_ind        NOT NULL,
    audit_tran_id            OBJECT_ID     NOT NULL,
    CONSTRAINT PK_QRS_INSTITUTION_QFN
    PRIMARY KEY CLUSTERED (qrs_institution_qfn_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QRS_INSTITUTION_QFN') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QRS_INSTITUTION_QFN >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QRS_INSTITUTION_QFN >>>'
go
ALTER TABLE dbo.QRS_INSTITUTION_QFN
    ADD CONSTRAINT FK_QRS_INST_QFN_QRS_INST
    FOREIGN KEY (qrs_institution_id)
    REFERENCES dbo.QRS_INSTITUTION (qrs_institution_id)
go
GRANT REFERENCES ON dbo.QRS_INSTITUTION_QFN TO eqa_user
go
GRANT SELECT ON dbo.QRS_INSTITUTION_QFN TO eqa_user
go
GRANT SELECT ON dbo.QRS_INSTITUTION_QFN TO read_only
go
GRANT SELECT ON dbo.QRS_INSTITUTION_QFN TO rma_users
go
GRANT INSERT ON dbo.QRS_INSTITUTION_QFN TO eqa_user
go
GRANT DELETE ON dbo.QRS_INSTITUTION_QFN TO eqa_user
go
GRANT UPDATE ON dbo.QRS_INSTITUTION_QFN TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QRS_INSTITUTION_QFN TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QRS_INSTITUTION_QFN TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QRS_INSTITUTION_QFN TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QRS_INSTITUTION_QFN TO eqa_user
go
CREATE TABLE dbo.QRS_STG_APPLICATION
(
    qrs_stg_application_id       OBJECT_ID NOT NULL,
    qrs_applicant_id             OBJECT_ID NOT NULL,
    qrs_application_type         code_3    NULL,
    application_number           int       NOT NULL,
    contact_email                addr_line NULL,
    authorised_enquirer_1        name      NULL,
    authorised_enquirer_2        name      NULL,
    authorised_enquirer_3        name      NULL,
    alternative_email            addr_line NULL,
    immigration_purpose_ind      yn_ind    NOT NULL,
    further_study_purpose_ind    yn_ind    NOT NULL,
    professional_reg_purpose_ind yn_ind    NOT NULL,
    teacher_reg_purpose_ind      yn_ind    NOT NULL,
    teacher_salary_purpose_ind   yn_ind    NOT NULL,
    employment_purpose_ind       yn_ind    NOT NULL,
    declaration_accepted_ind     ny_ind    NOT NULL,
    internal_entry_ind           ny_ind    NOT NULL,
    agent_perorg_role_id         OBJECT_ID NULL,
    agent_contact_perorg_role_id OBJECT_ID NULL,
    payment_id                   OBJECT_ID NULL,
    started_date                 dt        NOT NULL,
    last_updated_date            dt        NOT NULL,
    submission_status            code_2    NULL,
    audit_tran_id                OBJECT_ID NOT NULL,
    further_study_intention_desc descr     NULL,
    silver_fern_visa_purpose_ind ny_ind    NOT NULL,
    CONSTRAINT PK_QRS_STG_APPLICATION
    PRIMARY KEY CLUSTERED (qrs_stg_application_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QRS_STG_APPLICATION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QRS_STG_APPLICATION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QRS_STG_APPLICATION >>>'
go
ALTER TABLE dbo.QRS_STG_APPLICATION
    ADD CONSTRAINT FK_QRS_STG_APPL_QRS_APPL
    FOREIGN KEY (qrs_applicant_id)
    REFERENCES dbo.QRS_APPLICANT (qrs_applicant_id)
go
ALTER TABLE dbo.QRS_STG_APPLICATION
    ADD CONSTRAINT FK_QRS_STG_APPL_PAYMENT
    FOREIGN KEY (payment_id)
    REFERENCES dbo.PAYMENT (payment_id)
go
GRANT REFERENCES ON dbo.QRS_STG_APPLICATION TO eqa_user
go
GRANT SELECT ON dbo.QRS_STG_APPLICATION TO eqa_user
go
GRANT SELECT ON dbo.QRS_STG_APPLICATION TO read_only
go
GRANT SELECT ON dbo.QRS_STG_APPLICATION TO rma_users
go
GRANT INSERT ON dbo.QRS_STG_APPLICATION TO eqa_user
go
GRANT DELETE ON dbo.QRS_STG_APPLICATION TO eqa_user
go
GRANT UPDATE ON dbo.QRS_STG_APPLICATION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QRS_STG_APPLICATION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QRS_STG_APPLICATION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QRS_STG_APPLICATION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QRS_STG_APPLICATION TO eqa_user
go
CREATE TABLE dbo.QRS_STG_APPLN_OTHER_DOC
(
    qrs_stg_appln_other_doc_id OBJECT_ID   NOT NULL,
    qrs_stg_application_id     OBJECT_ID   NOT NULL,
    document_type              descr_short NULL,
    document_description       descr_short NOT NULL,
    original_count             int         NOT NULL,
    translation_count          int         NOT NULL,
    audit_tran_id              OBJECT_ID   NOT NULL,
    CONSTRAINT PK_QRS_STG_APPLN_OTHER_DOC
    PRIMARY KEY CLUSTERED (qrs_stg_appln_other_doc_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QRS_STG_APPLN_OTHER_DOC') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QRS_STG_APPLN_OTHER_DOC >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QRS_STG_APPLN_OTHER_DOC >>>'
go
ALTER TABLE dbo.QRS_STG_APPLN_OTHER_DOC
    ADD CONSTRAINT FK_QRS_STG_APPL_OTH_DOC_STG_AP
    FOREIGN KEY (qrs_stg_application_id)
    REFERENCES dbo.QRS_STG_APPLICATION (qrs_stg_application_id)
go
GRANT REFERENCES ON dbo.QRS_STG_APPLN_OTHER_DOC TO eqa_user
go
GRANT SELECT ON dbo.QRS_STG_APPLN_OTHER_DOC TO eqa_user
go
GRANT SELECT ON dbo.QRS_STG_APPLN_OTHER_DOC TO read_only
go
GRANT SELECT ON dbo.QRS_STG_APPLN_OTHER_DOC TO rma_users
go
GRANT INSERT ON dbo.QRS_STG_APPLN_OTHER_DOC TO eqa_user
go
GRANT DELETE ON dbo.QRS_STG_APPLN_OTHER_DOC TO eqa_user
go
GRANT UPDATE ON dbo.QRS_STG_APPLN_OTHER_DOC TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QRS_STG_APPLN_OTHER_DOC TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QRS_STG_APPLN_OTHER_DOC TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QRS_STG_APPLN_OTHER_DOC TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QRS_STG_APPLN_OTHER_DOC TO eqa_user
go
CREATE TABLE dbo.QRS_STG_APPLN_QFN
(
    qrs_stg_appln_qfn_id          OBJECT_ID    NOT NULL,
    qrs_stg_application_id        OBJECT_ID    NOT NULL,
    qrs_institution_qfn_id        OBJECT_ID    NULL,
    qual_inclusion_reason         code_3       NULL,
    qual_english_name             varchar(200) NULL,
    qual_original_lang_name       varchar(200) NULL,
    qrs_institution_id            OBJECT_ID    NULL,
    full_time_study_ind           yn_ind       NOT NULL,
    awarded_date                  dt           NULL,
    major_specialisation          descr_short  NULL,
    division_class                descr_short  NULL,
    grade_point_average           numeric(5,2) NULL,
    studied_from                  dt           NULL,
    studied_to                    dt           NULL,
    awarding_institution_name     varchar(200) NULL,
    awarding_institution_address1 addr_line    NULL,
    awarding_institution_address2 addr_line    NULL,
    awarding_institution_address3 addr_line    NULL,
    awarding_institution_address4 addr_line    NULL,
    awarding_inst_country_code    code_3       NULL,
    study_institution_name        varchar(200) NULL,
    study_institution_address1    addr_line    NULL,
    study_institution_address2    addr_line    NULL,
    study_institution_address3    addr_line    NULL,
    study_institution_address4    addr_line    NULL,
    study_inst_country_code       code_3       NULL,
    original_certificate_count    int          NOT NULL,
    original_transcript_count     int          NOT NULL,
    translated_certificate_count  int          NOT NULL,
    translated_transcript_count   int          NOT NULL,
    course_admission_basis        text         NULL     OFF ROW,
    audit_tran_id                 OBJECT_ID    NOT NULL,
    CONSTRAINT PK_QRS_STG_APPLN_QFN
    PRIMARY KEY NONCLUSTERED (qrs_stg_appln_qfn_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QRS_STG_APPLN_QFN') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QRS_STG_APPLN_QFN >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QRS_STG_APPLN_QFN >>>'
go
ALTER TABLE dbo.QRS_STG_APPLN_QFN
    ADD CONSTRAINT FK_QRS_STG_APP_QRS_INST
    FOREIGN KEY (qrs_institution_id)
    REFERENCES dbo.QRS_INSTITUTION (qrs_institution_id)
go
ALTER TABLE dbo.QRS_STG_APPLN_QFN
    ADD CONSTRAINT FK_QRS_STG_APP_QFN_INST_QFN
    FOREIGN KEY (qrs_institution_qfn_id)
    REFERENCES dbo.QRS_INSTITUTION_QFN (qrs_institution_qfn_id)
go
ALTER TABLE dbo.QRS_STG_APPLN_QFN
    ADD CONSTRAINT FK_QRS_STG_APPL_QFN_QRS_STG_AP
    FOREIGN KEY (qrs_stg_application_id)
    REFERENCES dbo.QRS_STG_APPLICATION (qrs_stg_application_id)
go
GRANT REFERENCES ON dbo.QRS_STG_APPLN_QFN TO eqa_user
go
GRANT SELECT ON dbo.QRS_STG_APPLN_QFN TO eqa_user
go
GRANT SELECT ON dbo.QRS_STG_APPLN_QFN TO read_only
go
GRANT SELECT ON dbo.QRS_STG_APPLN_QFN TO rma_users
go
GRANT INSERT ON dbo.QRS_STG_APPLN_QFN TO eqa_user
go
GRANT DELETE ON dbo.QRS_STG_APPLN_QFN TO eqa_user
go
GRANT UPDATE ON dbo.QRS_STG_APPLN_QFN TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QRS_STG_APPLN_QFN TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QRS_STG_APPLN_QFN TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QRS_STG_APPLN_QFN TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QRS_STG_APPLN_QFN TO eqa_user
go
CREATE TABLE dbo.QRS_STG_APPLN_WORK_EXPERNCE
(
    qrs_stg_appln_work_expernce_id OBJECT_ID NOT NULL,
    qrs_stg_application_id         OBJECT_ID NOT NULL,
    position_held                  name      NOT NULL,
    employer_name                  name      NOT NULL,
    employer_address1              addr_line NOT NULL,
    employer_address2              addr_line NOT NULL,
    employer_address3              addr_line NULL,
    employer_address4              addr_line NULL,
    country_code                   code_3    NULL,
    employed_from                  dt        NOT NULL,
    employed_to                    dt        NOT NULL,
    full_time_employment_ind       yn_ind    NOT NULL,
    vocational_training_ind        ny_ind    NOT NULL,
    audit_tran_id                  OBJECT_ID NOT NULL,
    CONSTRAINT PK_QRS_STG_APPLN_WORK_EXPERNCE
    PRIMARY KEY CLUSTERED (qrs_stg_appln_work_expernce_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QRS_STG_APPLN_WORK_EXPERNCE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QRS_STG_APPLN_WORK_EXPERNCE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QRS_STG_APPLN_WORK_EXPERNCE >>>'
go
ALTER TABLE dbo.QRS_STG_APPLN_WORK_EXPERNCE
    ADD CONSTRAINT FK_QRS_STG_APP_WK_EX_STG_APP
    FOREIGN KEY (qrs_stg_application_id)
    REFERENCES dbo.QRS_STG_APPLICATION (qrs_stg_application_id)
go
GRANT REFERENCES ON dbo.QRS_STG_APPLN_WORK_EXPERNCE TO eqa_user
go
GRANT SELECT ON dbo.QRS_STG_APPLN_WORK_EXPERNCE TO eqa_user
go
GRANT SELECT ON dbo.QRS_STG_APPLN_WORK_EXPERNCE TO read_only
go
GRANT SELECT ON dbo.QRS_STG_APPLN_WORK_EXPERNCE TO rma_users
go
GRANT INSERT ON dbo.QRS_STG_APPLN_WORK_EXPERNCE TO eqa_user
go
GRANT DELETE ON dbo.QRS_STG_APPLN_WORK_EXPERNCE TO eqa_user
go
GRANT UPDATE ON dbo.QRS_STG_APPLN_WORK_EXPERNCE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QRS_STG_APPLN_WORK_EXPERNCE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QRS_STG_APPLN_WORK_EXPERNCE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QRS_STG_APPLN_WORK_EXPERNCE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QRS_STG_APPLN_WORK_EXPERNCE TO eqa_user
go
CREATE TABLE dbo.QUALCHECK_RUN_STATUS
(
    qualcheck_run_status_code code_2       NOT NULL,
    qualcheck_run_status_desc varchar(255) NOT NULL,
    CONSTRAINT PK_QUALCHECK_RUN_STATUS
    PRIMARY KEY CLUSTERED (qualcheck_run_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QUALCHECK_RUN_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QUALCHECK_RUN_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QUALCHECK_RUN_STATUS >>>'
go
GRANT REFERENCES ON dbo.QUALCHECK_RUN_STATUS TO eqa_user
go
GRANT SELECT ON dbo.QUALCHECK_RUN_STATUS TO eqa_user
go
GRANT SELECT ON dbo.QUALCHECK_RUN_STATUS TO read_only
go
GRANT SELECT ON dbo.QUALCHECK_RUN_STATUS TO rma_users
go
GRANT INSERT ON dbo.QUALCHECK_RUN_STATUS TO eqa_user
go
GRANT DELETE ON dbo.QUALCHECK_RUN_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.QUALCHECK_RUN_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QUALCHECK_RUN_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QUALCHECK_RUN_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QUALCHECK_RUN_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QUALCHECK_RUN_STATUS TO eqa_user
go
CREATE TABLE dbo.QUAL_APPLICATION
(
    qual_application_id    OBJECT_ID     NOT NULL,
    application_number     numeric(4,0)  NOT NULL,
    application_year       numeric(4,0)  NOT NULL,
    qual_app_status_code   code_2        NOT NULL,
    qual_app_type_code     code_2        NOT NULL,
    qual_app_std_type_code code_2        NULL,
    app_status_date        datetime      NOT NULL,
    application_desc       varchar(1000) NULL,
    ssb_contact_rel_id     OBJECT_ID     NULL,
    ssb_perorg_role_id     OBJECT_ID     NOT NULL,
    creation_date          dt            DEFAULT getdate() NOT NULL,
    audit_tran_id          OBJECT_ID     NOT NULL,
    ts                     timestamp     NOT NULL,
    compiler               long_name     NULL,
    CONSTRAINT PK_QUAL_APPLICATION
    PRIMARY KEY CLUSTERED (qual_application_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QUAL_APPLICATION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QUAL_APPLICATION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QUAL_APPLICATION >>>'
go
ALTER TABLE dbo.QUAL_APPLICATION
    ADD CONSTRAINT FK_QUAL_APP_PERORG_ROLE
    FOREIGN KEY (ssb_perorg_role_id)
    REFERENCES dbo.PERORG_ROLE (perorg_role_id)
go
ALTER TABLE dbo.QFN_VERSION
    ADD CONSTRAINT FK_QFN_VER_QUAL_APPLN
    FOREIGN KEY (qual_application_id)
    REFERENCES dbo.QUAL_APPLICATION (qual_application_id)
go
GRANT REFERENCES ON dbo.QUAL_APPLICATION TO eqa_user
go
GRANT SELECT ON dbo.QUAL_APPLICATION TO eqa_user
go
GRANT SELECT ON dbo.QUAL_APPLICATION TO read_only
go
GRANT SELECT ON dbo.QUAL_APPLICATION TO rma_users
go
GRANT INSERT ON dbo.QUAL_APPLICATION TO eqa_user
go
GRANT DELETE ON dbo.QUAL_APPLICATION TO eqa_user
go
GRANT UPDATE ON dbo.QUAL_APPLICATION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QUAL_APPLICATION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QUAL_APPLICATION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QUAL_APPLICATION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QUAL_APPLICATION TO eqa_user
go
CREATE TABLE dbo.QUAL_APP_APP_MAPPING
(
    qual_application1_id OBJECT_ID NOT NULL,
    qual_application2_id OBJECT_ID NOT NULL,
    description          descr     NULL,
    audit_tran_id        OBJECT_ID NOT NULL,
    ts                   timestamp NOT NULL,
    CONSTRAINT PK_QUAL_APP_APP_MAPPING
    PRIMARY KEY NONCLUSTERED (qual_application1_id,qual_application2_id),
    CONSTRAINT CHK_QUAL_MAPPING_ROW_UNIQUE
    CHECK (qual_application1_id < qual_application2_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QUAL_APP_APP_MAPPING') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QUAL_APP_APP_MAPPING >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QUAL_APP_APP_MAPPING >>>'
go
ALTER TABLE dbo.QUAL_APP_APP_MAPPING
    ADD CONSTRAINT FK_APP_APP_MAPPING_QUAL_APP1
    FOREIGN KEY (qual_application1_id)
    REFERENCES dbo.QUAL_APPLICATION (qual_application_id)
go
ALTER TABLE dbo.QUAL_APP_APP_MAPPING
    ADD CONSTRAINT FK_APP_APP_MAPPING_QUAL_APP2
    FOREIGN KEY (qual_application2_id)
    REFERENCES dbo.QUAL_APPLICATION (qual_application_id)
go
GRANT REFERENCES ON dbo.QUAL_APP_APP_MAPPING TO eqa_user
go
GRANT SELECT ON dbo.QUAL_APP_APP_MAPPING TO eqa_user
go
GRANT SELECT ON dbo.QUAL_APP_APP_MAPPING TO read_only
go
GRANT SELECT ON dbo.QUAL_APP_APP_MAPPING TO rma_users
go
GRANT INSERT ON dbo.QUAL_APP_APP_MAPPING TO eqa_user
go
GRANT DELETE ON dbo.QUAL_APP_APP_MAPPING TO eqa_user
go
GRANT UPDATE ON dbo.QUAL_APP_APP_MAPPING TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QUAL_APP_APP_MAPPING TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QUAL_APP_APP_MAPPING TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QUAL_APP_APP_MAPPING TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QUAL_APP_APP_MAPPING TO eqa_user
go
CREATE TABLE dbo.QUAL_APP_STATUS_CODE
(
    qual_app_status_code  code_2      NOT NULL,
    app_status_code_desc  descr       NOT NULL,
    app_status_short_desc descr_short NOT NULL,
    sortkey               sortkey     NOT NULL,
    CONSTRAINT PK_QUAL_APP_STATUS_CODE
    PRIMARY KEY CLUSTERED (qual_app_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QUAL_APP_STATUS_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QUAL_APP_STATUS_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QUAL_APP_STATUS_CODE >>>'
go
ALTER TABLE dbo.QUAL_APPLICATION
    ADD CONSTRAINT FK_APP_APP_STATUS
    FOREIGN KEY (qual_app_status_code)
    REFERENCES dbo.QUAL_APP_STATUS_CODE (qual_app_status_code)
go
GRANT REFERENCES ON dbo.QUAL_APP_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.QUAL_APP_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.QUAL_APP_STATUS_CODE TO read_only
go
GRANT SELECT ON dbo.QUAL_APP_STATUS_CODE TO rma_users
go
GRANT INSERT ON dbo.QUAL_APP_STATUS_CODE TO eqa_user
go
GRANT DELETE ON dbo.QUAL_APP_STATUS_CODE TO eqa_user
go
GRANT UPDATE ON dbo.QUAL_APP_STATUS_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QUAL_APP_STATUS_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QUAL_APP_STATUS_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QUAL_APP_STATUS_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QUAL_APP_STATUS_CODE TO eqa_user
go
CREATE TABLE dbo.QUAL_APP_STATUS_HISTORY
(
    qual_app_status_history_id OBJECT_ID    NOT NULL,
    qual_application_id        OBJECT_ID    NOT NULL,
    qual_app_status_code       code_2       NOT NULL,
    app_status_date            datetime     NOT NULL,
    updated_by                 varchar(100) NOT NULL,
    update_date                datetime     NOT NULL,
    audit_tran_id              OBJECT_ID    NOT NULL,
    ts                         timestamp    NOT NULL,
    CONSTRAINT PK_QUAL_APP_STATUS_HISTORY
    PRIMARY KEY CLUSTERED (qual_app_status_history_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QUAL_APP_STATUS_HISTORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QUAL_APP_STATUS_HISTORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QUAL_APP_STATUS_HISTORY >>>'
go
ALTER TABLE dbo.QUAL_APP_STATUS_HISTORY
    ADD CONSTRAINT FK_QUAL_APP_STATUS_HIST_APP
    FOREIGN KEY (qual_application_id)
    REFERENCES dbo.QUAL_APPLICATION (qual_application_id)
go
ALTER TABLE dbo.QUAL_APP_STATUS_HISTORY
    ADD CONSTRAINT FK_APP_STATUS_HIST_STATUS
    FOREIGN KEY (qual_app_status_code)
    REFERENCES dbo.QUAL_APP_STATUS_CODE (qual_app_status_code)
go
GRANT REFERENCES ON dbo.QUAL_APP_STATUS_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.QUAL_APP_STATUS_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.QUAL_APP_STATUS_HISTORY TO read_only
go
GRANT SELECT ON dbo.QUAL_APP_STATUS_HISTORY TO rma_users
go
GRANT INSERT ON dbo.QUAL_APP_STATUS_HISTORY TO eqa_user
go
GRANT DELETE ON dbo.QUAL_APP_STATUS_HISTORY TO eqa_user
go
GRANT UPDATE ON dbo.QUAL_APP_STATUS_HISTORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QUAL_APP_STATUS_HISTORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QUAL_APP_STATUS_HISTORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QUAL_APP_STATUS_HISTORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QUAL_APP_STATUS_HISTORY TO eqa_user
go
CREATE TABLE dbo.QUAL_APP_STD_TYPE_CODE
(
    qual_app_std_type_code  code_2      NOT NULL,
    app_std_type_code_desc  descr       NOT NULL,
    app_std_type_short_desc descr_short NOT NULL,
    sortkey                 sortkey     NOT NULL,
    CONSTRAINT PK_QUAL_APP_STD_TYPE_CODE
    PRIMARY KEY CLUSTERED (qual_app_std_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QUAL_APP_STD_TYPE_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QUAL_APP_STD_TYPE_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QUAL_APP_STD_TYPE_CODE >>>'
go
ALTER TABLE dbo.QUAL_APPLICATION
    ADD CONSTRAINT FK_APP_STD_APP_TYPE
    FOREIGN KEY (qual_app_std_type_code)
    REFERENCES dbo.QUAL_APP_STD_TYPE_CODE (qual_app_std_type_code)
go
GRANT REFERENCES ON dbo.QUAL_APP_STD_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.QUAL_APP_STD_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.QUAL_APP_STD_TYPE_CODE TO read_only
go
GRANT SELECT ON dbo.QUAL_APP_STD_TYPE_CODE TO rma_users
go
GRANT INSERT ON dbo.QUAL_APP_STD_TYPE_CODE TO eqa_user
go
GRANT DELETE ON dbo.QUAL_APP_STD_TYPE_CODE TO eqa_user
go
GRANT UPDATE ON dbo.QUAL_APP_STD_TYPE_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QUAL_APP_STD_TYPE_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QUAL_APP_STD_TYPE_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QUAL_APP_STD_TYPE_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QUAL_APP_STD_TYPE_CODE TO eqa_user
go
CREATE TABLE dbo.QUAL_APP_TYPE_CODE
(
    qual_app_type_code  code_2      NOT NULL,
    app_type_code_desc  descr       NOT NULL,
    app_type_short_desc descr_short NOT NULL,
    sortkey             sortkey     NOT NULL,
    CONSTRAINT PK_QUAL_APP_TYPE_CODE
    PRIMARY KEY CLUSTERED (qual_app_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QUAL_APP_TYPE_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QUAL_APP_TYPE_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QUAL_APP_TYPE_CODE >>>'
go
ALTER TABLE dbo.QUAL_APPLICATION
    ADD CONSTRAINT FK_APP_APP_TYPE
    FOREIGN KEY (qual_app_type_code)
    REFERENCES dbo.QUAL_APP_TYPE_CODE (qual_app_type_code)
go
GRANT REFERENCES ON dbo.QUAL_APP_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.QUAL_APP_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.QUAL_APP_TYPE_CODE TO read_only
go
GRANT SELECT ON dbo.QUAL_APP_TYPE_CODE TO rma_users
go
GRANT INSERT ON dbo.QUAL_APP_TYPE_CODE TO eqa_user
go
GRANT DELETE ON dbo.QUAL_APP_TYPE_CODE TO eqa_user
go
GRANT UPDATE ON dbo.QUAL_APP_TYPE_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QUAL_APP_TYPE_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QUAL_APP_TYPE_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QUAL_APP_TYPE_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QUAL_APP_TYPE_CODE TO eqa_user
go
CREATE TABLE dbo.QUAL_CHECK_RESULT
(
    qual_request_id   OBJECT_ID NOT NULL,
    summary_report    image     NULL     OFF ROW,
    qual_check_result code_1    NOT NULL,
    audit_tran_id     OBJECT_ID NOT NULL,
    ts                timestamp NOT NULL,
    CONSTRAINT PK_QUAL_CHECK_RESULT
    PRIMARY KEY CLUSTERED (qual_request_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QUAL_CHECK_RESULT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QUAL_CHECK_RESULT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QUAL_CHECK_RESULT >>>'
go
GRANT REFERENCES ON dbo.QUAL_CHECK_RESULT TO eqa_user
go
GRANT SELECT ON dbo.QUAL_CHECK_RESULT TO eqa_user
go
GRANT SELECT ON dbo.QUAL_CHECK_RESULT TO read_only
go
GRANT SELECT ON dbo.QUAL_CHECK_RESULT TO rma_users
go
GRANT INSERT ON dbo.QUAL_CHECK_RESULT TO eqa_user
go
GRANT DELETE ON dbo.QUAL_CHECK_RESULT TO eqa_user
go
GRANT UPDATE ON dbo.QUAL_CHECK_RESULT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QUAL_CHECK_RESULT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QUAL_CHECK_RESULT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QUAL_CHECK_RESULT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QUAL_CHECK_RESULT TO eqa_user
go
CREATE TABLE dbo.QUAL_CHECK_RESULT_TYPE
(
    qual_check_result_type_code code_1      NOT NULL,
    qual_check_result_type_desc varchar(10) NOT NULL,
    CONSTRAINT PK_QUAL_CHECK_RESULT_TYPE
    PRIMARY KEY CLUSTERED (qual_check_result_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QUAL_CHECK_RESULT_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QUAL_CHECK_RESULT_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QUAL_CHECK_RESULT_TYPE >>>'
go
ALTER TABLE dbo.QUAL_CHECK_RESULT
    ADD CONSTRAINT FK_QUAL_CHECK_RESULT_TYPE
    FOREIGN KEY (qual_check_result)
    REFERENCES dbo.QUAL_CHECK_RESULT_TYPE (qual_check_result_type_code)
go
GRANT REFERENCES ON dbo.QUAL_CHECK_RESULT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QUAL_CHECK_RESULT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.QUAL_CHECK_RESULT_TYPE TO read_only
go
GRANT SELECT ON dbo.QUAL_CHECK_RESULT_TYPE TO rma_users
go
GRANT INSERT ON dbo.QUAL_CHECK_RESULT_TYPE TO eqa_user
go
GRANT DELETE ON dbo.QUAL_CHECK_RESULT_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.QUAL_CHECK_RESULT_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QUAL_CHECK_RESULT_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QUAL_CHECK_RESULT_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QUAL_CHECK_RESULT_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QUAL_CHECK_RESULT_TYPE TO eqa_user
go
CREATE TABLE dbo.QUAL_CHECK_STATUS_CODE
(
    qual_check_status_code      code_2       NOT NULL,
    qual_check_status_code_desc varchar(255) NOT NULL,
    ts                          timestamp    NULL,
    CONSTRAINT PK_QUAL_CHECK_STATUS_CODE
    PRIMARY KEY CLUSTERED (qual_check_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QUAL_CHECK_STATUS_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QUAL_CHECK_STATUS_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QUAL_CHECK_STATUS_CODE >>>'
go
GRANT REFERENCES ON dbo.QUAL_CHECK_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.QUAL_CHECK_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.QUAL_CHECK_STATUS_CODE TO read_only
go
GRANT SELECT ON dbo.QUAL_CHECK_STATUS_CODE TO rma_users
go
GRANT INSERT ON dbo.QUAL_CHECK_STATUS_CODE TO eqa_user
go
GRANT DELETE ON dbo.QUAL_CHECK_STATUS_CODE TO eqa_user
go
GRANT UPDATE ON dbo.QUAL_CHECK_STATUS_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QUAL_CHECK_STATUS_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QUAL_CHECK_STATUS_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QUAL_CHECK_STATUS_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QUAL_CHECK_STATUS_CODE TO eqa_user
go
CREATE TABLE dbo.QUAL_PUBLICATION_CODE
(
    qual_publication_code       code_2      NOT NULL,
    publication_code_desc       descr       NOT NULL,
    publication_code_short_desc descr_short NOT NULL,
    sortkey                     sortkey     NOT NULL,
    CONSTRAINT PK_QUAL_PUBLICATION_CODE
    PRIMARY KEY NONCLUSTERED (qual_publication_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QUAL_PUBLICATION_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QUAL_PUBLICATION_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QUAL_PUBLICATION_CODE >>>'
go
ALTER TABLE dbo.QFN_VERSION_PUB_HISTORY
    ADD CONSTRAINT FK_QFN_VER_PUB_HIST_PUB_CODE
    FOREIGN KEY (qual_publication_code)
    REFERENCES dbo.QUAL_PUBLICATION_CODE (qual_publication_code)
go
GRANT REFERENCES ON dbo.QUAL_PUBLICATION_CODE TO eqa_user
go
GRANT SELECT ON dbo.QUAL_PUBLICATION_CODE TO eqa_user
go
GRANT SELECT ON dbo.QUAL_PUBLICATION_CODE TO read_only
go
GRANT SELECT ON dbo.QUAL_PUBLICATION_CODE TO rma_users
go
GRANT INSERT ON dbo.QUAL_PUBLICATION_CODE TO eqa_user
go
GRANT DELETE ON dbo.QUAL_PUBLICATION_CODE TO eqa_user
go
GRANT UPDATE ON dbo.QUAL_PUBLICATION_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QUAL_PUBLICATION_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QUAL_PUBLICATION_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QUAL_PUBLICATION_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QUAL_PUBLICATION_CODE TO eqa_user
go
CREATE TABLE dbo.QUAL_SYSTEM_FRAMEWORK
(
    qs_code                   code_2 NOT NULL,
    secondary_cfn_system_code code_2 NULL,
    primary_cfn_system_code   code_2 NOT NULL,
    qs_name                   name   NULL,
    qs_descr                  descr  NULL,
    active_ind                yn     DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    CONSTRAINT PK_QUAL_SYSTEM_FRAMEWORK
    PRIMARY KEY CLUSTERED (qs_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.QUAL_SYSTEM_FRAMEWORK') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.QUAL_SYSTEM_FRAMEWORK >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.QUAL_SYSTEM_FRAMEWORK >>>'
go
ALTER TABLE dbo.QUAL_SYSTEM_FRAMEWORK
    ADD CONSTRAINT FK_QUAL_SYS_PRIMARY_SYS_TYPE
    FOREIGN KEY (primary_cfn_system_code)
    REFERENCES dbo.CFN_SYSTEM_TYPE (cfn_system_code)
go
ALTER TABLE dbo.QUAL_SYSTEM_FRAMEWORK
    ADD CONSTRAINT FK_QUAL_SYS_SECONDARY_SYS_TYPE
    FOREIGN KEY (secondary_cfn_system_code)
    REFERENCES dbo.CFN_SYSTEM_TYPE (cfn_system_code)
go
ALTER TABLE dbo.QFN_STATUS_CODE
    ADD CONSTRAINT FK_QFN_STAT_FK_QFN_ST_QUAL_SYS
    FOREIGN KEY (qs_code)
    REFERENCES dbo.QUAL_SYSTEM_FRAMEWORK (qs_code)
go
ALTER TABLE dbo.QFN_TYPE
    ADD CONSTRAINT FK_QFN_TYPE_FK_QFN_TY_QUAL_SYS
    FOREIGN KEY (qs_code)
    REFERENCES dbo.QUAL_SYSTEM_FRAMEWORK (qs_code)
go
ALTER TABLE dbo.QFN_VERSION_STATUS_CODE
    ADD CONSTRAINT FK_QFN_VERS_FK_QFN_VE_QUAL_SYS
    FOREIGN KEY (qs_code)
    REFERENCES dbo.QUAL_SYSTEM_FRAMEWORK (qs_code)
go
GRANT REFERENCES ON dbo.QUAL_SYSTEM_FRAMEWORK TO eqa_user
go
GRANT SELECT ON dbo.QUAL_SYSTEM_FRAMEWORK TO eqa_user
go
GRANT SELECT ON dbo.QUAL_SYSTEM_FRAMEWORK TO read_only
go
GRANT SELECT ON dbo.QUAL_SYSTEM_FRAMEWORK TO rma_users
go
GRANT INSERT ON dbo.QUAL_SYSTEM_FRAMEWORK TO eqa_user
go
GRANT DELETE ON dbo.QUAL_SYSTEM_FRAMEWORK TO eqa_user
go
GRANT UPDATE ON dbo.QUAL_SYSTEM_FRAMEWORK TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.QUAL_SYSTEM_FRAMEWORK TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.QUAL_SYSTEM_FRAMEWORK TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.QUAL_SYSTEM_FRAMEWORK TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.QUAL_SYSTEM_FRAMEWORK TO eqa_user
go
CREATE TABLE dbo.RECOGNITION_BODY_CODE
(
    recognition_body_code code_3  NOT NULL,
    recognition_body_desc descr   NOT NULL,
    active_ind            yn_ind  NOT NULL,
    sortkey               sortkey NULL,
    CONSTRAINT PK_RECOGNITION_BODY_CODE
    PRIMARY KEY CLUSTERED (recognition_body_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.RECOGNITION_BODY_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RECOGNITION_BODY_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RECOGNITION_BODY_CODE >>>'
go
GRANT REFERENCES ON dbo.RECOGNITION_BODY_CODE TO eqa_user
go
GRANT SELECT ON dbo.RECOGNITION_BODY_CODE TO eqa_user
go
GRANT SELECT ON dbo.RECOGNITION_BODY_CODE TO read_only
go
GRANT SELECT ON dbo.RECOGNITION_BODY_CODE TO rma_users
go
GRANT INSERT ON dbo.RECOGNITION_BODY_CODE TO eqa_user
go
GRANT DELETE ON dbo.RECOGNITION_BODY_CODE TO eqa_user
go
GRANT UPDATE ON dbo.RECOGNITION_BODY_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RECOGNITION_BODY_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RECOGNITION_BODY_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RECOGNITION_BODY_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RECOGNITION_BODY_CODE TO eqa_user
go
CREATE TABLE dbo.RECONSIDERATION_ENTRY
(
    reconsideration_entry_id OBJECT_ID NOT NULL,
    reconsideration_page_id  OBJECT_ID NOT NULL,
    entry_id                 OBJECT_ID NOT NULL,
    audit_tran_id            OBJECT_ID NOT NULL,
    ts                       timestamp NOT NULL,
    CONSTRAINT PK_RECONSIDERATION_ENTRY
    PRIMARY KEY CLUSTERED (reconsideration_entry_id),
    CONSTRAINT AK_RECONS_ENTRY_ENTRY
    UNIQUE NONCLUSTERED (entry_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.RECONSIDERATION_ENTRY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RECONSIDERATION_ENTRY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RECONSIDERATION_ENTRY >>>'
go
ALTER TABLE dbo.RECONSIDERATION_ENTRY
    ADD CONSTRAINT FK_RECONS_ENTRY_ENTRY
    FOREIGN KEY (entry_id)
    REFERENCES dbo.ENTRY (entry_id)
go
GRANT REFERENCES ON dbo.RECONSIDERATION_ENTRY TO eqa_user
go
GRANT SELECT ON dbo.RECONSIDERATION_ENTRY TO eqa_user
go
GRANT SELECT ON dbo.RECONSIDERATION_ENTRY TO read_only
go
GRANT SELECT ON dbo.RECONSIDERATION_ENTRY TO rma_users
go
GRANT INSERT ON dbo.RECONSIDERATION_ENTRY TO eqa_user
go
GRANT DELETE ON dbo.RECONSIDERATION_ENTRY TO eqa_user
go
GRANT UPDATE ON dbo.RECONSIDERATION_ENTRY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RECONSIDERATION_ENTRY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RECONSIDERATION_ENTRY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RECONSIDERATION_ENTRY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RECONSIDERATION_ENTRY TO eqa_user
go
CREATE TABLE dbo.RECONSIDERATION_OPTION_CODE
(
    reconsideration_option_code char(4)      NOT NULL,
    reconsideration_option_desc varchar(255) NOT NULL,
    active_ind                  yn_ind       NOT NULL,
    sortkey                     sortkey      NOT NULL,
    CONSTRAINT pk_reconsideration_option_code
    PRIMARY KEY CLUSTERED (reconsideration_option_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.RECONSIDERATION_OPTION_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RECONSIDERATION_OPTION_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RECONSIDERATION_OPTION_CODE >>>'
go
GRANT REFERENCES ON dbo.RECONSIDERATION_OPTION_CODE TO eqa_user
go
GRANT SELECT ON dbo.RECONSIDERATION_OPTION_CODE TO eqa_user
go
GRANT SELECT ON dbo.RECONSIDERATION_OPTION_CODE TO read_only
go
GRANT SELECT ON dbo.RECONSIDERATION_OPTION_CODE TO rma_users
go
GRANT INSERT ON dbo.RECONSIDERATION_OPTION_CODE TO eqa_user
go
GRANT DELETE ON dbo.RECONSIDERATION_OPTION_CODE TO eqa_user
go
GRANT UPDATE ON dbo.RECONSIDERATION_OPTION_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RECONSIDERATION_OPTION_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RECONSIDERATION_OPTION_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RECONSIDERATION_OPTION_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RECONSIDERATION_OPTION_CODE TO eqa_user
go
CREATE TABLE dbo.RECONSIDERATION_PAGE
(
    reconsideration_page_id OBJECT_ID NOT NULL,
    reconsideration_run_id  OBJECT_ID NOT NULL,
    schedule_page_number    OBJECT_ID NOT NULL,
    panel_leader_marker_id  OBJECT_ID NOT NULL,
    assessment_session_id   OBJECT_ID NOT NULL,
    audit_tran_id           OBJECT_ID NOT NULL,
    ts                      timestamp NOT NULL,
    CONSTRAINT PK_RECONSIDERATION_PAGE
    PRIMARY KEY CLUSTERED (reconsideration_page_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.RECONSIDERATION_PAGE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RECONSIDERATION_PAGE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RECONSIDERATION_PAGE >>>'
go
ALTER TABLE dbo.RECONSIDERATION_PAGE
    ADD CONSTRAINT FK_RECONS_PAGE_ASSMT_SESSION
    FOREIGN KEY (assessment_session_id)
    REFERENCES dbo.ASSESSMENT_SESSION (assessment_session_id)
go
ALTER TABLE dbo.RECONSIDERATION_PAGE
    ADD CONSTRAINT FK_RECONS_PAGE_MARKER
    FOREIGN KEY (panel_leader_marker_id)
    REFERENCES dbo.MARKER (marker_id)
go
ALTER TABLE dbo.RECONSIDERATION_ENTRY
    ADD CONSTRAINT FK_RECONS_ENTRY_RECONS_PAGE
    FOREIGN KEY (reconsideration_page_id)
    REFERENCES dbo.RECONSIDERATION_PAGE (reconsideration_page_id)
go
GRANT REFERENCES ON dbo.RECONSIDERATION_PAGE TO eqa_user
go
GRANT SELECT ON dbo.RECONSIDERATION_PAGE TO eqa_user
go
GRANT SELECT ON dbo.RECONSIDERATION_PAGE TO read_only
go
GRANT SELECT ON dbo.RECONSIDERATION_PAGE TO rma_users
go
GRANT INSERT ON dbo.RECONSIDERATION_PAGE TO eqa_user
go
GRANT DELETE ON dbo.RECONSIDERATION_PAGE TO eqa_user
go
GRANT UPDATE ON dbo.RECONSIDERATION_PAGE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RECONSIDERATION_PAGE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RECONSIDERATION_PAGE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RECONSIDERATION_PAGE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RECONSIDERATION_PAGE TO eqa_user
go
CREATE TABLE dbo.RECONSIDERATION_RUN
(
    reconsideration_run_id      OBJECT_ID NOT NULL,
    academic_year               char(4)   NOT NULL,
    schedule_run_date           dt        NOT NULL,
    results_return_date         dt        NOT NULL,
    recons_run_status           code_2    NULL,
    reconsideration_option_code char(4)   DEFAULT 'ALLR' NOT NULL,
    audit_tran_id               OBJECT_ID NOT NULL,
    ts                          timestamp NOT NULL,
    CONSTRAINT PK_RECONSIDERATION_RUN
    PRIMARY KEY CLUSTERED (reconsideration_run_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.RECONSIDERATION_RUN') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RECONSIDERATION_RUN >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RECONSIDERATION_RUN >>>'
go
ALTER TABLE dbo.RECONSIDERATION_RUN
    ADD CONSTRAINT FK_RECON_RUN_RECON_OPTION_CODE
    FOREIGN KEY (reconsideration_option_code)
    REFERENCES dbo.RECONSIDERATION_OPTION_CODE (reconsideration_option_code)
go
ALTER TABLE dbo.RECONSIDERATION_RUN
    ADD CONSTRAINT FK_RECON_ACADEMIC_YEAR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.RECONSIDERATION_PAGE
    ADD CONSTRAINT FK_RECONS_PAGE_RECONS_RUN
    FOREIGN KEY (reconsideration_run_id)
    REFERENCES dbo.RECONSIDERATION_RUN (reconsideration_run_id)
go
GRANT REFERENCES ON dbo.RECONSIDERATION_RUN TO eqa_user
go
GRANT SELECT ON dbo.RECONSIDERATION_RUN TO eqa_user
go
GRANT SELECT ON dbo.RECONSIDERATION_RUN TO read_only
go
GRANT SELECT ON dbo.RECONSIDERATION_RUN TO rma_users
go
GRANT INSERT ON dbo.RECONSIDERATION_RUN TO eqa_user
go
GRANT DELETE ON dbo.RECONSIDERATION_RUN TO eqa_user
go
GRANT UPDATE ON dbo.RECONSIDERATION_RUN TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RECONSIDERATION_RUN TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RECONSIDERATION_RUN TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RECONSIDERATION_RUN TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RECONSIDERATION_RUN TO eqa_user
go
CREATE TABLE dbo.RECONSIDERATION_RUN_STATUS
(
    recons_run_status      code_2 NOT NULL,
    recons_run_status_desc descr  NOT NULL,
    CONSTRAINT PK_RECONSIDERATION_RUN_STATUS
    PRIMARY KEY CLUSTERED (recons_run_status)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.RECONSIDERATION_RUN_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RECONSIDERATION_RUN_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RECONSIDERATION_RUN_STATUS >>>'
go
ALTER TABLE dbo.RECONSIDERATION_RUN
    ADD CONSTRAINT FK_ENTRY_RECON_RUN_STATUS
    FOREIGN KEY (recons_run_status)
    REFERENCES dbo.RECONSIDERATION_RUN_STATUS (recons_run_status)
go
GRANT REFERENCES ON dbo.RECONSIDERATION_RUN_STATUS TO eqa_user
go
GRANT SELECT ON dbo.RECONSIDERATION_RUN_STATUS TO eqa_user
go
GRANT SELECT ON dbo.RECONSIDERATION_RUN_STATUS TO read_only
go
GRANT SELECT ON dbo.RECONSIDERATION_RUN_STATUS TO rma_users
go
GRANT INSERT ON dbo.RECONSIDERATION_RUN_STATUS TO eqa_user
go
GRANT DELETE ON dbo.RECONSIDERATION_RUN_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.RECONSIDERATION_RUN_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RECONSIDERATION_RUN_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RECONSIDERATION_RUN_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RECONSIDERATION_RUN_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RECONSIDERATION_RUN_STATUS TO eqa_user
go
CREATE TABLE dbo.RECONSIDERATION_STATUS
(
    reconsideration_status      char(2)      NOT NULL,
    reconsideration_status_desc varchar(255) NOT NULL,
    CONSTRAINT PK_RECONSIDERATION_STATUS
    PRIMARY KEY CLUSTERED (reconsideration_status)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.RECONSIDERATION_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RECONSIDERATION_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RECONSIDERATION_STATUS >>>'
go
GRANT REFERENCES ON dbo.RECONSIDERATION_STATUS TO eqa_user
go
GRANT SELECT ON dbo.RECONSIDERATION_STATUS TO eqa_user
go
GRANT SELECT ON dbo.RECONSIDERATION_STATUS TO read_only
go
GRANT SELECT ON dbo.RECONSIDERATION_STATUS TO rma_users
go
GRANT INSERT ON dbo.RECONSIDERATION_STATUS TO eqa_user
go
GRANT DELETE ON dbo.RECONSIDERATION_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.RECONSIDERATION_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RECONSIDERATION_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RECONSIDERATION_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RECONSIDERATION_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RECONSIDERATION_STATUS TO eqa_user
go
CREATE TABLE dbo.REFUND_STATUS_CODE
(
    refund_status_code      code_2    NOT NULL,
    refund_status_code_desc UNI_DESCR NOT NULL,
    active_ind              yn_ind    NOT NULL,
    sortkey                 sortkey   NOT NULL,
    CONSTRAINT PK_REFUND_STATUS_CODE
    PRIMARY KEY CLUSTERED (refund_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.REFUND_STATUS_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.REFUND_STATUS_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.REFUND_STATUS_CODE >>>'
go
GRANT REFERENCES ON dbo.REFUND_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.REFUND_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.REFUND_STATUS_CODE TO read_only
go
GRANT SELECT ON dbo.REFUND_STATUS_CODE TO rma_users
go
GRANT INSERT ON dbo.REFUND_STATUS_CODE TO eqa_user
go
GRANT DELETE ON dbo.REFUND_STATUS_CODE TO eqa_user
go
GRANT UPDATE ON dbo.REFUND_STATUS_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.REFUND_STATUS_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.REFUND_STATUS_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.REFUND_STATUS_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.REFUND_STATUS_CODE TO eqa_user
go
CREATE TABLE dbo.REGION
(
    region_code        code_2   NOT NULL,
    region_desc        descr    NULL,
    sort_order         smallint DEFAULT 0 NOT NULL,
    active_ind         yn       DEFAULT 1 NOT NULL,
    resman_region_desc descr    NULL,
    region_group_code  code_2   NULL,
    CONSTRAINT PK_REGION
    PRIMARY KEY CLUSTERED (region_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.REGION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.REGION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.REGION >>>'
go
GRANT REFERENCES ON dbo.REGION TO eqa_user
go
GRANT SELECT ON dbo.REGION TO eqa_user
go
GRANT SELECT ON dbo.REGION TO read_only
go
GRANT SELECT ON dbo.REGION TO rma_users
go
GRANT INSERT ON dbo.REGION TO eqa_user
go
GRANT DELETE ON dbo.REGION TO eqa_user
go
GRANT UPDATE ON dbo.REGION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.REGION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.REGION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.REGION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.REGION TO eqa_user
go
CREATE TABLE dbo.REGION_GROUP
(
    region_group_code code_2  NOT NULL,
    region_group_desc descr   NOT NULL,
    sort_order        sortkey NOT NULL,
    active_ind        yn_ind  NOT NULL,
    CONSTRAINT PK_REGION_GROUP
    PRIMARY KEY CLUSTERED (region_group_code)
)
LOCK ALLPAGES
go
IF OBJECT_ID('dbo.REGION_GROUP') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.REGION_GROUP >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.REGION_GROUP >>>'
go
ALTER TABLE dbo.REGION
    ADD CONSTRAINT FK_REGION_REGION_GROUP
    FOREIGN KEY (region_group_code)
    REFERENCES dbo.REGION_GROUP (region_group_code)
go
GRANT REFERENCES ON dbo.REGION_GROUP TO eqa_user
go
GRANT SELECT ON dbo.REGION_GROUP TO eqa_user
go
GRANT SELECT ON dbo.REGION_GROUP TO read_only
go
GRANT SELECT ON dbo.REGION_GROUP TO rma_users
go
GRANT INSERT ON dbo.REGION_GROUP TO eqa_user
go
GRANT DELETE ON dbo.REGION_GROUP TO eqa_user
go
GRANT UPDATE ON dbo.REGION_GROUP TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.REGION_GROUP TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.REGION_GROUP TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.REGION_GROUP TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.REGION_GROUP TO eqa_user
go
CREATE TABLE dbo.REGISTER_COMPLIANT_CODE
(
    register_compliant_code code_2  NOT NULL,
    register_compliant_desc descr   NULL,
    sortkey                 sortkey NULL,
    active_ind              yn      DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NULL,
    CONSTRAINT PK_REGISTER_COMPLIANT_CODE
    PRIMARY KEY CLUSTERED (register_compliant_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.REGISTER_COMPLIANT_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.REGISTER_COMPLIANT_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.REGISTER_COMPLIANT_CODE >>>'
go
ALTER TABLE dbo.QFN_VERSION
    ADD CONSTRAINT FK_QFN_VERSION_REG_COMPLIANT
    FOREIGN KEY (register_compliant_code)
    REFERENCES dbo.REGISTER_COMPLIANT_CODE (register_compliant_code)
go
GRANT REFERENCES ON dbo.REGISTER_COMPLIANT_CODE TO eqa_user
go
GRANT SELECT ON dbo.REGISTER_COMPLIANT_CODE TO eqa_user
go
GRANT SELECT ON dbo.REGISTER_COMPLIANT_CODE TO read_only
go
GRANT SELECT ON dbo.REGISTER_COMPLIANT_CODE TO rma_users
go
GRANT INSERT ON dbo.REGISTER_COMPLIANT_CODE TO eqa_user
go
GRANT DELETE ON dbo.REGISTER_COMPLIANT_CODE TO eqa_user
go
GRANT UPDATE ON dbo.REGISTER_COMPLIANT_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.REGISTER_COMPLIANT_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.REGISTER_COMPLIANT_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.REGISTER_COMPLIANT_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.REGISTER_COMPLIANT_CODE TO eqa_user
go
CREATE TABLE dbo.RELATIONSHIP
(
    rel_id                numeric(12,0) NOT NULL,
    rel_type_code         char(2)       NOT NULL,
    perorg_id             numeric(12,0) NOT NULL,
    related_perorg_id     numeric(12,0) NOT NULL,
    rel_active_ind        yn            DEFAULT '1' NOT NULL,
    rel_start_date        datetime      NULL,
    rel_end_date          datetime      NULL,
    original_reference_id numeric(12,0) NOT NULL,
    audit_tran_id         numeric(12,0) NOT NULL,
    ts                    timestamp     NOT NULL,
    department            name          NULL,
    title                 name          NULL,
    relative_address      name          NULL,
    CONSTRAINT PK_RELATIONSHIP
    PRIMARY KEY CLUSTERED (rel_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.RELATIONSHIP') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RELATIONSHIP >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RELATIONSHIP >>>'
go
ALTER TABLE dbo.RELATIONSHIP
    ADD CONSTRAINT FK_RELATIONSHIP_PERORG
    FOREIGN KEY (perorg_id)
    REFERENCES dbo.PERORG (perorg_id)
go
ALTER TABLE dbo.RELATIONSHIP
    ADD CONSTRAINT FK_RELATIONSHIP_RELATED_PERORG
    FOREIGN KEY (related_perorg_id)
    REFERENCES dbo.PERORG (perorg_id)
go
ALTER TABLE dbo.QUAL_APPLICATION
    ADD CONSTRAINT FK_QUAL_APP_CONTACT_REL
    FOREIGN KEY (ssb_contact_rel_id)
    REFERENCES dbo.RELATIONSHIP (rel_id)
go
ALTER TABLE dbo.RELATIONSHIP
    ADD CONSTRAINT FK_RELATIONHIP_ORIG_REF
    FOREIGN KEY (original_reference_id)
    REFERENCES dbo.RELATIONSHIP (rel_id)
go
GRANT REFERENCES ON dbo.RELATIONSHIP TO eqa_user
go
GRANT SELECT ON dbo.RELATIONSHIP TO eqa_user
go
GRANT SELECT ON dbo.RELATIONSHIP TO read_only
go
GRANT SELECT ON dbo.RELATIONSHIP TO rma_users
go
GRANT INSERT ON dbo.RELATIONSHIP TO eqa_user
go
GRANT DELETE ON dbo.RELATIONSHIP TO eqa_user
go
GRANT UPDATE ON dbo.RELATIONSHIP TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RELATIONSHIP TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RELATIONSHIP TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RELATIONSHIP TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RELATIONSHIP TO eqa_user
go
CREATE TABLE dbo.RELATIONSHIP_COMBO
(
    perorg_type_from char(1) NOT NULL,
    perorg_type_to   char(1) NOT NULL,
    rel_type_code    char(2) NOT NULL,
    CONSTRAINT PK_RELATIONSHIP_COMBO
    PRIMARY KEY CLUSTERED (perorg_type_from,perorg_type_to,rel_type_code)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.RELATIONSHIP_COMBO') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RELATIONSHIP_COMBO >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RELATIONSHIP_COMBO >>>'
go
ALTER TABLE dbo.RELATIONSHIP_COMBO
    ADD CONSTRAINT FK_RELATIONSHIP_COMBO_TO
    FOREIGN KEY (perorg_type_to)
    REFERENCES dbo.PERORG_TYPE (perorg_type_code)
go
ALTER TABLE dbo.RELATIONSHIP_COMBO
    ADD CONSTRAINT FK_RELATIONSHIP_COMBO_FROM
    FOREIGN KEY (perorg_type_from)
    REFERENCES dbo.PERORG_TYPE (perorg_type_code)
go
GRANT REFERENCES ON dbo.RELATIONSHIP_COMBO TO eqa_user
go
GRANT SELECT ON dbo.RELATIONSHIP_COMBO TO eqa_user
go
GRANT SELECT ON dbo.RELATIONSHIP_COMBO TO read_only
go
GRANT SELECT ON dbo.RELATIONSHIP_COMBO TO rma_users
go
GRANT INSERT ON dbo.RELATIONSHIP_COMBO TO eqa_user
go
GRANT DELETE ON dbo.RELATIONSHIP_COMBO TO eqa_user
go
GRANT UPDATE ON dbo.RELATIONSHIP_COMBO TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RELATIONSHIP_COMBO TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RELATIONSHIP_COMBO TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RELATIONSHIP_COMBO TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RELATIONSHIP_COMBO TO eqa_user
go
CREATE TABLE dbo.RELATIONSHIP_TYPE
(
    rel_type_code          char(2)      NOT NULL,
    rel_type_desc          varchar(255) NOT NULL,
    rel_equal_relationship yn           DEFAULT 0 NOT NULL,
    CONSTRAINT PK_RELATIONSHIP_TYPE
    PRIMARY KEY CLUSTERED (rel_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.RELATIONSHIP_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RELATIONSHIP_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RELATIONSHIP_TYPE >>>'
go
ALTER TABLE dbo.RELATIONSHIP
    ADD CONSTRAINT FK_REL_REL_TYPE_CODE
    FOREIGN KEY (rel_type_code)
    REFERENCES dbo.RELATIONSHIP_TYPE (rel_type_code)
go
ALTER TABLE dbo.RELATIONSHIP_COMBO
    ADD CONSTRAINT FK_REL_COMBO_REL_TYPE_CODE
    FOREIGN KEY (rel_type_code)
    REFERENCES dbo.RELATIONSHIP_TYPE (rel_type_code)
go
GRANT REFERENCES ON dbo.RELATIONSHIP_TYPE TO eqa_user
go
GRANT SELECT ON dbo.RELATIONSHIP_TYPE TO eqa_user
go
GRANT SELECT ON dbo.RELATIONSHIP_TYPE TO read_only
go
GRANT SELECT ON dbo.RELATIONSHIP_TYPE TO rma_users
go
GRANT INSERT ON dbo.RELATIONSHIP_TYPE TO eqa_user
go
GRANT DELETE ON dbo.RELATIONSHIP_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.RELATIONSHIP_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RELATIONSHIP_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RELATIONSHIP_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RELATIONSHIP_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RELATIONSHIP_TYPE TO eqa_user
go
CREATE TABLE dbo.REPORT
(
    report_id              varchar(8)   NOT NULL,
    report_name            name         NOT NULL,
    report_display_name    varchar(40)  NOT NULL,
    report_purpose         descr        NULL,
    report_active          yn           DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    report_role            char(2)      NULL,
    output_id              varchar(8)   NULL,
    report_output_base_url varchar(400) NULL,
    report_template_path   varchar(400) NOT NULL,
    default_basename       name         NULL,
    default_handler        varchar(4)   DEFAULT 'PDF'                                                     NOT NULL,
    large                  yn           DEFAULT 0                                                         NOT NULL,
    CONSTRAINT PK_REPORT
    PRIMARY KEY CLUSTERED (report_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.REPORT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.REPORT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.REPORT >>>'
go
GRANT REFERENCES ON dbo.REPORT TO eqa_user
go
GRANT SELECT ON dbo.REPORT TO eqa_user
go
GRANT SELECT ON dbo.REPORT TO read_only
go
GRANT SELECT ON dbo.REPORT TO rma_users
go
GRANT INSERT ON dbo.REPORT TO eqa_user
go
GRANT DELETE ON dbo.REPORT TO eqa_user
go
GRANT UPDATE ON dbo.REPORT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.REPORT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.REPORT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.REPORT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.REPORT TO eqa_user
go
CREATE TABLE dbo.REPORT_CATEGORY
(
    report_category_code code_2 NOT NULL,
    report_category_desc descr  NOT NULL,
    parent_code          code_2 NULL,
    active_ind           yn     DEFAULT '1' NOT NULL,
    CONSTRAINT PK_REPORT_CATEGORY
    PRIMARY KEY CLUSTERED (report_category_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.REPORT_CATEGORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.REPORT_CATEGORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.REPORT_CATEGORY >>>'
go
ALTER TABLE dbo.REPORT_CATEGORY
    ADD CONSTRAINT FK_REPORT_CATEGORY_PARENT
    FOREIGN KEY (parent_code)
    REFERENCES dbo.REPORT_CATEGORY (report_category_code)
go
GRANT REFERENCES ON dbo.REPORT_CATEGORY TO eqa_user
go
GRANT SELECT ON dbo.REPORT_CATEGORY TO eqa_user
go
GRANT SELECT ON dbo.REPORT_CATEGORY TO read_only
go
GRANT SELECT ON dbo.REPORT_CATEGORY TO rma_users
go
GRANT INSERT ON dbo.REPORT_CATEGORY TO eqa_user
go
GRANT DELETE ON dbo.REPORT_CATEGORY TO eqa_user
go
GRANT UPDATE ON dbo.REPORT_CATEGORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.REPORT_CATEGORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.REPORT_CATEGORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.REPORT_CATEGORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.REPORT_CATEGORY TO eqa_user
go
CREATE TABLE dbo.REPORT_CONTEXT
(
    report_context_id    code_2     NOT NULL,
    report_id            varchar(8) NOT NULL,
    report_category_code code_2     NOT NULL,
    iteration_mode       smallint   NULL,
    CONSTRAINT PK_REPORT_CONTEXT
    PRIMARY KEY CLUSTERED (report_context_id),
    CONSTRAINT AK_REPORT_CONTEXT_BUSINESS_KEY
    UNIQUE NONCLUSTERED (report_id,report_category_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.REPORT_CONTEXT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.REPORT_CONTEXT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.REPORT_CONTEXT >>>'
go
ALTER TABLE dbo.REPORT_CONTEXT
    ADD CONSTRAINT FK_REPORT_2_REPORT_CONTEXT
    FOREIGN KEY (report_id)
    REFERENCES dbo.REPORT (report_id)
go
ALTER TABLE dbo.REPORT_CONTEXT
    ADD CONSTRAINT FK_REPORT_CATEGORY_CODE
    FOREIGN KEY (report_category_code)
    REFERENCES dbo.REPORT_CATEGORY (report_category_code)
go
GRANT REFERENCES ON dbo.REPORT_CONTEXT TO eqa_user
go
GRANT SELECT ON dbo.REPORT_CONTEXT TO eqa_user
go
GRANT SELECT ON dbo.REPORT_CONTEXT TO read_only
go
GRANT SELECT ON dbo.REPORT_CONTEXT TO rma_users
go
GRANT INSERT ON dbo.REPORT_CONTEXT TO eqa_user
go
GRANT DELETE ON dbo.REPORT_CONTEXT TO eqa_user
go
GRANT UPDATE ON dbo.REPORT_CONTEXT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.REPORT_CONTEXT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.REPORT_CONTEXT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.REPORT_CONTEXT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.REPORT_CONTEXT TO eqa_user
go
CREATE TABLE dbo.REPORT_FIELD_TYPE
(
    report_field_type      code_2 NOT NULL,
    report_field_type_desc descr  NULL,
    active_ind             yn     DEFAULT '1' NOT NULL,
    CONSTRAINT PK_REPORT_FIELD_TYPE
    PRIMARY KEY CLUSTERED (report_field_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.REPORT_FIELD_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.REPORT_FIELD_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.REPORT_FIELD_TYPE >>>'
go
GRANT REFERENCES ON dbo.REPORT_FIELD_TYPE TO eqa_user
go
GRANT SELECT ON dbo.REPORT_FIELD_TYPE TO eqa_user
go
GRANT SELECT ON dbo.REPORT_FIELD_TYPE TO read_only
go
GRANT SELECT ON dbo.REPORT_FIELD_TYPE TO rma_users
go
GRANT INSERT ON dbo.REPORT_FIELD_TYPE TO eqa_user
go
GRANT DELETE ON dbo.REPORT_FIELD_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.REPORT_FIELD_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.REPORT_FIELD_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.REPORT_FIELD_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.REPORT_FIELD_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.REPORT_FIELD_TYPE TO eqa_user
go
CREATE TABLE dbo.REPORT_INSTANCE
(
    report_instance_id numeric(12,0) NOT NULL,
    report_id          varchar(8)    NOT NULL,
    name               varchar(80)   NOT NULL,
    output_url         varchar(400)  NULL,
    report_status_code char(2)       NOT NULL,
    report_type        varchar(4)    NOT NULL,
    parent_id          numeric(12,0) NULL,
    is_header          yn            DEFAULT '0' NOT NULL,
    created_by         varchar(40)   NOT NULL,
    date_created       datetime      NULL,
    audit_tran_id      numeric(12,0) NOT NULL,
    ts                 timestamp     NOT NULL,
    CONSTRAINT PK_REPORT_INSTANCE
    PRIMARY KEY CLUSTERED (report_instance_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.REPORT_INSTANCE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.REPORT_INSTANCE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.REPORT_INSTANCE >>>'
go
ALTER TABLE dbo.REPORT_INSTANCE
    ADD CONSTRAINT FK_REPORT
    FOREIGN KEY (report_id)
    REFERENCES dbo.REPORT (report_id)
go
ALTER TABLE dbo.REPORT_INSTANCE
    ADD CONSTRAINT FK_REPORT_INSTANCE_PARENT
    FOREIGN KEY (parent_id)
    REFERENCES dbo.REPORT_INSTANCE (report_instance_id)
go
GRANT REFERENCES ON dbo.REPORT_INSTANCE TO eqa_user
go
GRANT SELECT ON dbo.REPORT_INSTANCE TO eqa_user
go
GRANT SELECT ON dbo.REPORT_INSTANCE TO read_only
go
GRANT SELECT ON dbo.REPORT_INSTANCE TO rma_users
go
GRANT INSERT ON dbo.REPORT_INSTANCE TO eqa_user
go
GRANT DELETE ON dbo.REPORT_INSTANCE TO eqa_user
go
GRANT UPDATE ON dbo.REPORT_INSTANCE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.REPORT_INSTANCE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.REPORT_INSTANCE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.REPORT_INSTANCE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.REPORT_INSTANCE TO eqa_user
go
CREATE TABLE dbo.REPORT_INSTANCE_PARAMETER
(
    report_instance_parameter_id numeric(12,0) NOT NULL,
    report_instance_id           numeric(12,0) NOT NULL,
    name                         varchar(30)   NOT NULL,
    value                        varchar(100)  NOT NULL,
    CONSTRAINT PK_REPORT_INSTANCE_PARAMETER
    PRIMARY KEY CLUSTERED (report_instance_parameter_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.REPORT_INSTANCE_PARAMETER') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.REPORT_INSTANCE_PARAMETER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.REPORT_INSTANCE_PARAMETER >>>'
go
ALTER TABLE dbo.REPORT_INSTANCE_PARAMETER
    ADD CONSTRAINT FK_REPORT_INSTANCE
    FOREIGN KEY (report_instance_id)
    REFERENCES dbo.REPORT_INSTANCE (report_instance_id)
go
GRANT REFERENCES ON dbo.REPORT_INSTANCE_PARAMETER TO eqa_user
go
GRANT SELECT ON dbo.REPORT_INSTANCE_PARAMETER TO eqa_user
go
GRANT SELECT ON dbo.REPORT_INSTANCE_PARAMETER TO read_only
go
GRANT SELECT ON dbo.REPORT_INSTANCE_PARAMETER TO rma_users
go
GRANT INSERT ON dbo.REPORT_INSTANCE_PARAMETER TO eqa_user
go
GRANT DELETE ON dbo.REPORT_INSTANCE_PARAMETER TO eqa_user
go
GRANT UPDATE ON dbo.REPORT_INSTANCE_PARAMETER TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.REPORT_INSTANCE_PARAMETER TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.REPORT_INSTANCE_PARAMETER TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.REPORT_INSTANCE_PARAMETER TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.REPORT_INSTANCE_PARAMETER TO eqa_user
go
CREATE TABLE dbo.REPORT_ITERATION_MODE
(
    iteration_mode smallint     NOT NULL,
    description    descr        NOT NULL,
    class_name     varchar(100) NULL,
    CONSTRAINT PK_REPORT_ITERATION_MODE
    PRIMARY KEY CLUSTERED (iteration_mode)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.REPORT_ITERATION_MODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.REPORT_ITERATION_MODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.REPORT_ITERATION_MODE >>>'
go
ALTER TABLE dbo.REPORT_CONTEXT
    ADD CONSTRAINT FK_REPORT_ITERATION_MODE
    FOREIGN KEY (iteration_mode)
    REFERENCES dbo.REPORT_ITERATION_MODE (iteration_mode)
go
GRANT REFERENCES ON dbo.REPORT_ITERATION_MODE TO eqa_user
go
GRANT SELECT ON dbo.REPORT_ITERATION_MODE TO eqa_user
go
GRANT SELECT ON dbo.REPORT_ITERATION_MODE TO read_only
go
GRANT SELECT ON dbo.REPORT_ITERATION_MODE TO rma_users
go
GRANT INSERT ON dbo.REPORT_ITERATION_MODE TO eqa_user
go
GRANT DELETE ON dbo.REPORT_ITERATION_MODE TO eqa_user
go
GRANT UPDATE ON dbo.REPORT_ITERATION_MODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.REPORT_ITERATION_MODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.REPORT_ITERATION_MODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.REPORT_ITERATION_MODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.REPORT_ITERATION_MODE TO eqa_user
go
CREATE TABLE dbo.REPORT_PARAMETER_CONFIG
(
    report_parameter_config_id numeric(12,0) NOT NULL,
    report_parameter_id        varchar(30)   NOT NULL,
    report_category_code       code_2        NOT NULL,
    field_type                 code_2        DEFAULT '0' NOT NULL,
    default_value              varchar(100)  NULL,
    active_ind                 yn            DEFAULT '1' NOT NULL,
    CONSTRAINT PK_REPORT_PARAMETER_CONFIG
    PRIMARY KEY CLUSTERED (report_parameter_config_id),
    CONSTRAINT AK_RPC_BUSINESS_KEY
    UNIQUE NONCLUSTERED (report_parameter_id,report_category_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.REPORT_PARAMETER_CONFIG') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.REPORT_PARAMETER_CONFIG >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.REPORT_PARAMETER_CONFIG >>>'
go
ALTER TABLE dbo.REPORT_PARAMETER_CONFIG
    ADD CONSTRAINT FK_REPORT_CATEGORY_2_RPC
    FOREIGN KEY (report_category_code)
    REFERENCES dbo.REPORT_CATEGORY (report_category_code)
go
ALTER TABLE dbo.REPORT_PARAMETER_CONFIG
    ADD CONSTRAINT FK_REPORT_FIELD_TYPE
    FOREIGN KEY (field_type)
    REFERENCES dbo.REPORT_FIELD_TYPE (report_field_type)
go
GRANT REFERENCES ON dbo.REPORT_PARAMETER_CONFIG TO eqa_user
go
GRANT SELECT ON dbo.REPORT_PARAMETER_CONFIG TO eqa_user
go
GRANT SELECT ON dbo.REPORT_PARAMETER_CONFIG TO read_only
go
GRANT SELECT ON dbo.REPORT_PARAMETER_CONFIG TO rma_users
go
GRANT INSERT ON dbo.REPORT_PARAMETER_CONFIG TO eqa_user
go
GRANT DELETE ON dbo.REPORT_PARAMETER_CONFIG TO eqa_user
go
GRANT UPDATE ON dbo.REPORT_PARAMETER_CONFIG TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.REPORT_PARAMETER_CONFIG TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.REPORT_PARAMETER_CONFIG TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.REPORT_PARAMETER_CONFIG TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.REPORT_PARAMETER_CONFIG TO eqa_user
go
CREATE TABLE dbo.REPORT_ROLE
(
    report_role      code_2 NOT NULL,
    report_role_desc descr  NOT NULL,
    CONSTRAINT PK_REPORT_ROLE
    PRIMARY KEY CLUSTERED (report_role)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.REPORT_ROLE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.REPORT_ROLE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.REPORT_ROLE >>>'
go
ALTER TABLE dbo.REPORT
    ADD CONSTRAINT FK_REPORT_REPORT_ROLE
    FOREIGN KEY (report_role)
    REFERENCES dbo.REPORT_ROLE (report_role)
go
GRANT REFERENCES ON dbo.REPORT_ROLE TO eqa_user
go
GRANT SELECT ON dbo.REPORT_ROLE TO eqa_user
go
GRANT SELECT ON dbo.REPORT_ROLE TO read_only
go
GRANT SELECT ON dbo.REPORT_ROLE TO rma_users
go
GRANT INSERT ON dbo.REPORT_ROLE TO eqa_user
go
GRANT DELETE ON dbo.REPORT_ROLE TO eqa_user
go
GRANT UPDATE ON dbo.REPORT_ROLE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.REPORT_ROLE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.REPORT_ROLE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.REPORT_ROLE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.REPORT_ROLE TO eqa_user
go
CREATE TABLE dbo.REPORT_STATUS
(
    report_status_code code_2 NOT NULL,
    report_status_desc descr  NULL,
    active_ind         yn     DEFAULT '1' NOT NULL,
    CONSTRAINT PK_REPORT_STATUS
    PRIMARY KEY CLUSTERED (report_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.REPORT_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.REPORT_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.REPORT_STATUS >>>'
go
ALTER TABLE dbo.REPORT_INSTANCE
    ADD CONSTRAINT FK_REPORT_STATUS
    FOREIGN KEY (report_status_code)
    REFERENCES dbo.REPORT_STATUS (report_status_code)
go
GRANT REFERENCES ON dbo.REPORT_STATUS TO eqa_user
go
GRANT SELECT ON dbo.REPORT_STATUS TO eqa_user
go
GRANT SELECT ON dbo.REPORT_STATUS TO read_only
go
GRANT SELECT ON dbo.REPORT_STATUS TO rma_users
go
GRANT INSERT ON dbo.REPORT_STATUS TO eqa_user
go
GRANT DELETE ON dbo.REPORT_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.REPORT_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.REPORT_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.REPORT_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.REPORT_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.REPORT_STATUS TO eqa_user
go
CREATE TABLE dbo.REPORT_TYPE
(
    report_type      varchar(4)  NOT NULL,
    report_type_desc varchar(40) NOT NULL,
    CONSTRAINT PK_REPORT_TYPE
    PRIMARY KEY CLUSTERED (report_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.REPORT_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.REPORT_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.REPORT_TYPE >>>'
go
ALTER TABLE dbo.REPORT_INSTANCE
    ADD CONSTRAINT FK_REPORT_INSTANCE_TYPE
    FOREIGN KEY (report_type)
    REFERENCES dbo.REPORT_TYPE (report_type)
go
GRANT REFERENCES ON dbo.REPORT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.REPORT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.REPORT_TYPE TO read_only
go
GRANT SELECT ON dbo.REPORT_TYPE TO rma_users
go
GRANT INSERT ON dbo.REPORT_TYPE TO eqa_user
go
GRANT DELETE ON dbo.REPORT_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.REPORT_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.REPORT_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.REPORT_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.REPORT_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.REPORT_TYPE TO eqa_user
go
CREATE TABLE dbo.RESULT
(
    result_id                OBJECT_ID     NOT NULL,
    result_type_id           char(4)       NOT NULL,
    entry_id                 OBJECT_ID     NOT NULL,
    merge_request_number     OBJECT_ID     NULL,
    date_completed           dt            NULL,
    loaded_date              dt            NULL,
    loaded_by                name          NULL,
    withdrawn                yn            DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    audit_tran_id            OBJECT_ID     NOT NULL,
    ts                       timestamp     NOT NULL,
    result_code              varchar(5)    NULL,
    created_batch_input_id   OBJECT_ID     NULL,
    updated_batch_input_id   OBJECT_ID     NULL,
    verification_ind         yn            DEFAULT 0                                                         NOT NULL,
    proximity_code           char(1)       NULL,
    marker_id                OBJECT_ID     NULL,
    academic_year            char(4)       NOT NULL,
    compassionate_entry_id   numeric(12,0) NULL,
    reconsideration_entry_id numeric(12,0) NULL,
    entry_review_id          OBJECT_ID     NULL,
    result_component_link_id OBJECT_ID     NULL,
    score                    number_3      NULL,
    assessment_method        code_2        NULL,
    CONSTRAINT PK_RESULT
    PRIMARY KEY NONCLUSTERED (result_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.RESULT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RESULT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RESULT >>>'
go
ALTER TABLE dbo.RESULT
    ADD CONSTRAINT FK_RESULT_RECON_ENTRY
    FOREIGN KEY (reconsideration_entry_id)
    REFERENCES dbo.RECONSIDERATION_ENTRY (reconsideration_entry_id)
go
ALTER TABLE dbo.RESULT
    ADD CONSTRAINT FK_RESULT_REFERENCE_PROXIMITY
    FOREIGN KEY (proximity_code)
    REFERENCES dbo.PROXIMITY_CODE (proximity_code)
go
ALTER TABLE dbo.RESULT
    ADD CONSTRAINT FK_RESULT_REFERENCE_MERGE_RE
    FOREIGN KEY (merge_request_number)
    REFERENCES dbo.MERGE_REQUEST (merge_request_number)
go
ALTER TABLE dbo.RESULT
    ADD CONSTRAINT FK_RESULT_ENTRY_YEAR
    FOREIGN KEY (entry_id,academic_year)
    REFERENCES dbo.ENTRY (entry_id,academic_year)
go
ALTER TABLE dbo.RESULT
    ADD CONSTRAINT FK_RESULT_COMPASSIONATE_ENTRY
    FOREIGN KEY (compassionate_entry_id)
    REFERENCES dbo.COMPASSIONATE_ENTRY (compassionate_entry_id)
go
ALTER TABLE dbo.RESULT
    ADD CONSTRAINT FK_RESULT_REVIEW
    FOREIGN KEY (entry_review_id)
    REFERENCES dbo.ENTRY_REVIEW (entry_review_id)
go
ALTER TABLE dbo.RESULT
    ADD CONSTRAINT FK_RESULT_CREATE_BATCH
    FOREIGN KEY (created_batch_input_id)
    REFERENCES dbo.BATCH_INPUT (batch_input_id)
go
ALTER TABLE dbo.RESULT
    ADD CONSTRAINT FK_RESULT_UPDATE_BATCH
    FOREIGN KEY (updated_batch_input_id)
    REFERENCES dbo.BATCH_INPUT (batch_input_id)
go
ALTER TABLE dbo.RESULT
    ADD CONSTRAINT FK_RESULT_REFERENCE_MARKER
    FOREIGN KEY (marker_id)
    REFERENCES dbo.MARKER (marker_id)
go
ALTER TABLE dbo.RESULT
    ADD CONSTRAINT FK_RESULT_ASSESSMENT_METHOD
    FOREIGN KEY (assessment_method)
    REFERENCES dbo.ASSESSMENT_METHOD (assessment_method)
go
GRANT REFERENCES ON dbo.RESULT TO eqa_user
go
GRANT SELECT ON dbo.RESULT TO eqa_user
go
GRANT SELECT ON dbo.RESULT TO read_only
go
GRANT SELECT ON dbo.RESULT TO rma_users
go
GRANT INSERT ON dbo.RESULT TO eqa_user
go
GRANT DELETE ON dbo.RESULT TO eqa_user
go
GRANT UPDATE ON dbo.RESULT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RESULT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RESULT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RESULT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RESULT TO eqa_user
go
CREATE TABLE dbo.RESULT_CODE
(
    result_code          varchar(5)   NOT NULL,
    result_desc          varchar(100) NOT NULL,
    short_desc           varchar(10)  NOT NULL,
    assessed_ind         yn_ind       NOT NULL,
    pep_required_ind     ny_ind       NOT NULL,
    active_ind           yn_ind       NOT NULL,
    sortkey              sortkey      NOT NULL,
    marker_claimable_ind ny_ind       NOT NULL,
    CONSTRAINT PK_RESULT_CODE
    PRIMARY KEY CLUSTERED (result_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.RESULT_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RESULT_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RESULT_CODE >>>'
go
ALTER TABLE dbo.QFN_SCENARIO_STD_COMPONENT
    ADD CONSTRAINT FK_QFN_SCE_STD_COMP_RESULT
    FOREIGN KEY (result_code)
    REFERENCES dbo.RESULT_CODE (result_code)
go
ALTER TABLE dbo.RESULT
    ADD CONSTRAINT FK_RESULT_RESULT_CODE
    FOREIGN KEY (result_code)
    REFERENCES dbo.RESULT_CODE (result_code)
go
GRANT REFERENCES ON dbo.RESULT_CODE TO eqa_user
go
GRANT SELECT ON dbo.RESULT_CODE TO eqa_user
go
GRANT SELECT ON dbo.RESULT_CODE TO read_only
go
GRANT SELECT ON dbo.RESULT_CODE TO rma_users
go
GRANT INSERT ON dbo.RESULT_CODE TO eqa_user
go
GRANT DELETE ON dbo.RESULT_CODE TO eqa_user
go
GRANT UPDATE ON dbo.RESULT_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RESULT_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RESULT_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RESULT_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RESULT_CODE TO eqa_user
go
CREATE TABLE dbo.RESULT_COMPONENT
(
    result_component_id          OBJECT_ID  NOT NULL,
    result_component_question_id OBJECT_ID  NOT NULL,
    result_component_link_id     OBJECT_ID  NOT NULL,
    component_value              varchar(5) NOT NULL,
    active_ind                   yn_ind     NOT NULL,
    audit_tran_id                OBJECT_ID  NOT NULL,
    ts                           timestamp  NOT NULL,
    CONSTRAINT PK_RESULT_COMPONENT
    PRIMARY KEY CLUSTERED (result_component_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.RESULT_COMPONENT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RESULT_COMPONENT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RESULT_COMPONENT >>>'
go
GRANT REFERENCES ON dbo.RESULT_COMPONENT TO eqa_user
go
GRANT SELECT ON dbo.RESULT_COMPONENT TO eqa_user
go
GRANT SELECT ON dbo.RESULT_COMPONENT TO read_only
go
GRANT SELECT ON dbo.RESULT_COMPONENT TO rma_users
go
GRANT INSERT ON dbo.RESULT_COMPONENT TO eqa_user
go
GRANT DELETE ON dbo.RESULT_COMPONENT TO eqa_user
go
GRANT UPDATE ON dbo.RESULT_COMPONENT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RESULT_COMPONENT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RESULT_COMPONENT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RESULT_COMPONENT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RESULT_COMPONENT TO eqa_user
go
CREATE TABLE dbo.RESULT_COMPONENT_LAYOUT_TYPE
(
    result_component_layout_type char(4) NOT NULL,
    question_layout_name         name    NOT NULL,
    question_layout_xml          text    NOT NULL OFF ROW,
    active_ind                   yn_ind  NOT NULL,
    CONSTRAINT PK_RESULT_COMPONENT_LAYOUT_TYP
    PRIMARY KEY CLUSTERED (result_component_layout_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.RESULT_COMPONENT_LAYOUT_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RESULT_COMPONENT_LAYOUT_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RESULT_COMPONENT_LAYOUT_TYPE >>>'
go
GRANT REFERENCES ON dbo.RESULT_COMPONENT_LAYOUT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.RESULT_COMPONENT_LAYOUT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.RESULT_COMPONENT_LAYOUT_TYPE TO read_only
go
GRANT SELECT ON dbo.RESULT_COMPONENT_LAYOUT_TYPE TO rma_users
go
GRANT INSERT ON dbo.RESULT_COMPONENT_LAYOUT_TYPE TO eqa_user
go
GRANT DELETE ON dbo.RESULT_COMPONENT_LAYOUT_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.RESULT_COMPONENT_LAYOUT_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RESULT_COMPONENT_LAYOUT_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RESULT_COMPONENT_LAYOUT_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RESULT_COMPONENT_LAYOUT_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RESULT_COMPONENT_LAYOUT_TYPE TO eqa_user
go
CREATE TABLE dbo.RESULT_COMPONENT_LINK
(
    result_component_link_id OBJECT_ID NOT NULL,
    nsn                      nsn       NOT NULL,
    entry_id                 OBJECT_ID NULL,
    active_ind               yn_ind    NOT NULL,
    audit_tran_id            OBJECT_ID NOT NULL,
    ts                       timestamp NOT NULL,
    CONSTRAINT PK_RESULT_COMPONENT_LINK
    PRIMARY KEY CLUSTERED (result_component_link_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.RESULT_COMPONENT_LINK') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RESULT_COMPONENT_LINK >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RESULT_COMPONENT_LINK >>>'
go
ALTER TABLE dbo.RESULT_COMPONENT_LINK
    ADD CONSTRAINT FK_RESULT_COMP_LINK_ENTRY
    FOREIGN KEY (entry_id)
    REFERENCES dbo.ENTRY (entry_id)
go
ALTER TABLE dbo.RESULT_COMPONENT_LINK
    ADD CONSTRAINT FK_RESULT_COMP_LINK_LEARNER
    FOREIGN KEY (nsn)
    REFERENCES dbo.LEARNER (nsn)
go
ALTER TABLE dbo.RESULT
    ADD CONSTRAINT FK_RESULT_RES_COMP_LK
    FOREIGN KEY (result_component_link_id)
    REFERENCES dbo.RESULT_COMPONENT_LINK (result_component_link_id)
go
ALTER TABLE dbo.RESULT_COMPONENT
    ADD CONSTRAINT FK_RESULT_COMP_RES_COMP_LINK
    FOREIGN KEY (result_component_link_id)
    REFERENCES dbo.RESULT_COMPONENT_LINK (result_component_link_id)
go
GRANT REFERENCES ON dbo.RESULT_COMPONENT_LINK TO eqa_user
go
GRANT SELECT ON dbo.RESULT_COMPONENT_LINK TO eqa_user
go
GRANT SELECT ON dbo.RESULT_COMPONENT_LINK TO read_only
go
GRANT SELECT ON dbo.RESULT_COMPONENT_LINK TO rma_users
go
GRANT INSERT ON dbo.RESULT_COMPONENT_LINK TO eqa_user
go
GRANT DELETE ON dbo.RESULT_COMPONENT_LINK TO eqa_user
go
GRANT UPDATE ON dbo.RESULT_COMPONENT_LINK TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RESULT_COMPONENT_LINK TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RESULT_COMPONENT_LINK TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RESULT_COMPONENT_LINK TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RESULT_COMPONENT_LINK TO eqa_user
go
CREATE TABLE dbo.RESULT_COMPONENT_QN_TYPE
(
    result_component_qn_type code_2 NOT NULL,
    component_qn_type_desc   descr  NOT NULL,
    active_ind               yn_ind NOT NULL,
    CONSTRAINT PK_RESULT_COMPONENT_QN_TYPE
    PRIMARY KEY CLUSTERED (result_component_qn_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.RESULT_COMPONENT_QN_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RESULT_COMPONENT_QN_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RESULT_COMPONENT_QN_TYPE >>>'
go
GRANT REFERENCES ON dbo.RESULT_COMPONENT_QN_TYPE TO eqa_user
go
GRANT SELECT ON dbo.RESULT_COMPONENT_QN_TYPE TO eqa_user
go
GRANT SELECT ON dbo.RESULT_COMPONENT_QN_TYPE TO read_only
go
GRANT SELECT ON dbo.RESULT_COMPONENT_QN_TYPE TO rma_users
go
GRANT INSERT ON dbo.RESULT_COMPONENT_QN_TYPE TO eqa_user
go
GRANT DELETE ON dbo.RESULT_COMPONENT_QN_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.RESULT_COMPONENT_QN_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RESULT_COMPONENT_QN_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RESULT_COMPONENT_QN_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RESULT_COMPONENT_QN_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RESULT_COMPONENT_QN_TYPE TO eqa_user
go
CREATE TABLE dbo.RESULT_COMPONENT_QUESTION
(
    result_component_question_id OBJECT_ID    NOT NULL,
    result_component_qn_type     code_2       NOT NULL,
    assessment_session_comp_id   OBJECT_ID    NOT NULL,
    question_desc                varchar(256) NOT NULL,
    value_lower                  smallint     NOT NULL,
    value_upper                  smallint     NOT NULL,
    capturable_ind               yn_ind       NOT NULL,
    sortkey                      sortkey      NOT NULL,
    audit_tran_id                OBJECT_ID    NOT NULL,
    ts                           timestamp    NOT NULL,
    CONSTRAINT PK_RESULT_COMPONENT_QUESTION
    PRIMARY KEY CLUSTERED (result_component_question_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.RESULT_COMPONENT_QUESTION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RESULT_COMPONENT_QUESTION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RESULT_COMPONENT_QUESTION >>>'
go
ALTER TABLE dbo.RESULT_COMPONENT_QUESTION
    ADD CONSTRAINT FK_RESULT_COMP_QN_QN_TYPE
    FOREIGN KEY (result_component_qn_type)
    REFERENCES dbo.RESULT_COMPONENT_QN_TYPE (result_component_qn_type)
go
ALTER TABLE dbo.RESULT_COMPONENT_QUESTION
    ADD CONSTRAINT FK_RESULT_COMP_QN_ASS_SESS_COM
    FOREIGN KEY (assessment_session_comp_id)
    REFERENCES dbo.ASSESSMENT_SESSION_COMPONENT (assessment_session_comp_id)
go
ALTER TABLE dbo.RESULT_COMPONENT
    ADD CONSTRAINT FK_RESULT_COMP_RES_COMP_QN
    FOREIGN KEY (result_component_question_id)
    REFERENCES dbo.RESULT_COMPONENT_QUESTION (result_component_question_id)
go
GRANT REFERENCES ON dbo.RESULT_COMPONENT_QUESTION TO eqa_user
go
GRANT SELECT ON dbo.RESULT_COMPONENT_QUESTION TO eqa_user
go
GRANT SELECT ON dbo.RESULT_COMPONENT_QUESTION TO read_only
go
GRANT SELECT ON dbo.RESULT_COMPONENT_QUESTION TO rma_users
go
GRANT INSERT ON dbo.RESULT_COMPONENT_QUESTION TO eqa_user
go
GRANT DELETE ON dbo.RESULT_COMPONENT_QUESTION TO eqa_user
go
GRANT UPDATE ON dbo.RESULT_COMPONENT_QUESTION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RESULT_COMPONENT_QUESTION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RESULT_COMPONENT_QUESTION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RESULT_COMPONENT_QUESTION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RESULT_COMPONENT_QUESTION TO eqa_user
go
CREATE TABLE dbo.RESULT_RANKING
(
    result_ranking_id           OBJECT_ID     NOT NULL,
    result_code                 varchar(5)    NOT NULL,
    std_grading_type_code       varchar(4)    NOT NULL,
    result_desc                 varchar(100)  NOT NULL,
    result_rank                 numeric(18,0) NOT NULL,
    include_on_rol              yn_ind        NOT NULL,
    active_ind                  yn_ind        NOT NULL,
    outstanding_performance_ind ny_ind        NOT NULL,
    positive_result_ind         ny_ind        NOT NULL,
    audit_tran_id               OBJECT_ID     NOT NULL,
    ts                          timestamp     NOT NULL,
    quick_key                   char(1)       NULL,
    CONSTRAINT PK_RESULT_RANKING
    PRIMARY KEY NONCLUSTERED (result_ranking_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.RESULT_RANKING') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RESULT_RANKING >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RESULT_RANKING >>>'
go
ALTER TABLE dbo.RESULT_RANKING
    ADD CONSTRAINT FK_RESULT_RANKING_RESULT
    FOREIGN KEY (result_code)
    REFERENCES dbo.RESULT_CODE (result_code)
go
GRANT REFERENCES ON dbo.RESULT_RANKING TO eqa_user
go
GRANT SELECT ON dbo.RESULT_RANKING TO eqa_user
go
GRANT SELECT ON dbo.RESULT_RANKING TO read_only
go
GRANT SELECT ON dbo.RESULT_RANKING TO rma_users
go
GRANT INSERT ON dbo.RESULT_RANKING TO eqa_user
go
GRANT DELETE ON dbo.RESULT_RANKING TO eqa_user
go
GRANT UPDATE ON dbo.RESULT_RANKING TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RESULT_RANKING TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RESULT_RANKING TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RESULT_RANKING TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RESULT_RANKING TO eqa_user
go
CREATE TABLE dbo.RESULT_TYPE
(
    result_type_id        char(4) NOT NULL,
    result_type_code_desc descr   NULL,
    CONSTRAINT PK_RESULT_TYPE
    PRIMARY KEY CLUSTERED (result_type_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.RESULT_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RESULT_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RESULT_TYPE >>>'
go
ALTER TABLE dbo.RESULT
    ADD CONSTRAINT FK_RESULT_FK_RESULT_RESULT_T
    FOREIGN KEY (result_type_id)
    REFERENCES dbo.RESULT_TYPE (result_type_id)
go
GRANT REFERENCES ON dbo.RESULT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.RESULT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.RESULT_TYPE TO read_only
go
GRANT SELECT ON dbo.RESULT_TYPE TO rma_users
go
GRANT INSERT ON dbo.RESULT_TYPE TO eqa_user
go
GRANT DELETE ON dbo.RESULT_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.RESULT_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RESULT_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RESULT_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RESULT_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RESULT_TYPE TO eqa_user
go
CREATE TABLE dbo.RES_STAT_VERIFICATION_CODE
(
    res_stat_verification_code code_2 NOT NULL,
    res_stat_ver_code_desc     descr  NULL,
    CONSTRAINT PK_RES_STAT_VERIFICATION_CODE
    PRIMARY KEY CLUSTERED (res_stat_verification_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.RES_STAT_VERIFICATION_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RES_STAT_VERIFICATION_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RES_STAT_VERIFICATION_CODE >>>'
go
GRANT REFERENCES ON dbo.RES_STAT_VERIFICATION_CODE TO eqa_user
go
GRANT SELECT ON dbo.RES_STAT_VERIFICATION_CODE TO eqa_user
go
GRANT SELECT ON dbo.RES_STAT_VERIFICATION_CODE TO read_only
go
GRANT SELECT ON dbo.RES_STAT_VERIFICATION_CODE TO rma_users
go
GRANT INSERT ON dbo.RES_STAT_VERIFICATION_CODE TO eqa_user
go
GRANT DELETE ON dbo.RES_STAT_VERIFICATION_CODE TO eqa_user
go
GRANT UPDATE ON dbo.RES_STAT_VERIFICATION_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RES_STAT_VERIFICATION_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RES_STAT_VERIFICATION_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RES_STAT_VERIFICATION_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RES_STAT_VERIFICATION_CODE TO eqa_user
go
CREATE TABLE dbo.RETURN_TYPE
(
    return_type      code_2 NOT NULL,
    return_type_desc descr  NOT NULL,
    CONSTRAINT PK_RETURN_TYPE
    PRIMARY KEY CLUSTERED (return_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.RETURN_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RETURN_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RETURN_TYPE >>>'
go
GRANT REFERENCES ON dbo.RETURN_TYPE TO eqa_user
go
GRANT SELECT ON dbo.RETURN_TYPE TO eqa_user
go
GRANT SELECT ON dbo.RETURN_TYPE TO read_only
go
GRANT SELECT ON dbo.RETURN_TYPE TO rma_users
go
GRANT INSERT ON dbo.RETURN_TYPE TO eqa_user
go
GRANT DELETE ON dbo.RETURN_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.RETURN_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RETURN_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RETURN_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RETURN_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RETURN_TYPE TO eqa_user
go
CREATE TABLE dbo.REVIEW_REASON_CODE
(
    review_reason_code code_2       NOT NULL,
    review_reason_desc varchar(255) NOT NULL,
    letter_text        varchar(255) NULL,
    CONSTRAINT PK_REVIEW_REASON_CODE
    PRIMARY KEY CLUSTERED (review_reason_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.REVIEW_REASON_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.REVIEW_REASON_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.REVIEW_REASON_CODE >>>'
go
GRANT REFERENCES ON dbo.REVIEW_REASON_CODE TO eqa_user
go
GRANT SELECT ON dbo.REVIEW_REASON_CODE TO eqa_user
go
GRANT SELECT ON dbo.REVIEW_REASON_CODE TO read_only
go
GRANT SELECT ON dbo.REVIEW_REASON_CODE TO rma_users
go
GRANT INSERT ON dbo.REVIEW_REASON_CODE TO eqa_user
go
GRANT DELETE ON dbo.REVIEW_REASON_CODE TO eqa_user
go
GRANT UPDATE ON dbo.REVIEW_REASON_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.REVIEW_REASON_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.REVIEW_REASON_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.REVIEW_REASON_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.REVIEW_REASON_CODE TO eqa_user
go
CREATE TABLE dbo.REVIEW_STATUS_CODE
(
    review_status_code code_2       NOT NULL,
    review_status_desc varchar(255) NOT NULL,
    CONSTRAINT PK_REVIEW_STATUS_CODE
    PRIMARY KEY CLUSTERED (review_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.REVIEW_STATUS_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.REVIEW_STATUS_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.REVIEW_STATUS_CODE >>>'
go
GRANT REFERENCES ON dbo.REVIEW_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.REVIEW_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.REVIEW_STATUS_CODE TO read_only
go
GRANT SELECT ON dbo.REVIEW_STATUS_CODE TO rma_users
go
GRANT INSERT ON dbo.REVIEW_STATUS_CODE TO eqa_user
go
GRANT DELETE ON dbo.REVIEW_STATUS_CODE TO eqa_user
go
GRANT UPDATE ON dbo.REVIEW_STATUS_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.REVIEW_STATUS_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.REVIEW_STATUS_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.REVIEW_STATUS_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.REVIEW_STATUS_CODE TO eqa_user
go
CREATE TABLE dbo.RISK_CASE_TYPE
(
    risk_case_type_code     code_2  NOT NULL,
    risk_case_type_desc     descr   NOT NULL,
    case_mgmt_app_type_desc descr   NOT NULL,
    active_ind              yn_ind  NOT NULL,
    sortkey                 sortkey NOT NULL,
    CONSTRAINT PK_RISK_CASE_TYPE
    PRIMARY KEY CLUSTERED (risk_case_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.RISK_CASE_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RISK_CASE_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RISK_CASE_TYPE >>>'
go
GRANT REFERENCES ON dbo.RISK_CASE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.RISK_CASE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.RISK_CASE_TYPE TO read_only
go
GRANT SELECT ON dbo.RISK_CASE_TYPE TO rma_users
go
GRANT INSERT ON dbo.RISK_CASE_TYPE TO eqa_user
go
GRANT DELETE ON dbo.RISK_CASE_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.RISK_CASE_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RISK_CASE_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RISK_CASE_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RISK_CASE_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RISK_CASE_TYPE TO eqa_user
go
CREATE TABLE dbo.RISK_ISSUE_INDEX_HIST
(
    risk_issue_index_hist_id OBJECT_ID    NOT NULL,
    prov_risk_issue_id       OBJECT_ID    NOT NULL,
    risk_issue_index         numeric(2,0) NOT NULL,
    updated_date             dt           NOT NULL,
    updated_by               usr          NOT NULL,
    audit_tran_id            OBJECT_ID    NOT NULL,
    CONSTRAINT PK_RISK_ISSUE_INDEX_HIST
    PRIMARY KEY CLUSTERED (risk_issue_index_hist_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.RISK_ISSUE_INDEX_HIST') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RISK_ISSUE_INDEX_HIST >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RISK_ISSUE_INDEX_HIST >>>'
go
ALTER TABLE dbo.RISK_ISSUE_INDEX_HIST
    ADD CONSTRAINT FK_RSK_ISS_IND_HST_PRO_RSK_ISS
    FOREIGN KEY (prov_risk_issue_id)
    REFERENCES dbo.PROV_RISK_ISSUE (prov_risk_issue_id)
go
GRANT REFERENCES ON dbo.RISK_ISSUE_INDEX_HIST TO eqa_user
go
GRANT SELECT ON dbo.RISK_ISSUE_INDEX_HIST TO eqa_user
go
GRANT SELECT ON dbo.RISK_ISSUE_INDEX_HIST TO read_only
go
GRANT SELECT ON dbo.RISK_ISSUE_INDEX_HIST TO rma_users
go
GRANT INSERT ON dbo.RISK_ISSUE_INDEX_HIST TO eqa_user
go
GRANT DELETE ON dbo.RISK_ISSUE_INDEX_HIST TO eqa_user
go
GRANT UPDATE ON dbo.RISK_ISSUE_INDEX_HIST TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RISK_ISSUE_INDEX_HIST TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RISK_ISSUE_INDEX_HIST TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RISK_ISSUE_INDEX_HIST TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RISK_ISSUE_INDEX_HIST TO eqa_user
go
CREATE TABLE dbo.RISK_ISSUE_STATUS
(
    risk_issue_status_code code_2    NOT NULL,
    risk_issue_status_desc descr     NOT NULL,
    active_ind             yn_ind    NOT NULL,
    sortkey                sortkey   NOT NULL,
    audit_tran_id          OBJECT_ID NOT NULL,
    CONSTRAINT PK_RISK_ISSUE_STATUS
    PRIMARY KEY CLUSTERED (risk_issue_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.RISK_ISSUE_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RISK_ISSUE_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RISK_ISSUE_STATUS >>>'
go
GRANT REFERENCES ON dbo.RISK_ISSUE_STATUS TO eqa_user
go
GRANT SELECT ON dbo.RISK_ISSUE_STATUS TO eqa_user
go
GRANT SELECT ON dbo.RISK_ISSUE_STATUS TO read_only
go
GRANT SELECT ON dbo.RISK_ISSUE_STATUS TO rma_users
go
GRANT INSERT ON dbo.RISK_ISSUE_STATUS TO eqa_user
go
GRANT DELETE ON dbo.RISK_ISSUE_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.RISK_ISSUE_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RISK_ISSUE_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RISK_ISSUE_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RISK_ISSUE_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RISK_ISSUE_STATUS TO eqa_user
go
CREATE TABLE dbo.RISK_ISSUE_STATUS_HIST
(
    risk_issue_status_hist_id OBJECT_ID NOT NULL,
    prov_risk_issue_id        OBJECT_ID NOT NULL,
    risk_issue_status_code    code_2    NOT NULL,
    updated_date              dt        NOT NULL,
    updated_by                usr       NOT NULL,
    audit_tran_id             OBJECT_ID NOT NULL,
    CONSTRAINT PK_RISK_ISSUE_STATUS_HIST
    PRIMARY KEY CLUSTERED (risk_issue_status_hist_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.RISK_ISSUE_STATUS_HIST') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RISK_ISSUE_STATUS_HIST >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RISK_ISSUE_STATUS_HIST >>>'
go
ALTER TABLE dbo.RISK_ISSUE_STATUS_HIST
    ADD CONSTRAINT FK_RSK_ISS_STA_HST_RSK_ISS_STA
    FOREIGN KEY (risk_issue_status_code)
    REFERENCES dbo.RISK_ISSUE_STATUS (risk_issue_status_code)
go
ALTER TABLE dbo.RISK_ISSUE_STATUS_HIST
    ADD CONSTRAINT FK_RSK_ISS_STA_HST_PRO_RSK_ISS
    FOREIGN KEY (prov_risk_issue_id)
    REFERENCES dbo.PROV_RISK_ISSUE (prov_risk_issue_id)
go
GRANT REFERENCES ON dbo.RISK_ISSUE_STATUS_HIST TO eqa_user
go
GRANT SELECT ON dbo.RISK_ISSUE_STATUS_HIST TO eqa_user
go
GRANT SELECT ON dbo.RISK_ISSUE_STATUS_HIST TO read_only
go
GRANT SELECT ON dbo.RISK_ISSUE_STATUS_HIST TO rma_users
go
GRANT INSERT ON dbo.RISK_ISSUE_STATUS_HIST TO eqa_user
go
GRANT DELETE ON dbo.RISK_ISSUE_STATUS_HIST TO eqa_user
go
GRANT UPDATE ON dbo.RISK_ISSUE_STATUS_HIST TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RISK_ISSUE_STATUS_HIST TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RISK_ISSUE_STATUS_HIST TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RISK_ISSUE_STATUS_HIST TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RISK_ISSUE_STATUS_HIST TO eqa_user
go
CREATE TABLE dbo.RISK_ISS_IND_TYPE
(
    risk_iss_ind_type_code code_2        NOT NULL,
    risk_iss_ind_type_desc descr         NOT NULL,
    risk_iss_ind_approach  varchar(2048) NULL,
    weighting              number_4      DEFAULT 1 NULL,
    active_ind             yn_ind        NOT NULL,
    sortkey                sortkey       NOT NULL,
    audit_tran_id          OBJECT_ID     NOT NULL,
    CONSTRAINT PK_RISK_ISS_IND_TYPE
    PRIMARY KEY CLUSTERED (risk_iss_ind_type_code)
)
LOCK ALLPAGES
go
IF OBJECT_ID('dbo.RISK_ISS_IND_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RISK_ISS_IND_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RISK_ISS_IND_TYPE >>>'
go
GRANT REFERENCES ON dbo.RISK_ISS_IND_TYPE TO eqa_user
go
GRANT SELECT ON dbo.RISK_ISS_IND_TYPE TO eqa_user
go
GRANT SELECT ON dbo.RISK_ISS_IND_TYPE TO read_only
go
GRANT SELECT ON dbo.RISK_ISS_IND_TYPE TO rma_users
go
GRANT INSERT ON dbo.RISK_ISS_IND_TYPE TO eqa_user
go
GRANT DELETE ON dbo.RISK_ISS_IND_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.RISK_ISS_IND_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RISK_ISS_IND_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RISK_ISS_IND_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RISK_ISS_IND_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RISK_ISS_IND_TYPE TO eqa_user
go
CREATE TABLE dbo.RISK_STATUS
(
    risk_status_code code_2    NOT NULL,
    risk_status_desc descr     NOT NULL,
    active_ind       yn_ind    NOT NULL,
    sortkey          sortkey   NOT NULL,
    audit_tran_id    OBJECT_ID NOT NULL,
    CONSTRAINT PK_RISK_STATUS
    PRIMARY KEY CLUSTERED (risk_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.RISK_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RISK_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RISK_STATUS >>>'
go
GRANT REFERENCES ON dbo.RISK_STATUS TO eqa_user
go
GRANT SELECT ON dbo.RISK_STATUS TO eqa_user
go
GRANT SELECT ON dbo.RISK_STATUS TO read_only
go
GRANT SELECT ON dbo.RISK_STATUS TO rma_users
go
GRANT INSERT ON dbo.RISK_STATUS TO eqa_user
go
GRANT DELETE ON dbo.RISK_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.RISK_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RISK_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RISK_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RISK_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RISK_STATUS TO eqa_user
go
CREATE TABLE dbo.RULES_GROUP
(
    rules_group_id       OBJECT_ID   NOT NULL,
    creation_date        datetime    NOT NULL,
    created_by           usr         NOT NULL,
    rules_group_name     varchar(40) NOT NULL,
    plugin_type_code     code_2      NULL,
    qfn_minor_version_id OBJECT_ID   NOT NULL,
    audit_tran_id        OBJECT_ID   NOT NULL,
    ts                   timestamp   NOT NULL,
    CONSTRAINT PK_RULES_GROUP
    PRIMARY KEY CLUSTERED (rules_group_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.RULES_GROUP') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RULES_GROUP >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RULES_GROUP >>>'
go
ALTER TABLE dbo.RULES_GROUP
    ADD CONSTRAINT FK_RULES_GRP_QFN_PLUGIN
    FOREIGN KEY (plugin_type_code)
    REFERENCES dbo.QFN_PLUGIN_RULE_TYPE (qfn_plugin_rule_type_code)
go
ALTER TABLE dbo.RULES_GROUP
    ADD CONSTRAINT FK_RULES_GRP_QFN_MINOR_VER
    FOREIGN KEY (qfn_minor_version_id)
    REFERENCES dbo.QFN_MINOR_VERSION (qfn_minor_version_id)
go
ALTER TABLE dbo.QFN_SECTION
    ADD CONSTRAINT FK_QFN_SECT_RULES_GRP
    FOREIGN KEY (rules_group_id)
    REFERENCES dbo.RULES_GROUP (rules_group_id)
go
GRANT REFERENCES ON dbo.RULES_GROUP TO eqa_user
go
GRANT SELECT ON dbo.RULES_GROUP TO eqa_user
go
GRANT SELECT ON dbo.RULES_GROUP TO read_only
go
GRANT SELECT ON dbo.RULES_GROUP TO rma_users
go
GRANT INSERT ON dbo.RULES_GROUP TO eqa_user
go
GRANT DELETE ON dbo.RULES_GROUP TO eqa_user
go
GRANT UPDATE ON dbo.RULES_GROUP TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RULES_GROUP TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RULES_GROUP TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RULES_GROUP TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RULES_GROUP TO eqa_user
go
CREATE TABLE dbo.RULES_GROUP_OPT_STD
(
    rules_group_id OBJECT_ID NOT NULL,
    std_version_id OBJECT_ID NOT NULL,
    audit_tran_id  OBJECT_ID NOT NULL,
    ts             timestamp NOT NULL,
    CONSTRAINT PK_RULES_GROUP_OPT_STD
    PRIMARY KEY CLUSTERED (rules_group_id,std_version_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.RULES_GROUP_OPT_STD') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RULES_GROUP_OPT_STD >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RULES_GROUP_OPT_STD >>>'
go
ALTER TABLE dbo.RULES_GROUP_OPT_STD
    ADD CONSTRAINT FK_RULES_GRP_OPT_STD_RULES_GRP
    FOREIGN KEY (rules_group_id)
    REFERENCES dbo.RULES_GROUP (rules_group_id)
go
GRANT REFERENCES ON dbo.RULES_GROUP_OPT_STD TO eqa_user
go
GRANT SELECT ON dbo.RULES_GROUP_OPT_STD TO eqa_user
go
GRANT SELECT ON dbo.RULES_GROUP_OPT_STD TO read_only
go
GRANT SELECT ON dbo.RULES_GROUP_OPT_STD TO rma_users
go
GRANT INSERT ON dbo.RULES_GROUP_OPT_STD TO eqa_user
go
GRANT DELETE ON dbo.RULES_GROUP_OPT_STD TO eqa_user
go
GRANT UPDATE ON dbo.RULES_GROUP_OPT_STD TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RULES_GROUP_OPT_STD TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RULES_GROUP_OPT_STD TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RULES_GROUP_OPT_STD TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RULES_GROUP_OPT_STD TO eqa_user
go
CREATE TABLE dbo.RUN_AFTER_TYPE
(
    run_after_type             code_2 NOT NULL,
    run_after_type_description descr  NOT NULL,
    CONSTRAINT PK_RUN_AFTER_TYPE
    PRIMARY KEY CLUSTERED (run_after_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.RUN_AFTER_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RUN_AFTER_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RUN_AFTER_TYPE >>>'
go
GRANT REFERENCES ON dbo.RUN_AFTER_TYPE TO eqa_user
go
GRANT SELECT ON dbo.RUN_AFTER_TYPE TO eqa_user
go
GRANT SELECT ON dbo.RUN_AFTER_TYPE TO read_only
go
GRANT SELECT ON dbo.RUN_AFTER_TYPE TO rma_users
go
GRANT INSERT ON dbo.RUN_AFTER_TYPE TO eqa_user
go
GRANT DELETE ON dbo.RUN_AFTER_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.RUN_AFTER_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RUN_AFTER_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RUN_AFTER_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RUN_AFTER_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RUN_AFTER_TYPE TO eqa_user
go
CREATE TABLE dbo.RUN_DIFFERENTIAL
(
    run_differential_code code_2 NOT NULL,
    run_differential_desc descr  NULL,
    active_ind            yn     DEFAULT '1' NOT NULL,
    CONSTRAINT PK_RUN_DIFFERENTIAL
    PRIMARY KEY CLUSTERED (run_differential_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.RUN_DIFFERENTIAL') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.RUN_DIFFERENTIAL >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.RUN_DIFFERENTIAL >>>'
go
GRANT REFERENCES ON dbo.RUN_DIFFERENTIAL TO eqa_user
go
GRANT SELECT ON dbo.RUN_DIFFERENTIAL TO eqa_user
go
GRANT SELECT ON dbo.RUN_DIFFERENTIAL TO read_only
go
GRANT SELECT ON dbo.RUN_DIFFERENTIAL TO rma_users
go
GRANT INSERT ON dbo.RUN_DIFFERENTIAL TO eqa_user
go
GRANT DELETE ON dbo.RUN_DIFFERENTIAL TO eqa_user
go
GRANT UPDATE ON dbo.RUN_DIFFERENTIAL TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.RUN_DIFFERENTIAL TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.RUN_DIFFERENTIAL TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.RUN_DIFFERENTIAL TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.RUN_DIFFERENTIAL TO eqa_user
go
CREATE TABLE dbo.SAC_FILE_UPLOAD
(
    sac_file_upload_id OBJECT_ID    NOT NULL,
    file_name          varchar(100) NULL,
    uploaded_date      datetime     NULL,
    uploaded_by        varchar(40)  NULL,
    total_count        int          NULL,
    success_count      int          NULL,
    failure_count      int          NULL,
    academic_year      char(4)      NULL,
    audit_tran_id      OBJECT_ID    NOT NULL,
    CONSTRAINT PK_SAC_FILE_UPLOAD
    PRIMARY KEY CLUSTERED (sac_file_upload_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SAC_FILE_UPLOAD') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SAC_FILE_UPLOAD >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SAC_FILE_UPLOAD >>>'
go
GRANT REFERENCES ON dbo.SAC_FILE_UPLOAD TO eqa_user
go
GRANT SELECT ON dbo.SAC_FILE_UPLOAD TO eqa_user
go
GRANT SELECT ON dbo.SAC_FILE_UPLOAD TO read_only
go
GRANT SELECT ON dbo.SAC_FILE_UPLOAD TO rma_users
go
GRANT INSERT ON dbo.SAC_FILE_UPLOAD TO eqa_user
go
GRANT DELETE ON dbo.SAC_FILE_UPLOAD TO eqa_user
go
GRANT UPDATE ON dbo.SAC_FILE_UPLOAD TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SAC_FILE_UPLOAD TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SAC_FILE_UPLOAD TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SAC_FILE_UPLOAD TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SAC_FILE_UPLOAD TO eqa_user
go
CREATE TABLE dbo.SALUTATION
(
    salutation_code char(2)      NOT NULL,
    salutation_desc varchar(255) NOT NULL,
    salution_title  yn           DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    CONSTRAINT PK_SALUTATION
    PRIMARY KEY CLUSTERED (salutation_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SALUTATION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SALUTATION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SALUTATION >>>'
go
GRANT REFERENCES ON dbo.SALUTATION TO eqa_user
go
GRANT SELECT ON dbo.SALUTATION TO eqa_user
go
GRANT SELECT ON dbo.SALUTATION TO read_only
go
GRANT SELECT ON dbo.SALUTATION TO rma_users
go
GRANT INSERT ON dbo.SALUTATION TO eqa_user
go
GRANT DELETE ON dbo.SALUTATION TO eqa_user
go
GRANT UPDATE ON dbo.SALUTATION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SALUTATION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SALUTATION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SALUTATION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SALUTATION TO eqa_user
go
CREATE TABLE dbo.SCHEDULE_RESULT_TYPE
(
    schedule_result_id OBJECT_ID NOT NULL,
    schedule_type      code_2    NOT NULL,
    result_type_id     char(4)   NOT NULL,
    CONSTRAINT PK_SCHEDULE_RESULT_TYPE
    PRIMARY KEY CLUSTERED (schedule_result_id)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.SCHEDULE_RESULT_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SCHEDULE_RESULT_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SCHEDULE_RESULT_TYPE >>>'
go
ALTER TABLE dbo.SCHEDULE_RESULT_TYPE
    ADD CONSTRAINT FK_SCHEDULE_RESULT_TYPE_RESULT
    FOREIGN KEY (result_type_id)
    REFERENCES dbo.RESULT_TYPE (result_type_id)
go
GRANT REFERENCES ON dbo.SCHEDULE_RESULT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.SCHEDULE_RESULT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.SCHEDULE_RESULT_TYPE TO read_only
go
GRANT SELECT ON dbo.SCHEDULE_RESULT_TYPE TO rma_users
go
GRANT INSERT ON dbo.SCHEDULE_RESULT_TYPE TO eqa_user
go
GRANT DELETE ON dbo.SCHEDULE_RESULT_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.SCHEDULE_RESULT_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SCHEDULE_RESULT_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SCHEDULE_RESULT_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SCHEDULE_RESULT_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SCHEDULE_RESULT_TYPE TO eqa_user
go
CREATE TABLE dbo.SCHEDULE_TYPE
(
    schedule_type      code_2 NOT NULL,
    schedule_type_desc descr  NOT NULL,
    CONSTRAINT PK_SCHEDULE_TYPE
    PRIMARY KEY CLUSTERED (schedule_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SCHEDULE_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SCHEDULE_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SCHEDULE_TYPE >>>'
go
ALTER TABLE dbo.SCHEDULE_RESULT_TYPE
    ADD CONSTRAINT FK_SCHEDULE_RESULT_TYPE_SCHED
    FOREIGN KEY (schedule_type)
    REFERENCES dbo.SCHEDULE_TYPE (schedule_type)
go
GRANT REFERENCES ON dbo.SCHEDULE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.SCHEDULE_TYPE TO eqa_user
go
GRANT SELECT ON dbo.SCHEDULE_TYPE TO read_only
go
GRANT SELECT ON dbo.SCHEDULE_TYPE TO rma_users
go
GRANT INSERT ON dbo.SCHEDULE_TYPE TO eqa_user
go
GRANT DELETE ON dbo.SCHEDULE_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.SCHEDULE_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SCHEDULE_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SCHEDULE_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SCHEDULE_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SCHEDULE_TYPE TO eqa_user
go
CREATE TABLE dbo.SCHOOL_ASSISTANCE_CODE
(
    school_assistance_code varchar(15)  NOT NULL,
    school_assistance_desc varchar(255) NOT NULL,
    active_ind             yn           DEFAULT '1' NOT NULL,
    CONSTRAINT PK_SCHOOL_ASSISTANCE_CODE
    PRIMARY KEY CLUSTERED (school_assistance_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SCHOOL_ASSISTANCE_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SCHOOL_ASSISTANCE_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SCHOOL_ASSISTANCE_CODE >>>'
go
GRANT REFERENCES ON dbo.SCHOOL_ASSISTANCE_CODE TO eqa_user
go
GRANT SELECT ON dbo.SCHOOL_ASSISTANCE_CODE TO eqa_user
go
GRANT SELECT ON dbo.SCHOOL_ASSISTANCE_CODE TO read_only
go
GRANT SELECT ON dbo.SCHOOL_ASSISTANCE_CODE TO rma_users
go
GRANT INSERT ON dbo.SCHOOL_ASSISTANCE_CODE TO eqa_user
go
GRANT DELETE ON dbo.SCHOOL_ASSISTANCE_CODE TO eqa_user
go
GRANT UPDATE ON dbo.SCHOOL_ASSISTANCE_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SCHOOL_ASSISTANCE_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SCHOOL_ASSISTANCE_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SCHOOL_ASSISTANCE_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SCHOOL_ASSISTANCE_CODE TO eqa_user
go
CREATE TABLE dbo.SCHOOL_ASSISTANCE_CODE_DTL
(
    school_assistance_code varchar(15) NOT NULL,
    assistance_code        code_2      NOT NULL,
    assistance_quantity    int         DEFAULT 1 NOT NULL,
    CONSTRAINT PK_SCHOOL_ASSISTANCE_CODE_DTL
    PRIMARY KEY CLUSTERED (school_assistance_code,assistance_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SCHOOL_ASSISTANCE_CODE_DTL') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SCHOOL_ASSISTANCE_CODE_DTL >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SCHOOL_ASSISTANCE_CODE_DTL >>>'
go
ALTER TABLE dbo.SCHOOL_ASSISTANCE_CODE_DTL
    ADD CONSTRAINT FK_ASSISTANCE_DETAIL_SCHOOL
    FOREIGN KEY (school_assistance_code)
    REFERENCES dbo.SCHOOL_ASSISTANCE_CODE (school_assistance_code)
go
ALTER TABLE dbo.SCHOOL_ASSISTANCE_CODE_DTL
    ADD CONSTRAINT FK_ASSISTANCE_DETAIL
    FOREIGN KEY (assistance_code)
    REFERENCES dbo.ASSISTANCE_CODE (assistance_code)
go
GRANT REFERENCES ON dbo.SCHOOL_ASSISTANCE_CODE_DTL TO eqa_user
go
GRANT SELECT ON dbo.SCHOOL_ASSISTANCE_CODE_DTL TO eqa_user
go
GRANT SELECT ON dbo.SCHOOL_ASSISTANCE_CODE_DTL TO read_only
go
GRANT SELECT ON dbo.SCHOOL_ASSISTANCE_CODE_DTL TO rma_users
go
GRANT INSERT ON dbo.SCHOOL_ASSISTANCE_CODE_DTL TO eqa_user
go
GRANT DELETE ON dbo.SCHOOL_ASSISTANCE_CODE_DTL TO eqa_user
go
GRANT UPDATE ON dbo.SCHOOL_ASSISTANCE_CODE_DTL TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SCHOOL_ASSISTANCE_CODE_DTL TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SCHOOL_ASSISTANCE_CODE_DTL TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SCHOOL_ASSISTANCE_CODE_DTL TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SCHOOL_ASSISTANCE_CODE_DTL TO eqa_user
go
CREATE TABLE dbo.SCHOOL_QUALCHECK_STATUS
(
    school_qualcheck_status_code code_2       NOT NULL,
    school_qualcheck_status_desc varchar(255) NOT NULL,
    CONSTRAINT PK_SCHOOL_QUALCHECK_STATUS
    PRIMARY KEY CLUSTERED (school_qualcheck_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SCHOOL_QUALCHECK_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SCHOOL_QUALCHECK_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SCHOOL_QUALCHECK_STATUS >>>'
go
GRANT REFERENCES ON dbo.SCHOOL_QUALCHECK_STATUS TO eqa_user
go
GRANT SELECT ON dbo.SCHOOL_QUALCHECK_STATUS TO eqa_user
go
GRANT SELECT ON dbo.SCHOOL_QUALCHECK_STATUS TO read_only
go
GRANT SELECT ON dbo.SCHOOL_QUALCHECK_STATUS TO rma_users
go
GRANT INSERT ON dbo.SCHOOL_QUALCHECK_STATUS TO eqa_user
go
GRANT DELETE ON dbo.SCHOOL_QUALCHECK_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.SCHOOL_QUALCHECK_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SCHOOL_QUALCHECK_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SCHOOL_QUALCHECK_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SCHOOL_QUALCHECK_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SCHOOL_QUALCHECK_STATUS TO eqa_user
go
CREATE TABLE dbo.SCH_AUTHORITY_CODE
(
    sch_authority_code code_2    NOT NULL,
    sch_authority_desc descr     NOT NULL,
    active_ind         yn_ind    NOT NULL,
    sortkey            sortkey   NOT NULL,
    audit_tran_id      OBJECT_ID NOT NULL,
    CONSTRAINT PK_SCH_AUTHORITY_CODE
    PRIMARY KEY CLUSTERED (sch_authority_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SCH_AUTHORITY_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SCH_AUTHORITY_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SCH_AUTHORITY_CODE >>>'
go
GRANT REFERENCES ON dbo.SCH_AUTHORITY_CODE TO eqa_user
go
GRANT SELECT ON dbo.SCH_AUTHORITY_CODE TO eqa_user
go
GRANT SELECT ON dbo.SCH_AUTHORITY_CODE TO read_only
go
GRANT SELECT ON dbo.SCH_AUTHORITY_CODE TO rma_users
go
GRANT INSERT ON dbo.SCH_AUTHORITY_CODE TO eqa_user
go
GRANT DELETE ON dbo.SCH_AUTHORITY_CODE TO eqa_user
go
GRANT UPDATE ON dbo.SCH_AUTHORITY_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SCH_AUTHORITY_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SCH_AUTHORITY_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SCH_AUTHORITY_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SCH_AUTHORITY_CODE TO eqa_user
go
CREATE TABLE dbo.SCH_DECILE_CODE
(
    sch_decile_code code_2    NOT NULL,
    sch_decile_desc descr     NOT NULL,
    active_ind      yn_ind    NOT NULL,
    sortkey         sortkey   NOT NULL,
    audit_tran_id   OBJECT_ID NOT NULL,
    CONSTRAINT PK_SCH_DECILE_CODE
    PRIMARY KEY CLUSTERED (sch_decile_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SCH_DECILE_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SCH_DECILE_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SCH_DECILE_CODE >>>'
go
GRANT REFERENCES ON dbo.SCH_DECILE_CODE TO eqa_user
go
GRANT SELECT ON dbo.SCH_DECILE_CODE TO eqa_user
go
GRANT SELECT ON dbo.SCH_DECILE_CODE TO read_only
go
GRANT SELECT ON dbo.SCH_DECILE_CODE TO rma_users
go
GRANT INSERT ON dbo.SCH_DECILE_CODE TO eqa_user
go
GRANT DELETE ON dbo.SCH_DECILE_CODE TO eqa_user
go
GRANT UPDATE ON dbo.SCH_DECILE_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SCH_DECILE_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SCH_DECILE_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SCH_DECILE_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SCH_DECILE_CODE TO eqa_user
go
CREATE TABLE dbo.SCH_GENDER_TYPE
(
    sch_gender_code code_2    NOT NULL,
    sch_gender_desc descr     NOT NULL,
    active_ind      yn_ind    NOT NULL,
    sortkey         sortkey   NOT NULL,
    audit_tran_id   OBJECT_ID NOT NULL,
    CONSTRAINT PK_SCH_GENDER_TYPE
    PRIMARY KEY CLUSTERED (sch_gender_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SCH_GENDER_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SCH_GENDER_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SCH_GENDER_TYPE >>>'
go
GRANT REFERENCES ON dbo.SCH_GENDER_TYPE TO eqa_user
go
GRANT SELECT ON dbo.SCH_GENDER_TYPE TO eqa_user
go
GRANT SELECT ON dbo.SCH_GENDER_TYPE TO read_only
go
GRANT SELECT ON dbo.SCH_GENDER_TYPE TO rma_users
go
GRANT INSERT ON dbo.SCH_GENDER_TYPE TO eqa_user
go
GRANT DELETE ON dbo.SCH_GENDER_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.SCH_GENDER_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SCH_GENDER_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SCH_GENDER_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SCH_GENDER_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SCH_GENDER_TYPE TO eqa_user
go
CREATE TABLE dbo.SCH_PROG_LEVEL_CODE
(
    sch_prog_level_code code_2    NOT NULL,
    sch_prog_level_desc descr     NOT NULL,
    active_ind          yn_ind    NOT NULL,
    sortkey             sortkey   NOT NULL,
    audit_tran_id       OBJECT_ID NOT NULL,
    CONSTRAINT PK_SCH_PROG_LEVEL_CODE
    PRIMARY KEY CLUSTERED (sch_prog_level_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SCH_PROG_LEVEL_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SCH_PROG_LEVEL_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SCH_PROG_LEVEL_CODE >>>'
go
GRANT REFERENCES ON dbo.SCH_PROG_LEVEL_CODE TO eqa_user
go
GRANT SELECT ON dbo.SCH_PROG_LEVEL_CODE TO eqa_user
go
GRANT SELECT ON dbo.SCH_PROG_LEVEL_CODE TO read_only
go
GRANT SELECT ON dbo.SCH_PROG_LEVEL_CODE TO rma_users
go
GRANT INSERT ON dbo.SCH_PROG_LEVEL_CODE TO eqa_user
go
GRANT DELETE ON dbo.SCH_PROG_LEVEL_CODE TO eqa_user
go
GRANT UPDATE ON dbo.SCH_PROG_LEVEL_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SCH_PROG_LEVEL_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SCH_PROG_LEVEL_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SCH_PROG_LEVEL_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SCH_PROG_LEVEL_CODE TO eqa_user
go
CREATE TABLE dbo.SCH_SUB_TYPE
(
    sch_sub_type_code code_2    NOT NULL,
    sch_sub_type_desc descr     NOT NULL,
    active_ind        yn_ind    NOT NULL,
    sortkey           sortkey   NOT NULL,
    audit_tran_id     OBJECT_ID NOT NULL,
    CONSTRAINT PK_SCH_SUB_TYPE
    PRIMARY KEY CLUSTERED (sch_sub_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SCH_SUB_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SCH_SUB_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SCH_SUB_TYPE >>>'
go
GRANT REFERENCES ON dbo.SCH_SUB_TYPE TO eqa_user
go
GRANT SELECT ON dbo.SCH_SUB_TYPE TO eqa_user
go
GRANT SELECT ON dbo.SCH_SUB_TYPE TO read_only
go
GRANT SELECT ON dbo.SCH_SUB_TYPE TO rma_users
go
GRANT INSERT ON dbo.SCH_SUB_TYPE TO eqa_user
go
GRANT DELETE ON dbo.SCH_SUB_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.SCH_SUB_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SCH_SUB_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SCH_SUB_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SCH_SUB_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SCH_SUB_TYPE TO eqa_user
go
CREATE TABLE dbo.SCH_TYPE
(
    sch_type_code code_2    NOT NULL,
    sch_type_desc descr     NOT NULL,
    active_ind    yn_ind    NOT NULL,
    sortkey       sortkey   NOT NULL,
    audit_tran_id OBJECT_ID NOT NULL,
    CONSTRAINT PK_SCH_TYPE
    PRIMARY KEY CLUSTERED (sch_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SCH_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SCH_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SCH_TYPE >>>'
go
GRANT REFERENCES ON dbo.SCH_TYPE TO eqa_user
go
GRANT SELECT ON dbo.SCH_TYPE TO eqa_user
go
GRANT SELECT ON dbo.SCH_TYPE TO read_only
go
GRANT SELECT ON dbo.SCH_TYPE TO rma_users
go
GRANT INSERT ON dbo.SCH_TYPE TO eqa_user
go
GRANT DELETE ON dbo.SCH_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.SCH_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SCH_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SCH_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SCH_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SCH_TYPE TO eqa_user
go
CREATE TABLE dbo.SDR_COURSE
(
    sdr_course_id          numeric(12,0) IDENTITY,
    sdr_qual_completion_id OBJECT_ID     NULL,
    year_completed         char(4)       NOT NULL,
    provider_code          OBJECT_ID     NOT NULL,
    student_id             varchar(10)   NOT NULL,
    course_code            varchar(10)   NOT NULL,
    course_title           varchar(255)  NULL,
    qualification_code     varchar(10)   NULL,
    nqf_level              smallint      NULL,
    complete               smallint      NOT NULL,
    start_date             dt            NOT NULL,
    nsn                    nsn           NOT NULL,
    end_date               dt            NOT NULL,
    CONSTRAINT PK_SDR_COURSE
    PRIMARY KEY CLUSTERED (sdr_course_id)
)
LOCK DATAROWS
WITH IDENTITY_GAP=100
go
IF OBJECT_ID('dbo.SDR_COURSE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SDR_COURSE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SDR_COURSE >>>'
go
GRANT REFERENCES ON dbo.SDR_COURSE TO eqa_user
go
GRANT SELECT ON dbo.SDR_COURSE TO eqa_user
go
GRANT SELECT ON dbo.SDR_COURSE TO read_only
go
GRANT SELECT ON dbo.SDR_COURSE TO rma_users
go
GRANT INSERT ON dbo.SDR_COURSE TO eqa_user
go
GRANT DELETE ON dbo.SDR_COURSE TO eqa_user
go
GRANT UPDATE ON dbo.SDR_COURSE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SDR_COURSE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SDR_COURSE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SDR_COURSE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SDR_COURSE TO eqa_user
go
CREATE TABLE dbo.SDR_PROVIDER
(
    moe_provider_id   OBJECT_ID NOT NULL,
    moe_provider_name long_name NOT NULL,
    CONSTRAINT PK_SDR_PROVIDER
    PRIMARY KEY CLUSTERED (moe_provider_id)
)
LOCK DATAROWS
WITH IDENTITY_GAP=100
go
IF OBJECT_ID('dbo.SDR_PROVIDER') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SDR_PROVIDER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SDR_PROVIDER >>>'
go
GRANT REFERENCES ON dbo.SDR_PROVIDER TO eqa_user
go
GRANT SELECT ON dbo.SDR_PROVIDER TO eqa_user
go
GRANT SELECT ON dbo.SDR_PROVIDER TO read_only
go
GRANT SELECT ON dbo.SDR_PROVIDER TO rma_users
go
GRANT INSERT ON dbo.SDR_PROVIDER TO eqa_user
go
GRANT DELETE ON dbo.SDR_PROVIDER TO eqa_user
go
GRANT UPDATE ON dbo.SDR_PROVIDER TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SDR_PROVIDER TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SDR_PROVIDER TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SDR_PROVIDER TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SDR_PROVIDER TO eqa_user
go
CREATE TABLE dbo.SDR_QUAL_COMPLETION
(
    sdr_qual_completion_id numeric(12,0) IDENTITY,
    academic_year          char(4)       NULL,
    moe_student_id         varchar(10)   NULL,
    qual_number            varchar(10)   NULL,
    qual_title             varchar(255)  NULL,
    moe_provider_id        OBJECT_ID     NULL,
    moe_provider_name      long_name     NULL,
    nsn                    nsn           NULL,
    year_graduated         datetime      NULL,
    moe_nqf_level          number_2      NULL,
    status                 varchar(20)   NOT NULL,
    job_parm_key           varchar(100)  NOT NULL,
    CONSTRAINT PK_SDR_QUAL_COMPLETION
    PRIMARY KEY CLUSTERED (sdr_qual_completion_id)
)
LOCK DATAROWS
WITH IDENTITY_GAP=100
go
IF OBJECT_ID('dbo.SDR_QUAL_COMPLETION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SDR_QUAL_COMPLETION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SDR_QUAL_COMPLETION >>>'
go
ALTER TABLE dbo.SDR_COURSE
    ADD CONSTRAINT FK_SDR_COURSE_SDR_QUAL_COMPLETION
    FOREIGN KEY (sdr_qual_completion_id)
    REFERENCES dbo.SDR_QUAL_COMPLETION (sdr_qual_completion_id)
go
GRANT REFERENCES ON dbo.SDR_QUAL_COMPLETION TO eqa_user
go
GRANT SELECT ON dbo.SDR_QUAL_COMPLETION TO eqa_user
go
GRANT SELECT ON dbo.SDR_QUAL_COMPLETION TO read_only
go
GRANT SELECT ON dbo.SDR_QUAL_COMPLETION TO rma_users
go
GRANT INSERT ON dbo.SDR_QUAL_COMPLETION TO eqa_user
go
GRANT DELETE ON dbo.SDR_QUAL_COMPLETION TO eqa_user
go
GRANT UPDATE ON dbo.SDR_QUAL_COMPLETION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SDR_QUAL_COMPLETION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SDR_QUAL_COMPLETION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SDR_QUAL_COMPLETION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SDR_QUAL_COMPLETION TO eqa_user
go
CREATE TABLE dbo.SDR_TEC_NZQA_QUAL_MAPPING
(
    sdr_tec_nzqa_qual_mapping_id numeric(12,0) IDENTITY,
    sdr_tec_qual_id              numeric(12,0) NOT NULL,
    nzqa_qfn_id                  OBJECT_ID     NOT NULL,
    nzqa_qfn_minor_version_id    OBJECT_ID     NOT NULL,
    nzqa_qfn_strand_number       OBJECT_ID     NULL,
    level_difference_ind         smallint      NULL,
    multiple_strands_chk_ind     smallint      NOT NULL,
    qual_check_ind               smallint      NOT NULL,
    map_status                   varchar(20)   NULL,
    map_reason                   varchar(255)  NULL,
    map_source                   varchar(30)   NULL,
    create_date                  dt            NULL,
    audit_tran_id                OBJECT_ID     NULL,
    CONSTRAINT PK_SDR_TEC_NZQA_QUAL_MAPPING
    PRIMARY KEY CLUSTERED (sdr_tec_nzqa_qual_mapping_id)
)
LOCK DATAROWS
WITH IDENTITY_GAP=100
go
IF OBJECT_ID('dbo.SDR_TEC_NZQA_QUAL_MAPPING') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SDR_TEC_NZQA_QUAL_MAPPING >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SDR_TEC_NZQA_QUAL_MAPPING >>>'
go
GRANT REFERENCES ON dbo.SDR_TEC_NZQA_QUAL_MAPPING TO eqa_user
go
GRANT SELECT ON dbo.SDR_TEC_NZQA_QUAL_MAPPING TO eqa_user
go
GRANT SELECT ON dbo.SDR_TEC_NZQA_QUAL_MAPPING TO read_only
go
GRANT SELECT ON dbo.SDR_TEC_NZQA_QUAL_MAPPING TO rma_users
go
GRANT INSERT ON dbo.SDR_TEC_NZQA_QUAL_MAPPING TO eqa_user
go
GRANT DELETE ON dbo.SDR_TEC_NZQA_QUAL_MAPPING TO eqa_user
go
GRANT UPDATE ON dbo.SDR_TEC_NZQA_QUAL_MAPPING TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SDR_TEC_NZQA_QUAL_MAPPING TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SDR_TEC_NZQA_QUAL_MAPPING TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SDR_TEC_NZQA_QUAL_MAPPING TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SDR_TEC_NZQA_QUAL_MAPPING TO eqa_user
go
CREATE TABLE dbo.SDR_TEC_NZQA_QUAL_NSN_MAPPING
(
    sdr_tec_nzqa_qual_nsn_mapping_id numeric(12,0) IDENTITY,
    sdr_tec_qual_id                  numeric(12,0) NOT NULL,
    sdr_qual_completion_id           OBJECT_ID     NOT NULL,
    nzqa_learner_id                  OBJECT_ID     NULL,
    create_date                      datetime      NULL,
    audit_tran_id                    OBJECT_ID     NULL,
    sdr_batch_date                   dt            NOT NULL,
    CONSTRAINT PK_SDR_TEC_NZQA_QUAL_NSN_MAPPI
    PRIMARY KEY CLUSTERED (sdr_tec_nzqa_qual_nsn_mapping_id)
)
LOCK DATAROWS
WITH IDENTITY_GAP=100
go
IF OBJECT_ID('dbo.SDR_TEC_NZQA_QUAL_NSN_MAPPING') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SDR_TEC_NZQA_QUAL_NSN_MAPPING >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SDR_TEC_NZQA_QUAL_NSN_MAPPING >>>'
go
GRANT REFERENCES ON dbo.SDR_TEC_NZQA_QUAL_NSN_MAPPING TO eqa_user
go
GRANT SELECT ON dbo.SDR_TEC_NZQA_QUAL_NSN_MAPPING TO eqa_user
go
GRANT SELECT ON dbo.SDR_TEC_NZQA_QUAL_NSN_MAPPING TO read_only
go
GRANT SELECT ON dbo.SDR_TEC_NZQA_QUAL_NSN_MAPPING TO rma_users
go
GRANT INSERT ON dbo.SDR_TEC_NZQA_QUAL_NSN_MAPPING TO eqa_user
go
GRANT DELETE ON dbo.SDR_TEC_NZQA_QUAL_NSN_MAPPING TO eqa_user
go
GRANT UPDATE ON dbo.SDR_TEC_NZQA_QUAL_NSN_MAPPING TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SDR_TEC_NZQA_QUAL_NSN_MAPPING TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SDR_TEC_NZQA_QUAL_NSN_MAPPING TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SDR_TEC_NZQA_QUAL_NSN_MAPPING TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SDR_TEC_NZQA_QUAL_NSN_MAPPING TO eqa_user
go
CREATE TABLE dbo.SDR_TEC_NZQA_QUAL_NSN_MAP_QFN_ACHIEVED
(
    sdr_tec_nzqa_qual_nsn_mapping_id OBJECT_ID NOT NULL,
    qfn_achieved_id                  OBJECT_ID NOT NULL,
    CONSTRAINT PK_SDR_TEC_NZQA_QUAL_NSN_MAP_QFN_ACHIEVED
    PRIMARY KEY CLUSTERED (sdr_tec_nzqa_qual_nsn_mapping_id,qfn_achieved_id)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1,
     IDENTITY_GAP=100
go
IF OBJECT_ID('dbo.SDR_TEC_NZQA_QUAL_NSN_MAP_QFN_ACHIEVED') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SDR_TEC_NZQA_QUAL_NSN_MAP_QFN_ACHIEVED >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SDR_TEC_NZQA_QUAL_NSN_MAP_QFN_ACHIEVED >>>'
go
ALTER TABLE dbo.SDR_TEC_NZQA_QUAL_NSN_MAP_QFN_ACHIEVED
    ADD CONSTRAINT FK_SDR_TEC_NZQA_QUAL_NSN_MAP_QFN_ACHIEVED_STNQNM
    FOREIGN KEY (sdr_tec_nzqa_qual_nsn_mapping_id)
    REFERENCES dbo.SDR_TEC_NZQA_QUAL_NSN_MAPPING (sdr_tec_nzqa_qual_nsn_mapping_id)
go
ALTER TABLE dbo.SDR_TEC_NZQA_QUAL_NSN_MAP_QFN_ACHIEVED
    ADD CONSTRAINT FK_SDR_TEC_NZQA_QUAL_NSN_MAP_QFN_ACHIEVED_QFNA
    FOREIGN KEY (qfn_achieved_id)
    REFERENCES dbo.QFN_ACHIEVED (qfn_achieved_id)
go
GRANT REFERENCES ON dbo.SDR_TEC_NZQA_QUAL_NSN_MAP_QFN_ACHIEVED TO eqa_user
go
GRANT SELECT ON dbo.SDR_TEC_NZQA_QUAL_NSN_MAP_QFN_ACHIEVED TO read_only
go
GRANT SELECT ON dbo.SDR_TEC_NZQA_QUAL_NSN_MAP_QFN_ACHIEVED TO eqa_user
go
GRANT SELECT ON dbo.SDR_TEC_NZQA_QUAL_NSN_MAP_QFN_ACHIEVED TO rma_users
go
GRANT INSERT ON dbo.SDR_TEC_NZQA_QUAL_NSN_MAP_QFN_ACHIEVED TO eqa_user
go
GRANT DELETE ON dbo.SDR_TEC_NZQA_QUAL_NSN_MAP_QFN_ACHIEVED TO eqa_user
go
GRANT UPDATE ON dbo.SDR_TEC_NZQA_QUAL_NSN_MAP_QFN_ACHIEVED TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SDR_TEC_NZQA_QUAL_NSN_MAP_QFN_ACHIEVED TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SDR_TEC_NZQA_QUAL_NSN_MAP_QFN_ACHIEVED TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SDR_TEC_NZQA_QUAL_NSN_MAP_QFN_ACHIEVED TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SDR_TEC_NZQA_QUAL_NSN_MAP_QFN_ACHIEVED TO eqa_user
go
CREATE TABLE dbo.SDR_TEC_NZQA_QUAL_SUGGESTED_MAPPING
(
    sdr_tec_nzqa_suggested_mapping_id numeric(12,0) IDENTITY,
    sdr_tec_qual_id                   OBJECT_ID     NOT NULL,
    nzqa_course_version_id            OBJECT_ID     NULL,
    nzqa_course_title                 varchar(255)  NULL,
    sdr_batch_date                    dt            NULL,
    nzqa_qfn_short_title              varchar(255)  NULL,
    create_date                       dt            NULL,
    audit_tran_id                     OBJECT_ID     NULL,
    nsn_count                         int           NULL,
    CONSTRAINT PK_SDR_TEC_NZQA_QUAL_SUGGESTED
    PRIMARY KEY CLUSTERED (sdr_tec_nzqa_suggested_mapping_id)
)
LOCK DATAROWS
WITH IDENTITY_GAP=100
go
IF OBJECT_ID('dbo.SDR_TEC_NZQA_QUAL_SUGGESTED_MAPPING') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SDR_TEC_NZQA_QUAL_SUGGESTED_MAPPING >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SDR_TEC_NZQA_QUAL_SUGGESTED_MAPPING >>>'
go
GRANT REFERENCES ON dbo.SDR_TEC_NZQA_QUAL_SUGGESTED_MAPPING TO eqa_user
go
GRANT SELECT ON dbo.SDR_TEC_NZQA_QUAL_SUGGESTED_MAPPING TO eqa_user
go
GRANT SELECT ON dbo.SDR_TEC_NZQA_QUAL_SUGGESTED_MAPPING TO read_only
go
GRANT SELECT ON dbo.SDR_TEC_NZQA_QUAL_SUGGESTED_MAPPING TO rma_users
go
GRANT INSERT ON dbo.SDR_TEC_NZQA_QUAL_SUGGESTED_MAPPING TO eqa_user
go
GRANT DELETE ON dbo.SDR_TEC_NZQA_QUAL_SUGGESTED_MAPPING TO eqa_user
go
GRANT UPDATE ON dbo.SDR_TEC_NZQA_QUAL_SUGGESTED_MAPPING TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SDR_TEC_NZQA_QUAL_SUGGESTED_MAPPING TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SDR_TEC_NZQA_QUAL_SUGGESTED_MAPPING TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SDR_TEC_NZQA_QUAL_SUGGESTED_MAPPING TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SDR_TEC_NZQA_QUAL_SUGGESTED_MAPPING TO eqa_user
go
CREATE TABLE dbo.SDR_TEC_QUAL
(
    sdr_tec_qual_id numeric(12,0) IDENTITY,
    moe_provider_id OBJECT_ID     NULL,
    moe_qual_number varchar(10)   NULL,
    moe_qual_title  varchar(255)  NULL,
    moe_qual_level  number_2      NULL,
    academic_year   char(4)       NOT NULL,
    create_date     dt            NULL,
    audit_tran_id   OBJECT_ID     NOT NULL,
    CONSTRAINT PK_SDR_TEC_QUAL
    PRIMARY KEY CLUSTERED (sdr_tec_qual_id)
)
LOCK DATAROWS
WITH IDENTITY_GAP=100
go
IF OBJECT_ID('dbo.SDR_TEC_QUAL') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SDR_TEC_QUAL >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SDR_TEC_QUAL >>>'
go
ALTER TABLE dbo.SDR_TEC_QUAL
    ADD CONSTRAINT FK_SDR_TEC_QUAL_SDR_PROVIDER
    FOREIGN KEY (moe_provider_id)
    REFERENCES dbo.SDR_PROVIDER (moe_provider_id)
go
ALTER TABLE dbo.SDR_TEC_NZQA_QUAL_MAPPING
    ADD CONSTRAINT FK_SDR_TEC_QUAL_NZQA_MAPPING
    FOREIGN KEY (sdr_tec_qual_id)
    REFERENCES dbo.SDR_TEC_QUAL (sdr_tec_qual_id)
go
ALTER TABLE dbo.SDR_TEC_NZQA_QUAL_NSN_MAPPING
    ADD CONSTRAINT FK_SDR_TEC_QUAL_NSN_MAPPING
    FOREIGN KEY (sdr_tec_qual_id)
    REFERENCES dbo.SDR_TEC_QUAL (sdr_tec_qual_id)
go
ALTER TABLE dbo.SDR_TEC_NZQA_QUAL_SUGGESTED_MAPPING
    ADD CONSTRAINT FK_SDR_TEC_QUAL_SUG_MAPPING
    FOREIGN KEY (sdr_tec_qual_id)
    REFERENCES dbo.SDR_TEC_QUAL (sdr_tec_qual_id)
go
GRANT REFERENCES ON dbo.SDR_TEC_QUAL TO eqa_user
go
GRANT SELECT ON dbo.SDR_TEC_QUAL TO eqa_user
go
GRANT SELECT ON dbo.SDR_TEC_QUAL TO read_only
go
GRANT SELECT ON dbo.SDR_TEC_QUAL TO rma_users
go
GRANT INSERT ON dbo.SDR_TEC_QUAL TO eqa_user
go
GRANT DELETE ON dbo.SDR_TEC_QUAL TO eqa_user
go
GRANT UPDATE ON dbo.SDR_TEC_QUAL TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SDR_TEC_QUAL TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SDR_TEC_QUAL TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SDR_TEC_QUAL TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SDR_TEC_QUAL TO eqa_user
go
CREATE TABLE dbo.SEARCH_CONTEXT
(
    search_context_code code_2 NOT NULL,
    search_context_desc descr  NOT NULL,
    CONSTRAINT PK_SEARCH_CONTEXT
    PRIMARY KEY CLUSTERED (search_context_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SEARCH_CONTEXT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SEARCH_CONTEXT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SEARCH_CONTEXT >>>'
go
GRANT REFERENCES ON dbo.SEARCH_CONTEXT TO eqa_user
go
GRANT SELECT ON dbo.SEARCH_CONTEXT TO eqa_user
go
GRANT SELECT ON dbo.SEARCH_CONTEXT TO read_only
go
GRANT SELECT ON dbo.SEARCH_CONTEXT TO rma_users
go
GRANT INSERT ON dbo.SEARCH_CONTEXT TO eqa_user
go
GRANT DELETE ON dbo.SEARCH_CONTEXT TO eqa_user
go
GRANT UPDATE ON dbo.SEARCH_CONTEXT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SEARCH_CONTEXT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SEARCH_CONTEXT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SEARCH_CONTEXT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SEARCH_CONTEXT TO eqa_user
go
CREATE TABLE dbo.SECONDARY_COURSE
(
    secondary_course_id     OBJECT_ID     NOT NULL,
    academic_year           char(4)       NOT NULL,
    moe_provider_id         OBJECT_ID     NOT NULL,
    location                number_2      NOT NULL,
    secondary_course_number varchar(10)   NOT NULL,
    secondary_course_name   uni_name      NOT NULL,
    short_course_ind        ny_ind        NOT NULL,
    created_batch_input_id  OBJECT_ID     NULL,
    updated_batch_input_id  OBJECT_ID     NULL,
    updated_date            dt            NULL,
    active_ind              smallint      NOT NULL,
    audit_tran_id           numeric(12,0) NOT NULL,
    CONSTRAINT PK_SECONDARY_COURSE
    PRIMARY KEY CLUSTERED (secondary_course_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SECONDARY_COURSE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SECONDARY_COURSE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SECONDARY_COURSE >>>'
go
ALTER TABLE dbo.SECONDARY_COURSE
    ADD CONSTRAINT FK_SEC_COURSE_ACADEMIC_YEAR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.SECONDARY_COURSE
    ADD CONSTRAINT FK_SEC_COURSE_PROVIDER
    FOREIGN KEY (moe_provider_id,location)
    REFERENCES dbo.PROVIDER (moe_provider_id,location)
go
ALTER TABLE dbo.SECONDARY_COURSE
    ADD CONSTRAINT FK_SEC_CRSE_CREATE_BATCH_INPUT
    FOREIGN KEY (created_batch_input_id)
    REFERENCES dbo.BATCH_INPUT (batch_input_id)
go
ALTER TABLE dbo.SECONDARY_COURSE
    ADD CONSTRAINT FK_SEC_CRSE_UPDATE_BATCH_INPUT
    FOREIGN KEY (updated_batch_input_id)
    REFERENCES dbo.BATCH_INPUT (batch_input_id)
go
GRANT REFERENCES ON dbo.SECONDARY_COURSE TO eqa_user
go
GRANT SELECT ON dbo.SECONDARY_COURSE TO rma_users
go
GRANT SELECT ON dbo.SECONDARY_COURSE TO eqa_user
go
GRANT SELECT ON dbo.SECONDARY_COURSE TO read_only
go
GRANT INSERT ON dbo.SECONDARY_COURSE TO eqa_user
go
GRANT DELETE ON dbo.SECONDARY_COURSE TO eqa_user
go
GRANT UPDATE ON dbo.SECONDARY_COURSE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SECONDARY_COURSE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SECONDARY_COURSE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SECONDARY_COURSE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SECONDARY_COURSE TO eqa_user
go
CREATE TABLE dbo.SECONDARY_COURSE_HIST
(
    secondary_course_hist_id numeric(12,0) IDENTITY,
    secondary_course_id      OBJECT_ID     NOT NULL,
    secondary_course_name    uni_name      NOT NULL,
    effective_from_date      dt            NOT NULL,
    effective_to_date        dt            NULL,
    CONSTRAINT PK_SECONDARY_COURSE_HIST
    PRIMARY KEY CLUSTERED (secondary_course_hist_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SECONDARY_COURSE_HIST') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SECONDARY_COURSE_HIST >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SECONDARY_COURSE_HIST >>>'
go
ALTER TABLE dbo.SECONDARY_COURSE_HIST
    ADD CONSTRAINT FK_SEC_COURSE_HIST_SEC_COURSE
    FOREIGN KEY (secondary_course_id)
    REFERENCES dbo.SECONDARY_COURSE (secondary_course_id)
go
GRANT REFERENCES ON dbo.SECONDARY_COURSE_HIST TO eqa_user
go
GRANT SELECT ON dbo.SECONDARY_COURSE_HIST TO eqa_user
go
GRANT SELECT ON dbo.SECONDARY_COURSE_HIST TO read_only
go
GRANT SELECT ON dbo.SECONDARY_COURSE_HIST TO rma_users
go
GRANT INSERT ON dbo.SECONDARY_COURSE_HIST TO eqa_user
go
GRANT DELETE ON dbo.SECONDARY_COURSE_HIST TO eqa_user
go
GRANT UPDATE ON dbo.SECONDARY_COURSE_HIST TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SECONDARY_COURSE_HIST TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SECONDARY_COURSE_HIST TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SECONDARY_COURSE_HIST TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SECONDARY_COURSE_HIST TO eqa_user
go
CREATE TABLE dbo.SECONDARY_COURSE_INPUT
(
    secondary_course_input_id OBJECT_ID     NOT NULL,
    batch_input_id            OBJECT_ID     NOT NULL,
    secondary_course_number   varchar(10)   NULL,
    secondary_course_name     uni_name      NULL,
    short_course_ind          ny_ind        NOT NULL,
    processed_ind             ny_ind        NOT NULL,
    line_number               int           NULL,
    version_id                numeric(12,0) DEFAULT 0 NOT NULL,
    CONSTRAINT PK_SECONDARY_COURSE_INPUT
    PRIMARY KEY CLUSTERED (secondary_course_input_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SECONDARY_COURSE_INPUT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SECONDARY_COURSE_INPUT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SECONDARY_COURSE_INPUT >>>'
go
ALTER TABLE dbo.SECONDARY_COURSE_INPUT
    ADD CONSTRAINT FK_COURSE_INPUT_BATCH
    FOREIGN KEY (batch_input_id)
    REFERENCES dbo.BATCH_INPUT (batch_input_id)
go
GRANT REFERENCES ON dbo.SECONDARY_COURSE_INPUT TO eqa_user
go
GRANT SELECT ON dbo.SECONDARY_COURSE_INPUT TO eqa_user
go
GRANT SELECT ON dbo.SECONDARY_COURSE_INPUT TO read_only
go
GRANT SELECT ON dbo.SECONDARY_COURSE_INPUT TO rma_users
go
GRANT INSERT ON dbo.SECONDARY_COURSE_INPUT TO eqa_user
go
GRANT DELETE ON dbo.SECONDARY_COURSE_INPUT TO eqa_user
go
GRANT UPDATE ON dbo.SECONDARY_COURSE_INPUT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SECONDARY_COURSE_INPUT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SECONDARY_COURSE_INPUT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SECONDARY_COURSE_INPUT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SECONDARY_COURSE_INPUT TO eqa_user
go
CREATE TABLE dbo.SEC_COURSE_STD_HIST
(
    sec_course_std_hist_id numeric(12,0) IDENTITY,
    secondary_course_id    OBJECT_ID     NOT NULL,
    std_number             varchar(8)    NOT NULL,
    std_version_number     numeric(8,0)  NOT NULL,
    effective_from_date    dt            NOT NULL,
    effective_to_date      dt            NULL,
    CONSTRAINT PK_SEC_COURSE_STD_HIST
    PRIMARY KEY CLUSTERED (sec_course_std_hist_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SEC_COURSE_STD_HIST') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SEC_COURSE_STD_HIST >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SEC_COURSE_STD_HIST >>>'
go
ALTER TABLE dbo.SEC_COURSE_STD_HIST
    ADD CONSTRAINT FK_SEC_CRSE_STD_HIST_SEC_CRSE
    FOREIGN KEY (secondary_course_id)
    REFERENCES dbo.SECONDARY_COURSE (secondary_course_id)
go
ALTER TABLE dbo.SEC_COURSE_STD_HIST
    ADD CONSTRAINT FK_SEC_CRSE_STD_HIST_STD_VER
    FOREIGN KEY (std_number,std_version_number)
    REFERENCES dbo.STD_VERSION (std_number,std_version_number)
go
GRANT REFERENCES ON dbo.SEC_COURSE_STD_HIST TO eqa_user
go
GRANT SELECT ON dbo.SEC_COURSE_STD_HIST TO eqa_user
go
GRANT SELECT ON dbo.SEC_COURSE_STD_HIST TO read_only
go
GRANT SELECT ON dbo.SEC_COURSE_STD_HIST TO rma_users
go
GRANT INSERT ON dbo.SEC_COURSE_STD_HIST TO eqa_user
go
GRANT DELETE ON dbo.SEC_COURSE_STD_HIST TO eqa_user
go
GRANT UPDATE ON dbo.SEC_COURSE_STD_HIST TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SEC_COURSE_STD_HIST TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SEC_COURSE_STD_HIST TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SEC_COURSE_STD_HIST TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SEC_COURSE_STD_HIST TO eqa_user
go
CREATE TABLE dbo.SESSION_PRE_PERS_ADDL_VOL
(
    session_pre_pers_addl_vol_id OBJECT_ID   NOT NULL,
    academic_year                code_4      NOT NULL,
    exam_material_code           varchar(13) NULL,
    assess_sess_title_name       name        NOT NULL,
    exam_centre_id               OBJECT_ID   NOT NULL,
    exam_centre_location         number_2    NOT NULL,
    pre_pers_volume              int         NOT NULL,
    updated_date                 dt          NOT NULL,
    audit_tran_id                OBJECT_ID   NOT NULL,
    CONSTRAINT PK_SESSION_PRE_PERS_ADDL_VOL
    PRIMARY KEY CLUSTERED (session_pre_pers_addl_vol_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SESSION_PRE_PERS_ADDL_VOL') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SESSION_PRE_PERS_ADDL_VOL >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SESSION_PRE_PERS_ADDL_VOL >>>'
go
ALTER TABLE dbo.SESSION_PRE_PERS_ADDL_VOL
    ADD CONSTRAINT FK_ASSESS_SESS_VOL_ASSESS_SESS
    FOREIGN KEY (assess_sess_title_name,academic_year)
    REFERENCES dbo.ASSESSMENT_SESSION (title,assessment_cycle_id)
go
ALTER TABLE dbo.SESSION_PRE_PERS_ADDL_VOL
    ADD CONSTRAINT FK_ASSESS_SESS_VOL_ASSESS_CTR
    FOREIGN KEY (exam_centre_id,exam_centre_location)
    REFERENCES dbo.ASSESSMENT_CENTRE (moe_provider_id,location)
go
GRANT REFERENCES ON dbo.SESSION_PRE_PERS_ADDL_VOL TO eqa_user
go
GRANT SELECT ON dbo.SESSION_PRE_PERS_ADDL_VOL TO eqa_user
go
GRANT SELECT ON dbo.SESSION_PRE_PERS_ADDL_VOL TO read_only
go
GRANT SELECT ON dbo.SESSION_PRE_PERS_ADDL_VOL TO rma_users
go
GRANT INSERT ON dbo.SESSION_PRE_PERS_ADDL_VOL TO eqa_user
go
GRANT DELETE ON dbo.SESSION_PRE_PERS_ADDL_VOL TO eqa_user
go
GRANT UPDATE ON dbo.SESSION_PRE_PERS_ADDL_VOL TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SESSION_PRE_PERS_ADDL_VOL TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SESSION_PRE_PERS_ADDL_VOL TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SESSION_PRE_PERS_ADDL_VOL TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SESSION_PRE_PERS_ADDL_VOL TO eqa_user
go
CREATE TABLE dbo.SEVERITY
(
    severity_code OBJECT_ID NOT NULL,
    severity_desc descr     NOT NULL,
    severity      int       NOT NULL,
    ts            timestamp NULL,
    CONSTRAINT PK_SEVERITY
    PRIMARY KEY CLUSTERED (severity_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SEVERITY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SEVERITY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SEVERITY >>>'
go
GRANT REFERENCES ON dbo.SEVERITY TO eqa_user
go
GRANT SELECT ON dbo.SEVERITY TO eqa_user
go
GRANT SELECT ON dbo.SEVERITY TO read_only
go
GRANT SELECT ON dbo.SEVERITY TO rma_users
go
GRANT INSERT ON dbo.SEVERITY TO eqa_user
go
GRANT DELETE ON dbo.SEVERITY TO eqa_user
go
GRANT UPDATE ON dbo.SEVERITY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SEVERITY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SEVERITY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SEVERITY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SEVERITY TO eqa_user
go
CREATE TABLE dbo.SFP_ARGMT_SUB_TYPE
(
    sfp_argmt_sub_type_code code_2    NOT NULL,
    sfp_argmt_type_code     code_2    NOT NULL,
    sfp_argmt_sub_type_desc descr     NOT NULL,
    active_ind              yn_ind    NOT NULL,
    sortkey                 sortkey   NOT NULL,
    audit_tran_id           OBJECT_ID NOT NULL,
    CONSTRAINT PK_SFP_ARGMT_SUB_TYPE
    PRIMARY KEY NONCLUSTERED (sfp_argmt_sub_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SFP_ARGMT_SUB_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SFP_ARGMT_SUB_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SFP_ARGMT_SUB_TYPE >>>'
go
GRANT REFERENCES ON dbo.SFP_ARGMT_SUB_TYPE TO eqa_user
go
GRANT SELECT ON dbo.SFP_ARGMT_SUB_TYPE TO eqa_user
go
GRANT SELECT ON dbo.SFP_ARGMT_SUB_TYPE TO read_only
go
GRANT SELECT ON dbo.SFP_ARGMT_SUB_TYPE TO rma_users
go
GRANT INSERT ON dbo.SFP_ARGMT_SUB_TYPE TO eqa_user
go
GRANT DELETE ON dbo.SFP_ARGMT_SUB_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.SFP_ARGMT_SUB_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SFP_ARGMT_SUB_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SFP_ARGMT_SUB_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SFP_ARGMT_SUB_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SFP_ARGMT_SUB_TYPE TO eqa_user
go
CREATE TABLE dbo.SFP_ARGMT_TYPE
(
    sfp_argmt_type_code code_2    NOT NULL,
    sfp_argmt_type_desc descr     NOT NULL,
    active_ind          yn_ind    NOT NULL,
    sortkey             sortkey   NOT NULL,
    audit_tran_id       OBJECT_ID NOT NULL,
    CONSTRAINT PK_SFP_ARGMT_TYPE
    PRIMARY KEY NONCLUSTERED (sfp_argmt_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SFP_ARGMT_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SFP_ARGMT_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SFP_ARGMT_TYPE >>>'
go
ALTER TABLE dbo.SFP_ARGMT_SUB_TYPE
    ADD CONSTRAINT FK_SFP_ARGMT_SUB_TYP_SFP_ARGMT
    FOREIGN KEY (sfp_argmt_type_code)
    REFERENCES dbo.SFP_ARGMT_TYPE (sfp_argmt_type_code)
go
GRANT REFERENCES ON dbo.SFP_ARGMT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.SFP_ARGMT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.SFP_ARGMT_TYPE TO read_only
go
GRANT SELECT ON dbo.SFP_ARGMT_TYPE TO rma_users
go
GRANT INSERT ON dbo.SFP_ARGMT_TYPE TO eqa_user
go
GRANT DELETE ON dbo.SFP_ARGMT_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.SFP_ARGMT_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SFP_ARGMT_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SFP_ARGMT_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SFP_ARGMT_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SFP_ARGMT_TYPE TO eqa_user
go
CREATE TABLE dbo.SFP_EXEMPTION_TYPE
(
    sfp_exemption_type_code code_2    NOT NULL,
    sfp_exemption_type_desc descr     NOT NULL,
    active_ind              yn_ind    NOT NULL,
    sortkey                 sortkey   NOT NULL,
    audit_tran_id           OBJECT_ID NOT NULL,
    CONSTRAINT PK_SFP_EXEMPTION_TYPE
    PRIMARY KEY NONCLUSTERED (sfp_exemption_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SFP_EXEMPTION_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SFP_EXEMPTION_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SFP_EXEMPTION_TYPE >>>'
go
GRANT REFERENCES ON dbo.SFP_EXEMPTION_TYPE TO eqa_user
go
GRANT SELECT ON dbo.SFP_EXEMPTION_TYPE TO eqa_user
go
GRANT SELECT ON dbo.SFP_EXEMPTION_TYPE TO read_only
go
GRANT SELECT ON dbo.SFP_EXEMPTION_TYPE TO rma_users
go
GRANT INSERT ON dbo.SFP_EXEMPTION_TYPE TO eqa_user
go
GRANT DELETE ON dbo.SFP_EXEMPTION_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.SFP_EXEMPTION_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SFP_EXEMPTION_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SFP_EXEMPTION_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SFP_EXEMPTION_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SFP_EXEMPTION_TYPE TO eqa_user
go
CREATE TABLE dbo.SIZE_CATEGORY
(
    size_category_code code_2    NOT NULL,
    size_category_desc descr     NOT NULL,
    active_ind         yn_ind    NOT NULL,
    sortkey            sortkey   NOT NULL,
    audit_tran_id      OBJECT_ID NOT NULL,
    CONSTRAINT PK_SIZE_CATEGORY
    PRIMARY KEY CLUSTERED (size_category_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SIZE_CATEGORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SIZE_CATEGORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SIZE_CATEGORY >>>'
go
GRANT REFERENCES ON dbo.SIZE_CATEGORY TO eqa_user
go
GRANT SELECT ON dbo.SIZE_CATEGORY TO eqa_user
go
GRANT SELECT ON dbo.SIZE_CATEGORY TO read_only
go
GRANT SELECT ON dbo.SIZE_CATEGORY TO rma_users
go
GRANT INSERT ON dbo.SIZE_CATEGORY TO eqa_user
go
GRANT DELETE ON dbo.SIZE_CATEGORY TO eqa_user
go
GRANT UPDATE ON dbo.SIZE_CATEGORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SIZE_CATEGORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SIZE_CATEGORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SIZE_CATEGORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SIZE_CATEGORY TO eqa_user
go
CREATE TABLE dbo.SMS_DIST_LIST_CODE
(
    sms_dist_list_code code_3    NOT NULL,
    groupwise_name     name      NOT NULL,
    sms_dist_list_desc descr     NOT NULL,
    active_ind         yn_ind    NOT NULL,
    sortkey            sortkey   NOT NULL,
    audit_tran_id      OBJECT_ID NOT NULL,
    CONSTRAINT PK_SMS_DIST_LIST_CODE
    PRIMARY KEY CLUSTERED (sms_dist_list_code),
    CONSTRAINT AK_SMS_DIST_LIST_CODE
    UNIQUE NONCLUSTERED (groupwise_name)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SMS_DIST_LIST_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SMS_DIST_LIST_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SMS_DIST_LIST_CODE >>>'
go
GRANT REFERENCES ON dbo.SMS_DIST_LIST_CODE TO eqa_user
go
GRANT SELECT ON dbo.SMS_DIST_LIST_CODE TO eqa_user
go
GRANT SELECT ON dbo.SMS_DIST_LIST_CODE TO read_only
go
GRANT SELECT ON dbo.SMS_DIST_LIST_CODE TO rma_users
go
GRANT INSERT ON dbo.SMS_DIST_LIST_CODE TO eqa_user
go
GRANT DELETE ON dbo.SMS_DIST_LIST_CODE TO eqa_user
go
GRANT UPDATE ON dbo.SMS_DIST_LIST_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SMS_DIST_LIST_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SMS_DIST_LIST_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SMS_DIST_LIST_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SMS_DIST_LIST_CODE TO eqa_user
go
CREATE TABLE dbo.SOFTWARE_ID_CODE
(
    software_id          OBJECT_ID NOT NULL,
    software_description descr     NOT NULL,
    ts                   timestamp NULL,
    CONSTRAINT PK_SOFTWARE_ID_CODE
    PRIMARY KEY CLUSTERED (software_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SOFTWARE_ID_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SOFTWARE_ID_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SOFTWARE_ID_CODE >>>'
go
GRANT REFERENCES ON dbo.SOFTWARE_ID_CODE TO eqa_user
go
GRANT SELECT ON dbo.SOFTWARE_ID_CODE TO eqa_user
go
GRANT SELECT ON dbo.SOFTWARE_ID_CODE TO read_only
go
GRANT SELECT ON dbo.SOFTWARE_ID_CODE TO rma_users
go
GRANT INSERT ON dbo.SOFTWARE_ID_CODE TO eqa_user
go
GRANT DELETE ON dbo.SOFTWARE_ID_CODE TO eqa_user
go
GRANT UPDATE ON dbo.SOFTWARE_ID_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SOFTWARE_ID_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SOFTWARE_ID_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SOFTWARE_ID_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SOFTWARE_ID_CODE TO eqa_user
go
CREATE TABLE dbo.SOP_MILESTONE
(
    sop_milestone_id           OBJECT_ID NOT NULL,
    crse_endr_sop_id           OBJECT_ID NOT NULL,
    crse_endr_achv_sta_hist_id OBJECT_ID NOT NULL,
    is_prior_ind               yn_ind    NOT NULL,
    audit_tran_id              OBJECT_ID NOT NULL,
    CONSTRAINT PK_SOP_MILESTONE
    PRIMARY KEY CLUSTERED (sop_milestone_id)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.SOP_MILESTONE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SOP_MILESTONE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SOP_MILESTONE >>>'
go
ALTER TABLE dbo.SOP_MILESTONE
    ADD CONSTRAINT FK_SOP_MILESTONE_CRSE_ENDR_SOP
    FOREIGN KEY (crse_endr_sop_id)
    REFERENCES dbo.CRSE_ENDR_SOP (crse_endr_sop_id)
go
ALTER TABLE dbo.SOP_MILESTONE
    ADD CONSTRAINT FK_SOP_MILESTONE_ACHV_STA_HIST
    FOREIGN KEY (crse_endr_achv_sta_hist_id)
    REFERENCES dbo.CRSE_ENDR_ACHV_STA_HIST (crse_endr_achv_sta_hist_id)
go
GRANT REFERENCES ON dbo.SOP_MILESTONE TO eqa_user
go
GRANT SELECT ON dbo.SOP_MILESTONE TO eqa_user
go
GRANT SELECT ON dbo.SOP_MILESTONE TO read_only
go
GRANT SELECT ON dbo.SOP_MILESTONE TO rma_users
go
GRANT INSERT ON dbo.SOP_MILESTONE TO eqa_user
go
GRANT DELETE ON dbo.SOP_MILESTONE TO eqa_user
go
GRANT UPDATE ON dbo.SOP_MILESTONE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SOP_MILESTONE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SOP_MILESTONE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SOP_MILESTONE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SOP_MILESTONE TO eqa_user
go
CREATE TABLE dbo.SPECIAL_ASSISTANCE_STATUS
(
    spec_assist_status_code code_2       NOT NULL,
    spec_assist_status_desc varchar(255) NOT NULL,
    CONSTRAINT PK_SPECIAL_ASSISTANCE_STATUS
    PRIMARY KEY CLUSTERED (spec_assist_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SPECIAL_ASSISTANCE_STATUS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SPECIAL_ASSISTANCE_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SPECIAL_ASSISTANCE_STATUS >>>'
go
GRANT REFERENCES ON dbo.SPECIAL_ASSISTANCE_STATUS TO eqa_user
go
GRANT SELECT ON dbo.SPECIAL_ASSISTANCE_STATUS TO eqa_user
go
GRANT SELECT ON dbo.SPECIAL_ASSISTANCE_STATUS TO read_only
go
GRANT SELECT ON dbo.SPECIAL_ASSISTANCE_STATUS TO rma_users
go
GRANT INSERT ON dbo.SPECIAL_ASSISTANCE_STATUS TO eqa_user
go
GRANT DELETE ON dbo.SPECIAL_ASSISTANCE_STATUS TO eqa_user
go
GRANT UPDATE ON dbo.SPECIAL_ASSISTANCE_STATUS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SPECIAL_ASSISTANCE_STATUS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SPECIAL_ASSISTANCE_STATUS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SPECIAL_ASSISTANCE_STATUS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SPECIAL_ASSISTANCE_STATUS TO eqa_user
go
CREATE TABLE dbo.SPER_YTD_RECON_LEARNER
(
    sper_ytd_recon_learner_id numeric(12,0) IDENTITY,
    enrolment_id              OBJECT_ID     NOT NULL,
    nsn                       numeric(12,0) NOT NULL,
    learner_name              varchar(400)  NOT NULL,
    provider_id               numeric(12,0) NOT NULL,
    provider_name             varchar(100)  NOT NULL,
    total_credits             int           NULL,
    total_fee                 money         NULL,
    total_receipt             money         NULL,
    total_assist              money         NULL,
    ncea1_credits             int           NULL,
    ncea1_fee                 money         NULL,
    ncea1_receipt             money         NULL,
    ncea1_assist              money         NULL,
    ncea2_credits             int           NULL,
    ncea2_fee                 money         NULL,
    ncea2_receipt             money         NULL,
    ncea2_assist              money         NULL,
    ncea3_credits             int           NULL,
    ncea3_fee                 money         NULL,
    ncea3_receipt             money         NULL,
    ncea3_assist              money         NULL,
    sixfc_credits             int           NULL,
    sixfc_fee                 money         NULL,
    sixfc_receipt             money         NULL,
    sixfc_assist              money         NULL,
    schol_credits             int           NULL,
    schol_fee                 money         NULL,
    schol_receipt             money         NULL,
    schol_assist              money         NULL,
    CONSTRAINT PK_YTD_RECON_LEARNER
    PRIMARY KEY CLUSTERED (sper_ytd_recon_learner_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SPER_YTD_RECON_LEARNER') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SPER_YTD_RECON_LEARNER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SPER_YTD_RECON_LEARNER >>>'
go
ALTER TABLE dbo.SPER_YTD_RECON_LEARNER
    ADD CONSTRAINT FK_YTD_RECON_NSN
    FOREIGN KEY (nsn)
    REFERENCES dbo.LEARNER (nsn)
go
ALTER TABLE dbo.SPER_YTD_RECON_LEARNER
    ADD CONSTRAINT FK_YTD_RECON_ENROLMENT
    FOREIGN KEY (enrolment_id)
    REFERENCES dbo.LEARNER_ENROLMENT (enrolment_id)
go
GRANT REFERENCES ON dbo.SPER_YTD_RECON_LEARNER TO eqa_user
go
GRANT SELECT ON dbo.SPER_YTD_RECON_LEARNER TO eqa_user
go
GRANT SELECT ON dbo.SPER_YTD_RECON_LEARNER TO read_only
go
GRANT SELECT ON dbo.SPER_YTD_RECON_LEARNER TO rma_users
go
GRANT INSERT ON dbo.SPER_YTD_RECON_LEARNER TO eqa_user
go
GRANT DELETE ON dbo.SPER_YTD_RECON_LEARNER TO eqa_user
go
GRANT UPDATE ON dbo.SPER_YTD_RECON_LEARNER TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SPER_YTD_RECON_LEARNER TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SPER_YTD_RECON_LEARNER TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SPER_YTD_RECON_LEARNER TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SPER_YTD_RECON_LEARNER TO eqa_user
go
CREATE TABLE dbo.SQR_EVENT
(
    se_id             numeric(12,0) IDENTITY,
    table_name        varchar(255)  NULL,
    system_key        numeric(12,0) NULL,
    natural_key_1     varchar(20)   NULL,
    natural_key_2     numeric(12,0) NULL,
    change_type       char(1)       NULL,
    created_date      datetime      NULL,
    completed_date    datetime      NULL,
    event_table       varchar(255)  NULL,
    event_table_id    numeric(12,0) NULL,
    step_execution_id numeric(12,0) NULL,
    status            varchar(20)   NULL,
    CONSTRAINT pk_sqr_event
    PRIMARY KEY NONCLUSTERED (se_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SQR_EVENT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SQR_EVENT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SQR_EVENT >>>'
go
GRANT REFERENCES ON dbo.SQR_EVENT TO eqa_user
go
GRANT REFERENCES ON dbo.SQR_EVENT TO sqr_eqa_sync_user
go
GRANT REFERENCES ON dbo.SQR_EVENT TO eqa_sqr_user
go
GRANT SELECT ON dbo.SQR_EVENT TO AyaO
go
GRANT SELECT ON dbo.SQR_EVENT TO eqa_user
go
GRANT SELECT ON dbo.SQR_EVENT TO read_only
go
GRANT SELECT ON dbo.SQR_EVENT TO rma_users
go
GRANT INSERT ON dbo.SQR_EVENT TO eqa_sqr_user
go
GRANT INSERT ON dbo.SQR_EVENT TO eqa_user
go
GRANT INSERT ON dbo.SQR_EVENT TO sqr_eqa_sync_user
go
GRANT INSERT ON dbo.SQR_EVENT TO eve_user
go
GRANT INSERT ON dbo.SQR_EVENT TO sqr_eqa_user
go
GRANT DELETE ON dbo.SQR_EVENT TO eqa_sqr_user
go
GRANT DELETE ON dbo.SQR_EVENT TO eqa_user
go
GRANT DELETE ON dbo.SQR_EVENT TO sqr_eqa_sync_user
go
GRANT DELETE ON dbo.SQR_EVENT TO eve_user
go
GRANT DELETE ON dbo.SQR_EVENT TO sqr_eqa_user
go
GRANT UPDATE ON dbo.SQR_EVENT TO eqa_sqr_user
go
GRANT UPDATE ON dbo.SQR_EVENT TO eqa_user
go
GRANT UPDATE ON dbo.SQR_EVENT TO sqr_eqa_sync_user
go
GRANT UPDATE ON dbo.SQR_EVENT TO eve_user
go
GRANT UPDATE ON dbo.SQR_EVENT TO sqr_eqa_user
go
GRANT DELETE STATISTICS ON dbo.SQR_EVENT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SQR_EVENT TO sqr_eqa_sync_user
go
GRANT DELETE STATISTICS ON dbo.SQR_EVENT TO eqa_sqr_user
go
GRANT TRUNCATE TABLE ON dbo.SQR_EVENT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SQR_EVENT TO sqr_eqa_sync_user
go
GRANT TRUNCATE TABLE ON dbo.SQR_EVENT TO eqa_sqr_user
go
GRANT UPDATE STATISTICS ON dbo.SQR_EVENT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SQR_EVENT TO sqr_eqa_sync_user
go
GRANT UPDATE STATISTICS ON dbo.SQR_EVENT TO eqa_sqr_user
go
GRANT TRANSFER TABLE ON dbo.SQR_EVENT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SQR_EVENT TO eqa_sqr_user
go
CREATE TABLE dbo.SRS_REQUEST
(
    srs_request_id OBJECT_ID NOT NULL,
    academic_year  char(4)   NULL,
    com_method_id  OBJECT_ID NULL,
    learner_id     OBJECT_ID NOT NULL,
    requested_date dt        NULL,
    sent_date      dt        NULL,
    paid_flag_ind  ny_ind    NOT NULL,
    audit_tran_id  OBJECT_ID NOT NULL,
    ts             timestamp NOT NULL,
    CONSTRAINT PK_SRS_REQUEST
    PRIMARY KEY CLUSTERED (srs_request_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SRS_REQUEST') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SRS_REQUEST >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SRS_REQUEST >>>'
go
ALTER TABLE dbo.SRS_REQUEST
    ADD CONSTRAINT FK_SRS_REQUEST_ACADEMIC_YEAR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.SRS_REQUEST
    ADD CONSTRAINT FK_SRS_REQUEST_COM_METHOD
    FOREIGN KEY (com_method_id)
    REFERENCES dbo.COM_METHOD (com_method_id)
go
ALTER TABLE dbo.SRS_REQUEST
    ADD CONSTRAINT FK_SRS_REQUEST_LEARNER
    FOREIGN KEY (learner_id)
    REFERENCES dbo.LEARNER (learner_id)
go
GRANT REFERENCES ON dbo.SRS_REQUEST TO eqa_user
go
GRANT SELECT ON dbo.SRS_REQUEST TO eqa_user
go
GRANT SELECT ON dbo.SRS_REQUEST TO read_only
go
GRANT SELECT ON dbo.SRS_REQUEST TO rma_users
go
GRANT INSERT ON dbo.SRS_REQUEST TO eqa_user
go
GRANT DELETE ON dbo.SRS_REQUEST TO eqa_user
go
GRANT UPDATE ON dbo.SRS_REQUEST TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SRS_REQUEST TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SRS_REQUEST TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SRS_REQUEST TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SRS_REQUEST TO eqa_user
go
CREATE TABLE dbo.SSB_TYPE
(
    ssb_type_code       char(3)      NOT NULL,
    ssb_type_desc       varchar(255) NOT NULL,
    print_prov_logo_ind yn_ind       NOT NULL,
    print_ssb_logo_ind  yn_ind       NOT NULL,
    CONSTRAINT PK_SSB_TYPE
    PRIMARY KEY CLUSTERED (ssb_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SSB_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SSB_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SSB_TYPE >>>'
go
GRANT REFERENCES ON dbo.SSB_TYPE TO eqa_user
go
GRANT SELECT ON dbo.SSB_TYPE TO eqa_user
go
GRANT SELECT ON dbo.SSB_TYPE TO read_only
go
GRANT SELECT ON dbo.SSB_TYPE TO rma_users
go
GRANT INSERT ON dbo.SSB_TYPE TO eqa_user
go
GRANT DELETE ON dbo.SSB_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.SSB_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SSB_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SSB_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SSB_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SSB_TYPE TO eqa_user
go
CREATE TABLE dbo.STANDARD_INPUT
(
    standard_input_id       OBJECT_ID     NOT NULL,
    learner_input_id        OBJECT_ID     NOT NULL,
    class_identifier        varchar(10)   NULL,
    other_accred_code       numeric(5,0)  NULL,
    other_accred_loc        numeric(2,0)  NULL,
    correspondence          tinyint       NULL,
    standard_version        numeric(2,0)  NULL,
    standard_language       code_1        NULL,
    date_completed          datetime      NULL,
    semester_completed      numeric(1,0)  NULL,
    result                  varchar(3)    NULL,
    ts                      timestamp     NULL,
    standard_code           varchar(8)    NULL,
    result_id               numeric(12,0) NULL,
    withdrawn_flag          bit           DEFAULT 0 NOT NULL,
    te_reo_paper            bit           DEFAULT 0 NOT NULL,
    answer_in_maori         bit           DEFAULT 0 NOT NULL,
    entry_id                numeric(12,0) NULL,
    version_id              numeric(12,0) DEFAULT 0 NOT NULL,
    context                 varchar(3)    NULL,
    tec_course_id           OBJECT_ID     NULL,
    funded_provider_id      OBJECT_ID     NULL,
    result_batch_number     OBJECT_ID     NULL,
    prescription_number     varchar(8)    NULL,
    secondary_course_number varchar(10)   NULL,
    assessment_method       code_2        NULL,
    CONSTRAINT PK_STANDARD_INPUT
    PRIMARY KEY NONCLUSTERED (standard_input_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.STANDARD_INPUT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STANDARD_INPUT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STANDARD_INPUT >>>'
go
ALTER TABLE dbo.STANDARD_INPUT
    ADD CONSTRAINT FK_STANDARD_INPUT_RESULT
    FOREIGN KEY (result_id)
    REFERENCES dbo.RESULT (result_id)
go
ALTER TABLE dbo.STANDARD_INPUT
    ADD CONSTRAINT FK_STANDARD_INPUT_ENTRY
    FOREIGN KEY (entry_id)
    REFERENCES dbo.ENTRY (entry_id)
go
ALTER TABLE dbo.STANDARD_INPUT
    ADD CONSTRAINT FK_STANDARD_LEARNER_INPUT
    FOREIGN KEY (learner_input_id)
    REFERENCES dbo.LEARNER_INPUT (learner_input_id)
go
GRANT REFERENCES ON dbo.STANDARD_INPUT TO eqa_user
go
GRANT SELECT ON dbo.STANDARD_INPUT TO eqa_user
go
GRANT SELECT ON dbo.STANDARD_INPUT TO read_only
go
GRANT SELECT ON dbo.STANDARD_INPUT TO rma_users
go
GRANT INSERT ON dbo.STANDARD_INPUT TO eqa_user
go
GRANT DELETE ON dbo.STANDARD_INPUT TO eqa_user
go
GRANT UPDATE ON dbo.STANDARD_INPUT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STANDARD_INPUT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STANDARD_INPUT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STANDARD_INPUT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STANDARD_INPUT TO eqa_user
go
CREATE TABLE dbo.STATS_ENTRY_PROVIDER
(
    stats_entry_provider_id OBJECT_ID    NOT NULL,
    academic_year           char(4)      NOT NULL,
    provider_id             OBJECT_ID    NOT NULL,
    provider_location       number_2     NOT NULL,
    study_provider_id       OBJECT_ID    NOT NULL,
    study_provider_location number_2     NOT NULL,
    std_number              varchar(8)   NOT NULL,
    std_version_number      numeric(8,0) NOT NULL,
    entry_count             int          NOT NULL,
    result_count            int          NULL,
    answers_in_maori_count  int          NULL,
    te_reo_paper_count      int          NULL,
    CONSTRAINT PK_STATS_ENTRY_PROVIDER
    PRIMARY KEY CLUSTERED (stats_entry_provider_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.STATS_ENTRY_PROVIDER') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STATS_ENTRY_PROVIDER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STATS_ENTRY_PROVIDER >>>'
go
ALTER TABLE dbo.STATS_ENTRY_PROVIDER
    ADD CONSTRAINT FK_STATS_ENTRY_ACADEMIC_YEAR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.STATS_ENTRY_PROVIDER
    ADD CONSTRAINT FK_STATS_ENTRY_PROVIDER
    FOREIGN KEY (provider_id,provider_location)
    REFERENCES dbo.PROVIDER (moe_provider_id,location)
go
ALTER TABLE dbo.STATS_ENTRY_PROVIDER
    ADD CONSTRAINT FK_STATS_ENTRY_STUDY_PROVIDER
    FOREIGN KEY (study_provider_id,study_provider_location)
    REFERENCES dbo.PROVIDER (moe_provider_id,location)
go
ALTER TABLE dbo.STATS_ENTRY_PROVIDER
    ADD CONSTRAINT FK_STATS_ENTRY_STD_VERS
    FOREIGN KEY (std_number,std_version_number)
    REFERENCES dbo.STD_VERSION (std_number,std_version_number)
go
GRANT REFERENCES ON dbo.STATS_ENTRY_PROVIDER TO eqa_user
go
GRANT SELECT ON dbo.STATS_ENTRY_PROVIDER TO eqa_user
go
GRANT SELECT ON dbo.STATS_ENTRY_PROVIDER TO read_only
go
GRANT SELECT ON dbo.STATS_ENTRY_PROVIDER TO rma_users
go
GRANT INSERT ON dbo.STATS_ENTRY_PROVIDER TO eqa_user
go
GRANT DELETE ON dbo.STATS_ENTRY_PROVIDER TO eqa_user
go
GRANT UPDATE ON dbo.STATS_ENTRY_PROVIDER TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STATS_ENTRY_PROVIDER TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STATS_ENTRY_PROVIDER TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STATS_ENTRY_PROVIDER TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STATS_ENTRY_PROVIDER TO eqa_user
go
CREATE TABLE dbo.STATS_ENTRY_PROVIDER_RESULT
(
    stats_entry_prov_result_id OBJECT_ID  NOT NULL,
    stats_entry_provider_id    OBJECT_ID  NOT NULL,
    result_code                varchar(5) NOT NULL,
    result_count               int        NOT NULL,
    CONSTRAINT PK_STATS_ENTRY_PROVIDER_RESULT
    PRIMARY KEY CLUSTERED (stats_entry_prov_result_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.STATS_ENTRY_PROVIDER_RESULT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STATS_ENTRY_PROVIDER_RESULT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STATS_ENTRY_PROVIDER_RESULT >>>'
go
ALTER TABLE dbo.STATS_ENTRY_PROVIDER_RESULT
    ADD CONSTRAINT FK_STATS_ENT_PROV_RES_RES_CODE
    FOREIGN KEY (result_code)
    REFERENCES dbo.RESULT_CODE (result_code)
go
ALTER TABLE dbo.STATS_ENTRY_PROVIDER_RESULT
    ADD CONSTRAINT FK_STATS_ENT_PROV_RESULT_STATS
    FOREIGN KEY (stats_entry_provider_id)
    REFERENCES dbo.STATS_ENTRY_PROVIDER (stats_entry_provider_id)
go
GRANT REFERENCES ON dbo.STATS_ENTRY_PROVIDER_RESULT TO eqa_user
go
GRANT SELECT ON dbo.STATS_ENTRY_PROVIDER_RESULT TO eqa_user
go
GRANT SELECT ON dbo.STATS_ENTRY_PROVIDER_RESULT TO read_only
go
GRANT SELECT ON dbo.STATS_ENTRY_PROVIDER_RESULT TO rma_users
go
GRANT INSERT ON dbo.STATS_ENTRY_PROVIDER_RESULT TO eqa_user
go
GRANT DELETE ON dbo.STATS_ENTRY_PROVIDER_RESULT TO eqa_user
go
GRANT UPDATE ON dbo.STATS_ENTRY_PROVIDER_RESULT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STATS_ENTRY_PROVIDER_RESULT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STATS_ENTRY_PROVIDER_RESULT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STATS_ENTRY_PROVIDER_RESULT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STATS_ENTRY_PROVIDER_RESULT TO eqa_user
go
CREATE TABLE dbo.STATS_KEY_INDICATOR
(
    academic_year                char(4)   NOT NULL,
    moe_provider_id              OBJECT_ID NOT NULL,
    location                     number_2  NOT NULL,
    cand_n1                      int       NOT NULL,
    cand_n2                      int       NOT NULL,
    cand_n3                      int       NOT NULL,
    cand_n4                      int       NOT NULL,
    cand_n5                      int       NOT NULL,
    cand_nqf                     int       NOT NULL,
    cand_sfc                     int       NOT NULL,
    cand_schol                   int       NOT NULL,
    cand_total                   int       NOT NULL,
    cand_no_context              int       NOT NULL,
    entries_n1                   int       NOT NULL,
    entries_n2                   int       NOT NULL,
    entries_n3                   int       NOT NULL,
    entries_n4                   int       NOT NULL,
    entries_n5                   int       NOT NULL,
    entries_nqf                  int       NOT NULL,
    entries_sfc                  int       NOT NULL,
    entries_schol                int       NOT NULL,
    entries_total                int       NOT NULL,
    entries_no_context           int       NOT NULL,
    finassist_count              int       NOT NULL,
    special_assessment           int       NOT NULL,
    te_reo_paper                 int       NOT NULL,
    answer_maori                 int       NOT NULL,
    foreign_fee_payer            int       NOT NULL,
    year_13_results_not_released int       NOT NULL,
    learners_at_other_schools    int       NOT NULL,
    external_entries_variance    int       NOT NULL,
    exam_timetable_clashes       int       NOT NULL,
    prov_si_missing_results      int       NOT NULL,
    prov_sal1_missing_results    int       NOT NULL,
    prov_sal2_missing_results    int       NOT NULL,
    final_si_missing_results     int       NOT NULL,
    final_sal1_missing_results   int       NOT NULL,
    final_sal2_missing_results   int       NOT NULL,
    final_si_not_different       int       NOT NULL,
    final_sal1_not_different     int       NOT NULL,
    final_sal2_not_different     int       NOT NULL,
    expired_ia_std_entries       int       NOT NULL,
    exam_sessions_other_schools  int       NOT NULL,
    last_update_date             datetime  NOT NULL,
    CONSTRAINT PK_STATS_KEY_INDICATOR
    PRIMARY KEY CLUSTERED (academic_year,moe_provider_id,location)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.STATS_KEY_INDICATOR') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STATS_KEY_INDICATOR >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STATS_KEY_INDICATOR >>>'
go
ALTER TABLE dbo.STATS_KEY_INDICATOR
    ADD CONSTRAINT FK_STATS_KEY_ACADEMIC_YEAR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.STATS_KEY_INDICATOR
    ADD CONSTRAINT FK_STATS_KEY_PROVIDER
    FOREIGN KEY (moe_provider_id,location)
    REFERENCES dbo.PROVIDER (moe_provider_id,location)
go
GRANT REFERENCES ON dbo.STATS_KEY_INDICATOR TO eqa_user
go
GRANT SELECT ON dbo.STATS_KEY_INDICATOR TO eqa_user
go
GRANT SELECT ON dbo.STATS_KEY_INDICATOR TO read_only
go
GRANT SELECT ON dbo.STATS_KEY_INDICATOR TO rma_users
go
GRANT INSERT ON dbo.STATS_KEY_INDICATOR TO eqa_user
go
GRANT DELETE ON dbo.STATS_KEY_INDICATOR TO eqa_user
go
GRANT UPDATE ON dbo.STATS_KEY_INDICATOR TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STATS_KEY_INDICATOR TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STATS_KEY_INDICATOR TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STATS_KEY_INDICATOR TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STATS_KEY_INDICATOR TO eqa_user
go
CREATE TABLE dbo.STATUS_REASON_CODE
(
    perorg_role_type_code   number_3    NOT NULL,
    perorg_role_status_code code_2      NOT NULL,
    status_reason_code      code_2      NOT NULL,
    status_reason_desc      descr_short NOT NULL,
    sortkey                 sortkey     NOT NULL,
    active_ind              yn_ind      NOT NULL,
    CONSTRAINT PK_STATUS_REASON_CODE
    PRIMARY KEY CLUSTERED (status_reason_code,perorg_role_type_code,perorg_role_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.STATUS_REASON_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STATUS_REASON_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STATUS_REASON_CODE >>>'
go
ALTER TABLE dbo.STATUS_REASON_CODE
    ADD CONSTRAINT FK_STATUS_REASON_POR_STATUS
    FOREIGN KEY (perorg_role_type_code,perorg_role_status_code)
    REFERENCES dbo.PERORG_ROLE_STATUS (perorg_role_type_code,perorg_role_status_code)
go
GRANT REFERENCES ON dbo.STATUS_REASON_CODE TO eqa_user
go
GRANT SELECT ON dbo.STATUS_REASON_CODE TO eqa_user
go
GRANT SELECT ON dbo.STATUS_REASON_CODE TO read_only
go
GRANT SELECT ON dbo.STATUS_REASON_CODE TO rma_users
go
GRANT INSERT ON dbo.STATUS_REASON_CODE TO eqa_user
go
GRANT DELETE ON dbo.STATUS_REASON_CODE TO eqa_user
go
GRANT UPDATE ON dbo.STATUS_REASON_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STATUS_REASON_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STATUS_REASON_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STATUS_REASON_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STATUS_REASON_CODE TO eqa_user
go
CREATE TABLE dbo.STD
(
    std_id                    OBJECT_ID    NOT NULL,
    std_number                varchar(8)   NOT NULL,
    std_type_code             code_2       NOT NULL,
    std_status_date           datetime     NOT NULL,
    std_status_code           code_2       NOT NULL,
    can_create_version_ind    yn_ind       NOT NULL,
    creation_date             datetime     NOT NULL,
    audit_tran_id             OBJECT_ID    NOT NULL,
    ts                        timestamp    NOT NULL,
    aus_std_number            varchar(20)  NULL,
    external_std_number       numeric(8,0) NULL,
    latest_std_version_id     OBJECT_ID    NULL,
    latest_reg_std_version_id OBJECT_ID    NULL,
    web_std_version_id        OBJECT_ID    NULL,
    CONSTRAINT PK_STD
    PRIMARY KEY NONCLUSTERED (std_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.STD') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STD >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STD >>>'
go
GRANT REFERENCES ON dbo.STD TO eqa_user
go
GRANT SELECT ON dbo.STD TO AyaO
go
GRANT SELECT ON dbo.STD TO eqa_user
go
GRANT SELECT ON dbo.STD TO read_only
go
GRANT SELECT ON dbo.STD TO rma_users
go
GRANT INSERT ON dbo.STD TO eqa_user
go
GRANT DELETE ON dbo.STD TO eqa_user
go
GRANT UPDATE ON dbo.STD TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STD TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STD TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STD TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STD TO eqa_user
go
CREATE TABLE dbo.STD_CONTEXT_MAP
(
    std_context_map_id OBJECT_ID  NOT NULL,
    std_number         varchar(8) NOT NULL,
    context_code       char(3)    NOT NULL,
    active_ind         yn         DEFAULT 1 NOT NULL,
    ts                 timestamp  NULL,
    CONSTRAINT PK_STD_CONTEXT_MAP
    PRIMARY KEY CLUSTERED (std_context_map_id),
    CONSTRAINT IDX_UQ_STD_CONTEXT
    UNIQUE NONCLUSTERED (std_context_map_id,std_number),
    CONSTRAINT IDX_UQ_STD_CONTEXT_CODE
    UNIQUE NONCLUSTERED (std_number,context_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.STD_CONTEXT_MAP') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STD_CONTEXT_MAP >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STD_CONTEXT_MAP >>>'
go
ALTER TABLE dbo.STD_CONTEXT_MAP
    ADD CONSTRAINT FK_STD_CONTEXT_MAP_CONTEXT
    FOREIGN KEY (context_code)
    REFERENCES dbo.CONTEXT_CODE (context_code)
go
ALTER TABLE dbo.STD_CONTEXT_MAP
    ADD CONSTRAINT FK_STD_CONTEXT_MAP_STD
    FOREIGN KEY (std_number)
    REFERENCES dbo.STD (std_number)
go
GRANT REFERENCES ON dbo.STD_CONTEXT_MAP TO eqa_user
go
GRANT SELECT ON dbo.STD_CONTEXT_MAP TO eqa_user
go
GRANT SELECT ON dbo.STD_CONTEXT_MAP TO read_only
go
GRANT SELECT ON dbo.STD_CONTEXT_MAP TO rma_users
go
GRANT INSERT ON dbo.STD_CONTEXT_MAP TO eqa_user
go
GRANT DELETE ON dbo.STD_CONTEXT_MAP TO eqa_user
go
GRANT UPDATE ON dbo.STD_CONTEXT_MAP TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STD_CONTEXT_MAP TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STD_CONTEXT_MAP TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STD_CONTEXT_MAP TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STD_CONTEXT_MAP TO eqa_user
go
CREATE TABLE dbo.STD_EXEMPTION
(
    std_exemption_id       OBJECT_ID     NOT NULL,
    std_number             varchar(8)    NOT NULL,
    crse_endr_exemption_id OBJECT_ID     NOT NULL,
    audit_tran_id          numeric(12,0) NOT NULL,
    CONSTRAINT PK_STD_EXEMPTION
    PRIMARY KEY CLUSTERED (std_exemption_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.STD_EXEMPTION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STD_EXEMPTION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STD_EXEMPTION >>>'
go
ALTER TABLE dbo.STD_EXEMPTION
    ADD CONSTRAINT FK_STD_EXEMP_CRSE_ENDR_EXEMP
    FOREIGN KEY (crse_endr_exemption_id)
    REFERENCES dbo.CRSE_ENDR_EXEMPTION (crse_endr_exemption_id)
go
ALTER TABLE dbo.STD_EXEMPTION
    ADD CONSTRAINT FK_STD_EXEM_FK_STD_EX_STD
    FOREIGN KEY (std_number)
    REFERENCES dbo.STD (std_number)
go
GRANT REFERENCES ON dbo.STD_EXEMPTION TO eqa_user
go
GRANT SELECT ON dbo.STD_EXEMPTION TO eqa_user
go
GRANT SELECT ON dbo.STD_EXEMPTION TO read_only
go
GRANT SELECT ON dbo.STD_EXEMPTION TO rma_users
go
GRANT INSERT ON dbo.STD_EXEMPTION TO eqa_user
go
GRANT DELETE ON dbo.STD_EXEMPTION TO eqa_user
go
GRANT UPDATE ON dbo.STD_EXEMPTION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STD_EXEMPTION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STD_EXEMPTION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STD_EXEMPTION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STD_EXEMPTION TO eqa_user
go
CREATE TABLE dbo.STD_GRADING_SCHEME_CODE
(
    std_grading_scheme_code code_2  NOT NULL,
    std_grading_scheme_desc descr   NOT NULL,
    active_ind              yn_ind  NOT NULL,
    sortkey                 sortkey NOT NULL,
    CONSTRAINT PK_STD_GRADING_SCHEME_CODE
    PRIMARY KEY CLUSTERED (std_grading_scheme_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.STD_GRADING_SCHEME_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STD_GRADING_SCHEME_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STD_GRADING_SCHEME_CODE >>>'
go
GRANT REFERENCES ON dbo.STD_GRADING_SCHEME_CODE TO eqa_user
go
GRANT SELECT ON dbo.STD_GRADING_SCHEME_CODE TO eqa_user
go
GRANT SELECT ON dbo.STD_GRADING_SCHEME_CODE TO read_only
go
GRANT SELECT ON dbo.STD_GRADING_SCHEME_CODE TO rma_users
go
GRANT INSERT ON dbo.STD_GRADING_SCHEME_CODE TO eqa_user
go
GRANT DELETE ON dbo.STD_GRADING_SCHEME_CODE TO eqa_user
go
GRANT UPDATE ON dbo.STD_GRADING_SCHEME_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STD_GRADING_SCHEME_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STD_GRADING_SCHEME_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STD_GRADING_SCHEME_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STD_GRADING_SCHEME_CODE TO eqa_user
go
CREATE TABLE dbo.STD_GRADING_TYPE
(
    std_grading_type_code    varchar(4) NOT NULL,
    std_grading_scheme_code  code_2     NOT NULL,
    grading_system_code_desc descr      NOT NULL,
    under_maintenance_ind    ny_ind     NOT NULL,
    audit_tran_id            OBJECT_ID  NOT NULL,
    ts                       timestamp  NOT NULL,
    sortkey                  sortkey    NOT NULL,
    active_ind               yn_ind     NOT NULL,
    CONSTRAINT PK_STD_GRADING_TYPE
    PRIMARY KEY CLUSTERED (std_grading_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.STD_GRADING_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STD_GRADING_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STD_GRADING_TYPE >>>'
go
ALTER TABLE dbo.STD_GRADING_TYPE
    ADD CONSTRAINT FK_STD_GRADING_TYPE_STD_SCHEME
    FOREIGN KEY (std_grading_scheme_code)
    REFERENCES dbo.STD_GRADING_SCHEME_CODE (std_grading_scheme_code)
go
ALTER TABLE dbo.RESULT_RANKING
    ADD CONSTRAINT FK_RESULT_RANKING_GRADE_TYPE
    FOREIGN KEY (std_grading_type_code)
    REFERENCES dbo.STD_GRADING_TYPE (std_grading_type_code)
go
GRANT REFERENCES ON dbo.STD_GRADING_TYPE TO eqa_user
go
GRANT SELECT ON dbo.STD_GRADING_TYPE TO eqa_user
go
GRANT SELECT ON dbo.STD_GRADING_TYPE TO read_only
go
GRANT SELECT ON dbo.STD_GRADING_TYPE TO rma_users
go
GRANT INSERT ON dbo.STD_GRADING_TYPE TO eqa_user
go
GRANT DELETE ON dbo.STD_GRADING_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.STD_GRADING_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STD_GRADING_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STD_GRADING_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STD_GRADING_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STD_GRADING_TYPE TO eqa_user
go
CREATE TABLE dbo.STD_GRAD_SCHEME_STD_TYPE
(
    std_grading_scheme_code code_2  NOT NULL,
    std_type_code           code_2  NOT NULL,
    active_ind              yn_ind  NOT NULL,
    sortkey                 sortkey NOT NULL,
    CONSTRAINT PK_STD_GRAD_SCHEME_STD_TYPE
    PRIMARY KEY CLUSTERED (std_grading_scheme_code,std_type_code)
)
LOCK ALLPAGES
go
IF OBJECT_ID('dbo.STD_GRAD_SCHEME_STD_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STD_GRAD_SCHEME_STD_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STD_GRAD_SCHEME_STD_TYPE >>>'
go
ALTER TABLE dbo.STD_GRAD_SCHEME_STD_TYPE
    ADD CONSTRAINT FK_GRAD_SCHEME_STD_TYPE_SCHEME
    FOREIGN KEY (std_grading_scheme_code)
    REFERENCES dbo.STD_GRADING_SCHEME_CODE (std_grading_scheme_code)
go
GRANT REFERENCES ON dbo.STD_GRAD_SCHEME_STD_TYPE TO eqa_user
go
GRANT SELECT ON dbo.STD_GRAD_SCHEME_STD_TYPE TO eqa_user
go
GRANT SELECT ON dbo.STD_GRAD_SCHEME_STD_TYPE TO read_only
go
GRANT SELECT ON dbo.STD_GRAD_SCHEME_STD_TYPE TO rma_users
go
GRANT INSERT ON dbo.STD_GRAD_SCHEME_STD_TYPE TO eqa_user
go
GRANT DELETE ON dbo.STD_GRAD_SCHEME_STD_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.STD_GRAD_SCHEME_STD_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STD_GRAD_SCHEME_STD_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STD_GRAD_SCHEME_STD_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STD_GRAD_SCHEME_STD_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STD_GRAD_SCHEME_STD_TYPE TO eqa_user
go
CREATE TABLE dbo.STD_GRAD_TYPE_ASSMNT_TYPE
(
    std_grading_type_code varchar(4) NOT NULL,
    assessment_type_code  code_2     NOT NULL,
    sortkey               sortkey    NOT NULL,
    CONSTRAINT PK_STD_GRAD_TYPE_ASSMNT_TYPE
    PRIMARY KEY CLUSTERED (std_grading_type_code,assessment_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.STD_GRAD_TYPE_ASSMNT_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STD_GRAD_TYPE_ASSMNT_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STD_GRAD_TYPE_ASSMNT_TYPE >>>'
go
ALTER TABLE dbo.STD_GRAD_TYPE_ASSMNT_TYPE
    ADD CONSTRAINT FK_STD_GRAD_ASS_TYP_STD_GRAD
    FOREIGN KEY (std_grading_type_code)
    REFERENCES dbo.STD_GRADING_TYPE (std_grading_type_code)
go
ALTER TABLE dbo.STD_GRAD_TYPE_ASSMNT_TYPE
    ADD CONSTRAINT FK_STD_GRD_ASS_TYP_ASS_TYP
    FOREIGN KEY (assessment_type_code)
    REFERENCES dbo.ASSESSMENT_TYPE (assessment_type_code)
go
GRANT REFERENCES ON dbo.STD_GRAD_TYPE_ASSMNT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.STD_GRAD_TYPE_ASSMNT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.STD_GRAD_TYPE_ASSMNT_TYPE TO read_only
go
GRANT SELECT ON dbo.STD_GRAD_TYPE_ASSMNT_TYPE TO rma_users
go
GRANT INSERT ON dbo.STD_GRAD_TYPE_ASSMNT_TYPE TO eqa_user
go
GRANT DELETE ON dbo.STD_GRAD_TYPE_ASSMNT_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.STD_GRAD_TYPE_ASSMNT_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STD_GRAD_TYPE_ASSMNT_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STD_GRAD_TYPE_ASSMNT_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STD_GRAD_TYPE_ASSMNT_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STD_GRAD_TYPE_ASSMNT_TYPE TO eqa_user
go
CREATE TABLE dbo.STD_GROUP
(
    std_group_id            OBJECT_ID    NOT NULL,
    std_group_type_code     code_2       NOT NULL,
    std_group_name          varchar(100) NOT NULL,
    std_group_owner_code    code_2       NOT NULL,
    primary_language_code   language     NOT NULL,
    secondary_language_code language     NULL,
    std_group_name_alt_lang varchar(100) NULL,
    std_group_desc          descr        NULL,
    active_ind              yn           DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    audit_tran_id           OBJECT_ID    NOT NULL,
    ts                      timestamp    NOT NULL,
    CONSTRAINT PK_STD_GROUP
    PRIMARY KEY CLUSTERED (std_group_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.STD_GROUP') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STD_GROUP >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STD_GROUP >>>'
go
ALTER TABLE dbo.STD_GROUP
    ADD CONSTRAINT FK_STD_GROUP_PRIM_LANGUAGE
    FOREIGN KEY (primary_language_code)
    REFERENCES dbo.LANGUAGE (language_code)
go
ALTER TABLE dbo.STD_GROUP
    ADD CONSTRAINT FK_STD_GROUP_ALT_LANGUAGE
    FOREIGN KEY (secondary_language_code)
    REFERENCES dbo.LANGUAGE (language_code)
go
GRANT REFERENCES ON dbo.STD_GROUP TO eqa_user
go
GRANT SELECT ON dbo.STD_GROUP TO eqa_user
go
GRANT SELECT ON dbo.STD_GROUP TO read_only
go
GRANT SELECT ON dbo.STD_GROUP TO rma_users
go
GRANT INSERT ON dbo.STD_GROUP TO eqa_user
go
GRANT DELETE ON dbo.STD_GROUP TO eqa_user
go
GRANT UPDATE ON dbo.STD_GROUP TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STD_GROUP TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STD_GROUP TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STD_GROUP TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STD_GROUP TO eqa_user
go
CREATE TABLE dbo.STD_GROUP_CFN_MAPPING
(
    std_group_id        OBJECT_ID NOT NULL,
    cfn_catg_id         OBJECT_ID NOT NULL,
    effective_from_date datetime  NOT NULL,
    effective_to_date   datetime  NULL,
    audit_tran_id       OBJECT_ID NOT NULL,
    ts                  timestamp NOT NULL,
    CONSTRAINT PK_STD_GROUP_CFN_MAPPING
    PRIMARY KEY CLUSTERED (std_group_id,cfn_catg_id,effective_from_date)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.STD_GROUP_CFN_MAPPING') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STD_GROUP_CFN_MAPPING >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STD_GROUP_CFN_MAPPING >>>'
go
ALTER TABLE dbo.STD_GROUP_CFN_MAPPING
    ADD CONSTRAINT FK_STD_GRP_CFN_MAP_STD_GR
    FOREIGN KEY (std_group_id)
    REFERENCES dbo.STD_GROUP (std_group_id)
go
ALTER TABLE dbo.STD_GROUP_CFN_MAPPING
    ADD CONSTRAINT FK_STD_GRP_CFN_MAP_CATG
    FOREIGN KEY (cfn_catg_id)
    REFERENCES dbo.CFN_CATEGORY (cfn_catg_id)
go
GRANT REFERENCES ON dbo.STD_GROUP_CFN_MAPPING TO eqa_user
go
GRANT SELECT ON dbo.STD_GROUP_CFN_MAPPING TO eqa_user
go
GRANT SELECT ON dbo.STD_GROUP_CFN_MAPPING TO read_only
go
GRANT SELECT ON dbo.STD_GROUP_CFN_MAPPING TO rma_users
go
GRANT INSERT ON dbo.STD_GROUP_CFN_MAPPING TO eqa_user
go
GRANT DELETE ON dbo.STD_GROUP_CFN_MAPPING TO eqa_user
go
GRANT UPDATE ON dbo.STD_GROUP_CFN_MAPPING TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STD_GROUP_CFN_MAPPING TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STD_GROUP_CFN_MAPPING TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STD_GROUP_CFN_MAPPING TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STD_GROUP_CFN_MAPPING TO eqa_user
go
CREATE TABLE dbo.STD_GROUP_COVERAGE
(
    std_group_id        OBJECT_ID NOT NULL,
    std_id              OBJECT_ID NOT NULL,
    effective_from_date datetime  NOT NULL,
    effective_to_date   datetime  NULL,
    audit_tran_id       OBJECT_ID NOT NULL,
    ts                  timestamp NOT NULL,
    CONSTRAINT PK_STD_GROUP_COVERAGE
    PRIMARY KEY CLUSTERED (std_group_id,std_id,effective_from_date)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.STD_GROUP_COVERAGE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STD_GROUP_COVERAGE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STD_GROUP_COVERAGE >>>'
go
ALTER TABLE dbo.STD_GROUP_COVERAGE
    ADD CONSTRAINT FK_STD_GRP_COVG_STD
    FOREIGN KEY (std_id)
    REFERENCES dbo.STD (std_id)
go
ALTER TABLE dbo.STD_GROUP_COVERAGE
    ADD CONSTRAINT FK_STD_GRP_COVG_STD_GR
    FOREIGN KEY (std_group_id)
    REFERENCES dbo.STD_GROUP (std_group_id)
go
GRANT REFERENCES ON dbo.STD_GROUP_COVERAGE TO eqa_user
go
GRANT SELECT ON dbo.STD_GROUP_COVERAGE TO eqa_user
go
GRANT SELECT ON dbo.STD_GROUP_COVERAGE TO read_only
go
GRANT SELECT ON dbo.STD_GROUP_COVERAGE TO rma_users
go
GRANT INSERT ON dbo.STD_GROUP_COVERAGE TO eqa_user
go
GRANT DELETE ON dbo.STD_GROUP_COVERAGE TO eqa_user
go
GRANT UPDATE ON dbo.STD_GROUP_COVERAGE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STD_GROUP_COVERAGE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STD_GROUP_COVERAGE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STD_GROUP_COVERAGE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STD_GROUP_COVERAGE TO eqa_user
go
CREATE TABLE dbo.STD_GROUP_OWNER_CODE
(
    std_group_owner_code code_2 NOT NULL,
    std_group_owner_name descr  NULL,
    active_ind           yn     DEFAULT --
--CREATE DEFAULTS
--
CREATE DEFAULT dbo.Default_1 AS 0 NOT NULL,
    CONSTRAINT PK_STD_GROUP_OWNER_CODE
    PRIMARY KEY CLUSTERED (std_group_owner_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.STD_GROUP_OWNER_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STD_GROUP_OWNER_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STD_GROUP_OWNER_CODE >>>'
go
ALTER TABLE dbo.STD_GROUP
    ADD CONSTRAINT FK_STD_GRP_STD_OWNER_CODE
    FOREIGN KEY (std_group_owner_code)
    REFERENCES dbo.STD_GROUP_OWNER_CODE (std_group_owner_code)
go
GRANT REFERENCES ON dbo.STD_GROUP_OWNER_CODE TO eqa_user
go
GRANT SELECT ON dbo.STD_GROUP_OWNER_CODE TO eqa_user
go
GRANT SELECT ON dbo.STD_GROUP_OWNER_CODE TO read_only
go
GRANT SELECT ON dbo.STD_GROUP_OWNER_CODE TO rma_users
go
GRANT INSERT ON dbo.STD_GROUP_OWNER_CODE TO eqa_user
go
GRANT DELETE ON dbo.STD_GROUP_OWNER_CODE TO eqa_user
go
GRANT UPDATE ON dbo.STD_GROUP_OWNER_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STD_GROUP_OWNER_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STD_GROUP_OWNER_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STD_GROUP_OWNER_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STD_GROUP_OWNER_CODE TO eqa_user
go
CREATE TABLE dbo.STD_GROUP_STD_MAPPING
(
    std_group_id        OBJECT_ID NOT NULL,
    std_id              OBJECT_ID NOT NULL,
    effective_from_date datetime  NOT NULL,
    effective_to_date   datetime  NULL,
    audit_tran_id       OBJECT_ID NOT NULL,
    ts                  timestamp NOT NULL,
    CONSTRAINT PK_STD_GROUP_STD_MAPPING
    PRIMARY KEY CLUSTERED (std_group_id,std_id,effective_from_date)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.STD_GROUP_STD_MAPPING') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STD_GROUP_STD_MAPPING >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STD_GROUP_STD_MAPPING >>>'
go
ALTER TABLE dbo.STD_GROUP_STD_MAPPING
    ADD CONSTRAINT FK_STD_GRP_STD_MAP_STD
    FOREIGN KEY (std_id)
    REFERENCES dbo.STD (std_id)
go
ALTER TABLE dbo.STD_GROUP_STD_MAPPING
    ADD CONSTRAINT FK_STD_GRP_STD_MAP_STD_GR
    FOREIGN KEY (std_group_id)
    REFERENCES dbo.STD_GROUP (std_group_id)
go
GRANT REFERENCES ON dbo.STD_GROUP_STD_MAPPING TO eqa_user
go
GRANT SELECT ON dbo.STD_GROUP_STD_MAPPING TO eqa_user
go
GRANT SELECT ON dbo.STD_GROUP_STD_MAPPING TO read_only
go
GRANT SELECT ON dbo.STD_GROUP_STD_MAPPING TO rma_users
go
GRANT INSERT ON dbo.STD_GROUP_STD_MAPPING TO eqa_user
go
GRANT DELETE ON dbo.STD_GROUP_STD_MAPPING TO eqa_user
go
GRANT UPDATE ON dbo.STD_GROUP_STD_MAPPING TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STD_GROUP_STD_MAPPING TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STD_GROUP_STD_MAPPING TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STD_GROUP_STD_MAPPING TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STD_GROUP_STD_MAPPING TO eqa_user
go
CREATE TABLE dbo.STD_GROUP_TYPE
(
    std_group_type_code      code_2 NOT NULL,
    std_group_type_name      descr  NOT NULL,
    user_specified_dates_ind ny_ind NOT NULL,
    remove_hist_mappings_ind ny_ind NOT NULL,
    active_ind               yn_ind NOT NULL,
    CONSTRAINT PK_STD_GROUP_TYPE
    PRIMARY KEY CLUSTERED (std_group_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.STD_GROUP_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STD_GROUP_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STD_GROUP_TYPE >>>'
go
ALTER TABLE dbo.STD_GROUP
    ADD CONSTRAINT FK_STD_GRP_STD_GRP_TYPE
    FOREIGN KEY (std_group_type_code)
    REFERENCES dbo.STD_GROUP_TYPE (std_group_type_code)
go
GRANT REFERENCES ON dbo.STD_GROUP_TYPE TO eqa_user
go
GRANT SELECT ON dbo.STD_GROUP_TYPE TO eqa_user
go
GRANT SELECT ON dbo.STD_GROUP_TYPE TO read_only
go
GRANT SELECT ON dbo.STD_GROUP_TYPE TO rma_users
go
GRANT INSERT ON dbo.STD_GROUP_TYPE TO eqa_user
go
GRANT DELETE ON dbo.STD_GROUP_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.STD_GROUP_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STD_GROUP_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STD_GROUP_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STD_GROUP_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STD_GROUP_TYPE TO eqa_user
go
CREATE TABLE dbo.STD_MINOR_VERSION
(
    std_minor_version_id        OBJECT_ID    NOT NULL,
    std_version_id              OBJECT_ID    NOT NULL,
    primary_language_code       language     NOT NULL,
    alternate_language_code     language     NULL,
    title                       varchar(255) NOT NULL,
    title_alt_lang              descr        NULL,
    purpose                     text         NULL     OFF ROW,
    credits                     number_3     NULL,
    std_grading_type_code       varchar(4)   NULL,
    assessment_type_code        code_2       NULL,
    std_grading_scheme_code     code_2       NULL,
    final_comments_by_date      dt           NULL,
    audit_tran_id               OBJECT_ID    NOT NULL,
    ts                          timestamp    NOT NULL,
    level_code                  code_2       NULL,
    context_type_code           code_2       NOT NULL,
    content_type_code           code_2       NOT NULL,
    can_have_te_reo_paper       ny_ind       NOT NULL,
    can_answer_in_maori         ny_ind       NOT NULL,
    can_have_special_assistance ny_ind       NOT NULL,
    title_with_umlauts          descr        NOT NULL,
    title_aus                   descr        NULL,
    subject_ref_number          numeric(4,3) NULL,
    subject_ref_desc            descr        NULL,
    accreditation_option_code   code_2       NULL,
    replacement_info_desc       text         NULL     OFF ROW,
    CONSTRAINT PK_STD_MINOR_VERSION
    PRIMARY KEY CLUSTERED (std_minor_version_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.STD_MINOR_VERSION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STD_MINOR_VERSION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STD_MINOR_VERSION >>>'
go
ALTER TABLE dbo.STD_MINOR_VERSION
    ADD CONSTRAINT FK_STD_MIN_VER_GRAD_SCHEME
    FOREIGN KEY (std_grading_scheme_code)
    REFERENCES dbo.STD_GRADING_SCHEME_CODE (std_grading_scheme_code)
go
ALTER TABLE dbo.STD_MINOR_VERSION
    ADD CONSTRAINT FK_STD_MINO_FK_STD_MI_STD_GRAD
    FOREIGN KEY (std_grading_type_code)
    REFERENCES dbo.STD_GRADING_TYPE (std_grading_type_code)
go
ALTER TABLE dbo.STD_MINOR_VERSION
    ADD CONSTRAINT FK_STD_MINO_FK_STD_MI_LANGUAGE
    FOREIGN KEY (primary_language_code)
    REFERENCES dbo.LANGUAGE (language_code)
go
ALTER TABLE dbo.STD_MINOR_VERSION
    ADD CONSTRAINT FK_STD_MIN_VER_CONTEXT_CODE
    FOREIGN KEY (context_type_code)
    REFERENCES dbo.CONTEXT_TYPE (context_type_code)
go
ALTER TABLE dbo.STD_MINOR_VERSION
    ADD CONSTRAINT FK_STD_MINO_FK_STD_MI_LANGUAG2
    FOREIGN KEY (alternate_language_code)
    REFERENCES dbo.LANGUAGE (language_code)
go
ALTER TABLE dbo.STD_MINOR_VERSION
    ADD CONSTRAINT FK_STD_MIN_VER_CONTENT_TYP
    FOREIGN KEY (content_type_code)
    REFERENCES dbo.CONTENT_TYPE_CODE (content_type_code)
go
ALTER TABLE dbo.STD_MINOR_VERSION
    ADD CONSTRAINT FK_STD_MINO_FK_STD_MI_ASSESSME
    FOREIGN KEY (assessment_type_code)
    REFERENCES dbo.ASSESSMENT_TYPE (assessment_type_code)
go
ALTER TABLE dbo.STD_MINOR_VERSION
    ADD CONSTRAINT FK_STD_MIN_VER_ACCRED_OPT
    FOREIGN KEY (accreditation_option_code)
    REFERENCES dbo.ACCREDITATION_OPTION_CODE (accreditation_option_code)
go
ALTER TABLE dbo.STD_MINOR_VERSION
    ADD CONSTRAINT FK_STD_MINO_FK_STD_MI_LVL
    FOREIGN KEY (level_code)
    REFERENCES dbo.LVL (level_code)
go
GRANT REFERENCES ON dbo.STD_MINOR_VERSION TO eqa_user
go
GRANT SELECT ON dbo.STD_MINOR_VERSION TO eqa_user
go
GRANT SELECT ON dbo.STD_MINOR_VERSION TO rma_users
go
GRANT SELECT ON dbo.STD_MINOR_VERSION TO read_only
go
GRANT INSERT ON dbo.STD_MINOR_VERSION TO eqa_user
go
GRANT DELETE ON dbo.STD_MINOR_VERSION TO eqa_user
go
GRANT UPDATE ON dbo.STD_MINOR_VERSION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STD_MINOR_VERSION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STD_MINOR_VERSION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STD_MINOR_VERSION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STD_MINOR_VERSION TO eqa_user
go
CREATE TABLE dbo.STD_STATUS_CODE
(
    std_status_code            code_2      NOT NULL,
    std_status_code_desc       descr       NOT NULL,
    sortkey                    sortkey     NOT NULL,
    std_status_code_short_desc descr_short NOT NULL,
    CONSTRAINT PK_STD_STATUS_CODE
    PRIMARY KEY CLUSTERED (std_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.STD_STATUS_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STD_STATUS_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STD_STATUS_CODE >>>'
go
ALTER TABLE dbo.STD
    ADD CONSTRAINT FK_STD_FK_STD_FK_STD_STAT
    FOREIGN KEY (std_status_code)
    REFERENCES dbo.STD_STATUS_CODE (std_status_code)
go
GRANT REFERENCES ON dbo.STD_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.STD_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.STD_STATUS_CODE TO read_only
go
GRANT SELECT ON dbo.STD_STATUS_CODE TO rma_users
go
GRANT INSERT ON dbo.STD_STATUS_CODE TO eqa_user
go
GRANT DELETE ON dbo.STD_STATUS_CODE TO eqa_user
go
GRANT UPDATE ON dbo.STD_STATUS_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STD_STATUS_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STD_STATUS_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STD_STATUS_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STD_STATUS_CODE TO eqa_user
go
CREATE TABLE dbo.STD_STATUS_HISTORY
(
    std_status_history_id OBJECT_ID    NOT NULL,
    std_id                OBJECT_ID    NOT NULL,
    std_status_code       code_2       NOT NULL,
    std_status_date       datetime     NOT NULL,
    audit_tran_id         OBJECT_ID    NOT NULL,
    ts                    timestamp    NOT NULL,
    updated_by            varchar(100) NOT NULL,
    update_date           datetime     NOT NULL,
    CONSTRAINT PK_STD_STATUS_HISTORY
    PRIMARY KEY CLUSTERED (std_status_history_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.STD_STATUS_HISTORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STD_STATUS_HISTORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STD_STATUS_HISTORY >>>'
go
ALTER TABLE dbo.STD_STATUS_HISTORY
    ADD CONSTRAINT FK_STD_STAT_FK_STD_ST_STD
    FOREIGN KEY (std_id)
    REFERENCES dbo.STD (std_id)
go
ALTER TABLE dbo.STD_STATUS_HISTORY
    ADD CONSTRAINT FK_STD_STAT_FK_STD_ST_STD_STAT
    FOREIGN KEY (std_status_code)
    REFERENCES dbo.STD_STATUS_CODE (std_status_code)
go
GRANT REFERENCES ON dbo.STD_STATUS_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.STD_STATUS_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.STD_STATUS_HISTORY TO read_only
go
GRANT SELECT ON dbo.STD_STATUS_HISTORY TO rma_users
go
GRANT INSERT ON dbo.STD_STATUS_HISTORY TO eqa_user
go
GRANT DELETE ON dbo.STD_STATUS_HISTORY TO eqa_user
go
GRANT UPDATE ON dbo.STD_STATUS_HISTORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STD_STATUS_HISTORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STD_STATUS_HISTORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STD_STATUS_HISTORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STD_STATUS_HISTORY TO eqa_user
go
CREATE TABLE dbo.STD_TYPE_CODE
(
    std_type_code            code_2      NOT NULL,
    std_type_code_desc       descr       NOT NULL,
    qs_code                  code_2      NOT NULL,
    is_transitionable        ny_ind      NOT NULL,
    can_have_result          ny_ind      NOT NULL,
    std_type_code_short_desc descr_short NOT NULL,
    sortkey                  sortkey     NOT NULL,
    qual_app_std_type_code   code_2      NULL,
    CONSTRAINT PK_STD_TYPE_CODE
    PRIMARY KEY CLUSTERED (std_type_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.STD_TYPE_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STD_TYPE_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STD_TYPE_CODE >>>'
go
ALTER TABLE dbo.STD_TYPE_CODE
    ADD CONSTRAINT FK_STD_TYPE_QUAL_APP_STD_TYPE
    FOREIGN KEY (qual_app_std_type_code)
    REFERENCES dbo.QUAL_APP_STD_TYPE_CODE (qual_app_std_type_code)
go
ALTER TABLE dbo.STD_TYPE_CODE
    ADD CONSTRAINT FK_STD_TYPE_FK_STD_TY_QUAL_SYS
    FOREIGN KEY (qs_code)
    REFERENCES dbo.QUAL_SYSTEM_FRAMEWORK (qs_code)
go
ALTER TABLE dbo.STD
    ADD CONSTRAINT FK_STD_STD_TYPE
    FOREIGN KEY (std_type_code)
    REFERENCES dbo.STD_TYPE_CODE (std_type_code)
go
ALTER TABLE dbo.STD_GRAD_SCHEME_STD_TYPE
    ADD CONSTRAINT FK_GRAD_SCHEME_STD_TYPE_TYPE
    FOREIGN KEY (std_type_code)
    REFERENCES dbo.STD_TYPE_CODE (std_type_code)
go
GRANT REFERENCES ON dbo.STD_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.STD_TYPE_CODE TO eqa_user
go
GRANT SELECT ON dbo.STD_TYPE_CODE TO read_only
go
GRANT SELECT ON dbo.STD_TYPE_CODE TO rma_users
go
GRANT INSERT ON dbo.STD_TYPE_CODE TO eqa_user
go
GRANT DELETE ON dbo.STD_TYPE_CODE TO eqa_user
go
GRANT UPDATE ON dbo.STD_TYPE_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STD_TYPE_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STD_TYPE_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STD_TYPE_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STD_TYPE_CODE TO eqa_user
go
CREATE TABLE dbo.STD_TYPE_OUTPUT
(
    std_output_type_id   OBJECT_ID NOT NULL,
    output_type          char(3)   NOT NULL,
    academic_year        char(4)   NOT NULL,
    std_type_code        code_2    NOT NULL,
    assessment_type_code code_2    NOT NULL,
    effective_date       datetime  NOT NULL,
    active_ind           yn_ind    NOT NULL,
    ts                   timestamp NOT NULL,
    audit_tran_id        OBJECT_ID NOT NULL,
    CONSTRAINT PK_STD_TYPE_OUTPUT
    PRIMARY KEY NONCLUSTERED (std_output_type_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.STD_TYPE_OUTPUT') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STD_TYPE_OUTPUT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STD_TYPE_OUTPUT >>>'
go
ALTER TABLE dbo.STD_TYPE_OUTPUT
    ADD CONSTRAINT FK_STD_TYPE_OUTPUT_STD_TYPE
    FOREIGN KEY (std_type_code)
    REFERENCES dbo.STD_TYPE_CODE (std_type_code)
go
ALTER TABLE dbo.STD_TYPE_OUTPUT
    ADD CONSTRAINT FK_STD_TYPE_OUTPUT_OUT_TYPE
    FOREIGN KEY (output_type)
    REFERENCES dbo.OUTPUT_TYPE (output_type)
go
ALTER TABLE dbo.STD_TYPE_OUTPUT
    ADD CONSTRAINT FK_STD_TYPE_OUTPUT_YEAR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.STD_TYPE_OUTPUT
    ADD CONSTRAINT FK_STD_TYPE_OUTPUT_ASSESS
    FOREIGN KEY (assessment_type_code)
    REFERENCES dbo.ASSESSMENT_TYPE (assessment_type_code)
go
GRANT REFERENCES ON dbo.STD_TYPE_OUTPUT TO eqa_user
go
GRANT SELECT ON dbo.STD_TYPE_OUTPUT TO eqa_user
go
GRANT SELECT ON dbo.STD_TYPE_OUTPUT TO read_only
go
GRANT SELECT ON dbo.STD_TYPE_OUTPUT TO rma_users
go
GRANT INSERT ON dbo.STD_TYPE_OUTPUT TO eqa_user
go
GRANT DELETE ON dbo.STD_TYPE_OUTPUT TO eqa_user
go
GRANT UPDATE ON dbo.STD_TYPE_OUTPUT TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STD_TYPE_OUTPUT TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STD_TYPE_OUTPUT TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STD_TYPE_OUTPUT TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STD_TYPE_OUTPUT TO eqa_user
go
CREATE TABLE dbo.STD_VERSION
(
    std_version_id              OBJECT_ID     NOT NULL,
    std_id                      OBJECT_ID     NOT NULL,
    std_number                  varchar(8)    NOT NULL,
    std_version_number          numeric(8,0)  NOT NULL,
    cfn_catg_id                 OBJECT_ID     NULL,
    std_version_status_date     dt            NOT NULL,
    std_version_status_code     code_2        NOT NULL,
    creation_date               datetime      NOT NULL,
    review_by_date              dt            NULL,
    audit_tran_id               OBJECT_ID     NOT NULL,
    ts                          timestamp     NOT NULL,
    latest_std_minor_version_id OBJECT_ID     NULL,
    latest_pub_std_minor_ver_id OBJECT_ID     NULL,
    ssb_perorg_role_id          OBJECT_ID     NOT NULL,
    first_publication_date      dt            NULL,
    last_publication_date       datetime      NULL,
    first_assessment_date       dt            NULL,
    last_assessment_date        dt            NULL,
    qual_application_id         OBJECT_ID     NULL,
    process_type_code           code_2        NULL,
    qa_event_code               code_2        NOT NULL,
    qa_event_date               datetime      NOT NULL,
    proposed_std_status_code    code_2        NULL,
    std_expiry_date             datetime      NULL,
    aus_ssb_desc                descr         NULL,
    notes                       varchar(1000) NULL,
    CONSTRAINT PK_STD_VERSION
    PRIMARY KEY NONCLUSTERED (std_version_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.STD_VERSION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STD_VERSION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STD_VERSION >>>'
go
ALTER TABLE dbo.STD_VERSION
    ADD CONSTRAINT FK_STD_VER_QUAL_APPLICATION
    FOREIGN KEY (qual_application_id)
    REFERENCES dbo.QUAL_APPLICATION (qual_application_id)
go
ALTER TABLE dbo.STD_VERSION
    ADD CONSTRAINT FK_STD_VERS_STD
    FOREIGN KEY (std_id)
    REFERENCES dbo.STD (std_id)
go
ALTER TABLE dbo.STD_VERSION
    ADD CONSTRAINT FK_STD_VER_LATEST_PUB_VER
    FOREIGN KEY (latest_pub_std_minor_ver_id)
    REFERENCES dbo.STD_MINOR_VERSION (std_minor_version_id)
go
ALTER TABLE dbo.STD_VERSION
    ADD CONSTRAINT FK_STD_VER_LATEST_MINOR_VER
    FOREIGN KEY (latest_std_minor_version_id)
    REFERENCES dbo.STD_MINOR_VERSION (std_minor_version_id)
go
ALTER TABLE dbo.STD_VERSION
    ADD CONSTRAINT FK_STD_VER_PROP_STD_STATUS
    FOREIGN KEY (proposed_std_status_code)
    REFERENCES dbo.STD_STATUS_CODE (std_status_code)
go
ALTER TABLE dbo.STD_VERSION
    ADD CONSTRAINT FK_STD_VER_PROCESS_TYPE_CODE
    FOREIGN KEY (process_type_code)
    REFERENCES dbo.PROCESS_TYPE_CODE (process_type_code)
go
ALTER TABLE dbo.STD_VERSION
    ADD CONSTRAINT FK_STD_VERS_PERORG_ROLE
    FOREIGN KEY (ssb_perorg_role_id)
    REFERENCES dbo.PERORG_ROLE (perorg_role_id)
go
ALTER TABLE dbo.STD_VERSION
    ADD CONSTRAINT FK_STD_VER_qa_event_code
    FOREIGN KEY (qa_event_code)
    REFERENCES dbo.QA_EVENT_CODE (qa_event_code)
go
ALTER TABLE dbo.STD_VERSION
    ADD CONSTRAINT FK_STD_VER_CFN_CATEGORY
    FOREIGN KEY (cfn_catg_id)
    REFERENCES dbo.CFN_CATEGORY (cfn_catg_id)
go
ALTER TABLE dbo.QFN_RULE_STD_VER
    ADD CONSTRAINT FK_QFN_RULE_STD_VER_STD_VER
    FOREIGN KEY (std_version_id)
    REFERENCES dbo.STD_VERSION (std_version_id)
go
ALTER TABLE dbo.QFN_SCENARIO_STD_COMPONENT
    ADD CONSTRAINT FK_QFN_SCEN_COMP_STD_VER_ID
    FOREIGN KEY (std_version_id)
    REFERENCES dbo.STD_VERSION (std_version_id)
go
ALTER TABLE dbo.RULES_GROUP_OPT_STD
    ADD CONSTRAINT FK_RULES_GRP_OPT_STD_VER
    FOREIGN KEY (std_version_id)
    REFERENCES dbo.STD_VERSION (std_version_id)
go
ALTER TABLE dbo.STD
    ADD CONSTRAINT FK_STD_WEB_STD_VERSION
    FOREIGN KEY (web_std_version_id)
    REFERENCES dbo.STD_VERSION (std_version_id)
go
ALTER TABLE dbo.STD
    ADD CONSTRAINT FK_STD_LATEST_STD_VERSION
    FOREIGN KEY (latest_std_version_id)
    REFERENCES dbo.STD_VERSION (std_version_id)
go
ALTER TABLE dbo.STD
    ADD CONSTRAINT FK_STD_LATEST_REG_STD_VER
    FOREIGN KEY (latest_reg_std_version_id)
    REFERENCES dbo.STD_VERSION (std_version_id)
go
ALTER TABLE dbo.STD_MINOR_VERSION
    ADD CONSTRAINT FK_STD_MINOR_VER_STD_VER
    FOREIGN KEY (std_version_id)
    REFERENCES dbo.STD_VERSION (std_version_id)
go
GRANT REFERENCES ON dbo.STD_VERSION TO eqa_user
go
GRANT SELECT ON dbo.STD_VERSION TO AyaO
go
GRANT SELECT ON dbo.STD_VERSION TO eqa_user
go
GRANT SELECT ON dbo.STD_VERSION TO read_only
go
GRANT SELECT ON dbo.STD_VERSION TO rma_users
go
GRANT INSERT ON dbo.STD_VERSION TO eqa_user
go
GRANT DELETE ON dbo.STD_VERSION TO eqa_user
go
GRANT UPDATE ON dbo.STD_VERSION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STD_VERSION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STD_VERSION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STD_VERSION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STD_VERSION TO eqa_user
go
CREATE TABLE dbo.STD_VERSION_PUB_HISTORY
(
    std_ver_pub_history_id OBJECT_ID NOT NULL,
    std_version_id         OBJECT_ID NOT NULL,
    qual_publication_code  code_2    NOT NULL,
    publication_date       datetime  NOT NULL,
    updated_by             usr       NOT NULL,
    update_date            datetime  NOT NULL,
    audit_tran_id          OBJECT_ID NOT NULL,
    ts                     timestamp NOT NULL,
    CONSTRAINT PK_STD_VERSION_PUB_HISTORY
    PRIMARY KEY NONCLUSTERED (std_ver_pub_history_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.STD_VERSION_PUB_HISTORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STD_VERSION_PUB_HISTORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STD_VERSION_PUB_HISTORY >>>'
go
ALTER TABLE dbo.STD_VERSION_PUB_HISTORY
    ADD CONSTRAINT FK_STD_VER_PUB_HIST_PUB_HIST
    FOREIGN KEY (qual_publication_code)
    REFERENCES dbo.QUAL_PUBLICATION_CODE (qual_publication_code)
go
ALTER TABLE dbo.STD_VERSION_PUB_HISTORY
    ADD CONSTRAINT FK_STD_VER_PUB_HIST_STD_VER
    FOREIGN KEY (std_version_id)
    REFERENCES dbo.STD_VERSION (std_version_id)
go
GRANT REFERENCES ON dbo.STD_VERSION_PUB_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.STD_VERSION_PUB_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.STD_VERSION_PUB_HISTORY TO read_only
go
GRANT SELECT ON dbo.STD_VERSION_PUB_HISTORY TO rma_users
go
GRANT INSERT ON dbo.STD_VERSION_PUB_HISTORY TO eqa_user
go
GRANT DELETE ON dbo.STD_VERSION_PUB_HISTORY TO eqa_user
go
GRANT UPDATE ON dbo.STD_VERSION_PUB_HISTORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STD_VERSION_PUB_HISTORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STD_VERSION_PUB_HISTORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STD_VERSION_PUB_HISTORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STD_VERSION_PUB_HISTORY TO eqa_user
go
CREATE TABLE dbo.STD_VERSION_STATUS_CODE
(
    std_version_status_code      code_2      NOT NULL,
    std_version_status_code_desc descr       NOT NULL,
    sortkey                      sortkey     NOT NULL,
    std_ver_status_short_desc    descr_short NOT NULL,
    CONSTRAINT PK_STD_VERSION_STATUS_CODE
    PRIMARY KEY CLUSTERED (std_version_status_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.STD_VERSION_STATUS_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STD_VERSION_STATUS_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STD_VERSION_STATUS_CODE >>>'
go
ALTER TABLE dbo.STD_VERSION
    ADD CONSTRAINT FK_STD_VER_STD_VER_STATUS
    FOREIGN KEY (std_version_status_code)
    REFERENCES dbo.STD_VERSION_STATUS_CODE (std_version_status_code)
go
GRANT REFERENCES ON dbo.STD_VERSION_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.STD_VERSION_STATUS_CODE TO eqa_user
go
GRANT SELECT ON dbo.STD_VERSION_STATUS_CODE TO read_only
go
GRANT SELECT ON dbo.STD_VERSION_STATUS_CODE TO rma_users
go
GRANT INSERT ON dbo.STD_VERSION_STATUS_CODE TO eqa_user
go
GRANT DELETE ON dbo.STD_VERSION_STATUS_CODE TO eqa_user
go
GRANT UPDATE ON dbo.STD_VERSION_STATUS_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STD_VERSION_STATUS_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STD_VERSION_STATUS_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STD_VERSION_STATUS_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STD_VERSION_STATUS_CODE TO eqa_user
go
CREATE TABLE dbo.STD_VERSION_STATUS_HISTORY
(
    std_version_status_hist_id OBJECT_ID    NOT NULL,
    std_version_status_code    code_2       NOT NULL,
    std_version_id             OBJECT_ID    NOT NULL,
    std_version_status_date    dt           NOT NULL,
    audit_tran_id              OBJECT_ID    NOT NULL,
    ts                         timestamp    NOT NULL,
    updated_by                 varchar(100) NOT NULL,
    update_date                datetime     NOT NULL,
    CONSTRAINT PK_STD_VERSION_STATUS_HISTORY
    PRIMARY KEY CLUSTERED (std_version_status_hist_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.STD_VERSION_STATUS_HISTORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STD_VERSION_STATUS_HISTORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STD_VERSION_STATUS_HISTORY >>>'
go
ALTER TABLE dbo.STD_VERSION_STATUS_HISTORY
    ADD CONSTRAINT FK_STD_VER_ST_HIS_STD_VERS
    FOREIGN KEY (std_version_id)
    REFERENCES dbo.STD_VERSION (std_version_id)
go
ALTER TABLE dbo.STD_VERSION_STATUS_HISTORY
    ADD CONSTRAINT FK_STD_VER_STAT_HIS_STD_VERS
    FOREIGN KEY (std_version_status_code)
    REFERENCES dbo.STD_VERSION_STATUS_CODE (std_version_status_code)
go
GRANT REFERENCES ON dbo.STD_VERSION_STATUS_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.STD_VERSION_STATUS_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.STD_VERSION_STATUS_HISTORY TO read_only
go
GRANT SELECT ON dbo.STD_VERSION_STATUS_HISTORY TO rma_users
go
GRANT INSERT ON dbo.STD_VERSION_STATUS_HISTORY TO eqa_user
go
GRANT DELETE ON dbo.STD_VERSION_STATUS_HISTORY TO eqa_user
go
GRANT UPDATE ON dbo.STD_VERSION_STATUS_HISTORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STD_VERSION_STATUS_HISTORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STD_VERSION_STATUS_HISTORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STD_VERSION_STATUS_HISTORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STD_VERSION_STATUS_HISTORY TO eqa_user
go
CREATE TABLE dbo.STD_VER_QA_EVENT_HISTORY
(
    qa_event_history_id OBJECT_ID    NOT NULL,
    std_version_id      OBJECT_ID    NOT NULL,
    qa_event_code       code_2       NOT NULL,
    qa_event_date       datetime     NOT NULL,
    updated_by          varchar(100) NOT NULL,
    update_date         datetime     NOT NULL,
    audit_tran_id       OBJECT_ID    NOT NULL,
    ts                  timestamp    NOT NULL,
    sortkey             sortkey      NOT NULL,
    CONSTRAINT PK_STD_VER_QA_EVENT_HISTORY
    PRIMARY KEY CLUSTERED (qa_event_history_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.STD_VER_QA_EVENT_HISTORY') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STD_VER_QA_EVENT_HISTORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STD_VER_QA_EVENT_HISTORY >>>'
go
ALTER TABLE dbo.STD_VER_QA_EVENT_HISTORY
    ADD CONSTRAINT FK_STD_VER_QA_EVT_STD_VER
    FOREIGN KEY (std_version_id)
    REFERENCES dbo.STD_VERSION (std_version_id)
go
ALTER TABLE dbo.STD_VER_QA_EVENT_HISTORY
    ADD CONSTRAINT FK_STD_VER_QA_EV_HIST_QA_EVENT
    FOREIGN KEY (qa_event_code)
    REFERENCES dbo.QA_EVENT_CODE (qa_event_code)
go
GRANT REFERENCES ON dbo.STD_VER_QA_EVENT_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.STD_VER_QA_EVENT_HISTORY TO eqa_user
go
GRANT SELECT ON dbo.STD_VER_QA_EVENT_HISTORY TO read_only
go
GRANT SELECT ON dbo.STD_VER_QA_EVENT_HISTORY TO rma_users
go
GRANT INSERT ON dbo.STD_VER_QA_EVENT_HISTORY TO eqa_user
go
GRANT DELETE ON dbo.STD_VER_QA_EVENT_HISTORY TO eqa_user
go
GRANT UPDATE ON dbo.STD_VER_QA_EVENT_HISTORY TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STD_VER_QA_EVENT_HISTORY TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STD_VER_QA_EVENT_HISTORY TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STD_VER_QA_EVENT_HISTORY TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STD_VER_QA_EVENT_HISTORY TO eqa_user
go
CREATE TABLE dbo.STREET_TYPE
(
    street_type             varchar(20) NOT NULL,
    street_type_description descr_short NOT NULL,
    CONSTRAINT PK_STREET_TYPE
    PRIMARY KEY CLUSTERED (street_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.STREET_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STREET_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STREET_TYPE >>>'
go
GRANT REFERENCES ON dbo.STREET_TYPE TO eqa_user
go
GRANT SELECT ON dbo.STREET_TYPE TO eqa_user
go
GRANT SELECT ON dbo.STREET_TYPE TO read_only
go
GRANT SELECT ON dbo.STREET_TYPE TO rma_users
go
GRANT INSERT ON dbo.STREET_TYPE TO eqa_user
go
GRANT DELETE ON dbo.STREET_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.STREET_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STREET_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STREET_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STREET_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STREET_TYPE TO eqa_user
go
CREATE TABLE dbo.STUDENT_TYPE
(
    student_type      varchar(6) NOT NULL,
    student_type_desc descr      NOT NULL,
    active_ind        yn_ind     NOT NULL,
    CONSTRAINT PK_STUDENT_TYPE
    PRIMARY KEY CLUSTERED (student_type)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.STUDENT_TYPE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.STUDENT_TYPE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.STUDENT_TYPE >>>'
go
GRANT REFERENCES ON dbo.STUDENT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.STUDENT_TYPE TO eqa_user
go
GRANT SELECT ON dbo.STUDENT_TYPE TO read_only
go
GRANT SELECT ON dbo.STUDENT_TYPE TO rma_users
go
GRANT INSERT ON dbo.STUDENT_TYPE TO eqa_user
go
GRANT DELETE ON dbo.STUDENT_TYPE TO eqa_user
go
GRANT UPDATE ON dbo.STUDENT_TYPE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.STUDENT_TYPE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.STUDENT_TYPE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.STUDENT_TYPE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.STUDENT_TYPE TO eqa_user
go
CREATE TABLE dbo.SUPP_RESULT_ALLOCATED
(
    entry_id                 OBJECT_ID     NOT NULL,
    result_code              varchar(5)    NULL,
    date_entered             datetime      NOT NULL,
    results_date_to          datetime      NULL,
    results_batch_no         varchar(255)  NULL,
    audit_tran_id            numeric(12,0) NOT NULL,
    ts                       timestamp     NULL,
    result_component_link_id OBJECT_ID     NULL,
    CONSTRAINT PK_SUPP_RESULT_ALLOCATED
    PRIMARY KEY CLUSTERED (entry_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SUPP_RESULT_ALLOCATED') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SUPP_RESULT_ALLOCATED >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SUPP_RESULT_ALLOCATED >>>'
go
ALTER TABLE dbo.SUPP_RESULT_ALLOCATED
    ADD CONSTRAINT FK_SUP_ALLOC_RESULT_CODE
    FOREIGN KEY (result_code)
    REFERENCES dbo.RESULT_CODE (result_code)
go
ALTER TABLE dbo.SUPP_RESULT_ALLOCATED
    ADD CONSTRAINT FK_SUPP_RES_ALL_RES_COMP_LK
    FOREIGN KEY (result_component_link_id)
    REFERENCES dbo.RESULT_COMPONENT_LINK (result_component_link_id)
go
ALTER TABLE dbo.SUPP_RESULT_ALLOCATED
    ADD CONSTRAINT FK_ASR_ENTRY
    FOREIGN KEY (entry_id)
    REFERENCES dbo.ENTRY (entry_id)
go
GRANT REFERENCES ON dbo.SUPP_RESULT_ALLOCATED TO eqa_user
go
GRANT SELECT ON dbo.SUPP_RESULT_ALLOCATED TO eqa_user
go
GRANT SELECT ON dbo.SUPP_RESULT_ALLOCATED TO read_only
go
GRANT SELECT ON dbo.SUPP_RESULT_ALLOCATED TO rma_users
go
GRANT INSERT ON dbo.SUPP_RESULT_ALLOCATED TO eqa_user
go
GRANT DELETE ON dbo.SUPP_RESULT_ALLOCATED TO eqa_user
go
GRANT UPDATE ON dbo.SUPP_RESULT_ALLOCATED TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SUPP_RESULT_ALLOCATED TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SUPP_RESULT_ALLOCATED TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SUPP_RESULT_ALLOCATED TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SUPP_RESULT_ALLOCATED TO eqa_user
go
CREATE TABLE dbo.SUPP_RESULT_UNALLOCATED
(
    supp_result_unallocated_id OBJECT_ID     NOT NULL,
    nsn                        nsn           NOT NULL,
    academic_year              char(4)       NOT NULL,
    std_number                 varchar(8)    NOT NULL,
    exam_centre_id             OBJECT_ID     NULL,
    study_provider_id          OBJECT_ID     NULL,
    result_code                varchar(5)    NULL,
    comments                   varchar(255)  NULL,
    marker_code                int           NULL,
    date_entered               datetime      NOT NULL,
    is_submitted_internally    yn            DEFAULT 0 NOT NULL,
    results_date_to            datetime      NULL,
    results_batch_no           varchar(255)  NULL,
    audit_tran_id              numeric(12,0) NOT NULL,
    ts                         timestamp     NULL,
    result_component_link_id   OBJECT_ID     NULL,
    CONSTRAINT PK_SUPP_RESULT_UNALLOCATED
    PRIMARY KEY CLUSTERED (supp_result_unallocated_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.SUPP_RESULT_UNALLOCATED') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.SUPP_RESULT_UNALLOCATED >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.SUPP_RESULT_UNALLOCATED >>>'
go
ALTER TABLE dbo.SUPP_RESULT_UNALLOCATED
    ADD CONSTRAINT FK_SUP_UNALLOC_RESULT_CODE
    FOREIGN KEY (result_code)
    REFERENCES dbo.RESULT_CODE (result_code)
go
ALTER TABLE dbo.SUPP_RESULT_UNALLOCATED
    ADD CONSTRAINT FK_SUPP_RES_UNALL_RES_COMP_LK
    FOREIGN KEY (result_component_link_id)
    REFERENCES dbo.RESULT_COMPONENT_LINK (result_component_link_id)
go
ALTER TABLE dbo.SUPP_RESULT_UNALLOCATED
    ADD CONSTRAINT FK_USR_ACADEMIC_YEAR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.SUPP_RESULT_UNALLOCATED
    ADD CONSTRAINT FK_SUPP_RESULT_UNALLOCATED_STD
    FOREIGN KEY (std_number)
    REFERENCES dbo.STD (std_number)
go
ALTER TABLE dbo.SUPP_RESULT_UNALLOCATED
    ADD CONSTRAINT FK_EX_USR_LEARNER_NSN
    FOREIGN KEY (nsn)
    REFERENCES dbo.LEARNER (nsn)
go
GRANT REFERENCES ON dbo.SUPP_RESULT_UNALLOCATED TO eqa_user
go
GRANT SELECT ON dbo.SUPP_RESULT_UNALLOCATED TO eqa_user
go
GRANT SELECT ON dbo.SUPP_RESULT_UNALLOCATED TO read_only
go
GRANT SELECT ON dbo.SUPP_RESULT_UNALLOCATED TO rma_users
go
GRANT INSERT ON dbo.SUPP_RESULT_UNALLOCATED TO eqa_user
go
GRANT DELETE ON dbo.SUPP_RESULT_UNALLOCATED TO eqa_user
go
GRANT UPDATE ON dbo.SUPP_RESULT_UNALLOCATED TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.SUPP_RESULT_UNALLOCATED TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.SUPP_RESULT_UNALLOCATED TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.SUPP_RESULT_UNALLOCATED TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.SUPP_RESULT_UNALLOCATED TO eqa_user
go
CREATE TABLE dbo.TAX_CODE
(
    tax_code      varchar(5)  NOT NULL,
    tax_code_desc descr_short NOT NULL,
    active_ind    yn_ind      NOT NULL,
    CONSTRAINT PK_TAX_CODE
    PRIMARY KEY CLUSTERED (tax_code)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.TAX_CODE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.TAX_CODE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.TAX_CODE >>>'
go
GRANT REFERENCES ON dbo.TAX_CODE TO eqa_user
go
GRANT SELECT ON dbo.TAX_CODE TO eqa_user
go
GRANT SELECT ON dbo.TAX_CODE TO read_only
go
GRANT SELECT ON dbo.TAX_CODE TO rma_users
go
GRANT INSERT ON dbo.TAX_CODE TO eqa_user
go
GRANT DELETE ON dbo.TAX_CODE TO eqa_user
go
GRANT UPDATE ON dbo.TAX_CODE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.TAX_CODE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.TAX_CODE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.TAX_CODE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.TAX_CODE TO eqa_user
go
CREATE TABLE dbo.TEC_COURSE
(
    tec_course_id      OBJECT_ID    NOT NULL,
    funded_provider_id OBJECT_ID    NOT NULL,
    start_date         datetime     NOT NULL,
    end_date           datetime     NOT NULL,
    course_name        varchar(255) NOT NULL,
    ts                 timestamp    NOT NULL,
    audit_tran_id      OBJECT_ID    NOT NULL,
    CONSTRAINT PK_TEC_COURSE
    PRIMARY KEY CLUSTERED (tec_course_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.TEC_COURSE') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.TEC_COURSE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.TEC_COURSE >>>'
go
GRANT REFERENCES ON dbo.TEC_COURSE TO eqa_user
go
GRANT SELECT ON dbo.TEC_COURSE TO eqa_user
go
GRANT SELECT ON dbo.TEC_COURSE TO read_only
go
GRANT SELECT ON dbo.TEC_COURSE TO rma_users
go
GRANT INSERT ON dbo.TEC_COURSE TO eqa_user
go
GRANT DELETE ON dbo.TEC_COURSE TO eqa_user
go
GRANT UPDATE ON dbo.TEC_COURSE TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.TEC_COURSE TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.TEC_COURSE TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.TEC_COURSE TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.TEC_COURSE TO eqa_user
go
CREATE TABLE dbo.TE_REO_CIRCULAR
(
    te_reo_circular_id  OBJECT_ID NOT NULL,
    academic_year       char(4)   NOT NULL,
    provider_id         OBJECT_ID NOT NULL,
    completed_date      dt        NOT NULL,
    contact_person_name name      NOT NULL,
    te_reo_rqmt_ind     ny_ind    NOT NULL,
    audit_tran_id       OBJECT_ID NOT NULL,
    CONSTRAINT PK_TE_REO_CIRCULAR
    PRIMARY KEY CLUSTERED (te_reo_circular_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.TE_REO_CIRCULAR') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.TE_REO_CIRCULAR >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.TE_REO_CIRCULAR >>>'
go
ALTER TABLE dbo.TE_REO_CIRCULAR
    ADD CONSTRAINT FK_TE_REO_CIRCULAR_ACAD_YEAR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.TE_REO_CIRCULAR
    ADD CONSTRAINT FK_TE_REO_CIRCULAR_PROV
    FOREIGN KEY (provider_id)
    REFERENCES dbo.PROVIDER (provider_id)
go
GRANT REFERENCES ON dbo.TE_REO_CIRCULAR TO eqa_user
go
GRANT SELECT ON dbo.TE_REO_CIRCULAR TO eqa_user
go
GRANT SELECT ON dbo.TE_REO_CIRCULAR TO read_only
go
GRANT SELECT ON dbo.TE_REO_CIRCULAR TO rma_users
go
GRANT INSERT ON dbo.TE_REO_CIRCULAR TO eqa_user
go
GRANT DELETE ON dbo.TE_REO_CIRCULAR TO eqa_user
go
GRANT UPDATE ON dbo.TE_REO_CIRCULAR TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.TE_REO_CIRCULAR TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.TE_REO_CIRCULAR TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.TE_REO_CIRCULAR TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.TE_REO_CIRCULAR TO eqa_user
go
CREATE TABLE dbo.TE_REO_INDICATION
(
    te_reo_indication_id OBJECT_ID    NOT NULL,
    provider_id          OBJECT_ID    NOT NULL,
    std_number           varchar(8)   NOT NULL,
    std_version_number   numeric(8,0) NOT NULL,
    te_reo_circular_id   OBJECT_ID    NOT NULL,
    te_reo_paper_ind     ny_ind       NOT NULL,
    te_reo_answer_ind    ny_ind       NOT NULL,
    audit_tran_id        OBJECT_ID    NOT NULL,
    CONSTRAINT PK_TE_REO_INDICATION
    PRIMARY KEY CLUSTERED (te_reo_indication_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.TE_REO_INDICATION') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.TE_REO_INDICATION >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.TE_REO_INDICATION >>>'
go
ALTER TABLE dbo.TE_REO_INDICATION
    ADD CONSTRAINT FK_TE_REO_IND_TE_REO_CIRCULAR
    FOREIGN KEY (te_reo_circular_id)
    REFERENCES dbo.TE_REO_CIRCULAR (te_reo_circular_id)
go
ALTER TABLE dbo.TE_REO_INDICATION
    ADD CONSTRAINT FK_TE_REO_INDICATION_PROV
    FOREIGN KEY (provider_id)
    REFERENCES dbo.PROVIDER (provider_id)
go
ALTER TABLE dbo.TE_REO_INDICATION
    ADD CONSTRAINT FK_TE_REO_INDICATION_STD_VER
    FOREIGN KEY (std_number,std_version_number)
    REFERENCES dbo.STD_VERSION (std_number,std_version_number)
go
GRANT REFERENCES ON dbo.TE_REO_INDICATION TO eqa_user
go
GRANT SELECT ON dbo.TE_REO_INDICATION TO eqa_user
go
GRANT SELECT ON dbo.TE_REO_INDICATION TO read_only
go
GRANT SELECT ON dbo.TE_REO_INDICATION TO rma_users
go
GRANT INSERT ON dbo.TE_REO_INDICATION TO eqa_user
go
GRANT DELETE ON dbo.TE_REO_INDICATION TO eqa_user
go
GRANT UPDATE ON dbo.TE_REO_INDICATION TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.TE_REO_INDICATION TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.TE_REO_INDICATION TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.TE_REO_INDICATION TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.TE_REO_INDICATION TO eqa_user
go
CREATE TABLE dbo.TIMERS
(
    timerid       varchar(80)   NOT NULL,
    targetid      varchar(250)  NOT NULL,
    initialdate   timestamp     NOT NULL,
    timerinterval numeric(18,0) NOT NULL,
    instancepk    varbinary(1)  NOT NULL,
    info          varbinary(1)  NOT NULL,
    CONSTRAINT PK_TIMERS
    PRIMARY KEY CLUSTERED (timerid,targetid)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.TIMERS') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.TIMERS >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.TIMERS >>>'
go
GRANT REFERENCES ON dbo.TIMERS TO eqa_user
go
GRANT SELECT ON dbo.TIMERS TO eqa_user
go
GRANT SELECT ON dbo.TIMERS TO read_only
go
GRANT SELECT ON dbo.TIMERS TO rma_users
go
GRANT INSERT ON dbo.TIMERS TO eqa_user
go
GRANT DELETE ON dbo.TIMERS TO eqa_user
go
GRANT UPDATE ON dbo.TIMERS TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.TIMERS TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.TIMERS TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.TIMERS TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.TIMERS TO eqa_user
go
CREATE TABLE dbo.WITHDRAWN_METHOD
(
    withdrawn_method      char(1) NOT NULL,
    withdrawn_method_desc descr   NOT NULL,
    CONSTRAINT PK_WITHDRAWN_METHOD
    PRIMARY KEY CLUSTERED (withdrawn_method)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.WITHDRAWN_METHOD') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.WITHDRAWN_METHOD >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.WITHDRAWN_METHOD >>>'
go
GRANT REFERENCES ON dbo.WITHDRAWN_METHOD TO eqa_user
go
GRANT SELECT ON dbo.WITHDRAWN_METHOD TO eqa_user
go
GRANT SELECT ON dbo.WITHDRAWN_METHOD TO read_only
go
GRANT SELECT ON dbo.WITHDRAWN_METHOD TO rma_users
go
GRANT INSERT ON dbo.WITHDRAWN_METHOD TO eqa_user
go
GRANT DELETE ON dbo.WITHDRAWN_METHOD TO eqa_user
go
GRANT UPDATE ON dbo.WITHDRAWN_METHOD TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.WITHDRAWN_METHOD TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.WITHDRAWN_METHOD TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.WITHDRAWN_METHOD TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.WITHDRAWN_METHOD TO eqa_user
go
CREATE TABLE dbo.ZERO_TO_99
(
    number_sequence int NOT NULL,
    CONSTRAINT PK_ZERO_TO_99
    PRIMARY KEY CLUSTERED (number_sequence)
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.ZERO_TO_99') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ZERO_TO_99 >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ZERO_TO_99 >>>'
go
GRANT REFERENCES ON dbo.ZERO_TO_99 TO eqa_user
go
GRANT SELECT ON dbo.ZERO_TO_99 TO eqa_user
go
GRANT SELECT ON dbo.ZERO_TO_99 TO read_only
go
GRANT SELECT ON dbo.ZERO_TO_99 TO rma_users
go
GRANT INSERT ON dbo.ZERO_TO_99 TO eqa_user
go
GRANT DELETE ON dbo.ZERO_TO_99 TO eqa_user
go
GRANT UPDATE ON dbo.ZERO_TO_99 TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ZERO_TO_99 TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ZERO_TO_99 TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ZERO_TO_99 TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ZERO_TO_99 TO eqa_user
go
CREATE TABLE dbo.ZIM_PERSONALISATION_RUN
(
    personalization_run_id     OBJECT_ID NOT NULL,
    personalization_run_status code_2    NOT NULL,
    personalization_date_time  datetime  NOT NULL,
    academic_year              char(4)   NULL,
    failure_message            text      NULL     OFF ROW,
    CONSTRAINT PK_ZIM_PERSONALISATION_RUN
    PRIMARY KEY CLUSTERED (personalization_run_id)
)
LOCK DATAROWS
go
IF OBJECT_ID('dbo.ZIM_PERSONALISATION_RUN') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.ZIM_PERSONALISATION_RUN >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.ZIM_PERSONALISATION_RUN >>>'
go
ALTER TABLE dbo.ZIM_PERSONALISATION_RUN
    ADD CONSTRAINT FK_ZPR_ACADEMIC_YEAR
    FOREIGN KEY (academic_year)
    REFERENCES dbo.ACADEMIC_YEAR (academic_year)
go
ALTER TABLE dbo.ZIM_PERSONALISATION_RUN
    ADD CONSTRAINT FK_ZIM_PER_RUN_STATUS
    FOREIGN KEY (personalization_run_status)
    REFERENCES dbo.PERSONALISATION_RUN_STATUS (personalisation_run_status)
go
GRANT REFERENCES ON dbo.ZIM_PERSONALISATION_RUN TO eqa_user
go
GRANT SELECT ON dbo.ZIM_PERSONALISATION_RUN TO eqa_user
go
GRANT SELECT ON dbo.ZIM_PERSONALISATION_RUN TO read_only
go
GRANT SELECT ON dbo.ZIM_PERSONALISATION_RUN TO rma_users
go
GRANT INSERT ON dbo.ZIM_PERSONALISATION_RUN TO eqa_user
go
GRANT DELETE ON dbo.ZIM_PERSONALISATION_RUN TO eqa_user
go
GRANT UPDATE ON dbo.ZIM_PERSONALISATION_RUN TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.ZIM_PERSONALISATION_RUN TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.ZIM_PERSONALISATION_RUN TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.ZIM_PERSONALISATION_RUN TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.ZIM_PERSONALISATION_RUN TO eqa_user
go
CREATE TABLE dbo.rs_dbversion
(
    last_rssd_ver  int NOT NULL,
    min_compat_ver int NOT NULL
)
LOCK ALLPAGES
go
IF OBJECT_ID('dbo.rs_dbversion') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.rs_dbversion >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.rs_dbversion >>>'
go
GRANT REFERENCES ON dbo.rs_dbversion TO eqa_user
go
GRANT SELECT ON dbo.rs_dbversion TO public
go
GRANT INSERT ON dbo.rs_dbversion TO eqa_user
go
GRANT DELETE ON dbo.rs_dbversion TO eqa_user
go
GRANT UPDATE ON dbo.rs_dbversion TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.rs_dbversion TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.rs_dbversion TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.rs_dbversion TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.rs_dbversion TO eqa_user
go
CREATE TABLE dbo.rs_lastcommit
(
    origin           int        NOT NULL,
    origin_qid       binary(36) NOT NULL,
    secondary_qid    binary(36) NOT NULL,
    origin_time      datetime   NOT NULL,
    dest_commit_time datetime   NOT NULL,
    conn_id          int        DEFAULT 0 NOT NULL,
    pad1             binary(1)  NOT NULL,
    pad2             binary(1)  NOT NULL,
    pad3             binary(1)  NOT NULL,
    pad4             binary(1)  NOT NULL,
    pad5             binary(1)  NOT NULL,
    pad6             binary(1)  NOT NULL,
    pad7             binary(1)  NOT NULL,
    pad8             binary(1)  NOT NULL
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.rs_lastcommit') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.rs_lastcommit >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.rs_lastcommit >>>'
go
GRANT REFERENCES ON dbo.rs_lastcommit TO eqa_user
go
GRANT SELECT ON dbo.rs_lastcommit TO eqa_user
go
GRANT SELECT ON dbo.rs_lastcommit TO read_only
go
GRANT SELECT ON dbo.rs_lastcommit TO rma_users
go
GRANT INSERT ON dbo.rs_lastcommit TO eqa_user
go
GRANT DELETE ON dbo.rs_lastcommit TO eqa_user
go
GRANT UPDATE ON dbo.rs_lastcommit TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.rs_lastcommit TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.rs_lastcommit TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.rs_lastcommit TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.rs_lastcommit TO eqa_user
go
CREATE TABLE dbo.rs_mat_status
(
    schemaname varchar(128)  NOT NULL,
    tablename  varchar(128)  NOT NULL,
    [action]   varchar(1)    NOT NULL,
    starttime  datetime      NOT NULL,
    endtime    datetime      NULL,
    status     varchar(1)    NOT NULL,
    tabletype  varchar(1)    NOT NULL,
    comments   varchar(1000) NULL,
    percent    int           NULL,
    backlog    int           NULL,
    subid      binary(8)     NOT NULL
)
LOCK ALLPAGES
go
IF OBJECT_ID('dbo.rs_mat_status') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.rs_mat_status >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.rs_mat_status >>>'
go
GRANT REFERENCES ON dbo.rs_mat_status TO public
go
GRANT SELECT ON dbo.rs_mat_status TO public
go
GRANT INSERT ON dbo.rs_mat_status TO public
go
GRANT DELETE ON dbo.rs_mat_status TO public
go
GRANT UPDATE ON dbo.rs_mat_status TO public
go
GRANT DELETE STATISTICS ON dbo.rs_mat_status TO public
go
GRANT TRUNCATE TABLE ON dbo.rs_mat_status TO public
go
GRANT UPDATE STATISTICS ON dbo.rs_mat_status TO public
go
GRANT TRANSFER TABLE ON dbo.rs_mat_status TO public
go
CREATE TABLE dbo.rs_threads
(
    id      int     NOT NULL,
    seq     int     NOT NULL,
    conn_id int     DEFAULT 0 NOT NULL,
    pad1    char(1) NOT NULL,
    pad2    char(1) NOT NULL,
    pad3    char(1) NOT NULL,
    pad4    char(1) NOT NULL
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.rs_threads') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.rs_threads >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.rs_threads >>>'
go
GRANT REFERENCES ON dbo.rs_threads TO eqa_user
go
GRANT SELECT ON dbo.rs_threads TO public
go
GRANT INSERT ON dbo.rs_threads TO eqa_user
go
GRANT DELETE ON dbo.rs_threads TO eqa_user
go
GRANT UPDATE ON dbo.rs_threads TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.rs_threads TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.rs_threads TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.rs_threads TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.rs_threads TO eqa_user
go
CREATE TABLE dbo.rs_ticket_history
(
    cnt     numeric(8,0)  IDENTITY,
    h1      varchar(10)   NOT NULL,
    h2      varchar(10)   NOT NULL,
    h3      varchar(10)   NOT NULL,
    h4      varchar(50)   NOT NULL,
    pdb     varchar(30)   NOT NULL,
    prs     varchar(30)   NOT NULL,
    rrs     varchar(30)   NOT NULL,
    rdb     varchar(30)   NOT NULL,
    pdb_t   datetime      NOT NULL,
    exec_t  datetime      NOT NULL,
    dist_t  datetime      NOT NULL,
    rsi_t   datetime      NOT NULL,
    dsi_t   datetime      NOT NULL,
    rdb_t   datetime      DEFAULT getdate() NOT NULL,
    exec_b  numeric(22,0) NOT NULL,
    rsi_b   numeric(22,0) NOT NULL,
    dsi_tnx numeric(22,0) NOT NULL,
    dsi_cmd numeric(22,0) NOT NULL,
    ticket  varchar(1024) NOT NULL,
    conn_id int           NULL
)
LOCK ALLPAGES
go
IF OBJECT_ID('dbo.rs_ticket_history') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.rs_ticket_history >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.rs_ticket_history >>>'
go
GRANT REFERENCES ON dbo.rs_ticket_history TO public
go
GRANT SELECT ON dbo.rs_ticket_history TO public
go
GRANT INSERT ON dbo.rs_ticket_history TO public
go
GRANT DELETE ON dbo.rs_ticket_history TO public
go
GRANT UPDATE ON dbo.rs_ticket_history TO public
go
GRANT DELETE STATISTICS ON dbo.rs_ticket_history TO public
go
GRANT TRUNCATE TABLE ON dbo.rs_ticket_history TO public
go
GRANT UPDATE STATISTICS ON dbo.rs_ticket_history TO public
go
GRANT TRANSFER TABLE ON dbo.rs_ticket_history TO public
go
CREATE TABLE dbo.text_events
(
    event_id     numeric(10,0) IDENTITY,
    id           numeric(38,0) NOT NULL,
    tableid      int           NOT NULL,
    ownerid      smallint      NOT NULL,
    columnid     tinyint       NOT NULL,
    event_date   datetime      NOT NULL,
    event_type   tinyint       NOT NULL,
    event_status tinyint       NOT NULL,
    srvid        smallint      NOT NULL
)
LOCK DATAROWS
WITH EXP_ROW_SIZE=1
go
IF OBJECT_ID('dbo.text_events') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.text_events >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.text_events >>>'
go
GRANT REFERENCES ON dbo.text_events TO eqa_user
go
GRANT SELECT ON dbo.text_events TO public
go
GRANT INSERT ON dbo.text_events TO eqa_user
go
GRANT DELETE ON dbo.text_events TO eqa_user
go
GRANT UPDATE ON dbo.text_events TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.text_events TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.text_events TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.text_events TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.text_events TO eqa_user
go
CREATE TABLE dbo.tmp_delete_standard_input
(
    id                numeric(12,0) IDENTITY,
    standard_input_id OBJECT_ID     NOT NULL
)
LOCK ALLPAGES
go
IF OBJECT_ID('dbo.tmp_delete_standard_input') IS NOT NULL
    PRINT '<<< CREATED TABLE dbo.tmp_delete_standard_input >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE dbo.tmp_delete_standard_input >>>'
go
GRANT REFERENCES ON dbo.tmp_delete_standard_input TO eqa_user
go
GRANT SELECT ON dbo.tmp_delete_standard_input TO eqa_user
go
GRANT SELECT ON dbo.tmp_delete_standard_input TO read_only
go
GRANT SELECT ON dbo.tmp_delete_standard_input TO rma_users
go
GRANT INSERT ON dbo.tmp_delete_standard_input TO eqa_user
go
GRANT DELETE ON dbo.tmp_delete_standard_input TO eqa_user
go
GRANT UPDATE ON dbo.tmp_delete_standard_input TO eqa_user
go
GRANT DELETE STATISTICS ON dbo.tmp_delete_standard_input TO eqa_user
go
GRANT TRUNCATE TABLE ON dbo.tmp_delete_standard_input TO eqa_user
go
GRANT UPDATE STATISTICS ON dbo.tmp_delete_standard_input TO eqa_user
go
GRANT TRANSFER TABLE ON dbo.tmp_delete_standard_input TO eqa_user
go
